CREATE OR REPLACE PROCEDURE DW_PROD.HAH.MERGE_STAGE_OPENSYSTEMS_FACT_BRANCH_PAYROLL_PERIODS()
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;	
BEGIN
MERGE INTO DW_PROD.HAH.FACT_BRANCH_PAYROLL_PERIODS AS tgt
USING DW_PROD.STAGE.OPENSYSTEMS_FACT_BRANCH_PAYROLL_PERIODS AS src
ON (tgt.BRANCH_PAYROLL_PERIODS_KEY=src.BRANCH_PAYROLL_PERIODS_KEY)
WHEN MATCHED THEN UPDATE SET
	 tgt.BRANCH_KEY=src.BRANCH_KEY,
	 tgt.OFFICE_STATE_CODE=src.OFFICE_STATE_CODE,
	 tgt.DETAILED_OFFICE_NAME=src.DETAILED_OFFICE_NAME,
	 tgt.PERIOD_START_DATE=src.PERIOD_START_DATE,
	 tgt.PERIOD_END_DATE=src.PERIOD_END_DATE,
	 tgt.CHECK_DATE=src.CHECK_DATE,
	 tgt.ETL_TASK_KEY=src.ETL_TASK_KEY,
	 tgt.ETL_INSERTED_TASK_KEY=src.ETL_INSERTED_TASK_KEY,
	 tgt.ETL_INSERTED_DATE=src.ETL_INSERTED_DATE,
	 tgt.ETL_INSERTED_BY=src.ETL_INSERTED_BY,
	 tgt.ETL_LAST_UPDATED_DATE=src.ETL_LAST_UPDATED_DATE,
	 tgt.ETL_LAST_UPDATED_BY=src.ETL_LAST_UPDATED_BY,
	 tgt.ETL_DELETED_FLAG=src.ETL_DELETED_FLAG,
	 tgt.ETL_INFERRED_MEMBER_FLAG=src.ETL_INFERRED_MEMBER_FLAG
WHEN NOT MATCHED THEN INSERT (
	 BRANCH_PAYROLL_PERIODS_KEY,
	 BRANCH_KEY, OFFICE_STATE_CODE,
	 DETAILED_OFFICE_NAME,
	 PERIOD_START_DATE,
	 PERIOD_END_DATE,
	 CHECK_DATE,
	 ETL_TASK_KEY,
	 ETL_INSERTED_TASK_KEY,
	 ETL_INSERTED_DATE,
	 ETL_INSERTED_BY,
	 ETL_LAST_UPDATED_DATE,
	 ETL_LAST_UPDATED_BY,
	 ETL_DELETED_FLAG,
	 ETL_INFERRED_MEMBER_FLAG)
VALUES (
	 src.BRANCH_PAYROLL_PERIODS_KEY,
	 src.BRANCH_KEY, src.OFFICE_STATE_CODE,
	 src.DETAILED_OFFICE_NAME,
	 src.PERIOD_START_DATE,
	 src.PERIOD_END_DATE,
	 src.CHECK_DATE,
	 src.ETL_TASK_KEY,
	 src.ETL_INSERTED_TASK_KEY,
	 src.ETL_INSERTED_DATE,
	 src.ETL_INSERTED_BY,
	 src.ETL_LAST_UPDATED_DATE,
	 src.ETL_LAST_UPDATED_BY,
	 src.ETL_DELETED_FLAG,
	 src.ETL_INFERRED_MEMBER_FLAG);
SELECT CONCAT(''Message : '',"number of rows inserted", '' Rows Insrted & '' ,"number of rows updated",'' Rows Updated.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;
';