CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_DATAFLEXSYNCDATA_DIM_BRANCH("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN
        --*****************************************************************************************************************************
-- NAME:  DataFlexSyncData_DIM_BRANCH
--
-- PURPOSE: Creates one row per branch according to DataFlexSync
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 02/17/20     Greg Marsh           Initial development
-- 04/01/20	Mohd Kamaludin       Added CDC
-- 05/21/20     Frank Noordover      Added logic for region and address attributes
-- 09/22/20		Mir Ali				 POC V2 with Parent_Branch_Key
-- 01/05/20		Mir Ali				 Updated Branch_Key to consist of Office_Number not OfficeName
-- 29/05/23		Shikhar Saxena 		 Changed the logic to add SOURCE_SYSTEM_TYPE field
-- 09/08/23     Mirisha             Dedupe change for Employee_key(MASTER_IDD)
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO STAGE.DATAFLEXSYNCDATA_DIM_BRANCH
(
	BRANCH_KEY, BRANCH_NAME, SYSTEM_CODE, SOURCE_SYSTEM_ID, SOURCE_SYSTEM_TYPE, OFFICE_NUMBER, OFFICE_CODE, OFFICE_NAME, OFFICE_NAME_ALT, DEPARTMENT_NAME, BRANCH_SERVICE_LINE,
	PARENT_FLAG, PARENT_BRANCH_KEY, PARENT_OFFICE_NUMBER, PARENT_OFFICE_CODE, PARENT_BRANCH_NAME,
	OFFICE_ADDRESS1, OFFICE_ADDRESS2, OFFICE_CITY, OFFICE_STATE_CODE, OFFICE_ZIP, OFFICE_PHONE, OFFICE_TOLL_FREE_PHONE, OFFICE_FAX, DETAILED_OFFICE_NAME,
	REGION_NUMBER, REGION_NAME, REGION_MANAGER, REGION_MANAGER_EMPLOYEE_KEY, SUBREGION_NAME,
	PRIMARY_BRANCH_MANAGER_NAME, PRIMARY_BRANCH_EMAIL, PRIMARY_BRANCH_MANAGER_EMPLOYEE_KEY, SECONDARY_BRANCH_MANAGER_NAME, SECONDARY_BRANCH_EMAIL, SECONDARY_BRANCH_MANAGER_EMPLOYEE_KEY,
	RISKCONNECT_NODE_KEY, RISKCONNECT_NAME, HR_OFFICE_NUMBER, HR_OFFICE_NAME, ACTIVE_FLAG, EFFECTIVE_FROM_DATE, EFFECTIVE_TO_DATE,
	ETL_TASK_KEY, ETL_INSERTED_TASK_KEY,  ETL_INSERTED_DATE, ETL_INSERTED_BY, ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG, ETL_INFERRED_MEMBER_FLAG
)
WITH DEDUPE_EMP as
(
SELECT DISTINCT NVL(cast(S.EMPLOYEE_NUMBER as varchar),cast(M.EMPLOYEE_ID as varchar)) Dedupe_Emp_number,S.MASTER_EMP_ID Dedupe_Master_ID,M.*
FROM HAH.DIM_EMPLOYEE M
left outer join 
(
select 
 regexp_replace(M.MASTER_ID,M.DBNAME)::number AS MASTER_IDD,
md5(COALESCE(M.DBNAME,'''') || ''-'' || UPPER(NVL(TRIM(MASTER_IDD),'''')) || ''-''  ||  ''1900-01-01'' || ''-'' || ''DATAFLEXSYNCDATA'') AS EMPLOYEE_KEY
,M.NUMBER EMPLOYEE_NUMBER
,substring(M.MASTER_ID,3) MASTER_EMP_ID
,TRIM(M.DbName) SYSTEM_CODE
from DISC_DEDUPE_PROD.DATAFLEXSYNCDATA.EMPLOYEE_MATCH_LIST M
) S
ON S.EMPLOYEE_KEY=M.EMPLOYEE_KEY
LEFT JOIN  
(
select 
regexp_replace(D.MASTER_ID,D.DBNAME)::number AS MASTER_IDD,
md5(COALESCE(D.DBNAME,'''') || ''-'' || UPPER(NVL(TRIM(MASTER_IDD), '''')) || ''-''  ||  ''1900-01-01'' || ''-'' || ''DATAFLEXSYNCDATA'') AS EMPLOYEE_KEY
,substring(D.MASTER_ID,3) EMPLOYEE_NUMBER
,substring(D.MASTER_ID,3) MASTER_EMP_ID
,TRIM(D.DbName) SYSTEM_CODE
from DISC_DEDUPE_PROD.DATAFLEXSYNCDATA.EMPLOYEE_MASTER_LIST D
) L
ON M.EMPLOYEE_KEY=L.EMPLOYEE_KEY
)
,RISKCONNECT_HIERARCHY AS (
	SELECT *
	FROM (
		SELECT *, 
			-- Give preference to nodes that are not marked inactive (e.g. office 730)
			CHARINDEX(''inactive'', LOWER(NODE_KEY)) INACTIVE_CHECK_1,
			CHARINDEX(''inactive'', LOWER(NODE_CODE)) INACTIVE_CHECK_2,
			CHARINDEX(''inactive'', LOWER(NODE_NAME)) INACTIVE_CHECK_3,
		ROW_NUMBER() OVER(PARTITION BY STATE, COALESCE(OFFICE_NUMBER, OFFICENO) ORDER BY GREATEST(NVL(INACTIVE_CHECK_1, 0), NVL(INACTIVE_CHECK_2, 0), NVL(INACTIVE_CHECK_3, 0))) AS ROW_NUMBER
		FROM DISC_PROD.STAGE.RISKCONNECT_HIERARCHY
	) L
	WHERE L.ROW_NUMBER = 1
), HR_OFFICE_MAPPING AS (
	SELECT *
	FROM (
		SELECT *, COUNT(*) OVER(PARTITION BY STATE, OFFICE_NUMBER) AS COUNT_OF_ROWS
		FROM DISC_PROD.STAGE.HR_OFFICE_MAPPING
	) L
	WHERE L.COUNT_OF_ROWS = 1
), HAH_OFFICES AS (
	SELECT OFFICES.STATE,
		TRY_CAST(OFFICES.OFFICENUMBER AS INT) AS OFFICE_NUMBER,
		OFFICES.OFFICENAME AS OFFICE_NAME,
		OFFICES.ADDRESS AS OFFICE_ADDRESS1,
		OFFICES.ADDRESS2 AS OFFICE_ADDRESS2,
		OFFICES.CITY AS OFFICE_CITY,
		OFFICES.ZIP AS OFFICE_ZIP,
		OFFICES.PHONE AS OFFICE_PHONE,
		OFFICES.TOLLFREE AS OFFICE_TOLL_FREE_PHONE,
		OFFICES.FAX AS OFFICE_FAX,
		OFFICES.GP_DB,
		TRIM( OFFICES.Email) AS Primary_Branch_Email,
		CAST(NULL AS VARCHAR(10)) AS Secondary_Branch_Email,
		OFFICES.OFFICEMANAGER AS OFFICEMANAGER1,
		CAST(NULL AS VARCHAR(10)) AS OFFICEMANAGER2,
		OFFICES.ETL_LAST_UPDATED_DATE
	FROM DISC_PROD.HAHUSERS.LOGIN_OFFICE AS OFFICES
	WHERE TRY_CAST(OFFICES.OFFICENUMBER AS INT) IS NOT NULL
		AND OFFICES.STATUS > 0
		AND NOT (OFFICES.STATE = ''GA'' AND CAST(OFFICES.OFFICENUMBER AS INT) >= 900) -- Excluding new GA offices (except for original HAH GA offices)
), KEY_METRIC_OFFICES AS (
	SELECT TRIM(KEY_MET_OFFICES.OFFICESTATE) AS STATE, TRY_CAST(KEY_MET_OFFICES.OFFICENUMBER AS INT) AS OFFICE_NUMBER, 
		UPPER(TRIM(KEY_MET_OFFICES.OFFICENAME)) AS OFFICE_NAME, KEY_MET_OFFICES.ETL_LAST_UPDATED_DATE 
	FROM DISC_PROD.HAH_REPORTING.KEYMETOFFICES AS KEY_MET_OFFICES
	WHERE TRY_CAST(KEY_MET_OFFICES.OFFICENUMBER AS INT) IS NOT NULL
), OFFICE_LIST AS (
	SELECT 3 AS SOURCE_SYSTEM_ID, DBNAME AS SYSTEM_CODE, DBNAME AS DBNAME, DBNAME AS STATE, OFFICENUMBER, OFFICENAME, PAYROLLBATCHNAME, ETL_LAST_UPDATED_DATE
	FROM DISC_PROD.DATAFLEXSYNCDATA.DFOFFICES 
	UNION ALL
	-- Corporate/offices missing in Dataflex but required for Fact_Budget, etc
	SELECT IFF(HAH_OFFICES.OFFICE_NUMBER = 0, 5, 3) AS SOURCE_SYSTEM_ID,
		IFF(HAH_OFFICES.OFFICE_NUMBER = 0, (SELECT TOP 1 SOURCE_SYSTEM_NAME FROM HAH.DIM_SOURCE_SYSTEM WHERE SOURCE_SYSTEM_ID = 5), TRIM(UPPER(HAH_OFFICES.STATE))) AS SYSTEM_CODE,
		IFF(HAH_OFFICES.OFFICE_NUMBER = 0, HAH_OFFICES.GP_DB, TRIM(UPPER(HAH_OFFICES.STATE))) AS DBNAME,
		TRIM(UPPER(HAH_OFFICES.STATE)) AS STATE,
		HAH_OFFICES.OFFICE_NUMBER,
		-- For backwards compatibility with old logic, some offices are hashed with uppercase office names whilst others are not
		UPPER(TRIM(
			CASE HAH_OFFICES.OFFICE_NUMBER 
				WHEN 210 THEN HAH_OFFICES.OFFICE_NAME
				WHEN 417 THEN REPLACE(HAH_OFFICES.OFFICE_NAME, ''Options of'', '''')
				WHEN 418 THEN REPLACE(HAH_OFFICES.OFFICE_NAME, ''ADS'')
				WHEN 748 THEN HAH_OFFICES.OFFICE_NAME
			ELSE HAH_OFFICES.OFFICE_NAME END
		)) AS OFFICE_NAME,
		NULL AS PAYROLLBATCHNAME, 
		HAH_OFFICES.ETL_LAST_UPDATED_DATE 
	FROM HAH_OFFICES AS HAH_OFFICES
	LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.DFOFFICES AS DFOFFICES
		ON DFOFFICES.DBNAME = HAH_OFFICES.STATE AND DFOFFICES.OFFICENUMBER = HAH_OFFICES.OFFICE_NUMBER
	WHERE DFOFFICES.DBNAME IS NULL AND HAH_OFFICES.STATE <> ''PA'' -- Exclude new PA offices as Dataflex offices, except those that exist in Dataflex from prior testing
	UNION ALL
	-- Few offices in KeyMetOffices table that are not in either Dataflex or Login_Office tables
	SELECT 3 AS SOURCE_SYSTEM_ID,
		KEY_MET_OFFICES.STATE AS SYSTEM_CODE,
		KEY_MET_OFFICES.STATE AS DBNAME,
		KEY_MET_OFFICES.STATE,
		KEY_MET_OFFICES.OFFICE_NUMBER,
		KEY_MET_OFFICES.OFFICE_NAME,
		NULL AS PAYROLLBATCHNAME,
		KEY_MET_OFFICES.ETL_LAST_UPDATED_DATE 
	FROM KEY_METRIC_OFFICES AS KEY_MET_OFFICES
	LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.DFOFFICES AS DFOFFICES
		ON DFOFFICES.DBNAME = KEY_MET_OFFICES.STATE AND DFOFFICES.OFFICENUMBER = KEY_MET_OFFICES.OFFICE_NUMBER
	LEFT JOIN HAH_OFFICES AS HAH_OFFICES
		ON HAH_OFFICES.STATE = KEY_MET_OFFICES.STATE AND HAH_OFFICES.OFFICE_NUMBER = KEY_MET_OFFICES.OFFICE_NUMBER
	WHERE DFOFFICES.DBNAME IS NULL AND HAH_OFFICES.STATE IS NULL
), OFFICES AS (
	SELECT MD5(OFFICES.DBNAME || ''-'' || OFFICES.OFFICENUMBER || ''-'' || IFF(OFFICES.OFFICENUMBER = 0, ''GPSYNCDATA'', ''DATAFLEXSYNCDATA'')) AS BRANCH_KEY,
		OFFICES.OFFICENAME AS BRANCH_NAME,
		OFFICES.SYSTEM_CODE,
		OFFICES.SOURCE_SYSTEM_ID,
		OFFICES.OFFICENUMBER AS OFFICE_NUMBER,
		OFFICES.OFFICENUMBER::STRING AS OFFICE_CODE,
		OFFICES.OFFICENAME AS OFFICE_NAME,
		IFF(OFFICES.OFFICENUMBER = 0, UPPER(OFFICES.OFFICENAME), OFFICES.OFFICENAME) AS OFFICE_NAME_ALT,
		OFFICES.PAYROLLBATCHNAME AS DEPARTMENT_NAME,
		CASE WHEN OFFICES.OFFICENAME LIKE ''%DD%'' THEN ''DD''
			WHEN OFFICES.OFFICENAME LIKE ''%ADS%'' THEN ''ADS''
			ELSE NULL END AS BRANCH_SERVICE_LINE,
		TRUE AS PARENT_FLAG,
		BRANCH_KEY AS PARENT_BRANCH_KEY,
		OFFICES.OFFICENUMBER AS PARENT_OFFICE_NUMBER,
		OFFICES.OFFICENUMBER::STRING AS PARENT_OFFICE_CODE,
		OFFICES.DBNAME || '' - '' || OFFICES.OFFICENAME || '' ('' || IFF(OFFICES.OFFICENUMBER = 0, ''00'', OFFICES.OFFICENUMBER::STRING) || '')'' AS PARENT_BRANCH_NAME,
		HAH_OFFICES.OFFICE_ADDRESS1,
		HAH_OFFICES.OFFICE_ADDRESS2,
		HAH_OFFICES.OFFICE_CITY,
		OFFICES.STATE AS OFFICE_STATE_CODE,
		HAH_OFFICES.OFFICE_ZIP,
		HAH_OFFICES.OFFICE_PHONE,
		HAH_OFFICES.OFFICE_TOLL_FREE_PHONE,
		HAH_OFFICES.OFFICE_FAX,
		OFFICES.DBNAME || '' - '' || OFFICES.OFFICENAME || '' ('' || IFF(OFFICES.OFFICENUMBER = 0, ''00'', OFFICES.OFFICENUMBER::STRING) || '')'' AS DETAILED_OFFICE_NAME,
		REGIONS.REGIONNUMBER AS REGION_NUMBER,
		IFF(UPPER(TRIM(REGIONS.NAME)) = ''DD/MICHIGAN'', ''MICHIGAN'', UPPER(TRIM(REGIONS.NAME))) AS REGION_NAME,
		UPPER(TRIM(COALESCE(REGIONAL_EMPLOYEE.EMPLOYEE_FIRST_NAME || '' '' || REGIONAL_EMPLOYEE.EMPLOYEE_LAST_NAME, REGIONS.MANAGER))) AS REGION_MANAGER, -- Do we select the name in SQL Server, or concat name from Dim_Employee
		REGIONAL_EMPLOYEE.EMPLOYEE_KEY AS REGION_MANAGER_EMPLOYEE_KEY,
		CAST(NULL AS VARCHAR) AS SUBREGION_NAME,
		UPPER(TRIM(COALESCE(PRIMARY_MANAGER.EMPLOYEE_FIRST_NAME || '' '' || PRIMARY_MANAGER.EMPLOYEE_LAST_NAME, HAH_OFFICES.OfficeManager1))) AS Primary_Branch_Manager_Name,
		COALESCE(BRANCH_MANAGERS.PRIMARY_BRANCH_EMAIL, HAH_OFFICES.PRIMARY_BRANCH_EMAIL) AS PRIMARY_BRANCH_EMAIL,
		PRIMARY_MANAGER.EMPLOYEE_KEY AS PRIMARY_BRANCH_MANAGER_EMPLOYEE_KEY,
		UPPER(TRIM(COALESCE(SECONDARY_MANAGER.EMPLOYEE_FIRST_NAME || '' '' || SECONDARY_MANAGER.EMPLOYEE_LAST_NAME, HAH_OFFICES.OfficeManager2))) AS Secondary_Branch_Manager_Name,
		COALESCE(BRANCH_MANAGERS.SECONDARY_BRANCH_EMAIL, HAH_OFFICES.SECONDARY_BRANCH_EMAIL) AS SECONDARY_BRANCH_EMAIL,
		SECONDARY_MANAGER.EMPLOYEE_KEY AS SECONDARY_BRANCH_MANAGER_EMPLOYEE_KEY,
		RISKCONNECT.NODE_KEY AS RISKCONNECT_NODE_KEY,
		RISKCONNECT.NODE_NAME AS RISKCONNECT_NAME,
		HR.HR_OFFICE_NUMBER,
		HR.HR_OFFICE_NAME,
		TRUE AS ACTIVE_FLAG,
		TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
		TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
		ROW_NUMBER() OVER(PARTITION BY OFFICES.SYSTEM_CODE, OFFICES.OFFICENUMBER 
			ORDER BY IFF(REGIONAL_EMPLOYEE.ACTIVE_EMPLOYEE_FLAG = TRUE, 0, 1), IFF(REGIONAL_EMPLOYEE.EMPLOYEE_CATEGORY IN (''Admin'', ''Corp''), 0, 1), REGIONAL_EMPLOYEE.EMPLOYEE_LAST_CHECK_DATE DESC,
				IFF(PRIMARY_MANAGER.ACTIVE_EMPLOYEE_FLAG = TRUE, 0, 1), IFF(PRIMARY_MANAGER.EMPLOYEE_CATEGORY IN (''Admin'', ''Corp''), 0, 1), PRIMARY_MANAGER.EMPLOYEE_LAST_CHECK_DATE DESC,
				IFF(SECONDARY_MANAGER.ACTIVE_EMPLOYEE_FLAG = TRUE, 0, 1), IFF(SECONDARY_MANAGER.EMPLOYEE_CATEGORY IN (''Admin'', ''Corp''), 0, 1), SECONDARY_MANAGER.EMPLOYEE_LAST_CHECK_DATE DESC
			) AS ROW_NUMBER
	FROM OFFICE_LIST AS OFFICES
	JOIN HAH.DIM_STATE AS STATES 
		ON STATES.STATE_ISO_CODE = OFFICES.STATE
	LEFT JOIN HAH_OFFICES AS HAH_OFFICES
		ON HAH_OFFICES.STATE = OFFICES.STATE AND HAH_OFFICES.OFFICE_NUMBER = OFFICES.OFFICENUMBER
	LEFT JOIN DISC_PROD.HAH_REPORTING.KEYMETOFFICES AS REGION_OFFICES -- Only used for IL regions
		ON OFFICES.STATE = ''IL'' AND TRIM(REGION_OFFICES.OFFICESTATE) = OFFICES.STATE AND TRY_CAST(REGION_OFFICES.OFFICENUMBER AS INT) = OFFICES.OFFICENUMBER
	LEFT JOIN DISC_PROD.BI_REPOSITORY.KMREGIONS AS REGIONS
		ON (REGION_OFFICES.REGIONNUMBER IS NULL AND 
			CASE WHEN UPPER( STATES.State_Name) = ''GEORGIA'' THEN ''GEORGIA/SOUTH CAROLINA''
				WHEN UPPER( STATES.State_Name) = ''SOUTH CAROLINA'' THEN ''GEORGIA/SOUTH CAROLINA''
				WHEN UPPER( STATES.State_Name) = ''MICHIGAN'' THEN ''DD/MICHIGAN''
				WHEN UPPER( STATES.State_Name) = ''KANSAS'' THEN ''MISSOURI'' 
				WHEN UPPER( STATES.State_Name) = ''IOWA'' THEN ''ILLINOIS - NORTH'' 
				WHEN UPPER( STATES.State_Name) = ''MISSISSIPPI'' THEN ''MISSISSIPPI/TENNESSEE''
				WHEN UPPER( STATES.State_Name) = ''TENNESSEE'' THEN ''MISSISSIPPI/TENNESSEE''
				ELSE UPPER( STATES.State_Name) END = REGIONS.NAME) 
			OR (REGION_OFFICES.REGIONNUMBER = REGIONS.REGIONNUMBER)
	LEFT JOIN DEDUPE_EMP AS REGIONAL_EMPLOYEE 
		ON ((OFFICES.STATE NOT IN (''GA'', ''SC'', ''PA'') AND REGIONAL_EMPLOYEE.SOURCE_SYSTEM_ID = 5)
				OR (OFFICES.STATE IN (''GA'', ''SC'') AND REGIONAL_EMPLOYEE.SOURCE_SYSTEM_ID = 2)
				OR (OFFICES.STATE IN (''PA'') AND REGIONAL_EMPLOYEE.SOURCE_SYSTEM_ID = 4)) 
				AND REGIONAL_EMPLOYEE.Dedupe_Emp_number = REGIONS.MANAGEREMPLOYEEID 
				-- AND REGIONAL_EMPLOYEE.ACTIVE_EMPLOYEE_FLAG = TRUE AND REGIONAL_EMPLOYEE.EMPLOYEE_CATEGORY IN (''Admin'', ''Corp'')
	LEFT JOIN HAH.FACT_BRANCH_MANAGER_MAPPING AS BRANCH_MANAGERS
		ON BRANCH_MANAGERS.OFFICE_SYSTEM_CODE = OFFICES.SYSTEM_CODE AND BRANCH_MANAGERS.OFFICE_CODE = OFFICES.OFFICENUMBER::STRING 
	LEFT JOIN DEDUPE_EMP AS PRIMARY_MANAGER
		ON PRIMARY_MANAGER.SYSTEM_CODE = BRANCH_MANAGERS.PRIMARY_MANAGER_SYSTEM_CODE  
			AND PRIMARY_MANAGER.Dedupe_Emp_number = BRANCH_MANAGERS.PRIMARY_MANAGER_EMPLOYEE_ID
			-- AND PRIMARY_MANAGER.ACTIVE_EMPLOYEE_FLAG = TRUE AND PRIMARY_MANAGER.EMPLOYEE_CATEGORY IN (''Admin'', ''Corp'')
	LEFT JOIN DEDUPE_EMP AS SECONDARY_MANAGER
		ON SECONDARY_MANAGER.SYSTEM_CODE = BRANCH_MANAGERS.SECONDARY_MANAGER_SYSTEM_CODE  
			AND SECONDARY_MANAGER.Dedupe_Emp_number = BRANCH_MANAGERS.SECONDARY_MANAGER_EMPLOYEE_ID
			-- AND SECONDARY_MANAGER.ACTIVE_EMPLOYEE_FLAG = TRUE AND SECONDARY_MANAGER.EMPLOYEE_CATEGORY IN (''Admin'', ''Corp'')
	LEFT JOIN RISKCONNECT_HIERARCHY AS RISKCONNECT
		ON RISKCONNECT.PARENT_LEVEL = 2 AND RISKCONNECT.STATE = OFFICES.STATE
			AND TRY_CAST(COALESCE(RISKCONNECT.OFFICE_NUMBER, RISKCONNECT.OFFICENO) AS INTEGER) = IFF(OFFICES.OFFICENUMBER = 0, 999, OFFICES.OFFICENUMBER)
	LEFT JOIN HR_OFFICE_MAPPING AS HR
		ON HR.STATE = OFFICES.STATE AND TRY_CAST(HR.OFFICE_NUMBER AS INTEGER) = OFFICES.OFFICENUMBER 
	WHERE OFFICES.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz 
	OR HAH_OFFICES.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz 
	OR REGION_OFFICES.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz 
	OR REGIONS.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz 
	OR REGIONAL_EMPLOYEE.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz 
	OR BRANCH_MANAGERS.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz 
	OR PRIMARY_MANAGER.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz 
	OR SECONDARY_MANAGER.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz 
	OR RISKCONNECT.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz 
	OR HR.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz
)
	SELECT OFFICES.BRANCH_KEY,
		OFFICES.BRANCH_NAME,
		OFFICES.SYSTEM_CODE,
		OFFICES.SOURCE_SYSTEM_ID,
		SOURCE_SYSTEM.SOURCE_SYSTEM_TYPE,
		OFFICES.OFFICE_NUMBER,
		OFFICES.OFFICE_CODE,
		OFFICES.OFFICE_NAME,
		OFFICES.OFFICE_NAME_ALT,
		OFFICES.DEPARTMENT_NAME,
		OFFICES.BRANCH_SERVICE_LINE,
		OFFICES.PARENT_FLAG,
		OFFICES.PARENT_BRANCH_KEY,
		OFFICES.PARENT_OFFICE_NUMBER,
		OFFICES.PARENT_OFFICE_CODE,
		OFFICES.PARENT_BRANCH_NAME,
		OFFICES.OFFICE_ADDRESS1,
		OFFICES.OFFICE_ADDRESS2,
		OFFICES.OFFICE_CITY,
		OFFICES.OFFICE_STATE_CODE,
		OFFICES.OFFICE_ZIP,
		OFFICES.OFFICE_PHONE,
		OFFICES.OFFICE_TOLL_FREE_PHONE,
		OFFICES.OFFICE_FAX,
		OFFICES.DETAILED_OFFICE_NAME,
		OFFICES.REGION_NUMBER,
		OFFICES.REGION_NAME,
		OFFICES.REGION_MANAGER,
		OFFICES.REGION_MANAGER_EMPLOYEE_KEY,
		OFFICES.SUBREGION_NAME,
		OFFICES.PRIMARY_BRANCH_MANAGER_NAME,
		OFFICES.PRIMARY_BRANCH_EMAIL,
		OFFICES.PRIMARY_BRANCH_MANAGER_EMPLOYEE_KEY,
		OFFICES.SECONDARY_BRANCH_MANAGER_NAME,
		OFFICES.SECONDARY_BRANCH_EMAIL,
		OFFICES.SECONDARY_BRANCH_MANAGER_EMPLOYEE_KEY,
		OFFICES.RISKCONNECT_NODE_KEY,
		OFFICES.RISKCONNECT_NAME,
		OFFICES.HR_OFFICE_NUMBER,
		OFFICES.HR_OFFICE_NAME,
		OFFICES.ACTIVE_FLAG,
		OFFICES.EFFECTIVE_FROM_DATE,
		OFFICES.EFFECTIVE_TO_DATE,
		-- ETL Fields
		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
		:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
        convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
		CURRENT_USER as ETL_INSERTED_BY ,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
		CURRENT_USER as ETL_LAST_UPDATED_BY,
		FALSE as ETL_DELETED_FLAG,
		FALSE AS ETL_INFERRED_MEMBER_FLAG	
    FROM OFFICES AS OFFICES
	LEFT JOIN HAH.DIM_SOURCE_SYSTEM AS SOURCE_SYSTEM
    ON OFFICES.SOURCE_SYSTEM_ID = SOURCE_SYSTEM.SOURCE_SYSTEM_ID
	WHERE OFFICES.ROW_NUMBER = 1
--	UNION ALL
--     SELECT * FROM DW_PROD.HAH.DIM_ORPHAN_BRANCH
--      WHERE SOURCE_SYSTEM_ID = 3  --ADDED A ORPHAN BRANCH AS PER IDDOX - 506
	;
    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

    return return_result;
END;
    ';