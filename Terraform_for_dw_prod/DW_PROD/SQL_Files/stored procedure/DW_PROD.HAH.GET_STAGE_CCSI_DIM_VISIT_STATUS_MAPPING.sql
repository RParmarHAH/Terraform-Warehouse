CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_CCSI_DIM_VISIT_STATUS_MAPPING("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
        var sql = `
    --*****************************************************************************************************************************
-- NAME:  GET_STAGE_CCSI_DIM_VISIT_STATUS_MAPPING
--
-- PURPOSE: Creates one row per status
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 08/09/22     Vijay Sharma      Initial Development
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.CCSI_DIM_VISIT_STATUS_MAPPING
WITH RAWVRFP AS  --VISIT DATA
(
	SELECT DISTINCT RECORD_NUMBER
					,CLIENT_ID
					,SERVICE_TYPE
					,AREA_2
					,DAY_OF_SERVICE
					,PAY_PERIOD_ENDING_DATE
					,DATEADD(DAY,(IFNULL(DAY_OF_SERVICE,1) - 1),DATE_TRUNC(''MONTH'',TRY_TO_DATE(PERIOD_DATE, ''MMDDYY''))) AS "PERIOD_DATE" --CHANGE
					,EMPLOYEE_NUMBER
					,EMP_DESK
					,HOURS_WORKED
					,UPPER (TRIM (CONTRACT_NO)) AS "CONTRACT_NO" 
			FROM DISC_PROD.CCSI.RAWVRFP
			WHERE PERIOD_DATE IS NOT NULL
			AND TRY_TO_DATE(PERIOD_DATE, ''MMDDYY'') > ''2015-12-31''
			AND DAY_OF_SERVICE  IS NOT NULL
			AND CLIENT_ID IS NOT NULL
)
,OTHERINV AS
(
	SELECT DISTINCT TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'') AS "DATE_OF_SERVICE"
					,SUM(AMOUNT_BILLED) AS "AMOUNT_BILLED"
					,CLIENT_ID
					,AREA 
					--,CLIENT_NAME
					,SUM(UNITS_PROVIDED) AS "UNITS"
					,SUM(BALANCE) AS "BALANCE"
					,TYPE_OF_SERVICE AS "SERVICE_TYPE"
				FROM DISC_PROD.CCSI.OTHERINV
				--WHERE CLIENT_ID  = 001641372
				GROUP BY CLIENT_ID,AREA,TYPE_OF_SERVICE				
				,TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'')
)
,MAXOTHERINV AS
(
	SELECT DISTINCT MAX(TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'')) AS "DATE_OF_SERVICE"
					,SUM(AMOUNT_BILLED) AS "AMOUNT_BILLED"
					,CLIENT_ID
					,AREA 
					--,CLIENT_NAME
					,SUM(UNITS_PROVIDED) AS "UNITS"
					,SUM(BALANCE) AS "BALANCE"
					,TYPE_OF_SERVICE AS "SERVICE_TYPE"
				FROM DISC_PROD.CCSI.OTHERINV
				--WHERE CLIENT_ID  = 001641372
				GROUP BY CLIENT_ID,AREA
				,TYPE_OF_SERVICE
				,TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'')
)
, MCOINVOICE AS
(
	SELECT DISTINCT TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'') AS "DATE_OF_SERVICE"
					,SUM(DOLLAR_AMOUNT) AS "AMOUNT_BILLED"
					,CLIENT_ID
					,UPPER(CCSI_OFFICE) AS "AREA"
					,SUM(BALANCE) AS "BALANCE"
					,SUM(UNITS) AS "UNITS"
					,SERVICE_TYPE
			FROM DISC_PROD.CCSI.MCOINV
			GROUP BY CLIENT_ID,UPPER(CCSI_OFFICE)
					,SERVICE_TYPE
					,TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'')
)	
, MAXMCOINVOICE AS
(
	SELECT DISTINCT MAX(TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'')) AS "DATE_OF_SERVICE"
					,SUM(DOLLAR_AMOUNT) AS "AMOUNT_BILLED"
					,CLIENT_ID
					,UPPER(CCSI_OFFICE) AS "AREA"
					,SUM(BALANCE) AS "BALANCE"
					,SUM(UNITS) AS "UNITS"
					,SERVICE_TYPE
			FROM DISC_PROD.CCSI.MCOINV
			GROUP BY CLIENT_ID,UPPER(CCSI_OFFICE)
			,SERVICE_TYPE
			,TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'')
)
, RAWVRFP_OTHERINV AS --DATA RELATED OTHER INVOICE
(
	SELECT * FROM RAWVRFP WHERE try_to_numeric(SERVICE_TYPE) IS NOT NULL --NUMERIC OTHER INV
)
, RAWVRFP_MCOINV AS --DATA RELATED MCO INVOICE
(
	SELECT * FROM RAWVRFP WHERE try_to_numeric(SERVICE_TYPE) IS NULL --NON NUMERIC FOR MCO INV
)
, STATUS_DATA AS (
	SELECT 
	CASE WHEN COALESCE(O.BALANCE,O1.BALANCE) <= 0 THEN ''05'' ELSE ''02'' END AS "STATUS_CODE" -- 05 = PAID , 01 = PENDING, 02 = Confirmed
	,CASE WHEN COALESCE(O.BALANCE,O1.BALANCE) <= 0 THEN ''Paid'' ELSE ''Confirmed'' END AS "STATUS_DESCRIPTION" --NEED TO SHOW PENDING IN CASE OF INCOICE NOT  GENERATED
	FROM RAWVRFP_MCOINV R 
	LEFT JOIN MCOINVOICE O  
		ON R.CLIENT_ID = O.CLIENT_ID
		AND R.AREA_2 = O.AREA 
		AND  (MONTH(O.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE) AND YEAR(O.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE)) AND R.SERVICE_TYPE = O.SERVICE_TYPE
	LEFT JOIN MAXMCOINVOICE O1  
		ON R.CLIENT_ID = O1.CLIENT_ID
		AND R.AREA_2 = O1.AREA 
		AND  (MONTH(O1.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE)-1 AND YEAR(O1.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE)) AND R.SERVICE_TYPE = O1.SERVICE_TYPE
	UNION
	SELECT 
	CASE WHEN COALESCE(O.BALANCE,O1.BALANCE) <= 0 THEN ''05'' ELSE ''02'' END AS "STATUS_CODE" -- 05 = PAID , 01 = PENDING, 02 = Confirmed
	,CASE WHEN COALESCE(O.BALANCE,O1.BALANCE) <= 0 THEN ''Paid'' ELSE ''Confirmed'' END AS "STATUS_DESCRIPTION" --NEED TO SHOW PENDING IN CASE OF INCOICE NOT GENERATED
	FROM RAWVRFP_OTHERINV R 
	LEFT JOIN OTHERINV O  
		ON R.CLIENT_ID = O.CLIENT_ID
		AND R.AREA_2 = O.AREA 
		AND  (MONTH(O.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE) AND YEAR(O.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE)) AND R.SERVICE_TYPE = O.SERVICE_TYPE
	LEFT JOIN MAXOTHERINV O1  
		ON R.CLIENT_ID = O1.CLIENT_ID
		AND R.AREA_2 = O1.AREA 
		AND  (MONTH(O1.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE)-1 AND YEAR(O1.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE)) AND R.SERVICE_TYPE = O1.SERVICE_TYPE
	)
	Select DISTINCT 
		MD5(8  || ''-'' ||''CCSI'' || ''-'' || STATUS_DESCRIPTION) AS VISIT_STATUS_KEY
		,8 AS SOURCE_SYSTEM_ID
		,''CCSI'' AS SYSTEM_CODE
		,STATUS_DESCRIPTION AS DERIVED_DISC_STATUS
		,NULL AS DISC_SCHEDULE_STATUS
		,CASE WHEN STATUS_CODE = ''02'' THEN STATUS_DESCRIPTION ELSE NULL END AS DISC_VISIT_STATUS
		,CASE WHEN STATUS_CODE = ''05'' THEN STATUS_DESCRIPTION ELSE NULL END AS DISC_INVOICE_STATUS
		,NULL AS DISC_PAYROLL_STATUS
		,NULL AS SCHEDULE_STATUS_CODE,NULL AS SCHEDULE_STATUS_NAME,NULL AS SCHEDULE_STATUS_DESCRIPTION,
		--
	CASE 
		WHEN STATUS_CODE = ''02'' THEN ''v04''
        WHEN STATUS_CODE = ''05'' THEN ''v04''
		ELSE NULL END AS VISIT_STATUS_CODE,
	CASE  
	    WHEN STATUS_CODE= ''02'' THEN ''Completed''
        WHEN STATUS_CODE= ''05'' THEN ''Completed''
		ELSE NULL
        END AS VISIT_STATUS_NAME,
	CASE 
	 	WHEN STATUS_CODE= ''02'' THEN ''The visit is complete and has either confirmed on its own or manually confirmed and is ready to bill or pay (can go in process)''
        WHEN STATUS_CODE= ''05'' THEN ''The visit was confirmed that it happened and billed'' 
		ELSE NULL
        END AS VISIT_STATUS_DESCRIPTION,		
		--
	CASE 
		WHEN STATUS_CODE= ''02'' THEN ''i02'' 
		WHEN STATUS_CODE= ''05'' THEN ''i03'' 
		ELSE NULL END AS INVOICE_STATUS_CODE,
	CASE 
		WHEN STATUS_CODE= ''02'' THEN ''Unbilled''
		WHEN STATUS_CODE= ''05'' THEN ''Billed'' 
		ELSE NULL END AS INVOICE_STATUS_NAME,
	CASE 
		WHEN  STATUS_CODE= ''02'' THEN ''The visit is complete and has either confirmed on its own or manually confirmed and is ready to bill or pay (can go in process)''
		WHEN  STATUS_CODE= ''05'' THEN ''The visit was confirmed that it happened and billed'' 
		ELSE NULL END AS INVOICE_STATUS_DESCRIPTION
		--
		,NULL AS PAYROLL_STATUS_CODE,NULL AS PAYROLL_STATUS_NAME,NULL AS PAYROLL_STATUS_DESCRIPTION
		,CASE WHEN STATUS_CODE IN (''02'',''05'') THEN ''YES''
				WHEN STATUS_CODE IN (''01'') THEN ''NO''
				ELSE ''UNKNOWN'' END AS CONFIRMED_FLAG
		,NULL AS CONSISTENT_FLAG	
		FROM STATUS_DATA;
		`;
          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
          ';