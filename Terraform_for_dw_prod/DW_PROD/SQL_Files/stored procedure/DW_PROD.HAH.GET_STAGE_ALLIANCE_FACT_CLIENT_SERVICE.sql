CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_ALLIANCE_FACT_CLIENT_SERVICE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN
--*****************************************************************************************************************************
-- NAME:  ALLIANCE_FACT_CLIENT_SERVICE

--11/23/2023    Shraddha Sejpal                Initial development
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.ALLIANCE_FACT_CLIENT_SERVICE
WITH CLIENT AS
(
	SELECT * FROM
	(
		SELECT CLIENTID, MASTER_ID
		FROM DISC_DEDUPE_PROD.GENERATIONSALLIANCE.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT CLIENTID, MASTER_ID
		FROM DISC_DEDUPE_PROD.GENERATIONSALLIANCE.CLIENT_MATCH_LIST
		WHERE CLIENTID NOT IN (SELECT CLIENTID FROM DISC_DEDUPE_PROD.GENERATIONSALLIANCE.CLIENT_MASTER_LIST) 
	)
),
PARTNER_CONTRACT_SERVICE_MAPPING AS
(
	SELECT DISTINCT CASE WHEN (CONTAINS(UPPER(P.BADDRESS1), C.FIRSTNAME) AND CONTAINS(UPPER(P.BADDRESS1), C.LASTNAME)) 
							OR (
									CONTAINS(UPPER(C.LASTNAME), REGEXP_SUBSTR(UPPER(P.BADDRESS1), ''\\\\\\\\S+$''))
									OR CONTAINS(REGEXP_SUBSTR(UPPER(P.BADDRESS1), ''\\\\\\\\S+$''), UPPER(C.LASTNAME)
									)
							) OR CT.NAME = ''Private Pay''
							  OR P.PAYORID IS NULL THEN TRUE ELSE FALSE END IS_PRIAVATE_PAY
				, MD5(''ALLIANCE'' 
							||  ''-'' || NVL(P.PAYORID, ''-1'') 
							|| ''-'' || NVL(SR.SERVICECODE, ''-1'')
							|| ''-'' || IFF(IS_PRIAVATE_PAY, ''PRIVATEPAY'', '''')
							|| ''-'' || ''GENERATIONS''
						) AS PARTNER_CONTRACT_SERVICE_KEY
				, NVL(P.PAYORID, -1) AS PAYORID
				, SRE.SERVICEREQUESTID 
				, SRE.CLIENTID 
	FROM DISC_PROD.GENERATIONSALLIANCE.SERVICEREQUEST SRE
	INNER JOIN DISC_PROD.GENERATIONSALLIANCE.SERVICES SR
	    ON SR.SERVICECODE  = SRE.SERVICECODE
	INNER JOIN  DISC_PROD.GENERATIONSALLIANCE.CLIENT C 
	    ON C.CLIENTID = SRE.CLIENTID 
	LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.CLIENTPAYORS CPY
		ON CPY.CLIENTID = SRE.CLIENTID
	LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.PAYOR P
	    ON P.PAYORID = CPY.PAYORID
	LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.CLIENTTYPE CT 
	    ON CT.CLIENTTYPEID = C.CLIENTTYPEID
	WHERE C.CLIENTID NOT IN (SELECT CLIENT_NUMBER FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_CLIENT_NUMBER WHERE SOURCE_SYSTEM_ID = 19 AND SYSTEM_CODE = ''GENERATIONS'')
	QUALIFY DENSE_RANK() OVER(PARTITION BY SRE.SERVICEREQUESTID, CPY.CLIENTID 
					  	 ORDER BY IFF(NVL(SRE.PAYORID, 0) = CPY.PAYORID, 2, NVL(CPY.ISPRIMARY, 0)::INT) DESC
						  		, IFF(NVL(SRE.PAYORID, 0) = CPY.PAYORID, 2, NVL(CPY.CURRENTPAYOR, 0)::INT) DESC) = 1
),
--WEEKLY_AUTH AS(
--SELECT SR.SERVICEREQUESTID 
--		, DD.CALENDAR_DATE AS AUTH_DAY
--		, DECODE(UPPER(DAYNAME(DD.CALENDAR_DATE))
--					, ''SAT'', NVL(SR.SATURDAY, FALSE)
--					, ''MON'', NVL(SR.MONDAY, FALSE)
--					, ''TUE'', NVL(SR.TUESDAY, FALSE)
--					, ''WED'', NVL(SR.WEDNESDAY, FALSE)
--					, ''THU'', NVL(SR.THURSDAY, FALSE)
--					, ''FRI'', NVL(SR.FRIDAY, FALSE)
--					, ''SUN'', NVL(SR.SUNDAY, FALSE)
--					) AS HAS_AUTH
--		, IFF(HAS_AUTH, SR.TOTALHOURS, 0) AS AUTH_HOURS
--FROM DISC_PROD.GENERATIONSALLIANCE.SERVICEREQUEST SR
--INNER JOIN DW_PROD.HAH.DIM_DATE DD
--	ON DD.CALENDAR_DATE BETWEEN SR.STARTDATE::DATE AND SR.ENDDATE::DATE
--WHERE SR.FREQUENCY = 1 --Weekly
--QUALIFY (DENSE_RANK() 
--			OVER (PARTITION BY SR.SERVICEREQUESTID 
--				  ORDER BY DD.HAH_CURRENT_WEEK_FIRST_DAY) + (SR.OCCURANCE-1)
--		) % SR.OCCURANCE = 0
--), 
--MONTHLY_AUTH AS(
--SELECT DISTINCT SR.SERVICEREQUESTID
--				, DATE_TRUNC(MONTH, DD.CALENDAR_DATE) AS AUTH_MONTH 
--				, SR.TOTALHOURS AS AUTH_HOURS
--FROM DISC_PROD.GENERATIONSALLIANCE.SERVICEREQUEST SR
--INNER JOIN DW_PROD.HAH.DIM_DATE DD
--	ON DD.CALENDAR_DATE BETWEEN SR.STARTDATE::DATE AND SR.ENDDATE::DATE
--WHERE SR.FREQUENCY = 2 -- Monthly
--		AND SR.DAYOFMONTH = DAY(DD.CALENDAR_DATE) -- X Day of Month
--QUALIFY (DENSE_RANK() 
--			OVER(PARTITION BY SR.SERVICEREQUESTID
--				 ORDER BY DATE_TRUNC(MONTH, DD.CALENDAR_DATE)) + (SR.OCCURANCE-1)
--		) % SR.OCCURANCE  = 0
--), 
CLIENT_SERVICE_DATA AS
(
SELECT 
	DISTINCT MD5( ''ALLIANCE'' || ''-'' || SR.SERVICEREQUESTID || ''-'' || ''GENERATIONS'') AS CLIENT_SERVICE_KEY
--	,SR.SERVICEREQUESTID --, C.CLIENTID, CMAP.PAYORID, SR.SERVICECODE
	,19 AS SOURCE_SYSTEM_ID
	,''ALLIANCE'' AS SYSTEM_CODE
	,CMAP.PARTNER_CONTRACT_SERVICE_KEY AS PARTNER_CONTRACT_SERVICE_KEY
	,NULL AS CLIENT_ADMISSION_KEY
	,DC.CLIENT_KEY AS CLIENT_KEY
    ,MD5(''ALLIANCE'' || ''-'' || SR.SERVICECODE ||  ''-'' || ''ALLIANCE'') AS SERVICE_KEY
	,SR.SERVICECODE AS BILL_CODE 
	,CASE WHEN S.FLATRATE =TRUE THEN ''Visit'' WHEN S.FLATRATE= FALSE THEN ''Hourly'' ELSE NULL END AS BILL_TYPE
	,NULL AS BILL_UOM
    ,CASE WHEN S.FLATRATE =TRUE THEN ''Visit'' WHEN S.FLATRATE= FALSE THEN ''Hourly'' ELSE NULL END AS SCHEDULE_TYPE
    ,NULL AS SCHEDULE_UOM
    ,NULL AS AUTHORIZAITON_DISCIPLINE
    ,SR.STARTDATE AS AUTHORIZATION_DATE
	,SR.STARTDATE AS AUTHORIZATION_PERIOD_START_DATE
    ,SR.ENDDATE AS AUTHORIZATION_PERIOD_END_DATE
--    ,DATEDIFF(DAY,SR.STARTDATE, SR.ENDDATE)/7 AS WEEKS
--    ,DATEDIFF(MONTH,SR.STARTDATE, SR.ENDDATE) AS MONTHS
    ,CASE WHEN SR.FREQUENCY= 1 THEN (IFF(SR.MONDAY,1,0)+IFF(SR.TUESDAY,1,0)+IFF(SR.WEDNESDAY,1,0)+
     IFF(SR.THURSDAY,1,0)+IFF(SR.FRIDAY,1,0)+IFF(SR.SATURDAY,1,0)+IFF(SR.SUNDAY,1,0)) ELSE NULL END AS WEEKDAYS 
    ,NULL AS EFFECTIVE_DAYS
	,CASE WHEN S.FLATRATE =TRUE THEN ''Visit'' 
		  WHEN S.FLATRATE= FALSE THEN ''Hourly'' ELSE NULL END AS AUTHORIZATION_TYPE
	,CASE WHEN SR.FREQUENCY=1 AND SR.OCCURANCE=1 THEN ''Weekly'' 
		  WHEN SR.FREQUENCY=1 AND SR.OCCURANCE=2 THEN ''BiWeekly''
		  WHEN SR.FREQUENCY=1 AND SR.OCCURANCE=3 THEN ''Every 3 Weeks''
		  WHEN SR.FREQUENCY=1 AND SR.OCCURANCE=4 THEN ''Every 4 Weeks''
		  WHEN SR.FREQUENCY=1 AND SR.OCCURANCE=5 THEN ''Every 5 Weeks''
		  WHEN SR.FREQUENCY=1 AND SR.OCCURANCE=8 THEN ''Every 8 Weeks''
		  WHEN SR.FREQUENCY=1 AND SR.OCCURANCE=12 THEN ''Every 12 Weeks''
		  WHEN SR.FREQUENCY=2 AND SR.OCCURANCE=1 THEN ''Monthly''
		  WHEN SR.FREQUENCY=2 AND SR.OCCURANCE=2 THEN ''BiMonthly''
		  WHEN SR.FREQUENCY=2 AND SR.OCCURANCE=4 THEN ''Every 4 Months''
		  WHEN SR.FREQUENCY=2 AND SR.OCCURANCE=12 THEN ''Yearly''
		  ELSE NULL END AS AUTHORIZATION_UOM
	,CASE WHEN SR.FREQUENCY=1 THEN REGEXP_REPLACE (TRIM(CONCAT_WS('','',
        CASE WHEN SR.Sunday = TRUE THEN ''Sun'' ELSE '''' END,
        CASE WHEN SR.Monday = TRUE THEN ''Mon'' ELSE '''' END,
        CASE WHEN SR.Tuesday = TRUE THEN ''Tue'' ELSE '''' END,
        CASE WHEN SR.Wednesday = TRUE THEN ''Wed'' ELSE '''' END,
        CASE WHEN SR.Thursday = TRUE THEN ''Thu'' ELSE '''' END,
        CASE WHEN SR.Friday = TRUE THEN ''Fri'' ELSE '''' END,
        CASE WHEN SR.Saturday = TRUE THEN ''Sat'' ELSE '''' END
    ), '',''),
    '',+'','','')
		  WHEN SR.FREQUENCY =2 THEN SR.DAYOFMONTH ELSE NULL END AS AUTH_INFO
    ,CASE WHEN SR.FREQUENCY =1 THEN SR.TOTALHOURS * weekdays 
    	  WHEN SR.FREQUENCY =2 THEN SR.TOTALHOURS END AS AUTHORIZATION_MAX_UNITS_BY_UOM
    ,CASE WHEN SR.FREQUENCY =1 THEN SR.TOTALHOURS * weekdays 
    	  WHEN SR.FREQUENCY =2 THEN SR.TOTALHOURS END AS AUTHORIZATION_MAX_UNITS_ADJUSTED_BY_UOM  
    ,SR.FREQUENCY, SR.TOTALAPPROVEDUNITS/UNITSPERHOUR AS AUTHORIZATION_MAX_UNITS_ADJUSTED
--    ,CASE WHEN SR.FREQUENCY =1 THEN SR.TOTALHOURS * WEEKS WHEN SR.FREQUENCY=2 THEN SR.TOTALHOURS * MONTHS END AS AUTHORIZATION_MAX_UNITS_ADJUSTED
--    ,CASE WHEN SR.FREQUENCY =1 THEN SUM(WA.AUTH_HOURS)-- OVER (PARTITION BY WA.SERVICEREQUESTID)
-- 		  WHEN SR.FREQUENCY =2 THEN sum(MA.AUTH_HOURS)-- OVER (PARTITION BY MA.SERVICEREQUESTID)
-- 		   END AS AUTHORIZATION_MAX_UNITS_ADJUSTED
   	,IFF(CURRENT_DATE() BETWEEN SR.STARTDATE AND SR.ENDDATE,TRUE,FALSE) AS ACTIVE_FLAG
	,FALSE AS CANCELLED_FLAG
FROM DISC_PROD.GENERATIONSALLIANCE.SERVICEREQUEST SR
INNER JOIN DISC_PROD.GENERATIONSALLIANCE.CLIENT C
		ON C.CLIENTID = SR.CLIENTID 
INNER JOIN CLIENT CL
		ON CL.CLIENTID = C.CLIENTID
INNER JOIN DISC_PROD.GENERATIONSALLIANCE.SERVICES S
		ON S.SERVICECODE = SR.SERVICECODE 
--LEFT JOIN MONTHLY_AUTH MA ON SR.SERVICEREQUESTID = MA.SERVICEREQUESTID
--LEFT JOIN WEEKLY_AUTH WA ON SR.SERVICEREQUESTID = WA.SERVICEREQUESTID
LEFT JOIN HAH.DIM_CLIENT DC
		ON DC.CLIENT_NUMBER = CL.MASTER_ID AND DC.SOURCE_SYSTEM_ID = 19
LEFT JOIN PARTNER_CONTRACT_SERVICE_MAPPING CMAP
		ON CMAP.SERVICEREQUESTID = SR.SERVICEREQUESTID
--LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.AUTHORIZATIONS A 
--		ON SR.SERVICEREQUESTID = A.SERVICEREQUESTID 
WHERE C.CLIENTID NOT IN (SELECT CLIENT_NUMBER FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_CLIENT_NUMBER WHERE SOURCE_SYSTEM_ID = 19 AND SYSTEM_CODE = ''GENERATIONS'')
AND SR.STARTDATE::DATE <= ''2022-09-01''
GROUP BY ALL
)
SELECT CLIENT_SERVICE_KEY,SOURCE_SYSTEM_ID,SYSTEM_CODE,PARTNER_CONTRACT_SERVICE_KEY,CLIENT_ADMISSION_KEY,CLIENT_KEY,SERVICE_KEY
,BILL_CODE,BILL_TYPE,BILL_UOM,SCHEDULE_TYPE,SCHEDULE_UOM,AUTHORIZAITON_DISCIPLINE,AUTHORIZATION_DATE,AUTHORIZATION_PERIOD_START_DATE
,AUTHORIZATION_PERIOD_END_DATE,EFFECTIVE_DAYS,AUTHORIZATION_TYPE,AUTHORIZATION_UOM,AUTH_INFO::VARIANT,AUTHORIZATION_MAX_UNITS_BY_UOM
,AUTHORIZATION_MAX_UNITS_ADJUSTED AS AUTHORIZATION_MAX_UNITS,AUTHORIZATION_MAX_UNITS_ADJUSTED_BY_UOM,AUTHORIZATION_MAX_UNITS_ADJUSTED,ACTIVE_FLAG,CANCELLED_FLAG 
,	 :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
     :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
     convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
     CURRENT_USER                                              as ETL_INSERTED_BY,
     convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
     CURRENT_USER                                              as ETL_LAST_UPDATED_BY,
     0                                                          AS ETL_DELETED_FLAG   
FROM CLIENT_SERVICE_DATA;
SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
RETURN return_result;
END;
';