CREATE OR REPLACE PROCEDURE DW_PROD.REPORT.GET_REPORT_CLIENTS_REACTIVATED("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN

        INSERT OVERWRITE INTO REPORT.CLIENTS_REACTIVATED
	(PERIOD_BEGIN_DATE, CLIENT_KEY, ORIGINAL_CLIENT_KEY, CONTRACT_KEY, FIRST_SERVICE_DATE, LAST_SERVICE_DATE_INPERIOD, CURRENT_BRANCH_KEY, ORIGINAL_CURRENT_BRANCH_KEY, CURRENT_SUPERVISOR_KEY, HOURS_SERVED,
		ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE, ETL_INSERTED_BY, ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG)
WITH VISITS AS (
	SELECT DISTINCT DATE_TRUNC(MONTH, VISIT.REPORT_DATE) PERIOD_BEGIN_DATE, -- Using all visits (not DATES CTE) to get accurate Reactivation count 
		VISIT.CLIENT_KEY,
		FIRST_VALUE(VISIT.ORIGINAL_CLIENT_KEY) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END) AS ORIGINAL_CLIENT_KEY, -- Select only the one differing client_key, not combinations of old and new client keys per month
		VISIT.CONTRACT_KEY,
		MIN(MIN(VISIT.REPORT_DATE)) OVER(PARTITION BY VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY) FIRST_SERVICE_DATE,
		MAX(MAX(VISIT.REPORT_DATE)) OVER(PARTITION BY VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY, DATE_TRUNC(MONTH, VISIT.REPORT_DATE)) LAST_SERVICE_DATE_INPERIOD,
		FIRST_VALUE(VISIT.BRANCH_KEY) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY ORDER BY SUM(VISIT.HOURS_SERVED) DESC, MIN(VISIT.REPORT_DATE)) CURRENT_BRANCH_KEY,
		FIRST_VALUE(VISIT.ORIGINAL_BRANCH_KEY) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END, SUM(VISIT.HOURS_SERVED) DESC, MIN(VISIT.REPORT_DATE)) ORIGINAL_CURRENT_BRANCH_KEY,
		FIRST_VALUE(VISIT.SUPERVISOR_KEY) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY ORDER BY SUM(VISIT.HOURS_SERVED) DESC, MIN(VISIT.REPORT_DATE)) CURRENT_SUPERVISOR_KEY,
		SUM(SUM(VISIT.HOURS_SERVED)) OVER(PARTITION BY VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY) HOURS_SERVED
	FROM INTEGRATION.FACT_VISIT_MERGED VISIT
	WHERE VISIT.CONFIRMED_FLAG = ''YES'' --VISIT.STATUS_CODE IN (''02'', ''03'', ''04'', ''05'') -- Only confirmed visits
	GROUP BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), 
		VISIT.CLIENT_KEY, 
		VISIT.ORIGINAL_CLIENT_KEY,
		VISIT.CONTRACT_KEY,
		VISIT.BRANCH_KEY,
		VISIT.ORIGINAL_BRANCH_KEY,
		VISIT.SUPERVISOR_KEY
), CLIENTS_REACTIVATED_BY_PERIOD AS (
	SELECT VISITS.*
	FROM VISITS VISITS
	LEFT JOIN VISITS PREVIOUS_MONTH
		ON PREVIOUS_MONTH.CLIENT_KEY = VISITS.CLIENT_KEY
			AND PREVIOUS_MONTH.CONTRACT_KEY = VISITS.CONTRACT_KEY
			AND PREVIOUS_MONTH.PERIOD_BEGIN_DATE = DATEADD(MONTH, -1, VISITS.PERIOD_BEGIN_DATE)
	WHERE VISITS.FIRST_SERVICE_DATE < VISITS.PERIOD_BEGIN_DATE
		AND PREVIOUS_MONTH.CLIENT_KEY IS NULL
)
	SELECT RESULTS.PERIOD_BEGIN_DATE,
		RESULTS.CLIENT_KEY,
		RESULTS.ORIGINAL_CLIENT_KEY,
		RESULTS.CONTRACT_KEY,
		RESULTS.FIRST_SERVICE_DATE,
		RESULTS.LAST_SERVICE_DATE_INPERIOD,
		RESULTS.CURRENT_BRANCH_KEY,
		RESULTS.ORIGINAL_CURRENT_BRANCH_KEY,
		RESULTS.CURRENT_SUPERVISOR_KEY,
		RESULTS.HOURS_SERVED,
		-- ETL Fields
        :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
        convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
		CURRENT_USER as ETL_INSERTED_BY ,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
		CURRENT_USER as ETL_LAST_UPDATED_BY,
		0 as ETL_DELETED_FLAG
	FROM CLIENTS_REACTIVATED_BY_PERIOD RESULTS;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

return return_result;
END;

';