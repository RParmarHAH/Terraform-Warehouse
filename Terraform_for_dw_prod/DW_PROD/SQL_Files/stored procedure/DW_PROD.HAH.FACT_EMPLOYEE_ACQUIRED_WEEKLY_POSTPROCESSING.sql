CREATE OR REPLACE PROCEDURE DW_PROD.HAH.FACT_EMPLOYEE_ACQUIRED_WEEKLY_POSTPROCESSING()
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN

INSERT OVERWRITE INTO HAH.FACT_EMPLOYEE_ACQUIRED_WEEKLY
WITH ALAYACARE_EMPLOYEE AS (
SELECT 
MD5(NVL(TRIM(COMPANY.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(E.BRANCH_ID,''-1'') || '')'' || ''-'' || E.MASTER_ID || ''-'' || ''ALAYACARE'') AS EMPLOYEE_KEY,
NVL(TRIM(COMPANY.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(E.BRANCH_ID,''-1'') || '')'' AS SYSTEM_CODE,
EMP.PROFILE_ACQUIRED_BUSINESS_ AS AQUISITION_NAME
FROM DISC_DEDUPE_PROD.ALAYACARE.EMPLOYEE_MASTER_LIST E
INNER JOIN DISC_PROD.ALAYACARE.EMPLOYEE EMP
ON EMP.EMPLOYEE_ID  = E.EMPLOYEE_ID 
AND EMP.PROFILE_ACQUIRED_BUSINESS_  IS NOT NULL 
LEFT JOIN DISC_PROD.ALAYACARE.BRANCH AS COMPANY
ON COMPANY.BRANCH_ID = E.BRANCH_ID 
UNION
SELECT 
MD5(NVL(TRIM(COMPANY.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(E.BRANCH_ID,''-1'') || '')'' || ''-'' || E.MASTER_ID || ''-'' || ''ALAYACARE'') AS EMPLOYEE_KEY,
NVL(TRIM(COMPANY.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(E.BRANCH_ID,''-1'') || '')'' AS SYSTEM_CODE,
EMP.PROFILE_ACQUIRED_BUSINESS_ AS AQUISITION_NAME
FROM DISC_DEDUPE_PROD.ALAYACARE.EMPLOYEE_MATCH_LIST E
INNER JOIN DISC_PROD.ALAYACARE.EMPLOYEE EMP
ON EMP.EMPLOYEE_ID  = E.ID AND E.ID <> E.MASTER_ID 
AND EMP.PROFILE_ACQUIRED_BUSINESS_  IS NOT NULL
LEFT JOIN DISC_PROD.ALAYACARE.BRANCH AS COMPANY
ON COMPANY.BRANCH_ID = E.BRANCH_ID
),
preferred_employee AS (
	SELECT DISTINCT 
	EMPLOYEE_KEY  , 
	SOURCE_SYSTEM_ID ,
	SYSTEM_CODE 
	FROM HAH.DIM_EMPLOYEE  a
	WHERE a.SOURCE_SYSTEM_ID =17
	AND a.SYSTEM_CODE = ''PREFERRED''
),EDISON_EMPLOYEE AS(
	SELECT DISTINCT
	E.EMPLOYEE_KEY,
	E.SOURCE_SYSTEM_ID,
	E.SYSTEM_CODE,
	NVL(ACQ_NAME, ''EDISON'') AS Acquisition
	FROM HAH.DIM_EMPLOYEE E
	LEFT JOIN (
	SELECT MASTER_ID,CAREGIVERID,MD5(''EDISON'' || ''-'' || MASTER_ID  || ''-'' || ''EDISON'') AS EMPLOYEE_KEY,
	CASE WHEN Acquisition = ''Recco'' THEN UPPER(Acquisition) END AS ACQ_NAME
	FROM
		(
			SELECT CAREGIVERID, MASTER_ID, TRIM(B.DROPDOWNTEXT3) AS Acquisition
			FROM DISC_DEDUPE_PROD.HHAEXCHANGEEDISON.EMPLOYEE_MASTER_LIST a
			JOIN DISC_PROD.HHAEXCHANGEEDISON.AIDECUSTOMFIELDS B ON A.CAREGIVERID = B.AIDEID
		)
	UNION
	SELECT MASTER_ID,CAREGIVERID,MD5(''EDISON'' || ''-'' || MASTER_ID  || ''-'' || ''EDISON'') AS EMPLOYEE_KEY,
	CASE WHEN Acquisition = ''Recco'' THEN UPPER(Acquisition) END AS ACQ_NAME
	FROM
		(
			SELECT DISTINCT CAREGIVERID, MASTER_ID, TRIM(B.DROPDOWNTEXT3) AS Acquisition
			FROM DISC_DEDUPE_PROD.HHAEXCHANGEEDISON.EMPLOYEE_MATCH_LIST A
			JOIN DISC_PROD.HHAEXCHANGEEDISON.AIDECUSTOMFIELDS B ON A.CAREGIVERID = B.AIDEID
			WHERE CAREGIVERID NOT IN (SELECT CAREGIVERID FROM DISC_DEDUPE_PROD.HHAEXCHANGEEDISON.EMPLOYEE_MASTER_LIST)
		)
	) DE ON DE.EMPLOYEE_KEY = E.EMPLOYEE_KEY
	WHERE E.SYSTEM_CODE = ''EDISON''
),
PRAETORIAN_EMPLOYEE AS 
(
SELECT * FROM integration.dim_EMPLOYEE_MERGED 
WHERE EMPLOYEE_key in (
  				select employee_key from hah.dim_employee where payroll_id in
 				(select EMPLOYEEID from DISC_PROD.EMPLOYEESETUP.ES_ENTRIESDATA where referral in (''Praetorian'',''Praetorian Employee'')))
  				and SOURCE_SYSTEM_ID = 3
),
LONGEVITY_EMPLOYEE AS
(
SELECT * FROM integration.dim_EMPLOYEE_MERGED 
WHERE EMPLOYEE_key in (
  				select employee_key from hah.dim_employee where payroll_id in
 				(select EMPLOYEEID from DISC_PROD.EMPLOYEESETUP.ES_ENTRIESDATA where referral = ''Acquisition - Longevity''))
  				and SOURCE_SYSTEM_ID = 3
),
MERIDIUS_EMPLOYEE AS 
(
SELECT MD5(NVL(AGENCYID,''S'') || ''-'' || UPPER(NVL(COALESCE(TRY_CAST(STAFFAGENCYID AS INT)::STRING, TRIM(STAFFAGENCYID)), '''')) || ''-'' || ''1900-01-01'' || ''-'' || ''SANDATAIMPORT'') AS Employee_key
, AGENCYID AS System_Code
, 4 AS Source_System_ID ,
CASE WHEN REFERRAL = ''Meridius Transfer'' THEN ''Meridius''
WHEN REFERRAL =''All Generations Home Health'' THEN ''All Generations'' END AS ACQUISITION
FROM DISC_PROD.SandataImport.Sandata_Staffs  
WHERE REFERRAL IN (''Meridius Transfer'',''All Generations Home Health'')
),ASR_EMPLOYEE AS (
SELECT DISTINCT 
	EMPLOYEE_KEY  , 
	SOURCE_SYSTEM_ID ,
	SYSTEM_CODE 
	FROM HAH.DIM_EMPLOYEE  a
	WHERE a.SOURCE_SYSTEM_ID =13
),CLEARCARE_EMPLOYEE AS (
WITH DATA as(
		SELECT  DISTINCT 
		EMPLOYEE_KEY  ,
	    ORIGINAL_EMPLOYEE_KEY,
		SOURCE_SYSTEM_ID ,
	    ORIGINAL_SOURCE_SYSTEM_ID,
		SYSTEM_CODE ,
	    ORIGINAL_SYSTEM_CODE,
	    CASE WHEN BD.PROFILETAG_ID=296396 THEN ''BERKSHIRE'' ELSE ''CLEARCARE'' END AS AQUISITION_NAME
		FROM INTEGRATION.DIM_EMPLOYEE_MERGED  a
		JOIN
			(	SELECT CA.ID || Ca.AGENCY_ID AS EMPLOYEE_NUMBER , PPT.PROFILETAG_ID 
				FROM DISC_PROD.CLEARCARE.CAREGIVER_CAREGIVER  CA
				LEFT JOIN DISC_PROD.CLEARCARE.PROFILE_PROFILE PP ON CA.ID=PP.CAREGIVER_ID 
				LEFT JOIN DISC_PROD.CLEARCARE.PROFILE_PROFILE_TAGS PPT ON PPT.PROFILE_ID =PP.ID
				)BD ON BD.EMPLOYEE_NUMBER = A.EMPLOYEE_NUMBER
			WHERE A.SOURCE_SYSTEM_ID =16
			)	
	SELECT DISTINCT EMPLOYEE_KEY , ORIGINAL_EMPLOYEE_KEY , SOURCE_SYSTEM_ID , ORIGINAL_SOURCE_SYSTEM_ID ,SYSTEM_CODE ,ORIGINAL_SYSTEM_CODE ,AQUISITION_NAME
	FROM DATA 
), OPENSYSTEM_EMPLOYEE AS (
SELECT DISTINCT 
	EMPLOYEE_KEY  , 
	SOURCE_SYSTEM_ID ,
	SYSTEM_CODE 
	FROM HAH.DIM_EMPLOYEE  a
	WHERE a.SOURCE_SYSTEM_ID =17
	AND a.SYSTEM_CODE IN (''OPENSYSTEMS - PA'',''OPENSYSTEMS - DE'')
),  
OSHAH_EMPLOYEE AS (
SELECT  E.EMPLOYEE_KEY, 
ACQ_NAME AS Acquisition,
ACQ_DATE
FROM HAH.DIM_EMPLOYEE E 
LEFT JOIN(
SELECT MASTER_ID,CAREGIVERID,MD5(''OSHAH''||''-''||MASTER_ID||''-''||''HHAEXCHANGE'') AS EMPLOYEE_KEY,ACQ_DATE,
CASE WHEN Acquisition = ''Open Systems HealthCare'' THEN ''OPENSYSTEMS''
WHEN Acquisition = ''All Gen'' THEN ''All Generations''
WHEN Acquisition = ''Meridus'' THEN ''Meridius'' END AS ACQ_NAME
FROM
	(
		SELECT CAREGIVERID, MASTER_ID, TRY_TO_DATE(B.TEXT3) AS ACQ_DATE,trim(B.DROPDOWNTEXT2) AS Acquisition
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEOSHAH.EMPLOYEE_MASTER_LIST a
        JOIN DISC_PROD.HHAEXCHANGEOSHAH.AIDECUSTOMFIELDS B ON A.CAREGIVERID = B.AIDEID
		WHERE trim(B.DROPDOWNTEXT2) IN (''Open Systems HealthCare'',''All Gen'',''Meridus'')
	)
	UNION
SELECT MASTER_ID,CAREGIVERID,MD5(''OSHAH''||''-''||MASTER_ID||''-''||''HHAEXCHANGE'') AS EMPLOYEE_KEY ,ACQ_DATE,
CASE WHEN Acquisition = ''Open Systems HealthCare'' THEN ''OPENSYSTEMS''
WHEN Acquisition = ''All Gen'' THEN ''All Generations''
WHEN Acquisition = ''Meridus'' THEN ''Meridius'' END AS ACQ_NAME
FROM
	(
		SELECT DISTINCT CAREGIVERID, MASTER_ID,TRY_TO_DATE(B.TEXT3) AS ACQ_DATE,trim(B.DROPDOWNTEXT2) AS Acquisition
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEOSHAH.EMPLOYEE_MATCH_LIST A
		JOIN DISC_PROD.HHAEXCHANGEOSHAH.AIDECUSTOMFIELDS B ON A.CAREGIVERID = B.AIDEID
		WHERE CAREGIVERID NOT IN (SELECT CAREGIVERID FROM DISC_DEDUPE_PROD.HHAEXCHANGEOSHAH.EMPLOYEE_MASTER_LIST)
		AND trim(B.DROPDOWNTEXT2) IN (''Open Systems HealthCare'',''All Gen'',''Meridus'') 
	) A 
) DE ON DE.EMPLOYEE_KEY = E.EMPLOYEE_KEY
WHERE E.SYSTEM_CODE IN ( ''OSHAH - PA'',''OSHAH - DE'')
),MATRIXCARE_EMPLOYEE AS(
WITH dat AS (
SELECT CARV_RECORDID ,a.CARV_FIELDID , b.CARF_NAME ,a.CARV_VALUE  , a.INSERTDATE , a.UPDATEDATE , c.CARDD_TEXT 
, CASE WHEN a.CARV_VALUE IS NULL THEN 0 ELSE 1 END  AS aa ,
ROW_NUMBER() OVER (PARTITION BY A.CARV_RECORDID, trim(b.CARF_NAME)  ORDER BY A.UPDATEDATE DESC ) AS RNUM,
first_value(trim( c.CARDD_TEXT )) OVER (PARTITION BY CARV_RECORDID ORDER BY trim(CARF_NAME), A.UPDATEDATE DESC ) AS acq_name,
first_value(a.CARV_VALUE) OVER (PARTITION BY CARV_RECORDID ORDER BY trim(CARF_NAME) DESC, A.UPDATEDATE DESC ) AS acq_date
FROM  DISC_PROD.MATRIXCARE.STVHC_T_CAREGIVERVALUES  a 
INNER JOIN  DISC_PROD.MATRIXCARE.STVHC_T_CAREGIVERFIELDS b ON a.CARV_FIELDID  = b.CARF_ID 
LEFT JOIN   DISC_PROD.MATRIXCARE.STVHC_T_CAREGIVERFIELDLISTITEMS c ON a.CARV_VALUE= c.CARDD_VALUE::STRING AND a.CARV_FIELDID =c.CARDD_FIELDID  
WHERE trim(CARF_NAME)IN (''Acquisition'',''Acquisition Date'')
)
SELECT DISTINCT  CARV_RECORDID, ACQ_NAME, TRY_TO_DATE(ACQ_DATE,''YYYY.MM.DD'') AS ACQ_DATE
,MASTER_ID,MD5(''MATRIXCARE'' || ''-'' || CL.MASTER_ID::STRING || ''-'' || ''MATRIXCARE'') AS EMPLOYEE_KEY
FROM dat A 
JOIN DISC_DEDUPE_PROD.MATRIXCARE.EMPLOYEE_MASTER_LIST CL ON A.CARV_RECORDID = CL.CAR_ID
WHERE A.ACQ_NAME in (''Alliance'',''MYCARE'')
UNION 
SELECT DISTINCT  CARV_RECORDID, ACQ_NAME, TRY_TO_DATE(ACQ_DATE,''YYYY.MM.DD'') AS ACQ_DATE
,MASTER_ID,MD5(''MATRIXCARE'' || ''-'' || CL.MASTER_ID::STRING || ''-'' || ''MATRIXCARE'') AS EMPLOYEE_KEY
FROM dat A 
JOIN DISC_DEDUPE_PROD.MATRIXCARE.EMPLOYEE_MATCH_LIST CL ON A.CARV_RECORDID = CL.CAR_ID
WHERE A.ACQ_NAME in (''Alliance'',''MYCARE'')
AND CL.CAR_ID NOT IN (SELECT L.CAR_ID FROM DISC_DEDUPE_PROD.MATRIXCARE.EMPLOYEE_MASTER_LIST L)
),
mycare_clients AS 
	(
	WITH dat AS (
	SELECT CARV_RECORDID ,a.CARV_FIELDID , b.CARF_NAME ,a.CARV_VALUE  , a.INSERTDATE , a.UPDATEDATE , c.CARDD_TEXT 
	, CASE WHEN a.CARV_VALUE IS NULL THEN 0 ELSE 1 END  AS aa ,
	ROW_NUMBER() OVER (PARTITION BY A.CARV_RECORDID, trim(b.CARF_NAME)  ORDER BY A.UPDATEDATE DESC ) AS RNUM,
	first_value(trim( c.CARDD_TEXT )) OVER (PARTITION BY CARV_RECORDID ORDER BY trim(CARF_NAME), A.UPDATEDATE DESC ) AS acq_name,
	first_value(a.CARV_VALUE) OVER (PARTITION BY CARV_RECORDID ORDER BY trim(CARF_NAME) DESC, A.UPDATEDATE DESC ) AS acq_date
	FROM  DISC_PROD.MATRIXCARE.STVHC_T_CAREGIVERVALUES  a 
	INNER JOIN  DISC_PROD.MATRIXCARE.STVHC_T_CAREGIVERFIELDS b ON a.CARV_FIELDID  = b.CARF_ID 
	LEFT JOIN   DISC_PROD.MATRIXCARE.STVHC_T_CAREGIVERFIELDLISTITEMS c ON a.CARV_VALUE= c.CARDD_VALUE::STRING AND a.CARV_FIELDID =c.CARDD_FIELDID  
	WHERE trim(CARF_NAME)IN (''Acquisition'',''Acquisition Date'')
	)
	SELECT DISTINCT MD5(''MATRIXCARE'' || ''-'' || CL.MASTER_ID::STRING || ''-'' || ''MATRIXCARE'') AS EMPLOYEE_KEY
	FROM dat A 
	JOIN DISC_DEDUPE_PROD.MATRIXCARE.EMPLOYEE_MASTER_LIST CL ON A.CARV_RECORDID = CL.CAR_ID
	WHERE A.ACQ_NAME in (''MYCARE'')
	UNION 
	SELECT DISTINCT MD5(''MATRIXCARE'' || ''-'' || CL.MASTER_ID::STRING || ''-'' || ''MATRIXCARE'') AS EMPLOYEE_KEY
	FROM dat A 
	JOIN DISC_DEDUPE_PROD.MATRIXCARE.EMPLOYEE_MATCH_LIST CL ON A.CARV_RECORDID = CL.CAR_ID
	WHERE A.ACQ_NAME in (''MYCARE'')
	AND CL.CAR_ID NOT IN (SELECT L.CAR_ID FROM DISC_DEDUPE_PROD.MATRIXCARE.EMPLOYEE_MASTER_LIST L)
	),
	AXXESS_EMPLOYEE AS (
SELECT DISTINCT 
	EMPLOYEE_KEY  , 
	SOURCE_SYSTEM_ID ,
	SYSTEM_CODE 
	FROM HAH.DIM_EMPLOYEE  a
	WHERE a.SOURCE_SYSTEM_ID =14
	AND a.SYSTEM_CODE = ''PRIME''
), ALLIANCE_EMPLOYEE AS (
SELECT DISTINCT 
	EMPLOYEE_KEY  , 
	SOURCE_SYSTEM_ID ,
	SYSTEM_CODE 
	FROM HAH.DIM_EMPLOYEE  a
	WHERE a.SOURCE_SYSTEM_ID =19
	AND a.SYSTEM_CODE = ''ALLIANCE''
)
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,BRANCH_MERGED.ORIGINAL_BRANCH_KEY  ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, ''ADAPTIVE'' AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/ CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM HAH.FACT_VISIT VISIT
INNER JOIN HAH.DIM_BRANCH BRANCH
	ON VISIT.BRANCH_KEY = BRANCH.BRANCH_KEY
INNER JOIN HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = BRANCH.BRANCH_KEY 
INNER JOIN INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY  
WHERE VISIT.SOURCE_SYSTEM_ID = 7
	AND BRANCH.BRANCH_NAME LIKE ''A_%''
	AND REPORT_DATE >= ''2021-01-01''
	and EMPLOYEE_MERGED.EMPLOYEE_KEY not in (select employee_key from mycare_clients)
UNION
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,BRANCH_MERGED.ORIGINAL_BRANCH_KEY  ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, ''ADAPTIVE'' AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/ CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM HAH.FACT_VISIT VISIT
INNER JOIN HAH.DIM_BRANCH BRANCH
	ON VISIT.BRANCH_KEY = BRANCH.BRANCH_KEY
INNER JOIN HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = BRANCH.BRANCH_KEY 
INNER JOIN INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY  
WHERE VISIT.SOURCE_SYSTEM_ID = 7
	AND REPORT_DATE < ''2021-01-01''
	and EMPLOYEE_MERGED.EMPLOYEE_KEY not in (select employee_key from mycare_clients)
UNION
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE, BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, ''CCSI'' AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/ CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM HAH.FACT_VISIT VISIT
INNER JOIN HAH.DIM_BRANCH BRANCH
	ON VISIT.BRANCH_KEY = BRANCH.BRANCH_KEY
INNER JOIN HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = BRANCH.BRANCH_KEY 
INNER JOIN INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY  
WHERE VISIT.SOURCE_SYSTEM_ID = 8
UNION
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	A.AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM ALAYACARE_EMPLOYEE A
INNER JOIN HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = A.EMPLOYEE_KEY
INNER JOIN HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY  
--WHERE REPORT_DATE LIKE ''2021%''
UNION
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	''Praetorian'' AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM PRAETORIAN_EMPLOYEE P
INNER JOIN HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = P.EMPLOYEE_KEY
INNER JOIN HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY  
UNION
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	''Longevity'' AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM LONGEVITY_EMPLOYEE P
INNER JOIN HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = P.EMPLOYEE_KEY
INNER JOIN HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY  
UNION
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	P.ACQUISITION AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM MERIDIUS_EMPLOYEE P
INNER JOIN HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = P.EMPLOYEE_KEY
INNER JOIN HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY  
--WHERE REPORT_DATE LIKE ''2021%''
UNION
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	''PREFERRED'' AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM preferred_employee A
INNER JOIN HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = A.EMPLOYEE_KEY
INNER JOIN HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY
UNION
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	A.Acquisition AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM EDISON_EMPLOYEE A
INNER JOIN HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = A.EMPLOYEE_KEY
INNER JOIN HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY
UNION
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	''ASR'' AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM ASR_EMPLOYEE A
INNER JOIN HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = A.EMPLOYEE_KEY
INNER JOIN HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY
UNION
SELECT DISTINCT 
		MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
		EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
		EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
		BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
		 A.AQUISITION_NAME,
		-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
		CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
	FROM CLEARCARE_EMPLOYEE A
	INNER JOIN DW_PROD.HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = A.EMPLOYEE_KEY
	INNER JOIN DW_PROD.HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
	INNER JOIN DW_PROD.INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
	INNER JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY
UNION 
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	''OPENSYSTEMS'' AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM OPENSYSTEM_EMPLOYEE A
INNER JOIN DW_PROD.HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = A.EMPLOYEE_KEY
INNER JOIN DW_PROD.HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN DW_PROD.INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY
UNION 
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	A.Acquisition AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM OSHAH_EMPLOYEE A
INNER JOIN DW_PROD.HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = A.EMPLOYEE_KEY
INNER JOIN DW_PROD.HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN DW_PROD.INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY
UNION 
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	UPPER(acq_name) AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM MATRIXCARE_EMPLOYEE A
INNER JOIN DW_PROD.HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = A.EMPLOYEE_KEY
INNER JOIN DW_PROD.HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN DW_PROD.INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY
WHERE VISIT.SOURCE_SYSTEM_ID = 7
	UNION 
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	''AXXESS'' AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM AXXESS_EMPLOYEE A
INNER JOIN DW_PROD.HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = A.EMPLOYEE_KEY
INNER JOIN DW_PROD.HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN DW_PROD.INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY
UNION 
SELECT DISTINCT 
	MD5(EMPLOYEE_MERGED.EMPLOYEE_KEY  || VISIT.CONTRACT_KEY || BRANCH_MERGED.BRANCH_KEY || HAH_CURRENT_WEEK_FIRST_DAY) AS EMPLOYEE_ACQUIRED_KEY,
	EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY ,
	EMPLOYEE_MERGED.EMPLOYEE_KEY, EMPLOYEE_MERGED.EMPLOYEE_ID, VISIT.SOURCE_SYSTEM_ID, VISIT.SYSTEM_CODE,
	BRANCH_MERGED.ORIGINAL_BRANCH_KEY ,BRANCH_MERGED.BRANCH_KEY, CONTRACT_KEY, HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK, 
	''ALLIANCE'' AS AQUISITION_NAME,
	-1 AS ETL_TASK_KEY, -1 AS ETL_INSERTED_TASK_KEY, /*VISIT.ETL_INSERTED_DATE, VISIT.ETL_INSERTED_BY,*/
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG
FROM ALLIANCE_EMPLOYEE A
INNER JOIN DW_PROD.HAH.FACT_VISIT VISIT ON VISIT.EMPLOYEE_KEY = A.EMPLOYEE_KEY
INNER JOIN DW_PROD.HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.REPORT_DATE
INNER JOIN DW_PROD.INTEGRATION.DIM_BRANCH_MERGED BRANCH_MERGED ON BRANCH_MERGED.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
INNER JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_MERGED EMPLOYEE_MERGED ON EMPLOYEE_MERGED.ORIGINAL_EMPLOYEE_KEY  = VISIT.EMPLOYEE_KEY;
SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

return return_result;
END;

';