CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_OSHAH_FACT_VISIT_EXCEPTION("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
--*****************************************************************************************************************************
-- NAME:  OSHAH_FACT_VISIT_EXCEPTION
--
-- PURPOSE: Creates one row per visit exception according to OSHAH
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR							NOTES:
-- --------		-------------------				-------------------------------------------------------------------------------
-- 6/26/2023	Naresha Bhat/ Abhishek Sunil	Initial Development
-- 7/04/2023     Sandesh Gosavi                 update code to use config flag
--*****************************************************************************************************************************
INSERT OVERWRITE INTO DW_PROD.STAGE.OSHAH_FACT_VISIT_EXCEPTION
WITH CALLS AS (
	SELECT 
		V.VISITID,
		''OSHAH - '' || OFFICE.STATE AS SYSTEM_CODE,
		V.VISITDATE::DATE AS SERVICE_DATE,
		TRIM(CM.EXCEPTIONCODE) AS STATUS,
		NULLIF(TRIM(CRN.UPDATEREASONID),'''') AS REASON_CODE,
		NULLIF(TRIM(RS.REASON),'''') AS EXCEPTION_REASON,
		NULLIF(TRIM(CRN.UPDATEVISITACTIONTAKENREASON),'''') AS EXCEPTION_RESOLUTION
	FROM 
		DISC_PROD.HHAEXCHANGEOSHAH.INREVIEWVISITS CM
	INNER JOIN 
		DISC_PROD.HHAEXCHANGEOSHAH.VISITS V
		ON CM.AGENCYID = V.AGENCYID 
			AND CM.VISITID = V.VISITID
	LEFT JOIN
		DISC_PROD.HHAEXCHANGEOSHAH.OFFICE_OFFICES_REPL OFFICE ON CM.OFFICEID = OFFICE.OFFICEID
	LEFT JOIN 
		DISC_PROD.HHAEXCHANGEOSHAH.TBLVISITS_REPL CRN 
		ON CRN.AGENCYID = V.AGENCYID
			AND CRN.VISITID = V.VISITID
	LEFT JOIN
		DISC_PROD.HHAEXCHANGEOSHAH.REASONS_REPL RS
		ON CRN.AGENCYID = RS.AGENCYID
			AND CRN.UPDATEREASONID = RS.REASONID
	WHERE OFFICE.STATE IN (SELECT STATE FROM DISC_PROD.HHAEXCHANGEOSHAH.CONFIGURATION WHERE CONFIG = TRUE)
	--GROUP BY V.VISITID, V.VISITDATE::DATE,OFFICE.STATE, CM.EXCEPTIONCODE, CRN.REASON, CRN.ACTIONTAKENREASON, CRN.CREATEDDATE
--	QUALIFY ROW_NUMBER() OVER (PARTITION BY V.VISITID, CM.EXCEPTIONCODE ORDER BY CRN.CREATEDDATE DESC) = 1
)
, EXCEPTIONS AS (
SELECT DISTINCT
	MD5(''OSHAH'' || ''-'' || CALLS.VISITID || ''-'' || UPPER(CALLS.STATUS) || ''-'' || ''HHAEXCHANGE'') AS VISIT_EXCEPTION_KEY,
	MD5(''OSHAH'' || CALLS.VISITID || ''-'' || ''HHAEXCHANGE'') AS VISIT_KEY,
	CALLS.VISITID,
	SERVICE_DATE AS SERVICE_DATE, 
	17 AS SOURCE_SYSTEM_ID,
	SYSTEM_CODE  AS SYSTEM_CODE,
	UPPER(CALLS.STATUS) AS EXCEPTION_CODE,
	IFF(CALLS.EXCEPTION_REASON IS NOT NULL, TRUE, FALSE) AS ACKNOWLEDGED_FLAG,
	IFF(EXCEPTION_RESOLUTION IS NOT NULL, TRUE, FALSE) AS RESOLVED_FLAG,
	UPPER(CALLS.REASON_CODE) AS REASON_CODE,
	UPPER(CALLS.EXCEPTION_REASON) AS REASON_NAME,
	UPPER(EXCEPTION_RESOLUTION) AS RESOLUTION_CODE,
	UPPER(EXCEPTION_RESOLUTION) AS RESOLUTION_NAME
FROM
	CALLS
)
SELECT DISTINCT
	DATA.VISIT_EXCEPTION_KEY,
	DATA.VISIT_KEY,
	VE.EXCEPTION_KEY,
	DATA.SERVICE_DATE,
	DATA.SOURCE_SYSTEM_ID,
	DATA.SYSTEM_CODE,
	VE.EXCEPTION_CODE,
	DATA.ACKNOWLEDGED_FLAG,
	DATA.RESOLVED_FLAG,
	DATA.REASON_CODE,
	DATA.REASON_NAME,
	DATA.RESOLUTION_CODE,
	DATA.RESOLUTION_NAME,
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	FALSE AS ETL_DELETED_FLAG
FROM
	EXCEPTIONS DATA
LEFT JOIN 
	HAH.DIM_VISIT_EXCEPTION VE 
	ON VE.EXCEPTION_CODE = DATA.EXCEPTION_CODE 
	AND VE.SOURCE_SYSTEM_ID = DATA.SOURCE_SYSTEM_ID 
	AND VE.SYSTEM_CODE = DATA.SYSTEM_CODE
ORDER BY 
	DATA.SERVICE_DATE ASC;
RETURN ''SUCCESS'';
END;
';