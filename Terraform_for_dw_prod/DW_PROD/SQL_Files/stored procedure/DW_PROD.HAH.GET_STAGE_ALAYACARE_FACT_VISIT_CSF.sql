CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_ALAYACARE_FACT_VISIT_CSF("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
  RETURN_RESULT VARCHAR(1000);
BEGIN
--******************************************************************************************************************************************************
-- NAME:  ALAYACARE_FACT_VISIT
--
-- PURPOSE: Creates one row per visit according to AlayaCare 
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -------------------------------------------------------------------------------------------------------------------
-- 10/27/21     Mir Ali             Initial development
-- 12/08/21     Vaidehi Shah		Added Client Groups instead of EmployeeGroup and removed hardcoded SYSTEMCODE
-- 03/08/22		Mir Ali				Updated Hours_Served logic as discussed with AlayaCare
-- 03/09/22		Mir Ali				Added cutover dates for transitioning from Coastal to Alayacare (Georgia)
-- 03/14/22		Mir Ali				Updated logic for Status_Code and Hours_Served per discussion with Alayacare and Implementation team
-- 05/19/22		Pooja Shah			Correction related Visit Status as per Erics Mail
-- 08/17/22		Saurav Purohit		Added new Status fields, Hours & Timing fields, Scheduled_Employee, Confirmed_Flag, Bill_unit_type & Bill_Unit_Served
--									and Updated Hours_Served logic. Added logic for Discovery layer statuses per discussion with Alayacare team
-- 01/09/23		Saurav Purohit		Leveraged EVV_VISIT table & FACT_VISIT_EXCEPTIONS for CLEAN_SHIFT_FLAG, EXCEPTION_REASON_INDICATOR & IS_EVV_FLAG
--*******************************************************************************************************************************************************
--
    INSERT OVERWRITE INTO STAGE.ALAYACARE_FACT_VISIT_CSF
(VISIT_KEY, SCHEDULE_STATUS_NAME, SCHEDULE_STATUS_CODE, SCHEDULE_STATUS_DESCRIPTION, VISIT_STATUS_NAME, VISIT_STATUS_CODE, VISIT_STATUS_DESCRIPTION,
INVOICE_STATUS_NAME, INVOICE_STATUS_CODE, INVOICE_STATUS_DESCRIPTION, PAYROLL_STATUS_NAME, PAYROLL_STATUS_CODE, PAYROLL_STATUS_DESCRIPTION, REPORT_DATE,
BRANCH_KEY, CLIENT_KEY, CONTRACT_KEY, SCHEDULED_EMPLOYEE_KEY, EMPLOYEE_KEY, SOURCE_SYSTEM_ID, SUPERVISOR_KEY, SERVICE_DATE, PAYROLL_DATE, BRANCH_NAME,
CLIENT_NUMBER, CONTRACT_CODE, SCHEDULED_EMPLOYEE_ID, EMPLOYEE_ID, SYSTEM_CODE, SUPERVISOR_CODE, CLEAN_SHIFT_FLAG, CANCEL_REASON_CODE, CANCEL_REASON_DESCRIPTION,
CANCEL_REASON_NOTES, EXCEPTION_REASON_INDICATOR, RESOLUTION_CODE, RESOLUTION_DESCRIPTION, REJECTION_CODE, REJECTION_DESCRIPTION, BILL_CODE, BILL_RATE, BILL_UNITS_SERVED,
BILL_UNIT_TYPE, OVERHEAD_RATE, HOURS_SERVED, SCHEDULE_TIMEIN, SCHEDULE_TIMEOUT, SCHEDULE_DURATION, ACTUAL_TIMEIN, ACTUAL_TIMEOUT, ACTUAL_DURATION, ADJUSTED_TIMEIN,	
ADJUSTED_TIMEOUT, ADJUSTED_DURATION, COMMENTS, IS_EVV_FLAG, TIMESHEET_TYPE, TRACKING_ID, ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE, ETL_INSERTED_BY,
ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG, INVOICE_ID,
	CHEQUE_NUMBER, PAYROLL_KEY, INVOICE_KEY, CONFIRMED_FLAG )
--
WITH EMPLOYEE AS 
(
SELECT * FROM 
(
	SELECT EMPLOYEE_ID,MASTER_ID,EMPLOYEE_ID AS ORIGINAL_RECORD_ID,BRANCH_ID
	FROM  DISC_DEDUPE_PROD.ALAYACARE.EMPLOYEE_MASTER_LIST  
) 
UNION
SELECT * FROM 
(
	SELECT DISTINCT ID,MASTER_ID,ID AS ORIGINAL_RECORD_ID,BRANCH_ID
	FROM DISC_DEDUPE_PROD.ALAYACARE.EMPLOYEE_MATCH_LIST 
	WHERE ID NOT IN (SELECT EMPLOYEE_ID FROM DISC_DEDUPE_PROD.ALAYACARE.EMPLOYEE_MASTER_LIST ) 
) 
)
, CLIENT AS  --VISIT DATA
(
SELECT * FROM 
(
	SELECT CLIENT_ID,MASTER_ID,CLIENT_ID AS ORIGINAL_RECORD_ID,GUID,BRANCH_ID
	FROM  DISC_DEDUPE_PROD.ALAYACARE.CLIENT_MASTER_LIST 
) 
UNION
SELECT * FROM 
(
	SELECT DISTINCT ID,MASTER_ID,ID AS ORIGINAL_RECORD_ID,GUID,BRANCH_ID
	FROM DISC_DEDUPE_PROD.ALAYACARE.CLIENT_MATCH_LIST 
	WHERE ID NOT IN (SELECT CLIENT_ID FROM DISC_DEDUPE_PROD.ALAYACARE.CLIENT_MASTER_LIST) 
) 
),
AUDIT AS 																										-- To get Scheduled employee information from Audit table in source
(
SELECT UPDATE_TIME, VISIT_ID, EMPLOYEE_ID,
--first_value(EMPLOYEE_ID) OVER (PARTITION BY visit_id ORDER BY update_time) oldest_emp,
lead(EMPLOYEE_ID,1,0) OVER (PARTITION BY visit_id ORDER BY update_time desc) RECENT_EMP,
ROW_NUMBER() OVER (PARTITION BY VISIT_ID ORDER BY update_time desc) AS RNO
FROM DISC_PROD.ALAYACARE.AUDIT_VISIT_EMPLOYEE_CHANGE AUDIT
WHERE AUDIT.EMPLOYEE_ID <> 2 AND UPDATE_TIME < VISIT_START_TIME
QUALIFY RNO = 1			   
),
INVOICE_STATUS AS (
SELECT VISITS.VISIT_ID,
--MASTER_INVOICE_STATUS,
CASE
WHEN COUNT(CASE WHEN MASTER_INVOICE_STATUS IN (''paid'',''sent'') THEN 1 END) > 0 THEN ''BILLED''
WHEN COUNT(CASE WHEN MASTER_INVOICE_STATUS = ''void'' THEN 1 END ) > 0 THEN ''VOID''
WHEN COUNT(CASE WHEN MASTER_INVOICE_STATUS = ''deleted'' THEN 1 END ) > 0 THEN ''DELETED''
WHEN COUNT(CASE WHEN MASTER_INVOICE_STATUS = ''draft'' THEN 1 END ) > 0 THEN ''DRAFT''
--WHEN COUNT(CASE WHEN MASTER_INVOICE_STATUS IS NULL AND VISITS.IS_PAID = 1 THEN 1 END) > 0 THEN ''PAID''		-- FOR PAYROLL
WHEN COUNT(CASE WHEN MASTER_INVOICE_STATUS IS NULL AND VISITS.IS_INVOICED = 1 THEN 1 END ) > 0 THEN ''BILLED''
WHEN COUNT(CASE WHEN MASTER_INVOICE_STATUS IS NULL AND VISITS.IS_INVOICED = 0 THEN 1 END ) > 0 THEN NULL
ELSE ''UNKNOWN''
END AS INVOICE_STATUS
FROM
DISC_PROD.ALAYACARE.VISIT VISITS
LEFT JOIN  DISC_PROD.ALAYACARE.INVOICE_ITEM I ON
I.VISIT_ID = VISITS.VISIT_ID
GROUP BY VISITS.VISIT_ID
),
EVV_VISIT_EXCEPTION AS (
  SELECT 
    --E.*,
	E.ALAYACARE_VISIT_ID, 
    J.INDEX, J.VALUE,
    J.VALUE:id::number EXCEPTIONS_id,
    J.VALUE:created_on::varchar EXCEPTIONS_created_on,
    J.VALUE:code::varchar EXCEPTIONS_code,
    J.VALUE:category::varchar EXCEPTIONS_category,
    J.VALUE:name::varchar EXCEPTIONS_name,
    J.VALUE:is_acknowledged::boolean EXCEPTIONS_is_acknowledged,
    J.VALUE:status::varchar EXCEPTIONS_status,
    J.VALUE:details::varchar EXCEPTIONS_details,
    J.VALUE:comments::varchar EXCEPTIONS_comments,
    J.VALUE:reason_code::varchar EXCEPTIONS_reason_code,
    J.VALUE:reason_name::varchar EXCEPTIONS_reason_name,
    J.VALUE:reason_category::varchar EXCEPTIONS_reason_category,
    J.VALUE:resolution_code::varchar EXCEPTIONS_resolution_code,
    J.VALUE:resolution_name::varchar EXCEPTIONS_resolution_name,
    J.VALUE:change_by::varchar EXCEPTIONS_change_by,
    ROW_NUMBER() OVER (PARTITION BY ALAYACARE_VISIT_ID ORDER BY UPDATED_ON DESC) R
  FROM DISC_PROD.ALAYACARE.EVV_VISIT E,
    LATERAL FLATTEN( INPUT => EXCEPTIONS, OUTER => TRUE) J
  QUALIFY R = 1
), 
VISITS AS (
SELECT 
CASE WHEN VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_CANCELLED_CODE_ID = ''2'' THEN ''On Hold''
		WHEN VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_CANCELLED_CODE_ID IS NOT NULL 
				AND VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_CANCELLED_CODE_ID <> ''2'' THEN ''Cancelled''
		WHEN ((WORK_SESSION.START_TIME IS NOT NULL AND WORK_SESSION.END_TIME IS NOT NULL AND VISITS.EMPLOYEE_ID <> 2)
				OR (VISITS.END_AT < current_timestamp() AND VISITS.EMPLOYEE_ID <> 2 AND WORK_SESSION.START_TIME IS NULL))
			AND VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_APPROVAL_STATUS <> ''1'' THEN ''In Review''
		WHEN VISITS.END_AT < current_timestamp() AND VISITS.EMPLOYEE_ID <> 2 AND WORK_SESSION.START_TIME IS NULL THEN ''Missed''
		WHEN WORK_SESSION.START_TIME IS NOT NULL AND WORK_SESSION.END_TIME IS NOT NULL
			AND VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_CANCELLED_CODE_ID IS NULL
			AND VISITS.EMPLOYEE_ID = 2 AND OFFER.OFFER_STATUS IS NULL
			AND VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_APPROVAL_STATUS = ''1'' THEN ''Vacant - Completed''
		WHEN VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_CANCELLED_CODE_ID IS NULL
			AND VISITS.EMPLOYEE_ID = 2  
			THEN CASE WHEN OFFER.OFFER_STATUS IS NULL 
							THEN CASE WHEN VISITS.START_AT > current_timestamp() THEN ''Vacant - Future'' ELSE ''Vacant'' END
						WHEN OFFER.OFFER_STATUS = ''closed'' THEN ''Vacant - Closed'' 
						WHEN OFFER.OFFER_STATUS = ''sent'' THEN ''Vacant - Offered''
						END
		WHEN WORK_SESSION.START_TIME IS NOT NULL AND WORK_SESSION.END_TIME IS NOT NULL THEN ''Completed''
		WHEN VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_CANCELLED_CODE_ID IS NULL AND VISITS.START_AT > current_timestamp() 
		AND VISITS.EMPLOYEE_ID <> 2 THEN ''Scheduled''
		WHEN VISITS.START_AT < current_timestamp() AND VISITS.END_AT > current_timestamp() AND WORK_SESSION.START_TIME IS NULL THEN ''Late''
		WHEN WORK_SESSION.START_TIME IS NOT NULL AND WORK_SESSION.END_TIME IS NULL THEN ''Clocked In''
		ELSE ''UNKNOWN''
	END AS DERIVED_DISC_STATUS,
MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(VISITS.BRANCH_ID,-1) || '')'' || ''-'' || VISITS.VISIT_ID|| ''-'' || ''ALAYACARE'') AS VISIT_KEY,
			DATE_TRUNC (DAY, VISITS.START_AT) AS REPORT_DATE,
			MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(VISITS.BRANCH_ID,-1) || '')'' || ''-'' || NVL(TRIM(GROUPS.GROUP_ID),''Unknown'') || ''-'' || ''ALAYACARE'') AS BRANCH_KEY,
			MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(VISITS.BRANCH_ID,-1) || '')'' || ''-'' || NVL(C.MASTER_ID::INT,-1) || ''-'' || ''ALAYACARE'') AS CLIENT_KEY,
			MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(VISITS.BRANCH_ID,-1) || '')''|| ''-'' || NVL(TO_VARCHAR(SERVICES.SERVICE_FUNDER_ID), ''Unknown'') || ''-'' || NVL(TO_VARCHAR(NVL(VISITS.SERVICE_CODE_ID::INT,SERVICES.SERVICE_CODE_ID::INT)), ''Unknown'') || ''-'' || ''ALAYACARE'') AS CONTRACT_KEY, 
			MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(VISITS.BRANCH_ID,-1) || '')'' || ''-'' || NVL(E.MASTER_ID::INT,-1) || ''-'' || ''ALAYACARE'') AS EMPLOYEE_KEY,
			MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(VISITS.BRANCH_ID,-1) || '')'' || ''-'' || NVL(E1.MASTER_ID::INT,-1) || ''-'' || ''ALAYACARE'') AS SCHEDULED_EMPLOYEE_KEY,
			9 AS SOURCE_SYSTEM_ID,
			MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || B.BRANCH_ID || '')''||''-''||UPPER(TRIM(B.PROFILE_STATE)) || ''-'' || NVL(GROUPS.GROUP_ID,-1) || ''-'' || ''ALAYACARE'') AS SUPERVISOR_KEY,
			NULL AS INVOICE_KEY,
			NULL AS PAYROLL_KEY,
			NULL AS INVOICE_ID,
			NULL AS CHEQUE_NUMBER,
			DATE_TRUNC (DAY, VISITS.START_AT) AS SERVICE_DATE,
			PAYROLL_DATES.CHECK_DATE AS PAYROLL_DATE,
			NVL(UPPER(TRIM(GROUPS.PROFILE_COMPANY)), ''Unknown ('' || NVL(GROUPS.GROUP_ID, -1) || '')'') AS BRANCH_NAME,
			NVL(C.MASTER_ID,VISITS.CLIENT_ID) AS CLIENT_NUMBER, 
			NVL(TO_VARCHAR(SERVICES.SERVICE_FUNDER_ID), ''Unknown'') AS CONTRACT_CODE,
			NVL(E.MASTER_ID::INT,VISITS.EMPLOYEE_ID::INT) AS EMPLOYEE_ID,
			NVL(E1.MASTER_ID::INT,VISITS.EMPLOYEE_ID::INT) AS SCHEDULED_EMPLOYEE_ID,							-- Using Audit table
			NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(VISITS.BRANCH_ID,-1) || '')''  AS SYSTEM_CODE,
			UPPER(TRIM(B.PROFILE_STATE)) || ''-'' || NVL(GROUPS.GROUP_ID,-1) AS SUPERVISOR_CODE,							  
			--FALSE AS CLEAN_SHIFT_FLAG,
--===================================================================================
CASE 
		WHEN DERIVED_DISC_STATUS = ''Cancelled'' THEN ''s05''
		WHEN DERIVED_DISC_STATUS = ''On Hold'' THEN ''s04''
		WHEN DERIVED_DISC_STATUS IN (''Vacant'',''Vacant - Closed'',''Vacant - Completed'',''Vacant - Future'',''Vacant - Offered'') THEN ''s02''
		ELSE ''s01'' END AS SCHEDULE_STATUS_CODE,
--
	CASE 
		WHEN DERIVED_DISC_STATUS = ''Cancelled'' THEN ''Cancelled''
		WHEN DERIVED_DISC_STATUS = ''On Hold'' THEN ''Hold''
		WHEN DERIVED_DISC_STATUS IN (''Vacant'',''Vacant - Closed'',''Vacant - Completed'',''Vacant - Future'',''Vacant - Offered'') THEN ''Scheduled-Open''
		ELSE ''Scheduled'' END AS SCHEDULE_STATUS_NAME,
--
	CASE 
		WHEN DERIVED_DISC_STATUS = ''Cancelled'' THEN ''The visit was scheduled or rescheduled and then cancelled at a later date, the visit never happened and it has a Cancel Code''
		WHEN DERIVED_DISC_STATUS = ''On Hold'' THEN ''Either client service status or client admission status is on hold. The caregiver cannot clock in and out. The visit either needs to be manually confirmed or cancelled''
		WHEN DERIVED_DISC_STATUS IN (''Vacant'',''Vacant - Closed'',''Vacant - Completed'',''Vacant - Future'',''Vacant - Offered'') THEN ''The visit has no employee assigned or it is assigned to the Vacant user (employee id = 2), and is not cancelled, on hold or offered''
		ELSE ''The visit is scheduled with an employee assigned'' END AS SCHEDULE_STATUS_DESCRIPTION,
	--------------------------------------------------------------------------------------------------------------------------------------------------
	CASE
		WHEN INVOICE_STATUS.INVOICE_STATUS IN (''BILLED'') THEN ''i03''
		WHEN INVOICE_STATUS.INVOICE_STATUS IN (''VOID'',''DELETED'',''DRAFT'') OR INVOICE_STATUS.INVOICE_STATUS IS NULL THEN 
				CASE WHEN nvl(VISITS.VISIT_HOURS_BILL,0)>0 OR NVL(VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_HOURS_PAY,0)>0 THEN ''i03'' ELSE ''i02'' END
		ELSE INVOICE_STATUS.INVOICE_STATUS
	END AS INVOICE_STATUS_CODE,
	--
	CASE
		WHEN INVOICE_STATUS.INVOICE_STATUS IN (''BILLED'') THEN ''Billed''
		WHEN INVOICE_STATUS.INVOICE_STATUS in (''VOID'',''DELETED'',''DRAFT'') OR INVOICE_STATUS.INVOICE_STATUS IS NULL THEN 
				CASE WHEN nvl(VISITS.VISIT_HOURS_BILL,0)>0 OR NVL(VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_HOURS_PAY,0)>0 THEN ''Billed'' ELSE ''Unbilled'' END
	ELSE INVOICE_STATUS.INVOICE_STATUS
	END AS INVOICE_STATUS_NAME,
	--
	CASE
		WHEN INVOICE_STATUS.INVOICE_STATUS IN (''BILLED'') THEN ''The Invoice has been generated''
		WHEN INVOICE_STATUS.INVOICE_STATUS in (''VOID'',''DELETED'',''DRAFT'') OR INVOICE_STATUS.INVOICE_STATUS IS NULL THEN 
				CASE WHEN nvl(VISITS.VISIT_HOURS_BILL,0)>0 OR NVL(VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_HOURS_PAY,0)>0 THEN ''The Visit has a valid Bill or Pay amount'' ELSE ''Unbilled'' END
	ELSE INVOICE_STATUS.INVOICE_STATUS
	END AS	INVOICE_STATUS_DESCRIPTION,	
	--------------------------------------------------------------------------------------------------------------------------------------------------
	CASE 
		WHEN DERIVED_DISC_STATUS IN (''Completed'',''Vacant - Completed'') 
		OR (SCHEDULE_STATUS_NAME IN (''Scheduled'',''Scheduled-Open'') 
		AND INVOICE_STATUS_NAME = ''Billed'' AND VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_APPROVAL_STATUS = ''1'') THEN ''v04''
		WHEN DERIVED_DISC_STATUS IN (''Cancelled'',''Missed'') THEN ''v03''
		WHEN DERIVED_DISC_STATUS IN (''Scheduled'',''Vacant - Future'') THEN ''v01''
		WHEN DERIVED_DISC_STATUS IN (''Clocked In'',''In Review'',''Late'') THEN ''v02''
		WHEN DERIVED_DISC_STATUS IN (''Vacant'',''Vacant - Closed'',''Vacant - Offered'',''On Hold'') THEN NULL
		ELSE ''UNKNOWN'' END AS VISIT_STATUS_CODE,
	--
	CASE 
		WHEN DERIVED_DISC_STATUS IN (''Completed'',''Vacant - Completed'')
		OR (SCHEDULE_STATUS_NAME IN (''Scheduled'',''Scheduled-Open'') 
		AND INVOICE_STATUS_NAME = ''Billed'' AND VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_APPROVAL_STATUS = ''1'') THEN ''Completed''
		WHEN DERIVED_DISC_STATUS IN (''Cancelled'',''Missed'') THEN ''Did not happen''
		WHEN DERIVED_DISC_STATUS IN (''Scheduled'',''Vacant - Future'') THEN ''Future''
		WHEN DERIVED_DISC_STATUS IN (''Clocked In'',''In Review'',''Late'') THEN ''In Review''
		WHEN DERIVED_DISC_STATUS IN (''Vacant'',''Vacant - Closed'',''Vacant - Offered'',''On Hold'') THEN NULL
		ELSE ''UNKNOWN'' END AS VISIT_STATUS_NAME,
--
	CASE 
		WHEN DERIVED_DISC_STATUS IN (''Completed'',''Vacant - Completed'')
		OR (SCHEDULE_STATUS_NAME IN (''Scheduled'',''Scheduled-Open'') 
		AND INVOICE_STATUS_NAME = ''Billed'' AND VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_APPROVAL_STATUS = ''1'')
		THEN ''The visit has atleast one work session completed or it is billed and approved''
		WHEN DERIVED_DISC_STATUS IN (''Cancelled'',''Missed'') THEN ''The visit has a cancelled code or the visit date has passed and it has no work session recorded''
		WHEN DERIVED_DISC_STATUS IN (''Scheduled'',''Vacant - Future'') THEN ''Visit has not happened yet, the schedule is in the future and it is not cancelled or on hold either''
		WHEN DERIVED_DISC_STATUS IN (''Clocked In'',''In Review'',''Late'') THEN ''The visit date has passed and it was either missed or it was completed but errored out and needs to be reviewed by the branch staff. A visit which is clocked in and not clocked out yet or clocked in late is also considered to be in review''
		WHEN DERIVED_DISC_STATUS IN (''Vacant'',''Vacant - Closed'',''Vacant - Offered'',''On Hold'') THEN NULL
		ELSE ''UNKNOWN'' END AS VISIT_STATUS_DESCRIPTION,
---
	NULL AS PAYROLL_STATUS_CODE,
	NULL AS PAYROLL_STATUS_NAME,
	NULL AS PAYROLL_STATUS_DESCRIPTION,
--=======================================================================================================																		  
VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_CANCELLED_CODE_ID AS CANCEL_REASON_CODE,
VC.CANCEL_CODE AS CANCEL_REASON_DESCRIPTION,
NULL AS CANCEL_REASON_NOTES,
--FALSE AS EXCEPTION_REASON_INDICATOR,
NULL AS RESOLUTION_CODE,
NULL AS RESOLUTION_DESCRIPTION,
NULL AS REJECTION_CODE,
NULL AS REJECTION_DESCRIPTION,
NVL(TO_VARCHAR(NVL(VISITS.SERVICE_CODE_ID::INT, SERVICES.SERVICE_CODE_ID::INT)), ''Unknown'') AS BILL_CODE,
VISITS.START_AT AS SCHEDULE_TIMEIN,
VISITS.END_AT AS SCHEDULE_TIMEOUT,
CAST(VISITS.VISIT_SCHEDULED_DURATION AS DECIMAL(5, 2)) AS SCHEDULE_DURATION,
WORK_SESSION.START_TIME AS ACTUAL_TIMEIN,
WORK_SESSION.END_TIME AS ACTUAL_TIMEOUT,
					/* ACTUAL DURATION CAN BE TAKEN DIRECTLY FROM TABLE COMPUTED WORK SESSION BUT HAS VALUE > 100 GOING UPTO 6000 HOURS per VISIT 
																	(majority had bill_unit_type as ''visits'') SO TAKING SCHEDULED HOURS WHERE COMPUTED DURATION>999.99 
																	(For Most visits SCHEDULE DURATION is upto 99 only) */
NULL AS ADJUSTED_TIMEIN,
NULL AS ADJUSTED_TIMEOUT,
			--ADJUSTED DUR: HOURS PAID -> HOURS APPROVED:	 For Override visits, Hours Pay could have big difference compared with Hours Scheduled
IFF( VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_HOURS_PAY IS NULL,
		IFF(TRIM(VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_APPROVAL_STATUS) = ''1'', TRY_CAST(VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_HOURS_APPROVED AS DECIMAL(8, 3)), NULL),
		TRY_CAST(VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_HOURS_PAY AS DECIMAL(8, 3))
		)::DECIMAL(5, 2) AS ADJUSTED_DURATION,
ADJUSTED_DURATION AS HOURS_SERVED,
ROUND(((TIMESTAMPDIFF(S,WORK_SESSION.START_TIME,WORK_SESSION.END_TIME))/3600),2) AS DURATION,			-- RAW DURATION
IFF(VISITS.VISIT_COMPUTED_RATE_UNITS = ''hours'',CASE WHEN LEN(FLOOR(DURATION))>3 THEN SCHEDULE_DURATION ELSE DURATION END,
	ADJUSTED_DURATION) AS ACTUAL_DURATION,
------------------------------------------------
IFF( VISITS.VISIT_COMPUTED_RATE_UNITS = ''hours'',
VISITS.VISIT_COMPUTED_RATE,
(
VISITS.VISIT_COMPUTED_RATE/
	COALESCE(	
		NULLIF(VISITS.VISIT_SCHEDULED_DURATION, 0),
		NULLIF(VISITS.VISIT_HOURS_APPROVED, 0),1
		)
)
) AS BILL_RATE,
--COALESCE(VISITS.VISIT_COMPUTED_RATE_BILLITEM_ID::STRING, SERVICE_CODE_BILL_CODE.BILL_CODE_ID::STRING, '' UNKNOWN '') AS CONTRACT_BILL_CODE,
IFF(VISITS.VISIT_COMPUTED_RATE_UNITS = ''visits'', 1, HOURS_SERVED) AS BILL_UNITS_SERVED,
CASE VISITS.VISIT_COMPUTED_RATE_UNITS
WHEN ''visits'' THEN ''Visit''
WHEN ''hours'' THEN ''Hourly''
END AS BILL_UNIT_TYPE,
NULL AS OVERHEAD_RATE,
NULL AS COMMENTS,
--''Y'' AS IS_EVV_FLAG,
IFF(EVV.ALAYACARE_VISIT_ID IS NOT NULL,''Y'',''N'') AS IS_EVV_FLAG,
NULL AS TIMESHEET_TYPE,
NULL AS TRACKING_ID,
CASE WHEN visit_status_name = ''Completed''
			THEN ''YES''
		WHEN SCHEDULE_STATUS_NAME IN (''Cancelled'',''Hold'')
			THEN ''NO''
		WHEN SCHEDULE_STATUS_NAME IN (''Scheduled'',''Scheduled-Open'') AND COALESCE(VISIT_STATUS_NAME,''NULL'') <> ''Completed'' 
					AND (NVL(INVOICE_STATUS_NAME,''NULL'') = ''Unbilled'' OR (INVOICE_STATUS_NAME = ''Billed'' AND VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_APPROVAL_STATUS <> ''1''))
				THEN ''NO'' 
		ELSE ''UNKNOWN'' 
		END AS CONFIRMED_FLAG
FROM
DISC_PROD.ALAYACARE.VISIT AS VISITS
LEFT JOIN INVOICE_STATUS ON
INVOICE_STATUS.VISIT_ID = VISITS.VISIT_ID
LEFT JOIN DISC_PROD.ALAYACARE.WORK_SESSION_TIER_4 WORK_SESSION ON 
WORK_SESSION.VISIT_ID = VISITS.VISIT_ID
LEFT JOIN EVV_VISIT_EXCEPTION EVV ON 
EVV.ALAYACARE_VISIT_ID = VISITS.VISIT_ID
LEFT JOIN DISC_PROD.ALAYACARE.OFFER_RESPONSE OFFER ON 
OFFER.OFFER_GUID_TO = VISITS.GUID
LEFT JOIN EMPLOYEE E ON
VISITS.EMPLOYEE_ID = E.EMPLOYEE_ID
AND VISITS.BRANCH_ID = E.BRANCH_ID
LEFT JOIN CLIENT C ON
VISITS.CLIENT_ID = C.CLIENT_ID
AND VISITS.BRANCH_ID = C.BRANCH_ID
LEFT JOIN DISC_PROD.ALAYACARE.SERVICE AS SERVICES ON
VISITS.SERVICE_ID = SERVICES.SERVICE_ID
AND VISITS.BRANCH_ID = SERVICES.BRANCH_ID
LEFT JOIN DISC_PROD.ALAYACARE.TBL_GUID_COST_CENTRE_TIER_4 COST_CENTRE_MAPPING ON
COST_CENTRE_MAPPING.GUID_TO = C.GUID
LEFT JOIN DISC_PROD.ALAYACARE.TBL_COST_CENTRES_TIER_4 AS COST_CENTRE ON
COST_CENTRE.ID = COST_CENTRE_MAPPING.COST_CENTRE_ID
LEFT JOIN DISC_PROD.ALAYACARE.GROUPS AS GROUPS ON
GROUPS.BRANCH_ID = COST_CENTRE.PROPERTIES_BRANCH_ID
AND GROUPS.PROFILE_COMPANY = COST_CENTRE.PROPERTIES_DESCRIPTION
LEFT JOIN DISC_PROD.ALAYACARE.BRANCH B ON
VISITS.BRANCH_ID = B.BRANCH_ID
LEFT JOIN HAH.FACT_BRANCH_PAYROLL_PERIODS AS PAYROLL_DATES ON
PAYROLL_DATES.BRANCH_KEY =MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(VISITS.BRANCH_ID,-1) || '')'' || ''-'' || NVL(TRIM(GROUPS.GROUP_ID),''Unknown'') || ''-'' || ''ALAYACARE'')
AND VISITS.START_AT::DATE BETWEEN PAYROLL_DATES.PERIOD_START_DATE
AND PAYROLL_DATES.PERIOD_END_DATE
LEFT JOIN DISC_PROD.ALAYACARE.VISIT_CODE VC ON
VC.CANCEL_CODE_ID = VISITS.PROPERTIES_TBL_SCHEDULER_ITEM_CANCELLED_CODE_ID
LEFT JOIN AUDIT ON AUDIT.VISIT_ID = VISITS.VISIT_ID
LEFT JOIN EMPLOYEE E1 ON IFF(AUDIT.RECENT_EMP=0,AUDIT.EMPLOYEE_ID,AUDIT.RECENT_EMP) = E1.EMPLOYEE_ID
--WHERE HOURS_SERVED > 0																-- Removed this because previously skipped visits which had had NULL/0 hours served OR had unit type - ''visits'' (so hours served = null),
																						-- and now we''re taking all visits, irrespective of bill unit type.
) 
, FINAL AS (SELECT DATA.VISIT_KEY, DATA.SCHEDULE_STATUS_NAME, DATA.SCHEDULE_STATUS_CODE, DATA.SCHEDULE_STATUS_DESCRIPTION, DATA.VISIT_STATUS_NAME, DATA.VISIT_STATUS_CODE, 
DATA.VISIT_STATUS_DESCRIPTION, DATA.INVOICE_STATUS_NAME, DATA.INVOICE_STATUS_CODE, DATA.INVOICE_STATUS_DESCRIPTION, DATA.PAYROLL_STATUS_NAME, DATA.PAYROLL_STATUS_CODE, 
DATA.PAYROLL_STATUS_DESCRIPTION, DATA.REPORT_DATE, DATA.BRANCH_KEY, DATA.CLIENT_KEY, DATA.CONTRACT_KEY, DATA.SCHEDULED_EMPLOYEE_KEY, DATA.EMPLOYEE_KEY, DATA.SOURCE_SYSTEM_ID, 
DATA.SUPERVISOR_KEY, DATA.SERVICE_DATE, DATA.PAYROLL_DATE, DATA.BRANCH_NAME, DATA.CLIENT_NUMBER, DATA.CONTRACT_CODE, DATA.SCHEDULED_EMPLOYEE_ID, DATA.EMPLOYEE_ID, 
UPPER(DATA.SYSTEM_CODE) AS SYSTEM_CODE, DATA.SUPERVISOR_CODE,  DATA.CANCEL_REASON_CODE, DATA.CANCEL_REASON_DESCRIPTION, DATA.CANCEL_REASON_NOTES, DATA.RESOLUTION_CODE, DATA.RESOLUTION_DESCRIPTION, 
DATA.REJECTION_CODE, DATA.REJECTION_DESCRIPTION, DATA.BILL_CODE, DATA.BILL_RATE, DATA.BILL_UNITS_SERVED, DATA.BILL_UNIT_TYPE,
DATA.OVERHEAD_RATE, DATA.HOURS_SERVED, DATA.SCHEDULE_TIMEIN, DATA.SCHEDULE_TIMEOUT, DATA.SCHEDULE_DURATION, DATA.ACTUAL_TIMEIN, DATA.ACTUAL_TIMEOUT,DATA.ACTUAL_DURATION, 
DATA.ADJUSTED_TIMEIN, DATA.ADJUSTED_TIMEOUT, DATA.ADJUSTED_DURATION, DATA.COMMENTS, DATA.IS_EVV_FLAG, DATA.TIMESHEET_TYPE, DATA.TRACKING_ID, DATA.INVOICE_KEY,
DATA.PAYROLL_KEY, DATA.INVOICE_ID, DATA.CHEQUE_NUMBER, DATA.CONFIRMED_FLAG
,IFF(EXCEPTIONS.CODE IS NOT NULL, ''YES'', ''NO'') AS EXCEPTION_REASON_INDICATOR
,IFF(DATA.IS_EVV_FLAG = ''Y'' AND EXCEPTIONS.CODE IS NULL AND DATA.CONFIRMED_FLAG = ''YES'', TRUE, FALSE) AS CLEAN_SHIFT_FLAG,
-- ETL Fields
 :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
 :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
CURRENT_USER AS ETL_INSERTED_BY ,
convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
CURRENT_USER AS ETL_LAST_UPDATED_BY,
0 AS ETL_DELETED_FLAG
FROM VISITS AS DATA
LEFT JOIN HAH.FACT_SYSTEM_CUTOVER_DATE AS CUTOVER ON
CUTOVER.SOURCE_SYSTEM_ID = DATA.SOURCE_SYSTEM_ID
AND CUTOVER.SYSTEM_CODE = DATA.SYSTEM_CODE
AND NVL(CUTOVER.BRANCH_KEY, DATA.BRANCH_KEY) = DATA.BRANCH_KEY
	AND NVL(CUTOVER.CONTRACT_KEY, DATA.CONTRACT_KEY) = DATA.CONTRACT_KEY
INNER JOIN DISC_PROD.ALAYACARE.CONFIGURATION CONFIG ON
	CONFIG.SYSTEM_CODE = DATA.SYSTEM_CODE
		AND CONFIG.CONFIGURATION_ACTIVE = TRUE
		AND CONFIG.SYSTEM_CODE IS NOT NULL
LEFT JOIN (SELECT VISIT_KEY, MAX(EXCEPTION_CODE) AS CODE FROM HAH.FACT_VISIT_EXCEPTION 
			GROUP BY 1) EXCEPTIONS 
	ON EXCEPTIONS.VISIT_KEY = DATA.VISIT_KEY
	WHERE DATA.SERVICE_DATE BETWEEN NVL(CUTOVER.START_DATE, DATA.SERVICE_DATE)
AND NVL(CUTOVER.END_DATE, DATA.SERVICE_DATE))
--
SELECT DISTINCT VISIT_KEY, SCHEDULE_STATUS_NAME, SCHEDULE_STATUS_CODE, SCHEDULE_STATUS_DESCRIPTION, VISIT_STATUS_NAME, VISIT_STATUS_CODE, VISIT_STATUS_DESCRIPTION,
INVOICE_STATUS_NAME, INVOICE_STATUS_CODE, INVOICE_STATUS_DESCRIPTION, PAYROLL_STATUS_NAME, PAYROLL_STATUS_CODE, PAYROLL_STATUS_DESCRIPTION, REPORT_DATE,
BRANCH_KEY, CLIENT_KEY, CONTRACT_KEY, SCHEDULED_EMPLOYEE_KEY, EMPLOYEE_KEY, SOURCE_SYSTEM_ID, SUPERVISOR_KEY, SERVICE_DATE, PAYROLL_DATE, BRANCH_NAME,
CLIENT_NUMBER, CONTRACT_CODE, SCHEDULED_EMPLOYEE_ID, EMPLOYEE_ID, SYSTEM_CODE, SUPERVISOR_CODE, CLEAN_SHIFT_FLAG, CANCEL_REASON_CODE, CANCEL_REASON_DESCRIPTION,
CANCEL_REASON_NOTES, EXCEPTION_REASON_INDICATOR, RESOLUTION_CODE, RESOLUTION_DESCRIPTION, REJECTION_CODE, REJECTION_DESCRIPTION, BILL_CODE, BILL_RATE, BILL_UNITS_SERVED,
BILL_UNIT_TYPE, OVERHEAD_RATE, HOURS_SERVED, SCHEDULE_TIMEIN, SCHEDULE_TIMEOUT, SCHEDULE_DURATION, ACTUAL_TIMEIN, ACTUAL_TIMEOUT, ACTUAL_DURATION, ADJUSTED_TIMEIN,	
ADJUSTED_TIMEOUT, ADJUSTED_DURATION, COMMENTS, IS_EVV_FLAG, TIMESHEET_TYPE, TRACKING_ID, ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE, ETL_INSERTED_BY,
ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG, INVOICE_KEY, PAYROLL_KEY, INVOICE_ID, CHEQUE_NUMBER, CONFIRMED_FLAG
FROM FINAL; 
SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
	RETURN return_result;
    END;
    ';