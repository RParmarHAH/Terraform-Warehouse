CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_ALLIANCE_DIM_EMPLOYEE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
--*****************************************************************************************************************************
-- NAME:  ALLIANCE_DIM_EMPLOYEE
--
-- PURPOSE: Creates one row per employee according to GENERATIONS
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 07/26/2022	Mirisha Jarecha			Initial Development
-- 09/7/2023    Jainam Shah             Added CASE Condition for Join of keys[SOCIALSECURITYNUM & PAYCHEXID] ADPAlliance and GeneralAlliance and added nullif for blanks where required
-- 11/10/2023   Shikhar Saxena			Updated employee ethnicity logic and added HISPANIC_OR_LATINO column
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.ALLIANCE_DIM_EMPLOYEE
SELECT DISTINCT
	MD5(''ALLIANCE'' || ''-'' || EMP.MASTER_ID  || ''-'' || ''GENERATIONS'') AS EMPLOYEE_KEY,
	EMP.MASTER_ID AS EMPLOYEE_ID,
	''ALLIANCE'' AS SYSTEM_CODE,
	 19 AS SOURCE_SYSTEM_ID,
	 CASE
     WHEN LENGTH(NULLIF(REGEXP_REPLACE(TRIM(EMP.SOCIALSECURITYNUM),''\\-|\\\\\\\\s|\\\\\\\\\\\\\\\\|[A-Z]''),'''')) = 9
     AND NULLIF(REGEXP_REPLACE(TRIM(EMP.SOCIALSECURITYNUM),''\\-|\\\\\\\\s|\\\\\\\\\\\\\\\\|[A-Z]''),'''') NOT IN (SELECT SSN FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_SSN)
     THEN HEX_ENCODE(NULLIF(REGEXP_REPLACE(TRIM(EMP.SOCIALSECURITYNUM),''\\-|\\\\\\\\s|\\\\\\\\\\\\\\\\|[A-Z]''),''''))
     ELSE NULL
    END AS EMPLOYEE_PID,
	RHD.EMPLOYEE_NUMBER AS EMPLOYEE_NUMBER,
	TO_DATE(TRIM(EMP.DATEOFBIRTH))  AS EMPLOYEE_DOB,
	NULL AS EMPLOYEE_DATE_OF_DEATH,
	COALESCE(TRY_TO_DATE(TRIM(rhd.EMPLOYEE_HIRE_DATE)),TRY_TO_DATE(TRIM(EMP.ACA_STARTDATE))) AS EMPLOYEE_HIRE_DATE, 
	TRY_TO_DATE(TRIM(rhd.EMPLOYEE_REHIRE_DATE)) AS EMPLOYEE_REHIRE_DATE,
	COALESCE( EMPLOYEE_REHIRE_DATE, EMPLOYEE_HIRE_DATE) AS EMPLOYEE_BENEFIT_START_DATE, 
	RHD.FIRST_CHECK_DATE AS EMPLOYEE_FIRST_CHECK_DATE, -- NEED TO DERIVE AFTER PAYROLL IS DISCUSSED
	RHD. LAST_CHECK_DATE AS EMPLOYEE_LAST_CHECK_DATE, -- NEED TO DERIVE AFTER PAYROLL IS DISCUSSED
	NULL AS EMPLOYEE_LAST_WORKED_DATE,
	 TRY_TO_DATE(TRIM(RHD.EMPLOYEE_TERMINATE_DATE))AS EMPLOYEE_TERMINATE_DATE,
	TRIM(EMP.STR_REASON) AS REASON_TO_TERMINATE, 
    CASE
		WHEN EMP.STATUS=''A'' THEN TRUE
        WHEN EMP.STATUS=''I'' THEN FALSE
		ELSE NULL
	END AS ACTIVE_EMPLOYEE_FLAG, 
	 CASE
		WHEN EMP.DONOTREHIRE=''TRUE'' THEN FALSE
        WHEN EMP.DONOTREHIRE=''FALSE'' THEN TRUE
		ELSE NULL
	 END AS ABLE_TO_REHIRE_FLAG,  --need to confirm
	NULL AS EMPLOYEE_PREFIX,
	UPPER(TRIM(EMP.FIRSTNAME)) AS EMPLOYEE_FIRST_NAME,
	UPPER(TRIM(EMP.MIDDLEINIT)) AS EMPLOYEE_MIDDLE_NAME,
	UPPER(TRIM(EMP.LASTNAME)) AS EMPLOYEE_LAST_NAME,
	NULL AS EMPLOYEE_SUFFIX,
	NULLIF(TRIM(EMP.ADDRESS1),'''') AS EMPLOYEE_ADDRESS1,
	NULLIF(TRIM(EMP.ADDRESS2),'''') AS EMPLOYEE_ADDRESS2,
	NULLIF(TRIM(EMP.CITY),'''') AS EMPLOYEE_CITY,
	NULLIF(COALESCE(UPPER(TRIM(EMP.STATE)),UPPER(TRIM(RHD.PRIMARY_BRANCH_STATE))),'''') AS EMPLOYEE_STATE_CODE, 
	NULLIF(TRIM(EMP.ZIP),'''') AS EMPLOYEE_ZIP,
	 NULLIF(LEFT(REGEXP_REPLACE(EMP.PHONE1,''[^[:digit:]]'', ''''),10),'''') AS EMPLOYEE_HOME_PHONE,
     NULLIF(LEFT(REGEXP_REPLACE(EMP.PHONE2,''[^[:digit:]]'', ''''),10),'''') AS EMPLOYEE_CELL_PHONE,
	NULL AS EMPLOYEE_WORK_PHONE,
	TRIM(EMP.EMAIL) AS EMPLOYEE_PERSONAL_EMAIL,
	NULL AS EMPLOYEE_WORK_EMAIL,
	NULL AS LINKED_IN_PROFILE_URL,
	UPPER(TRIM(EMP.STR_GENDER)) AS EMPLOYEE_GENDER,
	NULL AS EMPLOYEE_ETHNICITY,
	FALSE AS HISPANIC_OR_LATINO,
	NULL AS EMPLOYEE_LANGUAGE,
	NULL AS EMPLOYEE_MARITAL_STATUS,
	UPPER(TRIM(RHD.EMPLOYEE_CATEGORY)) AS EMPLOYEE_TYPE,
    CASE WHEN CLA.DESCRIPTION ILIKE ''%ADM%'' THEN ''ADMIN''
    WHEN EMP.CLASSIFICATIONID IN (''1'',''2'',''3'',''4'',''5'',''6'',''7'',''8'',''9'',''10'',''11'',
    ''12'',''13'',''14'',''15'') THEN ''FIELD''
    ELSE NULL END AS EMPLOYEE_CATEGORY, 
	RHD.EXEMPT_FLAG AS EXEMPT_FLAG,
	TRIM(RHD.JOB_TITLE) AS JOB_TITLE,
	NULL AS JOB_DESCRIPTION, 
	TRIM(CLA.DESCRIPTION) AS CLASS_ID,
	CASE WHEN TRIM(RHD.WORKERS_COMP) ILIKE ''%8832%'' THEN ''8832 - N/Assistant''
    ELSE TRIM(RHD.WORKERS_COMP) END AS WORKERS_COMP,
	EMP."PAYCHEXID" AS PAYROLL_ID,
	NULL AS PERCENT_401K_DEDUCTION,
	NULL AS AMOUNT_401K_DEDUCTION,
	NULL AS JAZZHR_APPLICANT_ID,
	NULL AS JAZZHR_USER_ID,
	NULL AS JAZZHR_CONTACT_ID,
	COALESCE(UPPER(TRIM(EMP.STATE)),UPPER(TRIM(RHD.PRIMARY_BRANCH_STATE))) AS WORK_STATE, 
	NULL AS SUTA_STATE,
	NULL AS EMPLOYEE_DEPARTMENT,
	NULL AS EMPLOYEE_OFFICE_CODE,
	MD5(''ALLIANCE'' || ''-'' || TRIM(BM.LOCATION_ID) || ''-'' || ''GENERATIONS'') AS PRIMARY_BRANCH_KEY,
	UPPER(TRIM(BM.STATE_CODE)) AS PRIMARY_BRANCH_STATE,
    TRIM(BM.NAME) AS PRIMARY_BRANCH_NAME,
	''ALLIANCE'' AS PRIMARY_BRANCH_SYSTEM_CODE,
	NULL AS CASE_MANAGER_FLAG,
	NULL AS SUPERVISOR_FLAG,
	NULL AS COORDINATOR_FLAG,
	EMP.FIRSTVACCINEDATE AS COVIDVACCINESTEP1,
    EMP.SECONDVACCINEDATE  AS COVIDVACCINESTEP2,
    EMP.THIRDVACCINEDATE AS COVIDBOOSTERDOSE,
	TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
	TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
	NULL AS MDM_DIM_EMPLOYEE_KEY,
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
	,CURRENT_USER AS ETL_INSERTED_BY
	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_UPDATED_DATE
	,CURRENT_USER AS ETL_LAST_UPDATED_BY
	,FALSE AS ETL_DELETED_FLAG
	,FALSE as ETL_INFERRED_MEMBER_FLAG
    ,NULL AS LINKED_ID
 FROM DISC_DEDUPE_PROD.GENERATIONSALLIANCE.EMPLOYEE_MASTER_LIST EMP
LEFT OUTER JOIN DISC_PROD.ADP.ALLIANCE_EMPLOYEE rhd ON CASE WHEN EMP.SOCIALSECURITYNUM <> rhd.EMPLOYEE_SSN THEN EMP."PAYCHEXID" = rhd."EMPLOYEE_NUMBER"::string ELSE EMP.SOCIALSECURITYNUM = rhd.EMPLOYEE_SSN END
LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.CLASSIFICATION CLA ON EMP.CLASSIFICATIONID = CLA.CLASSIFICATIONID
LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.VW_BRANCH_MAPPING BM ON BM.LOCATION_ID = EMP.CLASSNAME;
RETURN ''SUCCESS'';
END;
';