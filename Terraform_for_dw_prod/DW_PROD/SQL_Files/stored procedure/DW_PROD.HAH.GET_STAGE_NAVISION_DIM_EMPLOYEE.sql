CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_NAVISION_DIM_EMPLOYEE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN

--*****************************************************************************************************************************
-- NAME: NAVISION_DIM_EMPLOYEE
--
-- PURPOSE: Creates one row per EMPLOYEE as per Navision
--
-- DEVELOPMENT LOG:
	
-- DATE        AUTHOR                				NOTES:
-- --------    -------------------------------   	--------------------------------------------------------------------------
-- 10/12/22    Aditya Shukla / Jigar Prajapati      Initial development
-- 02/22/23    Abhishek Sunil						Cleaned up Phone Numbers
-- 10/03/2023  Trushali Ramoliya                    Added a logic for HISPANIC_OR_LATINO and update the logic for ethnicity as per ticket - IDDOX- 388.
-- 12/13/2023  Saurav Purohit						Added Acquired System field
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.NAVISION_DIM_EMPLOYEE

WITH EMPLOYEE_CHECK_DATES AS (
	SELECT DISTINCT 
		PLE.EMPLOYEE_NO_, 
		MIN(CLE.CHECK_DATE) AS FIRST_CHECK_DATE, 
		MAX(CLE.CHECK_DATE) AS LAST_CHECK_DATE
	FROM DISC_PROD.NAVISION.CHECK_LEDGER_ENTRY CLE
	LEFT JOIN disc_PROD.NAVISION.PAYROLL_LEDGER_ENTRY PLE 
		ON PLE.CHECK_NO_ = CLE.CHECK_NO_
	GROUP BY 1
),
EMPLOYEE_CATEGORY AS (
	SELECT DISTINCT EMPLOYEE_NO_,
	CASE WHEN CHECK_NO_ LIKE ''ADM%''
		THEN ''ADMIN''
		ELSE NULL
	END AS EMP_CATEGORY
	FROM DISC_PROD.NAVISION.PAYROLL_LEDGER_ENTRY
),
EMP_CAT AS (
	SELECT EMPLOYEE_NO_, COUNT(EMPLOYEE_NO_) AS CE 
	FROM EMPLOYEE_CATEGORY 
	GROUP BY 1
)--SELECT * FROM EMP_CAT;
, EMP_CATEGORY AS (
	SELECT DISTINCT EMP_CAT.EMPLOYEE_NO_, 
	CASE WHEN PLE.CHECK_NO_ LIKE ''ADM%''
		THEN ''ADMIN'' 
		ELSE ''FIELD'' 
	END AS CATEGORY
	FROM EMP_CAT 
	LEFT JOIN DISC_PROD.NAVISION.PAYROLL_LEDGER_ENTRY PLE
		ON PLE.EMPLOYEE_NO_ = EMP_CAT.EMPLOYEE_NO_
	WHERE CE = 1
), --SELECT * FROM EMP_CATEGORY
SERVICE_PAY AS (
	SELECT DISTINCT EMPLOYEE_NO_, CHECK_NO_, SUM(AMOUNT_ON_PAY_CHECK) AS SERV_AMT, PAY_DATE::DATE AS PAY_DATE
	FROM DISC_PROD.NAVISION.PAYROLL_LEDGER_ENTRY PLE
	WHERE PAYROLL_CONTROL_NAME LIKE ''Regular%'' OR PAYROLL_CONTROL_NAME LIKE ''Salary''
	GROUP BY 1, 2, 4
),
SERVICE_HOURS AS (
	SELECT DISTINCT EMPLOYEE_NO_, CHECK_NO_, AMOUNT AS SRV_HRS, PAY_DATE::DATE AS PAY_DATE
	FROM DISC_PROD.NAVISION.PAYROLL_LEDGER_ENTRY PLE
	WHERE PAYROLL_CONTROL_NAME LIKE ''Regular Hours''
),
SALARY_RATES AS (
	SELECT DISTINCT 
		ROW_NUMBER() OVER (PARTITION BY SP.EMPLOYEE_NO_ ORDER BY SP.PAY_DATE DESC) AS RANK,
		TRIM(SP.EMPLOYEE_NO_) AS ID,
		(SP.SERV_AMT / SH.SRV_HRS) AS PAY_RATE,
		(SP.SERV_AMT / SH.SRV_HRS)*52*40 AS SALARY
	FROM SERVICE_PAY SP
	LEFT JOIN SERVICE_HOURS SH
		ON TRIM(SP.EMPLOYEE_NO_) = TRIM(SH.EMPLOYEE_NO_) AND TRIM(SP.CHECK_NO_) = TRIM(SH.CHECK_NO_)
	QUALIFY RANK = 1
) -- SELECT * FROM SALARY_RATES;
SELECT DISTINCT 
	MD5(''NAVISION'' || ''-'' || MASTER_ID || ''-'' || ''NAVISION'') AS EMPLOYEE_KEY,
	MASTER_ID AS EMPLOYEE_ID,
	''NAVISION'' AS SYSTEM_CODE,
	21 AS SOURCE_SYSTEM_ID, 
	HEX_ENCODE(REPLACE(SOCIAL_SECURITY_NO_, ''-'')) AS EMPLOYEE_PID,
	TRY_TO_NUMBER(MASTER_ID) AS EMPLOYEE_NUMBER,
	BIRTH_DATE::DATE AS EMPLOYEE_DOB,
	NULL::DATE AS EMPLOYEE_DATE_OF_DEATH,
	CASE WHEN ORIGINAL_HIRE_DATE >= CAST(''1960-01-01'' AS DATE) AND ORIGINAL_HIRE_DATE <= DATEADD( YEAR, +1, CURRENT_DATE) AND ORIGINAL_HIRE_DATE >= DATEADD( YEAR, 12, NVL(BIRTH_DATE::DATE, CAST(''1948-01-01'' AS DATE))) 
	THEN ORIGINAL_HIRE_DATE
		ELSE NULL
	END AS EMPLOYEE_HIRE_DATE,
	CASE WHEN 
		REHIRE_DATE > ORIGINAL_HIRE_DATE THEN REHIRE_DATE::DATE 
		ELSE NULL 
	END AS EMPLOYEE_REHIRE_DATE,
	NULL::DATE AS EMPLOYEE_BENEFIT_START_DATE,
	CD.FIRST_CHECK_DATE::DATE AS EMPLOYEE_FIRST_CHECK_DATE,
	CD.LAST_CHECK_DATE::DATE AS EMPLOYEE_LAST_CHECK_DATE,
	CASE WHEN TERMINATION_DATE::DATE >= CAST(''1900-01-01'' AS DATE) AND TERMINATION_DATE > ORIGINAL_HIRE_DATE AND TERMINATION_DATE >= NVL(ORIGINAL_HIRE_DATE, CAST(''1900-01-01'' AS DATE)) 
		THEN TERMINATION_DATE::DATE 
	END AS EMPLOYEE_LAST_WORKED_DATE,
	CASE WHEN TERMINATION_DATE::DATE >= CAST(''1900-01-01'' AS DATE) AND TERMINATION_DATE > ORIGINAL_HIRE_DATE AND TERMINATION_DATE >= NVL(ORIGINAL_HIRE_DATE, CAST(''1900-01-01'' AS DATE)) 
		THEN TERMINATION_DATE::DATE 
	END AS EMPLOYEE_TERMINATE_DATE,
	NULL AS REASON_TO_TERMINATE,
	CASE 
		WHEN TERMINATION_DATE::DATE >= CAST(''1900-01-01'' AS DATE)
		THEN FALSE
		WHEN TERMINATION_DATE = ''1753-01-01 00:00:00.000'' THEN FALSE
		ELSE NULL
	END AS ACTIVE_EMPLOYEE_FLAG,
	NULL::BOOLEAN AS ABLE_TO_REHIRE_FLAG,
	NULL AS EMPLOYEE_PREFIX,
	UPPER(TRIM(FIRST_NAME)) AS EMPLOYEE_FIRST_NAME,
	UPPER(TRIM(MIDDLE_NAME)) AS EMPLOYEE_MIDDLE_NAME,
	UPPER(TRIM(LAST_NAME)) AS EMPLOYEE_LAST_NAME,
	NULL AS EMPLOYEE_SUFFIX,
	TRIM(EMP.ADDRESS) AS EMPLOYEE_ADDRESS1,
	TRIM(ADDRESS_2) AS EMPLOYEE_ADDRESS2,
	EMP.CITY AS EMPLOYEE_CITY,
	CASE WHEN COUNTY = ''Ohio'' THEN ''OH''
		WHEN COUNTY = ''Oregon'' THEN ''OR''
		WHEN COUNTY = ''Iowa'' THEN ''IA''
		WHEN COUNTY = ''INL'' THEN NULL
		ELSE COUNTY 
	END AS EMPLOYEE_STATE_CODE,
	POST_CODE AS EMPLOYEE_ZIP,
--	REPLACE(HOME_PHONE_NO_, ''-'') AS EMPLOYEE_HOME_PHONE,
--	REPLACE(MOBILE_PHONE_NO_, ''-'') AS EMPLOYEE_CELL_PHONE,
--	REPLACE(PHONE_NO_, ''-'') AS EMPLOYEE_WORK_PHONE,
	DW_PROD."STAGE".PHONE_CLEANUP(HOME_PHONE_NO_) AS EMPLOYEE_HOME_PHONE,
	DW_PROD."STAGE".PHONE_CLEANUP(MOBILE_PHONE_NO_) AS EMPLOYEE_CELL_PHONE,
	DW_PROD."STAGE".PHONE_CLEANUP(PHONE_NO_) AS EMPLOYEE_WORK_PHONE,
	EMP.EMAIL AS EMPLOYEE_PERSONAL_EMAIL,
	NULL AS EMPLOYEE_WORK_EMAIL,
	NULL AS LINKED_IN_PROFILE_URL,
	CASE WHEN GENDER = 1 THEN ''FEMALE''
		WHEN GENDER = 2 THEN ''MALE''
		ELSE NULL
	END AS EMPLOYEE_GENDER,
	TRIM(UPPER(
	CASE WHEN race ILIKE ANY (''%BLACK%'',''%African American%'') THEN ''Black or African American''
	WHEN race ILIKE ANY (''%AMERICAN INDIAN%'',''%Alaska Native%'',''AMER. INDI%'') THEN ''American Indian or Alaska Native''
	WHEN race ILIKE ANY (''%PACIFIC ISLANDER%'',''%Native Hawaiian%'',''HAWAIIAN%'') THEN ''Native Hawaiian or Other Pacific Islander''
	WHEN race ILIKE ANY (''%TWO OR MORE RACES%'',''%MULTIPLE%'') THEN ''TWO OR MORE''
	WHEN race ILIKE ANY (''%HISPANIC%'',''%LATINO%'') THEN NULL
	WHEN race ILIKE ANY (''%NOT APPLICABLE%'',''%NO ANSWER%'') OR LENGTH (TRIM(race)) = 1  THEN ''UNKNOWN'' 
	WHEN  LENGTH(REGEXP_REPLACE(TRIM(race),''[^[:digit:]$]'')) > 0 THEN NULL 
	ELSE TRIM(UPPER(race)) END )) AS EMPLOYEE_ETHNICITY,
	IFF(UPPER(TRIM(race)) ILIKE ANY(''HISPANIC%'',''LATINO%'',''HISPANIC OR LATINO%''), TRUE, FALSE) AS HISPANIC_OR_LATINO,
	NULL AS EMPLOYEE_LANGUAGE,
	NULL AS EMPLOYEE_MARITAL_STATUS,
	EMPLOYEE_TYPE AS EMPLOYEE_TYPE,
	EC.CATEGORY AS EMPLOYEE_CATEGORY,
	NULL::BOOLEAN AS EXEMPT_FLAG,
	JOB_TITLE AS JOB_TITLE,
	NULL AS JOB_DESCRIPTION,
	CLASS_CODE AS CLASS_ID,
	NULL AS WORKERS_COMP,
	NULL AS PAYROLL_ID,
	NULL AS PERCENT_401K_DEDUCTION,
	NULL AS AMOUNT_401K_DEDUCTION,
	NULL AS JAZZHR_APPLICANT_ID,
	NULL AS JAZZHR_USER_ID,
	NULL AS JAZZHR_CONTACT_ID,
	BM.STATE AS WORK_STATE,
	NULL AS SUTA_STATE,
	NULL AS EMPLOYEE_DEPARTMENT,
	BM.CODE AS EMPLOYEE_OFFICE_CODE,
	MD5(''NAVISION'' || ''-'' || BM.BRANCH_CODE || BM.BRANCH_NAME || ''-'' || ''NAVISION'') AS PRIMARY_BRANCH_KEY,
	''IL'' AS PRIMARY_BRANCH_STATE,
	UPPER(TRIM(BM.BRANCH_NAME)) AS PRIMARY_BRANCH_NAME,
	NULL AS PRIMARY_BRANCH_SYSTEM_CODE,
	NULL::BOOLEAN AS CASE_MANAGER_FLAG,
	NULL::BOOLEAN AS SUPERVISOR_FLAG,
	NULL::BOOLEAN AS COORDINATOR_FLAG,
	NULL AS LINKED_ID,
	HEX_ENCODE(SR.SALARY) AS SALARY,
	HEX_ENCODE(SR.PAY_RATE) AS PAY_RATE,
	IFF(ORIGINAL_HIRE_DATE IS NULL, IFF(FIRST_CHECK_DATE IS NULL, CAST(''1900-01-01'' AS DATE), FIRST_CHECK_DATE), ORIGINAL_HIRE_DATE)::TIMESTAMP_NTZ(9) AS EFFECTIVE_FROM_DATE,
	CASE WHEN TERMINATION_DATE::DATE > IFF(ORIGINAL_HIRE_DATE IS NULL, IFF(FIRST_CHECK_DATE IS NULL, CAST(''1900-01-01'' AS DATE), FIRST_CHECK_DATE), ORIGINAL_HIRE_DATE)::DATE
		THEN IFF(TERMINATION_DATE IS NULL, IFF(LAST_CHECK_DATE IS NULL, CAST(''9999-12-31'' AS DATE), LAST_CHECK_DATE), TERMINATION_DATE)::TIMESTAMP_NTZ(9) 
		ELSE ''9999-12-31''::TIMESTAMP_NTZ(9)
	END AS EFFECTIVE_TO_DATE,
	NULL AS MDM_DIM_EMPLOYEE_KEY,
		-1 AS ETL_TASK_KEY,
		-1 AS ETL_INSERTED_TASK_KEY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_INSERTED_DATE,
		CURRENT_USER AS ETL_INSERTED_BY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_LAST_UPDATED_DATE,
		CURRENT_USER AS ETL_LAST_UPDATED_BY,
		FALSE AS ETL_DELETED_FLAG,
		FALSE AS ETL_INFERRED_MEMBER_FLAG,
		''CCSI'' AS ACQUIRED_SYSTEM
FROM DISC_DEDUPE_PROD.NAVISION.EMPLOYEE_MASTER_LIST EMP
LEFT JOIN EMPLOYEE_CHECK_DATES CD
	ON EMP.MASTER_ID = CD.EMPLOYEE_NO_
LEFT JOIN DISC_PROD.NAVISION.BRANCH_MAPPING BM
	ON BM.BRANCH_CODE = LEFT(EMP.MASTER_ID, 3)
LEFT JOIN EMP_CATEGORY EC
	ON EC.EMPLOYEE_NO_ = EMP.MASTER_ID
LEFT JOIN SALARY_RATES SR
	ON SR.ID = EMP.MASTER_ID;
END;
';