CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_OPENSYSTEMS_DIM_VISIT_STATUS_MAPPING("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
Begin
--*****************************************************************************************************************************
-- NAME:  OPENSYSTEMS_DIM_VISIT_STATUS_MAPPING
--
-- PURPOSE: Creates one row per VISIT_STATUS according to OPENSYSTEM
--
-- DEVELOPMENT LOG:
-- DATE        	AUTHOR                	NOTES:
-- --------    	-------------------   	-----------------------------------------------------------------------------------------------
-- 11/09/2022	Jashvant Patel     		Initial development
-- 09/01/2024   Harshala Kadam			Updated VISIT_STATUS logic
--***************************************************************************************************************************
INSERT OVERWRITE INTO DW_PROD.STAGE.OPENSYSTEMS_DIM_VISIT_STATUS_MAPPING
WITH RESCHEDULE AS 
(
	WITH CTE AS
	(
		SELECT PATIENTID,VISITDATE, ISMISSEDVISIT  
		FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLVISITS_REPL 
		WHERE DELETED =TRUE
		GROUP BY 1,2,3
	)
	SELECT VR.VISITID  
	FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLVISITS_REPL VR JOIN  CTE D
	     ON D.PATIENTID = VR.PATIENTID AND VR.VISITDATE = D.VISITDATE
	WHERE DELETED =FALSE
)
,CTE AS(
    	SELECT DISTINCT -- VISITS.VISITID ,
    	     17 AS SOURCE_SYSTEM_ID
        ,	    CONCAT(''OPENSYSTEMS - '', O.STATE) AS SYSTEM_CODE
        ,  CASE
               WHEN VR.ISMISSEDVISIT = 1 AND  ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%'')) THEN ''Cancelled NotBilllable''
                WHEN (VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE()) THEN ''Cancelled''
                WHEN  R.VISITID IS NOT NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
                AND VR."VISITENDTIME" IS NOT NULL AND VR.BILLED = 1 AND NVL(INVOICE.visitpaymentstatus,0) IN (0,1,2) THEN ''Rescheduled Completed Billed''
                WHEN  R.VISITID IS NOT NULL AND ((VR.BILLED = 1 AND INVOICE.visitpaymentstatus = ''0'') OR (INVOICE.visitpaymentstatus IN (''1'',''2''))) THEN ''Rescheduled Billed''
                WHEN (VR.VISITDATE::DATE > GETDATE() OR R.VISITID IS NULL ) AND (VR.VISITDATE::DATE > GETDATE()) AND ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%'')) THEN ''Scheduled Future NotBilled''
                WHEN  R.VISITID IS NOT NULL AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
                AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%''))  THEN  ''Rescheduled In review NotBillable''
                WHEN  R.VISITID IS NOT NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
                AND VR."VISITENDTIME" IS NOT NULL AND ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%''))  THEN  ''Rescheduled Completed NotBillable''
                WHEN  R.VISITID IS NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
                AND VR."VISITENDTIME" IS NOT NULL AND VR.BILLED = 1 AND NVL(INVOICE.visitpaymentstatus,0) IN (0,1,2) THEN ''Scheduled Completed billed'' 
                WHEN  R.VISITID IS NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
                AND VR."VISITENDTIME" IS NOT NULL AND ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%'')) THEN ''Scheduled Completed NotBilled''
                WHEN  R.VISITID IS NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
                AND VR."VISITENDTIME" IS NOT NULL AND VR.BILLED = 0 THEN ''Scheduled Completed Unbilled''
                WHEN  R.VISITID IS NULL AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
                AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL )AND ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%''))THEN ''Scheduled In review NotBilled''
                WHEN  R.VISITID IS NULL AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
                AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND VR.BILLED = 1 AND NVL(INVOICE.visitpaymentstatus,0) IN (0,1,2) THEN ''Scheduled In review Billed''
                WHEN (VR.VISITDATE::DATE > GETDATE() OR R.VISITID IS NULL )  THEN ''Scheduled Future''
         END    AS DERIVED_DISC_STATUS
 ---------=====SCHEDULE STATUS=========
         , CASE WHEN (VR.VISITDATE::DATE > GETDATE())   THEN ''s01''
               WHEN (VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE()) THEN ''s05''
               WHEN VISITS.ONHOLDVISIT = TRUE THEN ''s04''
               WHEN R.VISITID IS NOT NULL THEN ''s03''
               WHEN R.VISITID IS NULL  THEN ''s01''
        END AS SCHEDULE_STATUS_CODE
         ,  CASE WHEN (VR.VISITDATE::DATE > GETDATE())   THEN ''Scheduled''
               WHEN (VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE()) THEN ''Cancelled''
               WHEN VISITS.ONHOLDVISIT = TRUE THEN ''Hold''
               WHEN R.VISITID IS NOT NULL THEN ''Rescheduled''
               WHEN R.VISITID IS NULL  THEN ''Scheduled''
        END AS SCHEDULE_STATUS_NAME
        ,CASE WHEN (VR.VISITDATE::DATE > GETDATE())   THEN ''Scheduled''
               WHEN (VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE()) THEN ''Cancelled''
               WHEN VISITS.ONHOLDVISIT = TRUE THEN ''Hold''
               WHEN R.VISITID IS NOT NULL THEN ''Rescheduled''
               WHEN R.VISITID IS NULL  THEN ''Scheduled''
        END AS SCHEDULE_STATUS_DESCRIPTION
---------=====VISIT STATUS=========
       ,  CASE WHEN VR.VISITDATE::DATE > GETDATE() THEN ''v01''
              WHEN VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
              AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) THEN ''v02''
              WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
              AND VR."VISITENDTIME" IS NOT NULL THEN ''v04'' 
              WHEN VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE() THEN ''v03''  
                        ELSE NULL END AS VISIT_STATUS_CODE
         , CASE WHEN VR.VISITDATE::DATE > GETDATE() THEN ''Future'' 
            WHEN VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
            AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) THEN ''In Review''
           WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
            AND VR."VISITENDTIME" IS NOT NULL THEN ''Completed'' 
            WHEN VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE() THEN ''Did not happen''  
                        ELSE NULL END AS VISIT_STATUS_NAME
            , CASE WHEN VR.VISITDATE::DATE > GETDATE() THEN ''Future''
            WHEN VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
            AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) THEN ''In Review''
            WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
            AND VR."VISITENDTIME" IS NOT NULL THEN ''Completed'' 
               WHEN VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE() THEN ''Did not happen''  
                        ELSE NULL END AS VISIT_STATUS_DESCRIPTION
---------=====INVOICE STATUS=========
     , CASE WHEN VR.BILLED = 1 AND NVL(INVOICE.visitpaymentstatus,0) IN (0,1,2) THEN ''i03''
        	   WHEN (VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%'') THEN ''i01''
        	   ELSE NULL END AS INVOICE_STATUS_CODE
        , CASE WHEN VR.BILLED = 1 AND NVL(INVOICE.visitpaymentstatus,0) IN (0,1,2) THEN ''Billed''
        	   WHEN (VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%'') THEN ''Not Billable''
        	   ELSE NULL END AS INVOICE_STATUS_NAME
        , CASE WHEN VR.BILLED = 1 AND NVL(INVOICE.visitpaymentstatus,0) IN (0,1,2) THEN ''Billed'' 
        	   WHEN (VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%'') THEN ''Not Billable''
        	   ELSE NULL END AS INVOICE_STATUS_DESCRIPTION
---------=====PAYROLL STATUS=========
        , NULL AS PAYROLL_STATUS_CODE
        , NULL AS PAYROLL_STATUS_NAME
        , NULL AS PAYROLL_STATUS_DESCRIPTION      
       , O.STATE
FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.VISITINFO_REPL VISITS
JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLVISITS_REPL VR 
    ON VISITS.VISITID = VR.VISITID
        AND VISITS.AGENCYID = VR.AGENCYID
JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.VISITS V ON VISITS.VISITID = V.VISITID 
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLINVOICEDETAILS_REPL INVOICE 
    ON VISITS.VISITID = INVOICE.VISITID
        AND VISITS.PRIMARYSERVICECODEID = INVOICE.INVSERVICECODEID
JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.OFFICE_OFFICES_REPL  O 
    ON O.OfficeID = VISITS.OfficeID
LEFT JOIN RESCHEDULE R ON VISITS.VISITID = R.VISITID
--WHERE O.STATE IN (''PA'')
)
SELECT DISTINCT MD5(SYSTEM_CODE ||''-'' || NVL(DERIVED_DISC_STATUS,''S'') || ''-'' || ''HHAEXCHANGE'') AS VISIT_STATUS_KEY,
SOURCE_SYSTEM_ID,
SYSTEM_CODE,
DERIVED_DISC_STATUS,
NULL AS DISC_SCHEDULE_STATUS,
NULL AS DISC_VISIT_STATUS,
NULL AS DISC_INVOICE_STATUS,
NULL AS DISC_PAYROLL_STATUS,
SCHEDULE_STATUS_CODE,
SCHEDULE_STATUS_NAME,
SCHEDULE_STATUS_DESCRIPTION,
VISIT_STATUS_CODE,
VISIT_STATUS_NAME,
VISIT_STATUS_DESCRIPTION,
INVOICE_STATUS_CODE,
INVOICE_STATUS_NAME,
INVOICE_STATUS_DESCRIPTION,
PAYROLL_STATUS_CODE,
PAYROLL_STATUS_NAME,
PAYROLL_STATUS_DESCRIPTION,
CASE WHEN DERIVED_DISC_STATUS IN (''Rescheduled Completed Billed'',''Rescheduled Completed NotBillable'',''Scheduled Completed billed'',''Scheduled Completed NotBilled'')
     THEN ''YES''
     WHEN DERIVED_DISC_STATUS IN (''Cancelled'',''Scheduled In review Billed'',''Scheduled In review NotBilled'',''Scheduled Future NotBilled'',''Rescheduled In review NotBillable'',''Cancelled NotBilllable'') OR DERIVED_DISC_STATUS IS NULL
     THEN ''NO'' ELSE ''UNKNOWN'' END AS CONFIRMED_FLAG,
NULL AS CONSISTENT_FLAG FROM CTE C
ORDER BY 3,4;
RETURN ''SUCCESS'';
end;
';