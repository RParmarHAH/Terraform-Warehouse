CREATE OR REPLACE PROCEDURE DW_PROD.REPORT.GET_REPORT_COVID_19_NEW_REFERRALS("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
 DECLARE
  RETURN_RESULT VARCHAR(1000);
BEGIN       
    INSERT OVERWRITE INTO REPORT.COVID_19_NEW_REFERRALS
	(STATE, OFFICE_NUMBER, OFFICE_NAME, BRANCH_KEY, CLIENT_KEY, CLIENT_NUMBER, CLIENT_NAME, "YEAR", "MONTH", PERIOD_BEGIN_DATE, PERIOD_NAME, IS_ACTIVE, REFERRAL_DATE, FIRST_DATE_OF_SERVICE, DAYS_TO_SERVICE, HASNOSCHEDULEANDSERVICE, HASSCHEDULE, HASSCHEDULEBUTNOSERVICE, AGINGBUCKET, VISITS_SCHEDULED, VISITS_COMPLETED, ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE, ETL_INSERTED_BY, ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG)
WITH DATES AS (
	SELECT CALENDAR_DATE SERVICE_DATE, FIRST_DAY_OF_MONTH PERIOD_BEGIN_DATE, YEAR_MONTH_DESC PERIOD_NAME, YEAR, MONTH
	FROM HAH.DIM_DATE 
	WHERE CALENDAR_DATE BETWEEN ''2019-01-02'' AND DATEADD(DAY, -2, CURRENT_DATE())
		AND UPPER(DAY_NAME) NOT IN (''SAT'',''SUN'')
), FIRST_AND_LAST_DATES AS (
	SELECT MIN(SERVICE_DATE) FIRST_DATE, MAX(SERVICE_DATE) LAST_DATE
	FROM DATES
), STATES AS (
	SELECT STATES.STATE_ISO_CODE STATE, STATES.SANDATA_AGENCY_ID AGENCYID
	FROM HAH.DIM_STATE STATES
	WHERE STATE_ISO_CODE IN (''IL'',''IN'',''PA'')
), BRANCHES AS (
	SELECT STATES.STATE, STATES.AGENCYID, BRANCHES.BRANCH_KEY, BRANCHES.OFFICE_NUMBER, BRANCHES.OFFICE_NAME
	FROM STATES STATES
	JOIN HAH.DIM_BRANCH BRANCHES
		ON BRANCHES.OFFICE_STATE_CODE = STATES.STATE 
), CONTRACTS AS (
	SELECT CONTRACT_KEY
	FROM HAH.DIM_CONTRACT 
	WHERE NVL(BILLABLE_FLAG, 1) = 1 AND NVL(PAYABLE_FLAG, 1) = 1 AND NVL(MILEAGE_FLAG, 0) = 0
		AND NVL(REVENUE_CATEGORY, '''') <> ''CLS''
), VISITS AS (
	SELECT VISITS.CLIENT_KEY,
		MIN(VISITS.SERVICE_DATE) FIRST_SERVICE_DATE
	FROM HAH.FACT_VISIT VISITS
	JOIN CONTRACTS CONTRACTS
		ON CONTRACTS.CONTRACT_KEY = VISITS.CONTRACT_KEY
	WHERE VISITS.CONFIRMED_FLAG=''YES'' --VISITS.STATUS_CODE IN (''02'',''03'',''04'',''05'')
	GROUP BY VISITS.CLIENT_KEY
), INTAKES AS (
	SELECT DISTINCT INTAKES.CLIENT_KEY, 
		FIRST_VALUE(BRANCHES.BRANCH_KEY) OVER(PARTITION BY INTAKES.CLIENT_KEY ORDER BY INTAKES.REPORT_DATE, INTAKES.HOURS_AUTHORIZED DESC, INTAKES.REAUTHORIZED_DATE DESC) BRANCH_KEY
	FROM HAH.FACT_INTAKE INTAKES
	JOIN BRANCHES BRANCHES
		ON BRANCHES.BRANCH_KEY = INTAKES.BRANCH_KEY 
	JOIN FIRST_AND_LAST_DATES DATES
		ON INTAKES.REPORT_DATE BETWEEN DATES.FIRST_DATE AND DATES.LAST_DATE 
), EVV_VISITS AS (
	SELECT EVV_VISITS.AGENCYID, STATES.STATE,   
		IFF(STATES.STATE = ''PA'', EVV_CLIENTS.CLIENTID, EVV_CLIENTS.OTHERID)::NUMBER CLIENT_NUMBER,
		COUNT(DISTINCT CASE WHEN EVV_VISITS.STATUS IN (''01'',''10'') THEN EVV_VISITS.SCHEDULEID END) VISITS_SCHEDULED,
		COUNT(DISTINCT CASE WHEN EVV_VISITS.STATUS IN (''02'',''03'',''04'') THEN EVV_VISITS.SCHEDULEID END) VISITS_COMPLETED,
		MIN(IFF(STATES.STATE = ''PA'', CLIENTADMISSIONS.SOC, NULL)) EVV_REFERRAL_DATE
	FROM DISC_PROD.BI_REPOSITORY.SANDATAVISITS EVV_VISITS
	JOIN STATES STATES
		ON STATES.AGENCYID = EVV_VISITS.AGENCYID
	JOIN FIRST_AND_LAST_DATES DATES
		ON EVV_VISITS.SCHEDULEDATE >= DATES.FIRST_DATE
	JOIN DISC_PROD.SANDATAIMPORT.SANDATA_CLIENTS EVV_CLIENTS
		ON EVV_CLIENTS.AGENCYID = EVV_VISITS.AGENCYID AND EVV_CLIENTS.CLIENTID = EVV_VISITS.CLIENTID 
	JOIN DISC_PROD.SANDATAIMPORT.SANDATA_CLIENTADMISSIONS CLIENTADMISSIONS
		ON CLIENTADMISSIONS.AGENCYID = EVV_VISITS.AGENCYID AND CLIENTADMISSIONS.ADMISSIONID = EVV_VISITS.CLIENTID
	WHERE NVL(EVV_CLIENTS.OTHERID, '''') <> ''''
	GROUP BY EVV_VISITS.AGENCYID, STATES.STATE,   
		IFF(STATES.STATE = ''PA'', EVV_CLIENTS.CLIENTID, EVV_CLIENTS.OTHERID)
), NEW_REFERRALS AS (
	SELECT CLIENTS.CLIENT_STATE_CODE STATE, BRANCHES.OFFICE_NUMBER, CONCAT(BRANCHES.STATE, '' - '', BRANCHES.OFFICE_NAME) OFFICE_NAME, BRANCHES.BRANCH_KEY,
		DATES.PERIOD_NAME, DATES.PERIOD_BEGIN_DATE, DATES.YEAR, DATES.MONTH,
		CLIENTS.CLIENT_NUMBER, CLIENTS.CLIENT_NAME, CLIENTS.CLIENT_KEY, 
		IFF(CLIENTS.ACTIVE_CLIENT_FLAG = 1, ''YES'', ''NO'') IS_ACTIVE,
		CLIENTS.REFERRAL_DATE,
		VISITS.FIRST_SERVICE_DATE FIRST_DATE_OF_SERVICE,
		EVV_VISITS.VISITS_SCHEDULED,
		EVV_VISITS.VISITS_COMPLETED
	FROM HAH.DIM_CLIENT CLIENTS
	JOIN DATES DATES
		ON DATES.SERVICE_DATE = CLIENTS.REFERRAL_DATE
	JOIN INTAKES INTAKES
		ON INTAKES.CLIENT_KEY = CLIENTS.CLIENT_KEY
	JOIN BRANCHES BRANCHES
		ON BRANCHES.BRANCH_KEY = INTAKES.BRANCH_KEY
	LEFT JOIN VISITS VISITS
		ON VISITS.CLIENT_KEY = CLIENTS.CLIENT_KEY 
	LEFT JOIN EVV_VISITS EVV_VISITS
		ON EVV_VISITS.STATE = CLIENTS.CLIENT_STATE_CODE AND EVV_VISITS.CLIENT_NUMBER = CLIENTS.CLIENT_NUMBER 
)
	SELECT NEW_REFERRALS.STATE,
		NEW_REFERRALS.OFFICE_NUMBER,
		NEW_REFERRALS.OFFICE_NAME,
		NEW_REFERRALS.BRANCH_KEY,
		NEW_REFERRALS.CLIENT_KEY,
		NEW_REFERRALS.CLIENT_NUMBER,
		NEW_REFERRALS.CLIENT_NAME,
		NEW_REFERRALS.YEAR,
		NEW_REFERRALS.MONTH,
		NEW_REFERRALS.PERIOD_BEGIN_DATE,
		NEW_REFERRALS.PERIOD_NAME,
		NEW_REFERRALS.IS_ACTIVE,
		NEW_REFERRALS.REFERRAL_DATE,
		NEW_REFERRALS.FIRST_DATE_OF_SERVICE,
		CASE WHEN FIRST_DATE_OF_SERVICE IS NULL THEN NULL
			WHEN FIRST_DATE_OF_SERVICE < REFERRAL_DATE THEN 0
			ELSE DATEDIFF(DAY, REFERRAL_DATE, FIRST_DATE_OF_SERVICE) END DAYS_TO_SERVICE,
			CASE WHEN VISITS_SCHEDULED IS NULL THEN ''YES'' ELSE ''NO'' END HasNoScheduleAndService,
			CASE WHEN VISITS_SCHEDULED IS NOT NULL THEN ''YES'' ELSE ''NO'' END HasSchedule,
			CASE WHEN VISITS_SCHEDULED IS NOT NULL AND VISITS_COMPLETED = 0 THEN ''YES'' ELSE ''NO'' END HasScheduleButNoService,
			CASE WHEN DAYS_TO_SERVICE IS NULL THEN ''No timesheets''
				WHEN DAYS_TO_SERVICE BETWEEN 0 AND 14 THEN ''0 - 14 days''
				WHEN DAYS_TO_SERVICE BETWEEN 15 AND 28 THEN ''15 - 28 days''
				WHEN DAYS_TO_SERVICE BETWEEN 29 AND 43 THEN ''29 - 43 days''
				WHEN DAYS_TO_SERVICE BETWEEN 44 AND 60 THEN ''2 months''
				ELSE ''2+ months'' END AgingBucket,
		NEW_REFERRALS.VISITS_SCHEDULED,
		NEW_REFERRALS.VISITS_COMPLETED,
	    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
		CURRENT_USER as ETL_INSERTED_BY ,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
		CURRENT_USER as ETL_LAST_UPDATED_BY,
		0 as ETL_DELETED_FLAG
	FROM NEW_REFERRALS NEW_REFERRALS;
SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
	RETURN return_result;
    END;
    ';