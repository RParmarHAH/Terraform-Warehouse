CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_MATRIXCARE_FACT_REVENUE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
                BEGIN
    --*****************************************************************************************************************************
-- NAME:  MATRIXCARE_FACT_REVENUE
--
-- PURPOSE: Creates one row per invoice-detail according to MatrixCare-MyData
--
-- DEVELOPMENT LOG:
-- DATE         AUTHOR              NOTES:
-- --------     ------------------- -----------------------------------------------------------------------------------------------
-- 04/30/21		Mir Ali				Initial development
-- 06/07/21		Mir Ali				Added intra-Source System mappings (for within MatrixCare)
-- 04/04/24     Jashvant Patel	    Updated Date/time format as per American format
-- 10/07/23     pradeep thippani    Added  "POST_PAYMENTPOSTINGTYPEID"  IN (1,5,6,10,10001,10006,10007) to grab specific POST_PAYMENTPOSTINGTYPEID 
-- 03/10/23     Pradeep Thippani    changed amount_billed 
-- 24/11/2023	Preeti Sharma		Added Bill_Unit_Type Column for RCM(Requested By Natalie)
-- NOTES:
-- STVHC_T_PAYMENTPOSTING Table: POSTTYP_POSTINGTYPE 0 ARE PAYMENTS, POSTTYP_POSTINGTYPE 1 ARE REVADJUSTMENTS, POSTTYP_POSTINGTYPE 2 and 3 do not exist, and POSTTYP_POSTINGTYPE 4 seem to be ignored in Charges/Payments/Balance calculation
--	INVD_TOTALCHARGES + INVD_TOTALREVADJUSTMENTS = AMOUNT_BILLED
-- 	AMOUNT_BILLED - INVD_TOTALPAYMENTS = INVD_BALANCE
--*****************************************************************************************************************************
--

INSERT OVERWRITE INTO STAGE.MATRIXCARE_FACT_REVENUE (
	REVENUE_KEY, REPORT_DATE, BRANCH_KEY, EMPLOYEE_KEY, CLIENT_KEY, CONTRACT_KEY, INVOICE_KEY, SOURCE_SYSTEM_ID, SUPERVISOR_KEY,
	REVENUE_DATE, PAYMENT_DATE, BRANCH_NAME, EMPLOYEE_ID, CLIENT_NUMBER, CONTRACT_CODE, INVOICE_NUMBER, INVOICE_TYPE,BILL_UNIT_TYPE, NUMBER_OF_CLIENTS,
	SYSTEM_CODE, SUPERVISOR_CODE, BILL_CODE, INVOICE_HOURS, INVOICE_RATE, AMOUNT_BILLED, AMOUNT_COLLECTED, AMOUNT_OUTSTANDING,
	ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE, ETL_INSERTED_BY, ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG)
WITH EMPLOYEE AS 
  (
  SELECT * FROM 
  (
    SELECT MASTER_ID,CAR_ID,CAR_SUPERVISOR,CAR_MANAGER,ETL_LAST_UPDATED_DATE
    FROM DISC_DEDUPE_PROD.MATRIXCARE.EMPLOYEE_MASTER_LIST  
  ) 
  UNION
  SELECT * FROM 
  (
    SELECT DISTINCT MASTER_ID,M.CAR_ID,C.CAR_SUPERVISOR,C.CAR_MANAGER,ETL_LAST_UPDATED_DATE
    FROM DISC_DEDUPE_PROD.MATRIXCARE.EMPLOYEE_MATCH_LIST M
    LEFT JOIN  DISC_PROD.MATRIXCARE.STVHC_T_CAREGIVER C ON M.CAR_ID = C.CAR_ID
    WHERE M.CAR_ID NOT IN (SELECT DISTINCT CAR_ID FROM DISC_DEDUPE_PROD.MATRIXCARE.EMPLOYEE_MASTER_LIST)
  )
)
, CLIENT AS ( --VISIT DATA
  SELECT * FROM 
  (
    SELECT MASTER_ID,CLI_ID,ETL_LAST_UPDATED_DATE
    FROM DISC_DEDUPE_PROD.MATRIXCARE.CLIENT_MASTER_LIST 
  ) 
  UNION
  SELECT * FROM 
  (
    SELECT DISTINCT MASTER_ID,ID,NULL AS ETL_LAST_UPDATED_DATE
    FROM DISC_DEDUPE_PROD.MATRIXCARE.CLIENT_MATCH_LIST 
    WHERE ID NOT IN (SELECT DISTINCT CLI_ID FROM DISC_DEDUPE_PROD.MATRIXCARE.CLIENT_MASTER_LIST)
  ) 
)
SELECT MD5(''MATRIXCARE'' || ''-'' || INVOICE_DETAILS.INVD_ID::STRING || ''-'' || ''MATRIXCARE'') AS REVENUE_KEY,
    COALESCE(SCHEDULES.SCH_STARTTIME, INVOICE_DETAILS.INVD_SERVICEDATETO) AS REPORT_DATE,
    --COALESCE((DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', SCHEDULES.SCH_STARTTIME))), (DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', INVOICE_DETAILS.INVD_SERVICEDATETO)))) AS REPORT_DATE,
    COALESCE(BRANCH_MAPPING.CONVERGED_BRANCH_KEY, MD5(''MATRIXCARE'' || ''-'' || INVOICE_DETAILS.INVD_BRANCHID::STRING || ''-'' || ''MATRIXCARE'')) AS BRANCH_KEY,
--  COALESCE(EMPLOYEE_MAPPING.MASTER_EMPLOYEE_KEY, MD5(''MATRIXCARE'' || ''-'' || NVL(SCHEDULES.SCH_CAREGIVERID::STRING, '''') || ''-'' || ''MATRIXCARE'')) AS EMPLOYEE_KEY,
    MD5( ''MATRIXCARE'' || ''-'' || NVL(COALESCE (EMPLOYEE_MAPPING.MASTER_ID,SCH_CAREGIVERID::STRING),'''') || ''-'' || ''MATRIXCARE'') AS EMPLOYEE_KEY,
--  COALESCE(CLIENT_MAPPING.MASTER_CLIENT_KEY, MD5(''MATRIXCARE'' || ''-'' || INVOICE_DETAILS.INVD_CLIENTID::STRING || ''-'' || ''MATRIXCARE'')) AS CLIENT_KEY,
--  EMPLOYEE_MAPPING.MASTER_ID,SCH_CAREGIVERID::STRING,
    MD5( ''MATRIXCARE'' || ''-'' || NVL(COALESCE (CLIENT_MAPPING.MASTER_ID::STRING,INVOICE_DETAILS.INVD_CLIENTID::STRING),'''') || ''-'' || ''MATRIXCARE'') CLIENT_KEY,
    MD5(''MATRIXCARE'' || ''-'' || INVOICE_DETAILS.INVD_PAYERID::STRING || ''-'' || NVL(INVOICE_DETAILS.INVD_SERVICECODEID::STRING, '''') || ''-'' || ''MATRIXCARE'') AS CONTRACT_KEY,
    MD5(''MATRIXCARE'' || ''-'' || INVOICE_DETAILS.INVD_INVHID::STRING || ''-'' || ''MATRIXCARE'') AS INVOICE_KEY,
    7 AS SOURCE_SYSTEM_ID,
    MD5(''MATRIXCARE'' || ''-'' || 
        COALESCE(CAREGIVER.CAR_SUPERVISOR::STRING, 
            CAREGIVER.CAR_MANAGER::STRING, 
            ''Unknown ('' || COALESCE(BRANCH_MAPPING.CONVERGED_OFFICE_CODE, INVOICE_DETAILS.INVD_BRANCHID::STRING) || '')'') || 
        ''-'' || ''MATRIXCARE'') AS SUPERVISOR_KEY,
 --   COALESCE(INVOICE_HEADER.INVH_INVOICEDATE, INVOICE_DETAILS.INVD_CREATEDDATE) AS REVENUE_DATE,
 COALESCE((DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'',INVOICE_HEADER.INVH_INVOICEDATE))), (DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', INVOICE_DETAILS.INVD_CREATEDDATE))) ) AS REVENUE_DATE,
    INVOICE_PAYMENTS.FINAL_PAYMENT_DATE AS PAYMENT_DATE,
   --  DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', INVOICE_PAYMENTS.FINAL_PAYMENT_DATE)) AS PAYMENT_DATE,
    UPPER(COALESCE(TRIM(BRANCHES.BR_NAME), ''Unknown ('' || COALESCE(BRANCH_MAPPING.CONVERGED_OFFICE_CODE, INVOICE_DETAILS.INVD_BRANCHID::STRING) || '')'')) AS BRANCH_NAME,
    COALESCE(EMPLOYEE_MAPPING.CAR_ID, SCHEDULES.SCH_CAREGIVERID) AS EMPLOYEE_ID,
    COALESCE(CLIENT_MAPPING.MASTER_ID,INVOICE_DETAILS.INVD_CLIENTID) AS CLIENT_NUMBER,
    INVOICE_DETAILS.INVD_PAYERID AS CONTRACT_CODE,
    NVL(INVOICE_HEADER.INVH_INVOICENUMBER, ''Unknown ('' || INVOICE_DETAILS.INVD_INVHID || '')'') AS INVOICE_NUMBER,
    ''Regular'' AS INVOICE_TYPE,
	CASE 
        WHEN SERCO.SVCC_DEFAULTBILLUNITFLAG IN(0,150) THEN ''VISIT''
        WHEN SERCO.SVCC_DEFAULTBILLUNITFLAG IN (1,15,30,60) THEN ''HOURLY''
        WHEN SERCO.SVCC_DEFAULTBILLUNITFLAG = 1440 THEN ''DAILY''
        WHEN SERCO.SVCC_DEFAULTBILLUNITFLAG IS NOT NULL THEN ''UNKNOWN''
        ELSE NULL END AS BILL_UNIT_TYPE	,
    1 AS NUMBER_OF_CLIENTS,
    ''MATRIXCARE'' AS SYSTEM_CODE,
    COALESCE(CAREGIVER.CAR_SUPERVISOR::STRING, 
            CAREGIVER.CAR_MANAGER::STRING, 
            ''Unknown ('' || COALESCE(BRANCH_MAPPING.CONVERGED_OFFICE_CODE, INVOICE_DETAILS.INVD_BRANCHID::STRING) || '')'') AS SUPERVISOR_CODE,
    INVOICE_DETAILS.INVD_SERVICECODEID AS BILL_CODE,
    NVL(
        CAST(INVOICE_DETAILS.INVD_INVOICEUNITS / (60 / INVOICE_DETAILS.INVD_INVOICEUNITFLAG) AS DECIMAL(12, 3)),
        CAST(INVOICE_DETAILS.INVD_CHARGEUNITS / (60 / NULLIF(INVOICE_DETAILS.INVD_CHARGEUNITFLAG, 0)) AS DECIMAL(12, 3))) AS INVOICE_HOURS,
    INVOICE_DETAILS.INVD_CHARGERATE * (60 / NULLIF(INVOICE_DETAILS.INVD_CHARGEUNITFLAG, 0)) AS INVOICE_RATE,
    NVL(INVOICE_DETAILS.INVD_ADJUSTEDCHARGETOTAL,0) AS AMOUNT_BILLED,
--    NVL(INVOICE_DETAILS.INVD_TOTALCHARGES, 0) + NVL(INVOICE_DETAILS.INVD_TOTALREVADJUSTMENTS, 0) AS AMOUNT_BILLED,
--  changed on 28/09/2023 for RCM
    NVL(INVOICE_DETAILS.INVD_TOTALPAYMENTS, 0) * -1 AS AMOUNT_COLLECTED, -- Payments are in negative amounts
    INVOICE_DETAILS.INVD_BALANCE AS AMOUNT_OUTSTANDING,
    	---- ETL FIELDS ----
    
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
                        
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG
FROM DISC_PROD.MATRIXCARE.STVHC_T_INVOICEDETAILS AS INVOICE_DETAILS
LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_INVOICEHEADER AS INVOICE_HEADER
    ON INVOICE_HEADER.INVH_ID = INVOICE_DETAILS.INVD_INVHID
LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_SERVICECODE AS SERCO
     ON SERCO.SVCC_ID = INVOICE_DETAILS.INVD_SERVICECODEID  
LEFT JOIN (
    SELECT POST_INVOICEDETAILID AS INVD_INVHID, 
        MAX(POST_POSTEDDATE) AS FINAL_PAYMENT_DATE,
        MAX(ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE 
    FROM DISC_PROD.MATRIXCARE.STVHC_T_PAYMENTPOSTING WHERE "POST_PAYMENTPOSTINGTYPEID"  IN (1,5,6,10,10001,10006,10007)
    GROUP BY POST_INVOICEDETAILID
) AS INVOICE_PAYMENTS
    ON INVOICE_PAYMENTS.INVD_INVHID = INVOICE_DETAILS.INVD_ID
LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_SCHEDULES AS SCHEDULES 
    ON SCHEDULES.SCH_ID = INVOICE_DETAILS.INVD_SCHEDULEID 
--LEFT JOIN DISC_PROD.MATRIXCARE.MATRIXCARE_MASTER_CLIENT_MAPPING_ALL AS CLIENT_MAPPING
--  ON CLIENT_MAPPING.CLIENT_NUMBER = INVOICE_DETAILS.INVD_CLIENTID
LEFT JOIN CLIENT AS CLIENT_MAPPING
    ON CLIENT_MAPPING.CLI_ID = INVOICE_DETAILS.INVD_CLIENTID    
LEFT  JOIN HAH.DIM_CLIENT AS MASTER_CLIENT
    ON MASTER_CLIENT.CLIENT_NUMBER = CLIENT_MAPPING.MASTER_ID AND MASTER_CLIENT.SOURCE_SYSTEM_ID =7 
--LEFT JOIN DISC_PROD.MATRIXCARE.MATRIXCARE_MASTER_EMPLOYEE_MAPPING_ALL AS EMPLOYEE_MAPPING
--  ON EMPLOYEE_MAPPING.EMPLOYEE_NUMBER = SCHEDULES.SCH_CAREGIVERID
LEFT JOIN EMPLOYEE AS EMPLOYEE_MAPPING
    ON EMPLOYEE_MAPPING.CAR_ID = SCHEDULES.SCH_CAREGIVERID
LEFT JOIN HAH.DIM_EMPLOYEE AS MASTER_EMPLOYEE
    ON MASTER_EMPLOYEE.EMPLOYEE_ID = EMPLOYEE_MAPPING.CAR_ID AND MASTER_EMPLOYEE.SOURCE_SYSTEM_ID = 7  
--LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_CAREGIVER AS CAREGIVER
--  ON CAREGIVER.CAR_ID = COALESCE(MASTER_EMPLOYEE.EMPLOYEE_NUMBER, SCHEDULES.SCH_CAREGIVERID)
LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_CAREGIVER AS CAREGIVER
    ON CAREGIVER.CAR_ID = COALESCE(EMPLOYEE_MAPPING.CAR_ID, SCHEDULES.SCH_CAREGIVERID)
LEFT JOIN DISC_PROD.MATRIXCARE.MATRIXCARE_MASTER_BRANCH_MAPPING AS BRANCH_MAPPING
    ON BRANCH_MAPPING.SOURCE_SYSTEM_ID = 7 AND BRANCH_MAPPING.SYSTEM_CODE = ''MATRIXCARE''
        AND BRANCH_MAPPING.OFFICE_CODE = INVOICE_DETAILS.INVD_BRANCHID::STRING
LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_BRANCHES AS BRANCHES
    ON BRANCHES.BR_ID::STRING = COALESCE(BRANCH_MAPPING.CONVERGED_OFFICE_CODE, INVOICE_DETAILS.INVD_BRANCHID::STRING) 
WHERE (INVOICE_DETAILS.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	OR INVOICE_HEADER.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	OR INVOICE_PAYMENTS.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	OR SCHEDULES.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	OR CAREGIVER.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	-- OR BRANCHES.ETL_LAST_UPDATED_DATE >=  
--:STR_CDC_START::timestamp_ntz -- Ignoring branches because only field is Branch_Name, which we don''t want to change if there''s an update
	OR CLIENT_MAPPING.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	-- OR MASTER_CLIENT.ETL_LAST_UPDATED_DATE >=  
--:STR_CDC_START::timestamp_ntz -- Ignoring Master_Clients because only field is Client_Number which we are getting from Client_Mapping anyway
	OR EMPLOYEE_MAPPING.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	-- OR MASTER_EMPLYEE.ETL_LAST_UPDATED_DATE >=  
--:STR_CDC_START::timestamp_ntz -- Ignoring Master_Employees because only field is Employee_Id which we are getting from Employee_Mapping anyway
	OR BRANCH_MAPPING.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz)
;
    RETURN ''SUCCESS'';
    END;
    ';