CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_ALAYACARE_DIM_CLIENT("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
  RETURN_RESULT VARCHAR(1000);
BEGIN
--*********************************************************************************************************************************
-- NAME:  ALAYACARE_DIM_CLIENT
--
-- PURPOSE: Creates one row per client according to Alayacare
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    ---------------  	-----------------------------------------------------------------------------------------------
-- 10/26/2021  	MOIN SAIYED			Initial development
-- 21/12/2021	VAIDEHI SHAH		leveraging dedupe and added onhold ,active flags ,onhold start date,onhold end date,begin date ,end date and supervisor information.
-- 03/08/2022	Mir Ali				Added LINKED_ID
-- 01/13/2023	Saurav Purohit		Added join with SERVICES and BILL_CODE to get FIRST and LATEST SERVICE DATES of only billable visits
-- 07/24/2023   Jashvant Patel      Updated Supervisor Key Logic
-- 07/27/2023   Deepen gajjar        added referrer key field
-- 11/08/2023   Trushali Ramoliya    Added the column for HISPANIC_OR_LATINO and also updated the logic for ethnicity as per IDDOX - 388
-- 11/20/2023   Sandesh Gosavi       ADDED A COULUMN  FOR CLIENT STATUS
-- 11/21/2023   Sandesh Gosavi        ADDED A LOGIC AND COLUMN FOR DISCHARGE_REASON
--*********************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.ALAYACARE_DIM_CLIENT
/*WITH ALAYACARE_SERVICE_DATES AS (
	SELECT CLIENT_NUMBER AS CLIENT_ID,
		MIN(SERVICE_DATE) AS FIRST_SERVICE_DATE, MAX(SERVICE_DATE) AS LAST_SERVICE_DATE
	FROM HAH.FACT_VISIT
	WHERE SOURCE_SYSTEM_ID = 9 
		AND STATUS_CODE IN (''02'', ''03'', ''04'', ''05'')
	GROUP BY CLIENT_NUMBER
),*/
 WITH 
CLIENT AS  --VISIT DATA
(
SELECT * FROM 
(
	SELECT CLIENT_ID,MASTER_ID,CLIENT_ID AS ORIGINAL_RECORD_ID,GUID,BRANCH_ID
	FROM  DISC_DEDUPE_PROD.ALAYACARE.CLIENT_MASTER_LIST 
) 
UNION
SELECT * FROM 
(
	SELECT DISTINCT ID,MASTER_ID,ID AS ORIGINAL_RECORD_ID,GUID,BRANCH_ID
	FROM DISC_DEDUPE_PROD.ALAYACARE.CLIENT_MATCH_LIST 
	WHERE ID NOT IN (SELECT CLIENT_ID FROM DISC_DEDUPE_PROD.ALAYACARE.CLIENT_MASTER_LIST ) 
) 
),CLIENT_REFERRALS AS (
	WITH master AS (
		SELECT c.MASTER_ID , c.CLIENT_ID 
		,iff(p.PROFILE_REFERRAL_SOURCE='''',NULL , p.PROFILE_REFERRAL_SOURCE )referral,
		md5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION),
	''Unknown'') || '' ('' || NVL(p.PROPERTIES_TBL_PROSPECT_CONTACT_IDACCOUNT ,
	-1)::number || '')'' || ''-'' || nvl(p.PROFILE_ID,
	-1)::number)
AS REFERRER_KEY
		FROM DISC_DEDUPE_PROD.ALAYACARE.CLIENT_MASTER_LIST c
		LEFT JOIN DISC_PROD.ALAYACARE.PROFILE p ON c.PROFILE_ID =p.PROFILE_ID 
		LEFT JOIN DISC_PROD.ALAYACARE.BRANCH b ON
	p.PROPERTIES_TBL_PROSPECT_CONTACT_IDACCOUNT = b.BRANCH_ID
WHERE
	iff(trim(P.PROFILE_REFERRAL_SOURCE)= '''',
	NULL ,
	P.PROFILE_REFERRAL_SOURCE) IS NOT NULL
	)
		SELECT DISTINCT 
		master_id,
		client_id,REFERRER_KEY, referral AS client_referral
--		iff(referral is NULL AND unique_ref=1,match_referral, referral) AS client_referral
		FROM master
)
,ALAYACARE_SERVICE_DATES AS (
SELECT  NVL(C.MASTER_ID::INT,VISITS.CLIENT_ID::INT) AS CLIENT_ID,NVL(C.BRANCH_ID::INT,VISITS.BRANCH_ID::INT ) AS BRANCH_ID ,
		MIN(DATE_TRUNC (DAY,START_AT)) AS FIRST_SERVICE_DATE, MAX(DATE_TRUNC (DAY,START_AT)) AS LAST_SERVICE_DATE
	FROM DISC_PROD.ALAYACARE.VISIT VISITS
	LEFT JOIN CLIENT C ON VISITS.CLIENT_ID =C.CLIENT_ID AND VISITS.BRANCH_ID=C.BRANCH_ID
	LEFT JOIN DISC_PROD.ALAYACARE.SERVICE AS SERVICES ON VISITS.SERVICE_ID = SERVICES.SERVICE_ID AND VISITS.BRANCH_ID = SERVICES.BRANCH_ID
	LEFT JOIN DISC_PROD.ALAYACARE.SERVICE_CODE_BILL_CODE SBC ON SERVICES.SERVICE_FUNDER_ID  = SBC.FUNDER_ID AND VISITS.SERVICE_CODE_ID = SBC.SERVICE_CODE_ID
	-- JOIN DISC_PROD.ALAYACARE.SERVICE_CODE S ON SBC.SERVICE_CODE_ID = S.SERVICE_CODE_ID
	LEFT JOIN DISC_PROD.ALAYACARE.BILL_CODE AS BC ON BC.BILL_CODE_ID = SBC.BILL_CODE_ID 
	WHERE (VISITS.IS_PAID = 1 OR VISITS.IS_INVOICED = 1 OR VISITS.VISIT_COMPLETED = 1)
	AND BC.EXCLUDE_BILLING = ''no''
	GROUP BY NVL(C.MASTER_ID::INT,VISITS.CLIENT_ID::INT),NVL(C.BRANCH_ID::INT,VISITS.BRANCH_ID::INT ) 
)
--add branch id in ctes below
,
CLIENT_LATEST_STATUS AS (
SELECT * FROM DISC_PROD.AlayaCare.Client_Status CS
JOIN (
SELECT CLIENT_ID AS CLIENT_IDL ,MAX(ID) AS ID,BRANCH_ID  AS BRANCH_IDL
FROM  DISC_PROD.AlayaCare.Client_Status CS 
GROUP BY CLIENT_ID,BRANCH_ID 
)LATEST_CLIENT_DATA
ON LATEST_CLIENT_DATA.ID=CS.ID
),
DISCHARGE_REASON AS (SELECT * FROM (
	SELECT ROW_NUMBER () OVER(PARTITION BY CLIENT_ID,BRANCH_ID ORDER BY seq DESC) AS RN,
	* FROM  DISC_PROD.AlayaCare.Client_Status
)WHERE rn=1) 
,
CLIENT_ONHOLD AS (
SELECT * FROM DISC_PROD.AlayaCare.Client_Status CS  
JOIN (
SELECT CLIENT_ID AS CLIENT_IDH ,MAX(ID) AS ID,BRANCH_ID AS BRANCH_IDH
FROM  DISC_PROD.AlayaCare.Client_Status CS 
WHERE TRIM(UPPER(CLIENT_STATUS)) IN (''ON_HOLD'')
GROUP BY CLIENT_ID,BRANCH_ID 
)LATEST_CLIENT_DATA
ON LATEST_CLIENT_DATA.ID=CS.ID
) 
, EMP AS 
(
SELECT EMPLOYEE_ID , ROW_NUMBER() OVER (PARTITION BY PROFILE_SUPERVISOR_TAG ORDER BY CREATED_AT DESC) AS RN , *
FROM DISC_PROD.ALAYACARE.EMPLOYEE
)
SELECT DATA.* FROM (
	SELECT
		 MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(C.BRANCH_ID,-1) || '')'' || ''-'' || NVL(C.MASTER_ID::INT,-1) || ''-'' || ''ALAYACARE'') CLIENT_KEY
		,C.MASTER_ID AS CLIENT_NUMBER
		,UPPER(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(C.BRANCH_ID,-1) || '')'') AS SYSTEM_CODE
		,9 AS SOURCE_SYSTEM_ID
		,MD5(C.PROFILE_SSN) AS CLIENT_PID  
        , NULL AS CLIENT_MEDICARE_ID -- NA
        , NULL AS MEDICAID_ID -- NA
		--,IFF(LEN(C.PROFILE_BIRTHDAY)=10,IFF(C.PROFILE_BIRTHDAY=''--'',NULL,TO_DATE(C.PROFILE_BIRTHDAY,''YYYY-MM-DD'')),NULL) AS CLIENT_DOB
		,COALESCE(TRY_TO_DATE(C.PROFILE_BIRTHDAY,''YYYY-MM-DD''),TRY_TO_DATE(C.PROFILE_BIRTHDAY,''YYYY-M-DD'')) AS CLIENT_DOB --yyyy-m-dd
		,NULL AS CLIENT_DATE_OF_DEATH 
		,CASE WHEN UPPER(TRIM(C.PROFILE_GENDER)) = ''M'' THEN ''MALE''
				WHEN UPPER(TRIM(C.PROFILE_GENDER)) = ''F'' THEN ''FEMALE''
				ELSE NULL 
		END AS CLIENT_GENDER
		,CASE WHEN UPPER( TRIM( C.PROFILE_ETHNICITY)) ILIKE ''%NONE%'' OR TRIM(  C.PROFILE_ETHNICITY) = '''' OR  C.PROFILE_ETHNICITY IS NULL THEN NULL
		       WHEN TRIM(C.PROFILE_ETHNICITY) LIKE ''%Black or African%'' THEN UPPER(''Black or African American'')
				WHEN TRIM(C.PROFILE_ETHNICITY) LIKE ''%White%'' THEN UPPER(''White'')
				WHEN TRIM(C.PROFILE_ETHNICITY) LIKE ''%Asian'' THEN UPPER(''Asian'')
				WHEN TRIM(C.PROFILE_ETHNICITY) LIKE ''%Hispanic%'' THEN NULL
				WHEN TRIM(C.PROFILE_ETHNICITY) LIKE ''%American Indian or Alaskan Native%'' THEN UPPER(''American Indian or Alaska Native'')
				WHEN TRIM(C.PROFILE_ETHNICITY) ILIKE ''%Two or More Races%'' THEN UPPER(''Two or More'') 
				WHEN TRIM(C.PROFILE_ETHNICITY) ILIKE  ''%Native Hawaiian or Other Pacific Islander%'' THEN UPPER(''Native Hawaiian or Other Pacific Islander'')
				ELSE UPPER(C.PROFILE_ETHNICITY) END AS Client_Ethnicity	,
		CASE WHEN C.PROFILE_ETHNICITY ILIKE ANY  (''%not%HISPANIC%OR%LATINO%'')THEN FALSE 
			 WHEN C.PROFILE_ETHNICITY ILIKE ANY  (''%HISPANIC%OR%LATINO%'') THEN TRUE 
			 ELSE FALSE END AS HISPANIC_OR_LATINO
       	, NULL AS CLIENT_GENDER_IDENTITY -- NA
		, NULL AS CLIENT_SEXUAL_ORIENTATION -- NA
		, NULL AS CLIENT_RACE --NA
		,CASE UPPER(TRIM(C.PROFILE_MARITAL_STATUS))
			WHEN ''D'' THEN ''Divorced''
			WHEN ''S'' THEN ''Single''
			WHEN ''W'' THEN ''Widowed''
			WHEN ''M'' THEN ''Married''
			WHEN ''SEP'' THEN ''SEPARATED''
			WHEN ''DIVORCED'' THEN ''Divorced''
			WHEN ''SINGLE'' THEN ''Single''
			WHEN ''WIDOWED'' THEN ''Widowed''
			WHEN ''WIDOW'' THEN ''Widowed''
			WHEN ''SEPARATED'' THEN ''SEPARATED''
			WHEN ''MARRIED'' THEN ''Married''
			ELSE NULL END AS CLIENT_MARITAL_STATUS -- ASK FRANK add null or  C.PROFILE_MARITAL_STATUS
		,UPPER(TRIM(C.PROFILE_SALUTATION)) AS CLIENT_SALUTATION
		,UPPER(TRIM(C.PROFILE_FIRST_NAME)) AS CLIENT_FIRST_NAME
		,NULL AS CLIENT_MIDDLE_NAME
		,LEFT(UPPER(TRIM(C.PROFILE_LAST_NAME)), 50) AS CLIENT_LAST_NAME
		,CONCAT(UPPER(TRIM(C.PROFILE_LAST_NAME)), '', '' , UPPER(TRIM(C.PROFILE_FIRST_NAME)),'''') AS CLIENT_NAME
		,C.PROFILE_ADDRESS AS CLIENT_ADDRESS1
		,C.PROFILE_ADDRESS_SUITE AS CLIENT_ADDRESS2 
		,UPPER(TRIM(C.PROFILE_CITY)) AS CLIENT_CITY
		,UPPER(TRIM(C.PROFILE_STATE)) AS CLIENT_STATE_CODE
		,TRIM(C.PROFILE_ZIP) AS CLIENT_ZIP
		,NULL AS CLIENT_CLN_ADDRESS1
		,NULL AS CLIENT_CLN_ADDRESS2
		,NULL AS CLIENT_CLN_CITY
		,NULL AS CLIENT_CLN_STATE_CODE
		,NULL AS CLIENT_CLN_ZIP
		,NULL AS CLIENT_STD_ADDRESS1
		,NULL AS CLIENT_STD_ADDRESS2
		,NULL AS CLIENT_STD_CITY
		,NULL AS CLIENT_STD_STATE_CODE
		,NULL AS CLIENT_STD_ZIP
		,NULL AS CLIENT_HOME_PHONE
		,REGEXP_REPLACE(SUBSTR(C.PROFILE_PHONE_MAIN,1,14), ''(d{3})[s-]*(d{3})[s-]*(d{4})'',''($1) $2-$3'') AS CLIENT_CELL_PHONE 
		,REGEXP_REPLACE(SUBSTR(C.PROFILE_PHONE_PERSONAL,1,14), ''(d{3})[s-]*(d{3})[s-]*(d{4})'',''($1) $2-$3'') AS CLIENT_WORK_PHONE --IT HAS NULL VALUES  -- add same as client cell phone
		,REGEXP_REPLACE(SUBSTR(TRIM(C.PROFILE_FAX),1,14), ''(d{3})[s-]*(d{3})[s-]*(d{4})'',''($1) $2-$3'') AS CLIENT_FAX_NUMBER --add same as client cell phone
		,UPPER(TRIM(C.PROFILE_EMAIL)) AS CLIENT_PERSONAL_EMAIL
		--,IFF(LEN(C.PROFILE_REFERRAL_DATE)=10,IFF(C.PROFILE_REFERRAL_DATE=''--'',NULL,TO_DATE(C.PROFILE_REFERRAL_DATE,''YYYY-MM-DD'')),NULL) AS REFERRAL_DATE
		,COALESCE(TRY_TO_DATE(C.PROFILE_REFERRAL_DATE,''YYYY-MM-DD''),TRY_TO_DATE(C.PROFILE_REFERRAL_DATE,''YYYY-M-DD'')) AS REFERRAL_DATE --yyyy-m-dd
		,IFF(REFERRAL_DATE>S.FIRST_SERVICE_DATE,0,DATEDIFF(DAY, REFERRAL_DATE,S.FIRST_SERVICE_DATE)) AS DAYS_TO_SERVICE --ref>first - then 0		-- REF DATE - FIRST SERVICE DATE DIFF --DATAFLEX LOGIC CHECK
		,NULL AS CONTRACT_BEGIN_DATE   --ASK
		,NULL AS CONTRACT_END_DATE   --ASK
		,S.FIRST_SERVICE_DATE  --FIRST COMING FROM FACT_VISIT--CHANGED TO VISIT
		,S.LAST_SERVICE_DATE   --FIRST COMING FROM FACT_VISIT--CHANGED TO VISIT
		--,IFF(PROFILE_START_ON=''--'',NULL,TO_DATE(PROFILE_START_ON)) AS BEGIN_DATE --NEET TO BRING
		,COALESCE(TRY_TO_DATE(PROFILE_START_ON,''YYYY-MM-DD''),TRY_TO_DATE(PROFILE_START_ON,''YYYY-M-DD'')) AS BEGIN_DATE --yyyy-m-dd
		,IFF(UPPER(TRIM(C.PROPERTIES_TBL_GT_ACCOUNT_IDSTATUS)) IN (''DISCHARGED''),IFF(UPPER(TRIM(CLS.CLIENT_STATUS)) IN (''DISCHARGED''),CLS.EFFECTIVE_DATE,NULL),NULL) AS END_DATE --SHOULD WE USE LAST SERVICE DATE IF THERE IS NO DISCHARGE STATUS ?? ASK FRANK
		,CASE WHEN UPPER(TRIM(C.PROPERTIES_TBL_GT_ACCOUNT_IDSTATUS)) IN (''DISCHARGED'') THEN FALSE
		 ELSE TRUE END AS ACTIVE_CLIENT_FLAG 
		,UPPER(TRIM(C.PROPERTIES_TBL_GT_ACCOUNT_IDSTATUS)) AS CLIENT_STATUS															  
		,CASE  WHEN len(DR.REASON_CODE) > 4995
		       THEN LEFT(TRIM(DR.REASON_CODE), 4995) 
		       ELSE TRIM(DR.REASON_CODE) END AS DISCHARGE_REASON								 
		,CASE WHEN UPPER(TRIM(C.PROPERTIES_TBL_GT_ACCOUNT_IDSTATUS)) IN (''ON_HOLD'') THEN TRUE
		 ELSE FALSE END AS ON_HOLD_FLAG
		,IFF(UPPER(TRIM(CLH.CLIENT_STATUS)) IN (''ON_HOLD''),CLH.EFFECTIVE_DATE,NULL) AS ON_HOLD_START_DATE
		,IFF(UPPER(TRIM(CLH.CLIENT_STATUS)) IN (''ON_HOLD''),CLH.EFFECTIVE_DATE_TO,NULL ) AS ON_HOLD_END_DATE
		,C.PROFILE_IMPORT_ID AS LINKED_ID
		,NULL AS ACQUIRED_FROM_COMPANY_KEY
		,NULL AS ACQUIRED_FROM_COMPANY_ID
		,NULL AS ACQUIRED_FROM_COMPANY_FULL_NAME
		,NULL AS ACQUISITION_DATE
		,NULL AS ACQUISITION_FLAG
		,NULL AS ADMISSION_DATE
		,NULL AS ADMISSION_FLAG
		,NULL AS CLIENT_CONVERTED_FLAG --?? ASK FRANK
		,MD5(UPPER(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'')) || '' ('' || NVL(B.BRANCH_ID,-1) || '')'' || ''-'' ||TRIM(E.PROFILE_SUPERVISOR_TAG) || ''-'' || ''ALAYACARE'') AS PRIMARY_SUPERVISOR_KEY --DIM_SUPERVISOR
		,E.PROFILE_SUPERVISOR_TAG AS PRIMARY_SUPERVISOR_CODE--add state from branch
		,UPPER(COALESCE(TRIM(E.PROFILE_FIRST_NAME),'''') || '' '' || COALESCE(TRIM(E.PROFILE_MIDDLE_NAME),'''') || '' '' ||COALESCE (TRIM(E.PROFILE_LAST_NAME),'''')) AS PRIMARY_SUPERVISOR_NAME 
		,MD5(UPPER(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'')) || '' ('' || NVL(B.BRANCH_ID,-1) || '')'' || ''-'' ||TRIM(EE.PROFILE_SUPERVISOR_TAG) || ''-'' || ''ALAYACARE'') AS SECONDARY_SUPERVISOR_KEY
		,EE.PROFILE_SUPERVISOR_TAG AS SECONDARY_SUPERVISOR_CODE
		,UPPER(COALESCE(TRIM(EE.PROFILE_FIRST_NAME),'''') || '' '' || COALESCE(TRIM(EE.PROFILE_MIDDLE_NAME),'''') || '' '' ||COALESCE (TRIM(EE.PROFILE_LAST_NAME),'''')) AS SECONDARY_SUPERVISOR_NAME
		,MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(C.BRANCH_ID,-1) || '')'' || ''-'' || NVL(G.GROUP_ID,-1) || ''-'' || ''ALAYACARE'') AS PRIMARY_BRANCH_KEY --NEED TO TAKE FROM BRANCH
		,NVL(UPPER(TRIM(G.PROFILE_COMPANY)), ''Unknown ('' || NVL(G.GROUP_ID, -1) || '')'') AS PRIMARY_BRANCH_NAME 
		,UPPER(TRIM(COALESCE(STATE.STATE_ISO_CODE, COMPANY.PROFILE_STATE))) AS PRIMARY_BRANCH_STATE
		,NULL AS GUARANTOR_NAME
		,NULL AS NOTES
        ,NULL AS AGENCY
		,REF.REFERRER_KEY
		,TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE
		,TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
        convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
		CURRENT_USER as ETL_INSERTED_BY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
		CURRENT_USER as ETL_LAST_UPDATED_BY,
		0 as ETL_DELETED_FLAG,
		0 as ETL_INFERRED_MEMBER_FLAG
FROM DISC_DEDUPE_PROD.ALAYACARE.CLIENT_MASTER_LIST AS C
LEFT JOIN DISC_PROD.ALAYACARE.CLIENT_TAGS AS CT ON C.CLIENT_ID =CT.CLIENT_ID
LEFT JOIN EMP E ON SUBSTRING(TRIM(CT.TAG_LIST),0,7) = TRIM(E.PROFILE_SUPERVISOR_TAG)
AND SUBSTRING(TRIM(CT.TAG_LIST),0,7) <>'''' AND SUBSTRING(TRIM(CT.TAG_LIST),0,7) IS NOT NULL AND E.RN=1
LEFT JOIN EMP EE ON SUBSTRING(TRIM(CT.TAG_LIST),9,7) = TRIM(EE.PROFILE_SUPERVISOR_TAG)
AND SUBSTRING(TRIM(CT.TAG_LIST),9,7) <>'''' AND SUBSTRING(TRIM(CT.TAG_LIST),9,7) IS NOT NULL AND EE.RN=1 
LEFT JOIN DISC_PROD.ALAYACARE.TBL_GUID_COST_CENTRE_TIER_4 COST_CENTRE_MAPPING
ON COST_CENTRE_MAPPING.GUID_TO = C.GUID
LEFT JOIN DISC_PROD.ALAYACARE.TBL_COST_CENTRES_TIER_4 AS COST_CENTRE
ON COST_CENTRE.ID = COST_CENTRE_MAPPING.COST_CENTRE_ID
LEFT JOIN DISC_PROD.ALAYACARE.GROUPS AS G
ON G.BRANCH_ID = COST_CENTRE.PROPERTIES_BRANCH_ID
AND G.PROFILE_COMPANY = COST_CENTRE.PROPERTIES_DESCRIPTION
LEFT JOIN DISC_PROD.ALAYACARE.BRANCH B 
	ON B.BRANCH_ID = COALESCE(C.BRANCH_ID, G.BRANCH_ID)
LEFT JOIN ALAYACARE_SERVICE_DATES AS S 
ON S.CLIENT_ID = C.MASTER_ID
AND C.BRANCH_ID=S.BRANCH_ID
LEFT JOIN CLIENT_LATEST_STATUS CLS ON CLS.CLIENT_ID=C.CLIENT_ID 
AND CLS.BRANCH_ID=C.BRANCH_ID 
LEFT JOIN DISCHARGE_REASON DR ON DR.CLIENT_ID = C.CLIENT_ID AND DR.BRANCH_ID=C.BRANCH_ID																						
LEFT JOIN CLIENT_ONHOLD CLH ON CLH.CLIENT_ID=C.CLIENT_ID
AND CLH.BRANCH_ID=C.BRANCH_ID
LEFT JOIN DISC_PROD.ALAYACARE.BRANCH AS COMPANY
		ON COMPANY.BRANCH_ID = C.BRANCH_ID
	LEFT JOIN HAH.DIM_STATE AS STATE
		ON UPPER(TRIM(STATE.STATE_NAME)) = UPPER(TRIM(COMPANY.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION))
LEFT JOIN CLIENT_REFERRALS REF ON C.CLIENT_ID = REF.CLIENT_ID
 ) DATA
INNER JOIN DISC_PROD.ALAYACARE.CONFIGURATION CONFIG 
	ON UPPER(CONFIG.SYSTEM_CODE) = UPPER(DATA.SYSTEM_CODE)
	AND CONFIG.CONFIGURATION_ACTIVE=TRUE
	--AND CONFIG.SYSTEM_CODE IS NOT NULL
ORDER BY CLIENT_NUMBER;
SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
	RETURN return_result;
    END;
    ';