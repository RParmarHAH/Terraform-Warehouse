CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_OPENSYSTEMS_DIM_INVOICE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
--*****************************************************************************************************************************
-- NAME:  OPENSYSTEMS_DIM_INVOICE
--
-- PURPOSE: Creates One Row Per INVOICE According to OPENSYSTEMS
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 06/12/2022  Jay Prajapati         Initial Development
-- 21/04/2023 	PINKAL PANCHAL 		 ADDED INVOICE_STATUS_MAPPING FOR RCM
-- 12/09/2023  Pradeep Thippani      Changed DERIVED_INVOICE_STATUS logic
--***************************************************************************************************************************
INSERT OVERWRITE INTO DW_PROD.STAGE.OPENSYSTEMS_DIM_INVOICE
WITH CLIENT AS
(
	SELECT * FROM
	(
		SELECT PATIENTID, MASTER_ID, OFFICEID
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEOPENSYSTEMS.CLIENT_MASTER_LIST
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT PATIENTID, MASTER_ID, OFFICEID
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEOPENSYSTEMS.CLIENT_MATCH_LIST
		WHERE PATIENTID NOT IN (SELECT PATIENTID FROM DISC_DEDUPE_PROD.HHAEXCHANGEOPENSYSTEMS.CLIENT_MASTER_LIST )
	)
)
, BILLING AS (
	SELECT
		   HED.INVOICEHEADERID
		 , MAX(BV.DEPOSITDATE) AS FINAL_PAID_DATE
		 , SUM(DET.BILLEDAMOUNT) AS INVOICE_BILLED_AMOUNT
		 , SUM(BV.PAIDAMOUNT) AS PAID_AMOUNT
		 , SUM(BV.WRITEOFF) AS WRITEOFFAMOUNT
		 , SUM(BV.ADJUSTMENT+BV.TTADJUSTMENT+BV.OTHERADJUSTMENT) AS ADJUSTMENTS
		 , SUM(BV.CREDITS) AS CREDITS
	FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.VISITS V
	INNER JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLINVOICEDETAILS_REPL DET ON DET.VISITID = V.VISITID
	AND DET.PATIENTID = V.PATIENTID
	INNER JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLINVOICEHEADER_REPL HED ON HED.INVOICEHEADERID = DET.INVOICEHEADERID
	AND HED.PATIENTID = DET.PATIENTID
	LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.BILLING_PAIDVISITS_REPL BV ON BV.VISITID = V.VISITID
	AND BV.PATIENTID = V.PATIENTID
	LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.PAYMENTS PT ON BV.VISITID = PT.VISITID
	AND BV.PATIENTID = PT.PATIENTID
	GROUP BY HED.INVOICEHEADERID
),
INVOICE_STATUS_MAPPING AS 
(
SELECT DISTINCT
	INV.INVOICEHEADERID,
	17 AS SOURCE_SYSTEM_ID,
	CONCAT(''OPENSYSTEMS - '', TRIM(OFFICE.STATE)) AS SYSTEM_CODE,
    CASE WHEN (NVL(INV.INVOICEAMOUNT, 0)-NVL(BNG.PAID_AMOUNT, 0)) <= 0 THEN ''PAID''
         WHEN NVL(BNG.PAID_AMOUNT, 0) >0  AND (NVL(INV.INVOICEAMOUNT, 0)-NVL(BNG.PAID_AMOUNT, 0)) > 0 THEN ''PARTIAL PAY''
    ELSE ''BILLED'' END AS DERIVED_INVOICE_STATUS,
--Changes made on 05/09/23 for RCM
--	CASE WHEN INV.PAYMENTSTATUS = 0 THEN ''BILLED''
--		WHEN INV.PAYMENTSTATUS = 1 THEN ''PAID''
--		WHEN INV.PAYMENTSTATUS = 2 THEN ''PARTIAL PAY''
--	ELSE ''UNKNOWN'' END AS DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY
FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLINVOICEHEADER_REPL INV
INNER JOIN BILLING BNG ON INV.INVOICEHEADERID = BNG.INVOICEHEADERID --Changes made on 12/09/23 for RCM
INNER JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.OFFICE_OFFICES_REPL OFFICE ON INV.OFFICEID = OFFICE.OFFICEID
)		   
SELECT DISTINCT MD5(''OPENSYSTEMS'' || ''-'' || INV_HED.INVOICEHEADERID || ''-'' || ''HHAEXCHANGE'') AS INVOICE_KEY
		, MD5(''OPENSYSTEMS'' || ''-'' || CLI.MASTER_ID || ''-'' || ''HHAEXCHANGE'') AS CLIENT_KEY
		, INV_HED.VENDORINVOICENUMBER AS INVOICE_NUMBER
		, INV_HED.VENDORINVOICENUMBER AS ALTERNATE_INVOICE_NUMBER
		, TO_VARCHAR(INV_HED.INVOICEDATE::DATE, ''YYYYMM'') AS PERIOD
		, ''Regular'' AS INVOICE_TYPE
		, 1 AS NUMBER_OF_CLIENTS
		, CONCAT(''OPENSYSTEMS - '', TRIM(OFFICE.STATE)) AS SYSTEM_CODE
		, 17 AS SOURCE_SYSTEM_ID
		, MD5(''OPENSYSTEMS'' || ''-'' || INV_HED.OFFICEID || ''-'' || ''HHAEXCHANGE'') AS BRANCH_KEY
		, P.PAYERID AS PAYOR_CODE
		, TRIM(P.PAYERNAME) AS PAYOR_NAME
		, IFF(INV_HED.PAYMENTSTATUS = 1, FALSE, TRUE) AS INVOICE_OPEN_FLAG
		, INV_HED.INVOICEDATE::DATE AS FIRST_INVOICE_DATE
		, BNG.FINAL_PAID_DATE::DATE AS FINAL_PAYMENT_DATE
		, INV_HED.VENDORINVOICENUMBER AS FIRST_INVOICE_NUMBER
		, 1 AS BILL_ITERATION
		, NULL AS BILL_REPRESENTATIVE
		, NULL AS BILL_SUPERVISOR
		, NULL AS BILL_MANAGER
--		, CASE INV_HED.PAYMENTSTATUS
--			 WHEN 0 THEN ''Billed''
--			 WHEN 1 THEN ''Fully Paid''
--			 WHEN 2 THEN ''Partially Paid''
--		  END AS INVOICE_STATUS
--		CHANGES MADE ON 21/04/23 FOR INVOICE_STATUS_MAPPING BY PINKAL
		,DISM.DERIVED_INVOICE_STATUS AS INVOICE_STATUS
		, IFF(NVL(BNG.WRITEOFFAMOUNT, 0) > 0,TRUE,FALSE) AS WRITEOFF_FLAG
		, NULL AS WRITEOFF_REASON
		, NVL(INV_HED.INVOICEAMOUNT, 0) AS AMOUNT_BILLED
		, NVL(BNG.PAID_AMOUNT, 0) AS AMOUNT_COLLECTED
		, AMOUNT_BILLED - AMOUNT_COLLECTED AS AMOUNT_OUTSTANDING
		, TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE
		, TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE
		, :STR_ETL_TASK_KEY AS ETL_TASK_KEY 
		, :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY 
		, CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
		, CURRENT_USER as ETL_INSERTED_BY
		, CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_UPDATED_DATE
		, CURRENT_USER AS ETL_LAST_UPDATED_BY
		, 0 AS ETL_DELETED_FLAG
		, 0 AS ETL_INFERRED_MEMBER_FLAG
FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLINVOICEHEADER_REPL INV_HED
INNER JOIN BILLING BNG ON INV_HED.INVOICEHEADERID = BNG.INVOICEHEADERID
INNER JOIN CLIENT CLI ON INV_HED.PATIENTID = CLI.PATIENTID
INNER JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.INVOICEDETAILS INV_DET ON INV_DET.INVOICEHEADERID = INV_HED.INVOICEHEADERID
INNER JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.OFFICE_OFFICES_REPL OFFICE ON INV_HED.OFFICEID = OFFICE.OFFICEID
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.STAGE_PAYER_REPL P ON INV_DET.PAYERID = P.PAYERID
LEFT JOIN INVOICE_STATUS_MAPPING ISM ON ISM.INVOICEHEADERID = INV_HED.INVOICEHEADERID
LEFT JOIN HAH.DIM_INVOICE_STATUS_MAPPING DISM ON DISM.INVOICE_STATUS_KEY = ISM.INVOICE_STATUS_KEY
;
RETURN ''SUCCESS'';
END;
';