CREATE OR REPLACE PROCEDURE DW_PROD.REPORT.GET_REPORT_HOURS_AND_CENSUS_OVERTIME_HOURS("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN
    INSERT OVERWRITE INTO REPORT.HOURS_AND_CENSUS_OVERTIME_HOURS
	(PAYROLL_DATE, MONTH_BEGIN_DATE, MONTH_DISPLAY_NAME, BRANCH_KEY, STATE, OFFICE_NUMBER, BRANCH_NAME, EMPLOYEE_KEY, EMPLOYEE_ID, SERVICE_HOURS, OVERTIME_HOURS, OVERTIME_PAY_AMOUNT, 
		ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE, ETL_INSERTED_BY, ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG)
WITH DATES AS (
	SELECT CALENDAR_DATE, FIRST_DAY_OF_MONTH, YEAR_MONTH_DESC MONTH_DISPLAY_NAME
	FROM HAH.DIM_DATE
	WHERE FIRST_DAY_OF_MONTH BETWEEN ''2019-01-01'' AND DATE_TRUNC(''MONTH'', DATEADD(MONTH, -1, CURRENT_DATE()))
), EXCLUDED_EMPLOYEES AS (
	SELECT DISTINCT EMPLOYEES.EMPLOYEE_PID 
	FROM HAH.FACT_VISIT VISITS
	JOIN HAH.DIM_EMPLOYEE EMPLOYEES
		ON EMPLOYEES.EMPLOYEE_KEY = VISITS.EMPLOYEE_KEY 
	JOIN REPORT.VW_HOURS_AND_CENSUS_OVERTIME_EXCLUDED_CONTRACTS CONTRACTS
		ON CONTRACTS.CONTRACT_KEY = VISITS.CONTRACT_KEY
	WHERE VISITS.CONFIRMED_FLAG = ''YES''  --VISITS.STATUS_CODE IN (''02'', ''03'', ''04'', ''05'')
), OVERTIME_DATA AS (
	SELECT PAYROLL.PAYROLL_DATE, DATES.FIRST_DAY_OF_MONTH MONTH_BEGIN_DATE, DATES.MONTH_DISPLAY_NAME, 
		PAYROLL.EMPLOYEE_KEY, COALESCE(EMPLOYEE.PAYROLL_ID, EMPLOYEE.EMPLOYEE_ID) EMPLOYEE_ID,
		BRANCH.BRANCH_KEY, BRANCH.OFFICE_STATE_CODE AS STATE, BRANCH.OFFICE_NUMBER, BRANCH.BRANCH_NAME,
		NVL(SUM(SERVICE_HOURS), 0) SERVICE_HOURS, 
		NVL(SUM(OVERTIME_HOURS), 0) OVERTIME_HOURS, 
		NVL(SUM(OVERTIME_PAY_AMOUNT), 0) OVERTIME_PAY_AMOUNT
	FROM HAH.FACT_PAYROLL PAYROLL
	JOIN HAH.DIM_EMPLOYEE EMPLOYEE 
		ON EMPLOYEE.EMPLOYEE_KEY = PAYROLL.EMPLOYEE_KEY 
	JOIN HAH.DIM_BRANCH BRANCH
		ON BRANCH.BRANCH_KEY = EMPLOYEE.PRIMARY_BRANCH_KEY 
	JOIN DATES DATES
		ON DATES.CALENDAR_DATE = PAYROLL.PAYROLL_DATE 
	LEFT JOIN EXCLUDED_EMPLOYEES EXCLUDED_EMPLOYEES
		ON EXCLUDED_EMPLOYEES.EMPLOYEE_PID = EMPLOYEE.EMPLOYEE_PID -- Join on EMPLOYEE_PID because EMPLOYEE_KEY field is different for Dataflex vs GP
	WHERE PAYROLL.SOURCE_SYSTEM_ID = 5 --''GPSyncData'' 
        AND EXCLUDED_EMPLOYEES.EMPLOYEE_PID IS NULL
		AND UPPER(EMPLOYEE.EMPLOYEE_CATEGORY) = ''FIELD''
	GROUP BY PAYROLL.PAYROLL_DATE, DATES.FIRST_DAY_OF_MONTH, DATES.MONTH_DISPLAY_NAME, 
		PAYROLL.EMPLOYEE_KEY, COALESCE(EMPLOYEE.PAYROLL_ID, EMPLOYEE.EMPLOYEE_ID),
		BRANCH.BRANCH_KEY, BRANCH.OFFICE_STATE_CODE, BRANCH.OFFICE_NUMBER, BRANCH.BRANCH_NAME
	HAVING SUM(PAYROLL.SERVICE_HOURS) > 0 OR SUM(PAYROLL.OVERTIME_HOURS) > 0 OR SUM(PAYROLL.OVERTIME_PAY_AMOUNT) > 0
)
	SELECT OVERTIME_DATA.PAYROLL_DATE, OVERTIME_DATA.MONTH_BEGIN_DATE, OVERTIME_DATA.MONTH_DISPLAY_NAME, 
		OVERTIME_DATA.BRANCH_KEY, OVERTIME_DATA.STATE, OVERTIME_DATA.OFFICE_NUMBER, OVERTIME_DATA.BRANCH_NAME,
		OVERTIME_DATA.EMPLOYEE_KEY, OVERTIME_DATA.EMPLOYEE_ID,
		OVERTIME_DATA.SERVICE_HOURS, OVERTIME_DATA.OVERTIME_HOURS, OVERTIME_DATA.OVERTIME_PAY_AMOUNT,
	    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	   convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	   CURRENT_USER as ETL_INSERTED_BY ,
	   convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
	   CURRENT_USER as ETL_LAST_UPDATED_BY,
	   0 as ETL_DELETED_FLAG
	FROM OVERTIME_DATA;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

return return_result;
END;

';