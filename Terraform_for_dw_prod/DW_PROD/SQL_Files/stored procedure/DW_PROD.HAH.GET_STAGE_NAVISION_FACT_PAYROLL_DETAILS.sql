CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_NAVISION_FACT_PAYROLL_DETAILS("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN

--*****************************************************************************************************************************
-- NAME: NAVISION_FACT_PAYROLL_DETAILS
--
-- PURPOSE: Creates one row per PAYCODE as per Navision
--
-- DEVELOPMENT LOG:
	
-- DATE        AUTHOR                				NOTES:
-- --------    -------------------------------   	--------------------------------------------------------------------------
-- 10/12/22    Aditya Shukla / Jigar Prajapati      Initial development
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.NAVISION_FACT_PAYROLL_DETAILS

WITH
EMPLOYEE AS (
	SELECT DISTINCT 
		MASTER_ID, NO_ AS ID,
		MD5(''NAVISION'' || ''-'' || MASTER_ID || ''-'' || ''NAVISION'') AS EMPLOYEE_KEY
	FROM DISC_DEDUPE_PROD.NAVISION.EMPLOYEE_MASTER_LIST
	UNION
	SELECT DISTINCT 
		MASTER_ID, NO_ AS ID,
		MD5(''NAVISION'' || ''-'' || MASTER_ID || ''-'' || ''NAVISION'') AS EMPLOYEE_KEY
	FROM DISC_DEDUPE_PROD.NAVISION.EMPLOYEE_MATCH_LIST
	WHERE NO_ NOT IN (SELECT DISTINCT NO_ FROM DISC_DEDUPE_PROD.NAVISION.EMPLOYEE_MASTER_LIST)
),
UNIT_TYPE AS
(
	SELECT DISTINCT
		PAYCODE_MAPPING_KEY,
		CASE WHEN PAY_CODE_CATEGORY IN (''REIMBURSEMENT'') THEN ''R''
			WHEN PAY_CODE_CATEGORY IN (''DAILY'') THEN ''D''
			WHEN PAY_CODE_CATEGORY IN (''TRAVEL TIME & MILEAGE'') THEN ''M''
			ELSE ''H''
		END AS UNIT_TYPE_CODE,
		CASE WHEN PAY_CODE_CATEGORY IN (''REIMBURSEMENT'', ''DAILY'') THEN PAY_CODE_CATEGORY
			WHEN PAY_CODE_CATEGORY IN (''TRAVEL TIME & MILEAGE'') THEN ''MILEAGE''
			ELSE ''HOURLY''
		END AS UNIT_TYPE_DESCRIPTION
	FROM DW_PROD.STAGE.NAVISION_DIM_PAYCODE_MAPPING
)
SELECT DISTINCT
	MD5(21 || COALESCE(EMP.MASTER_ID, PLE.EMPLOYEE_NO_) || COALESCE(PLE.CHECK_NO_, ''UNKNOWN'') || PLE.PAYROLL_CONTROL_CODE || PLE.PAY_DATE || PLE.PAY_PERIOD_START_DATE || ''NAVISION'') AS PAYROLL_DETAIL_KEY,
	MD5(CAST(PAY_DATE AS VARCHAR) || ''-'' || COALESCE(EMP.MASTER_ID, PLE.EMPLOYEE_NO_) || ''-'' || NVL(PLE.CHECK_NO_, ''UNKNOWN'')  || ''-'' || PLE.PAY_PERIOD_START_DATE || ''-'' || ''NAVISION'') AS PAYROLL_KEY,
	PAY_DATE::DATE AS REPORT_DATE,
	COALESCE(EMP.EMPLOYEE_KEY, MD5(''NAVISION'' || ''-'' || PLE.EMPLOYEE_NO_ || ''-'' || ''NAVISION'')) AS EMPLOYEE_KEY,
	COALESCE(MD5(''NAVISION'' || ''-'' || B.BRANCH_CODE || B.BRANCH_NAME || ''-'' || ''NAVISION''), ''UNKNOWN'') AS BRANCH_KEY,
	21 AS SOURCE_SYSTEM_ID,
	PAY_DATE::DATE AS PAYROLL_DATE,
	COALESCE(EMP.ID, PLE.EMPLOYEE_NO_) AS EMPLOYEE_ID,
	COALESCE(B.BRANCH_NAME, ''UNKNOWN'') AS BRANCH_NAME,
	''NAVISION'' AS SYSTEM_CODE,
	PAY_PERIOD_START_DATE::DATE AS PAY_PERIOD_START_DATE,
	PAY_PERIOD_START_DATE::DATE AS PAY_PERIOD_END_DATE,
	CHECK_NO_ AS CHECK_NUMBER,
	PLE.PAYROLL_POSTING_GROUP AS PAY_CODE,
	PLE.PAYROLL_CONTROL_NAME AS PAY_CODE_DESCRIPTION,
	PAYROLL_CONTROL_TYPE AS PAY_CODE_TYPE,
	NULL AS PAY_CODE_TYPE_DESCRIPTION,
	PM.PAY_CODE_CATEGORY AS PAY_CODE_CATEGORY,
	NULL AS NUMBER_OF_UNITS,
	UT.UNIT_TYPE_CODE AS UNIT_TYPE_CODE,
	UT.UNIT_TYPE_DESCRIPTION AS UNIT_TYPE_DESCRIPTION,
	ER.REGULAR_RATE::NUMBER AS RATE,
	REPLACE(SUM(AMOUNT) OVER (PARTITION BY EMP.ID, PLE.CHECK_NO_, PLE.PAY_DATE, PLE.PAYROLL_CONTROL_CODE), ''-'') AS AMOUNT,
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_INSERTED_DATE,
		CURRENT_USER AS ETL_INSERTED_BY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_LAST_UPDATED_DATE,
		CURRENT_USER AS ETL_LAST_UPDATED_BY,
		FALSE AS ETL_DELETED_FLAG
FROM DISC_PROD.NAVISION.PAYROLL_LEDGER_ENTRY PLE
LEFT JOIN EMPLOYEE EMP
	ON EMP.ID = PLE.EMPLOYEE_NO_
LEFT JOIN DW_PROD.STAGE.NAVISION_DIM_PAYCODE_MAPPING PM
	ON MD5(21 || PLE.COUNTY || COALESCE(PLE.PAYROLL_POSTING_GROUP, ''UNKNOWN'') || PLE.PAYROLL_CONTROL_TYPE || PLE.PAYROLL_CONTROL_NAME || ''-'' || ''NAVISION'') = PM.PAYCODE_MAPPING_KEY
LEFT JOIN UNIT_TYPE UT
	ON UT.PAYCODE_MAPPING_KEY = PM.PAYCODE_MAPPING_KEY
LEFT JOIN DISC_PROD.NAVISION.EMPLOYEE_RATES ER
	ON ER.NO_ = EMP.MASTER_ID
LEFT JOIN DISC_PROD.NAVISION.BRANCH_MAPPING B
	ON B.BRANCH_CODE = LEFT(PLE.EMPLOYEE_NO_, 3);
END;
';