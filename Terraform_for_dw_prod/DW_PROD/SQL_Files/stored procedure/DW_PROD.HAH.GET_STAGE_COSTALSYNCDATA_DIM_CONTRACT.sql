CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_COSTALSYNCDATA_DIM_CONTRACT("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN
        --*****************************************************************************************************************************
-- NAME:  CostalSyncData_DIM_CONTRACT
--
-- PURPOSE: Creates one row per contract according to CoastalSnyc (combination of SHC_ALTRUS and SHC_SAVANNAH)
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 01/06/20     Greg Marsh           Initial development
--03/26/20      Rachel Stewart      Added Mileage, billable and payable flags
-- 04/01/20		Mohd Kamaludin		 Added CDC
-- 06/05/20		Mir Ali				 Added DB as part of join clause
-- 06/30/20		Mir Ali				Added default Revenue category/subcategory and billabe, payable, and mileage flags
-- 07/07/20		Mir Ali				Modified to use CV raw tables, instead of CV_MonthlyHours
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO STAGE.CostalSyncData_DIM_CONTRACT
WITH HOUR_UNIT_MAPPING AS (
	SELECT DB, PLAN_CODE, 
		MIN(TIME_TRANSLATION_CODE) AS PLAN_TIME_TRANSLATION_CODE, 
		CASE LEFT(MIN(TIME_TRANSLATION_CODE), 2) WHEN ''15'' THEN 4 WHEN ''30'' THEN 2 ELSE 1 END MATH_FACTOR,
		MAX(ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
	FROM DISC_PROD.COSTALSYNCDATA.CV_PLANTIMETRANSLATION
	WHERE TRIM(TIME_TRANSLATION_CODE) LIKE ''%MIN''
	GROUP BY DB, PLAN_CODE 
), DD_SUPERVISORS AS (
    SELECT ADMISSIONS.DB, ADMISSIONS.CURRENT_PLAN_CODE AS PLAN_CODE,
		MAX(IFF(SUPERVISORS.DEPARTMENT_NAME LIKE ''%ADULT%'' OR SUPERVISORS.DEPARTMENT_NAME LIKE ''%DD%'' OR SUPERVISORS.DEPARTMENT_NAME LIKE ''%CLA%'' OR ADMISSIONS.CURRENT_PLAN_CODE LIKE ''%DD%'' OR LOCATIONS.LOCATION_NAME LIKE ''%DD%'', 1, 0)) AS DD_check,
		MAX(IFF(TRIM(LOCATIONS.LOCATION_NAME) = ''AIKEN'', 1, 0)) SC_State_Check,
		MAX(
			NULLIF(
				GREATEST(
					COALESCE(ADMISSIONS.ETL_LAST_UPDATED_DATE, ''1/1/1900''),
					COALESCE(SUPERVISORS.ETL_LAST_UPDATED_DATE, ''1/1/1900''),
					COALESCE(LOCATIONS.ETL_LAST_UPDATED_DATE, ''1/1/1900'')
				), ''1/1/1900''
			) 
		) AS ETL_LAST_UPDATED_DATE
    FROM DISC_PROD.COSTALSYNCDATA.CV_ADMISSIONS ADMISSIONS
    LEFT JOIN DISC_PROD.COSTALSYNCDATA.CV_DEPARTMENTS SUPERVISORS
    	ON SUPERVISORS.DB = ADMISSIONS.DB AND SUPERVISORS.DEPARTMENT__CODE = ADMISSIONS.DEPARTMENT__CODE
	LEFT JOIN DISC_PROD.COSTALSYNCDATA.CV_LOCATIONS LOCATIONS
		ON LOCATIONS.DB = ADMISSIONS.DB AND LOCATIONS.LOCATION_CODE = ADMISSIONS.LOCATION_CODE 
	GROUP BY ADMISSIONS.DB, ADMISSIONS.CURRENT_PLAN_CODE
)
SELECT
	md5(TRIM(PLANS.DB) || ''-'' || TRIM(PLANS.PLAN_CODE) || ''-''  || ''COSTALSYNCDATA'') AS CONTRACT_KEY, --PK
    TRIM(PLANS.PLAN_CODE) AS CONTRACT_CODE, --BK
    TRIM(PLANS.DB) AS SYSTEM_CODE, --BK
    case when TRIM(PLANS.DB) = ''SHC_ALTRUS'' then 1 else 2 end SOURCE_SYSTEM_ID, --BK
	TRIM(PLANS.PLAN_NAME) AS CONTRACT_NAME,
	NULL AS SERVICE_CODE_ID,
	NULL AS SERVICE_KEY,
    NULL AS DEFAULT_BILL_CODE,
    NULL AS PAYROLL_CODE,
    CASE TRIM(PLANS.DB) WHEN ''SHC_ALTRUS'' THEN ''CLS''
    	WHEN ''SHC_SAVANNAH'' THEN ''HC'' END AS REVENUE_CATEGORY,
	CASE TRIM(PLANS.DB) WHEN ''SHC_ALTRUS'' THEN ''RES''
    	WHEN ''SHC_SAVANNAH'' THEN ''HC'' END AS REVENUE_SUBCATEGORY_CODE,
	CASE TRIM(PLANS.DB) WHEN ''SHC_ALTRUS'' THEN ''RESIDENTIAL CILA/DAILY''
    	WHEN ''SHC_SAVANNAH'' THEN ''HOME CARE'' END AS REVENUE_SUBCATEGORY_NAME,
    IFF(SUPERVISORS.DD_check = 1, ''BH'', ''HC'') AS PAYOR_CODE,
    IFF(SUPERVISORS.DD_check = 1, ''BH - Behavior Health/DD'', ''HC - Home Care'') AS PAYOR_DESCRIPTION,
    IFF(SUPERVISORS.DD_check = 1, ''BH'', ''HC'')  AS SERVICE_LINE_CODE,
    IFF(SUPERVISORS.DD_check = 1, ''BH - Behavior Health/DD'', ''HC - Home Care'') AS SERVICE_LINE_DESCRIPTION,
--	CASE WHEN OfficeName IN (''AIKEN'') THEN ''SC'' ELSE ''GA'' END AS CONTRACT_STATE_CODE,
	CASE WHEN SUPERVISORS.SC_State_check = 1 THEN ''SC'' ELSE ''GA'' END AS CONTRACT_STATE_CODE,
	CASE MAPPING.MATH_FACTOR 
			WHEN 4 THEN ''.25HR'' 
			WHEN 2 THEN ''.5HR'' 
			ELSE ''1HR'' 
		END AS TIME_TRANSLATION_CODE,
	COALESCE(MAPPING.MATH_FACTOR, 1) AS TIME_TRANSLATION_DIVIDER,
	NULL AS PAY_TRAVELS_CODE,
  FALSE AS MILEAGE_FLAG,
  TRUE AS PAYABLE_FLAG,
  TRUE AS BILLABLE_FLAG,
	IFF(MAPPING.MATH_FACTOR = 4, 1, 0) AS BILLED_BY_QUARTER_HOURS,
	IFF(MAPPING.MATH_FACTOR = 2, 1, 0) AS BILLED_BY_HALF_HOURS,
	TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
    TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
	-- ETL Fields
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG,
    0 as ETL_INFERRED_MEMBER_FLAG
FROM DISC_PROD.COSTALSYNCDATA.CV_PLANS AS PLANS
LEFT JOIN HOUR_UNIT_MAPPING AS MAPPING
	ON MAPPING.DB = PLANS.DB AND MAPPING.PLAN_CODE = PLANS.PLAN_CODE 
LEFT JOIN DD_SUPERVISORS AS SUPERVISORS
	ON SUPERVISORS.DB = PLANS.DB AND SUPERVISORS.PLAN_CODE = PLANS.PLAN_CODE
WHERE PLANS.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz 
	OR MAPPING.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz
	OR SUPERVISORS.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz;

    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
    return return_result;
END;
    ';