CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_ASR_DIM_INVOICE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
  RETURN_RESULT VARCHAR(1000);
BEGIN
--****************************************************************************************************************************
-- NAME:  ASR_DIM_INVOICE
--
-- PURPOSE: Creates one row per invoice according to ASR
--
-- PRODELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 07/04/2022	Jashvant Patel			Initial PRODelopment
-- 07/04/2022	Abhishek Sunil			Revised logic, resolved errors
-- 07/14/2022	Abhishek Sunil			Added Missing Supervisors
-- 07/20/2022	Abhishek Sunil			Added logic to get Invoices from ASR Aging reports (Invoices of visits after 06/01/2022)
-- 30/03/2023	PINKAL PANCHAL			INVOICE_STATUS_MAPPING CHANGES FOR RCM
-- 09/04/2023   Pooja Bagane            Added logic to get data from ASR_RECEIVABLES,ASR_PAYMENTSRECEIVED and ASR_CLAIMSTATUSES
--*****************************************************************************************************************************

INSERT OVERWRITE INTO DW_PROD.STAGE.ASR_DIM_INVOICE
WITH CLIENT AS
(
    SELECT * FROM
    (
        SELECT MASTER_ID, CUSTOMERID,SUPERVISORID
        FROM DISC_DEDUPE_PROD.ASR.CLIENT_MASTER_LIST
    )
    UNION
    SELECT * FROM
    (
        SELECT DISTINCT MASTER_ID, CUSTOMERID, NULL AS SUPERVISORID
        FROM DISC_DEDUPE_PROD.ASR.CLIENT_MATCH_LIST
        WHERE CUSTOMERID NOT IN (SELECT CUSTOMERID FROM DISC_DEDUPE_PROD.ASR.CLIENT_MASTER_LIST)
    )
)
,CLEANED_SUPERVISORS AS (
	SELECT  
		SUPERVISORID, 
		IFF(SUPERVISORID IN (164,165),''Oksana Aminov'',SUPERVISORNAME) AS SUPERVISORNAME  
	FROM DISC_PROD.ASR.ASR_SUPERVISORS
) 
,ADJ_AND_CLN_INVOICES AS ( 
SELECT  * FROM(
   (
  SELECT 
RB.CUSTOMERID , 
RB.BILLINGTRANSACTIONID ,
RB.VISITDATE ,
PB.CLAIMSTATUS,
RB.BILLINGTRANSACTIONID as INVOICENUMBER,
RB.PAYERSOURCEID,
RB.LOCATIONID,
RB.BILLEDAMOUNT,
RB.ISPAID,
PB.REIMBAMOUNT,
COALESCE (SPLIT_PART(PB.PAIDDATE,'' '',0),''12/31/1900'')::DATE AS DMY_PAID_DATE,
TRY_TO_DATE(TRIM(coalesce(RB.DATECHECKEDIN,RB.VISITDATE)),''MM/DD/YYYY HH:MI:SS'') AS PERIOD,
PB.PAIDDATE AS ACT_PAID_DATE,
CS.REIMBURSEMENT_STATUS_NAME AS STATUS,
TRY_TO_DATE(RB.BILLINGDATE,''MM/DD/YYYY HH24:MI:SS'') AS INVOICE_DATE,
        COALESCE(
            TRY_TO_DATE(RB.VISITDATE ,''MM/DD/YYYY HH24:MI:SS''),
            CASE -- WHEN the visit IS RESCHEDULED THEN the visit date IS NOT updated, TO maintain consistency picking it FROM either TIMECHECKEDIN OR RESCHEDULEDTO Date
                WHEN TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <> TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
                THEN TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
                ELSE TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')
            END
        ) AS SERVICE_DATE,
        NVL(RB.BILLEDAMOUNT,0) AS AMOUNT_BILLED,
        NVL(PB.REIMBAMOUNT,0) AS AMOUNT_RECEIVED
--ROW_NUMBER() OVER (PARTITION BY RB.BILLINGTRANSACTIONID ORDER BY COALESCE (SPLIT_PART(PB.PAIDDATE,'' '',0),''12/31/1900'')::DATE  DESC) RN
FROM DISC_PROD.ASR.ASR_RECEIVABLES  RB 
LEFT JOIN  (SELECT
PYMT_REC.BILLINGTRANSACTIONID,
max(CASE WHEN CLAM_STATS.BILLINGTRANSACTIONID IS NOT NULL THEN 1
            ELSE PYMT_REC.CLAIMSTATUS END) AS CLAIMSTATUS,
max(SPLIT_PART(PAIDDATE,'' '',0))::DATE AS PAIDDATE,
sum(REIMBAMOUNT) AS REIMBAMOUNT
from  DISC_PROD.ASR.ASR_PAYMENTSRECEIVED PYMT_REC
LEFT JOIN (SELECT BILLINGTRANSACTIONID  FROM  DISC_PROD.ASR.ASR_PAYMENTSRECEIVED
WHERE CLAIMSTATUS = 1 
GROUP BY  1) CLAM_STATS
ON PYMT_REC.BILLINGTRANSACTIONID = CLAM_STATS.BILLINGTRANSACTIONID
GROUP BY 1 ) PB 
ON RB.BILLINGTRANSACTIONID =PB.BILLINGTRANSACTIONID  
LEFT JOIN DISC_PROD.ASR.ASR_CLAIMSTATUSES CS 
ON PB.CLAIMSTATUS =CS.REIMBURSEMENT_STATUS_ID
LEFT JOIN DISC_PROD.ASR.ASR_VISITS V ON V.SERVICEVISITACTUALID = RB.SERVICEVISITACTUALID  
WHERE RB.BILLINGTRANSACTIONID  IS NOT NULL
AND RB.BILLINGDATE IS NOT NULL
 )
 )
)
,EXCLUDED_INVOICE AS (
	SELECT *
	FROM DISC_PROD.ASR.ASR_REVENUE
	WHERE TO_DATE(VISIT_DATE,''MM/DD/YYYY'') < ''2022-06-01'' -- Invoices FROM JUNE 1st, 2022 IS processed IN the 2nd logic
	AND BILLING_TRAN_ID_NUMBER NOT IN (SELECT BILLINGTRANSACTIONID FROM ADJ_AND_CLN_INVOICES)
)
,INVOICE_STATUS_MAPPING AS (
SELECT DISTINCT
	RSB.INVOICENUMBER AS INVOICE_NO,
 	13 AS SOURCE_SYSTEM_ID,
	''PRIME'' AS SYSTEM_CODE,
   CASE
		WHEN UPPER(TRIM(RSB.STATUS)) IN (''DENIAL'') THEN ''CANCELLED''
		WHEN UPPER(TRIM(RSB.STATUS)) IN (''PAID'') THEN ''PAID''
		WHEN UPPER(TRIM(RSB.STATUS)) IN (''PARTIAL'',''PAYABLE'') THEN  ''PARTIAL PAY''
		WHEN UPPER(TRIM(RSB.STATUS)) IN (''PENDING'',''Appealed'') THEN  ''BILLED''
		WHEN UPPER(TRIM(RSB.STATUS)) IN (''WRITEOFF'') THEN  ''WRITEOFF''
		ELSE ''UNKNOWN''
		END AS DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY
	FROM ADJ_AND_CLN_INVOICES  RSB
UNION ALL
SELECT DISTINCT
	BSVR.BILLING_TRAN_ID_NUMBER AS INVOICE_NO,
	13 AS SOURCE_SYSTEM_ID,
	''PRIME'' AS SYSTEM_CODE,
    IFF(BSVR.PAYABLE_OR_BILLIABLE_HRS IS NULL,''UNKNOWN'',''BILLED'') AS DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY
	FROM EXCLUDED_INVOICE  BSVR
)
SELECT DISTINCT 
	MD5(''PRIME'' || ''-'' || TRIM(BSVR.BILLING_TRAN_ID_NUMBER) || ''-'' || ''ASR'') AS INVOICE_KEY,
    MD5(''PRIME'' || ''-'' || COALESCE(TRIM(CLI.MASTER_ID),TRIM(BSVR.CUSTOMER_ID)) || ''-'' || ''ASR'') AS CLIENT_KEY,
    BSVR.BILLING_TRAN_ID_NUMBER AS INVOICE_NUMBER,
    BSVR.BILLING_TRAN_ID_NUMBER AS ALTERNATE_INVOICE_NUMBER,
    TO_VARCHAR(TRY_TO_DATE(BSVR.VISIT_DATE,''MM/DD/YYYY''),''YYYYMM'') AS PERIOD,
    ''Regular'' AS INVOICE_TYPE,
    1 AS NUMBER_OF_CLIENTS,
    ''PRIME'' AS SYSTEM_CODE,
    13 AS SOURCE_SYSTEM_ID,
    MD5(''PRIME'' || ''-'' || NVL(TRIM(BM.NEW_LOCATION_ID),''UNKNOWN'') || ''-'' || ''ASR'') AS BRANCH_KEY,
    P.PAYERSOURCEID AS PAYOR_CODE,
    P.PAYERSOURCENAME AS PAYOR_NAME,
    IFF(BSVR.IS_PAID = ''TRUE'', FALSE, TRUE) AS INVOICE_OPEN_FLAG,
    TRY_TO_DATE(BSVR.VISIT_DATE,''MM/DD/YYYY'') AS FIRST_INVOICE_DATE,
    NULL AS FINAL_PAYMENT_DATE,
    BSVR.BILLING_TRAN_ID_NUMBER AS FIRST_INVOICE_NUMBER,
    1 AS BILL_ITERATION,
    NULL AS BILL_REPRESENTATIVE,
    UPPER(S.SUPERVISORNAME) AS BILL_SUPERVISOR,
    NULL AS BILL_MANAGER,
--    IFF(BSVR.PAYABLE_OR_BILLIABLE_HRS IS NULL,''Unbilled'',''Billed'') AS INVOICE_STATUS,
--	CHANGES MADE ON 30/03/23 FOR INVOICE_STATUS_MAPPING BY PINKAL
	DISM.DERIVED_INVOICE_STATUS AS INVOICE_STATUS,
    FALSE AS WRITEOFF_FLAG,
    NULL AS WRITEOFF_REASON,
    --CASE WHEN BSVR.BILLING_AMOUNT = ''NULL'' THEN 0 ELSE BSVR.BILLING_AMOUNT END  AS AMOUNT_BILLED,
    TRIM(BSVR.BILLING_AMOUNT) AS AMOUNT_BILLED,
    IFF(BSVR.IS_PAID = ''TRUE'', BSVR.BILLING_AMOUNT, NULL) AS AMOUNT_COLLECTED,
    (AMOUNT_BILLED - AMOUNT_COLLECTED) AS AMOUNT_OUTSTANDING,
	''1900-01-01''::DATE AS EFFECTIVE_FROM_DATE,
    ''9999-12-31''::DATE AS EFFECTIVE_TO_DATE,
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
    CURRENT_USER AS ETL_INSERTED_BY ,
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
    CURRENT_USER AS ETL_LAST_UPDATED_BY,
    0 AS ETL_DELETED_FLAG,
    0 AS ETL_INFERRED_MEMBER_FLAG
FROM
     EXCLUDED_INVOICE BSVR
LEFT JOIN
    CLIENT CLI ON BSVR.CUSTOMER_ID = CLI.CUSTOMERID
LEFT JOIN
    DISC_PROD.ASR.ASR_PAYERSOURCES P ON UPPER(P.PAYERSOURCENAME) = UPPER(BSVR.PAYER_SOURCE)
LEFT JOIN
    DISC_PROD.ASR.BRANCH_MAPPING BM ON TRIM(UPPER(BM.OLD_LOCATION_NAME)) = TRIM(UPPER(BSVR.LOCATION))
LEFT JOIN
    CLEANED_SUPERVISORS S ON CLI.SUPERVISORID = S.SUPERVISORID
LEFT JOIN INVOICE_STATUS_MAPPING ISM 
	ON ISM.INVOICE_NO = BSVR.BILLING_TRAN_ID_NUMBER
LEFT JOIN HAH.DIM_INVOICE_STATUS_MAPPING DISM
	ON DISM.INVOICE_STATUS_KEY = ISM.INVOICE_STATUS_KEY
 WHERE   NVL(BM.IS_ASR_BRANCH, TRUE) = TRUE
UNION 
SELECT  
MD5(''PRIME'' || ''-'' || TRIM(RSB.BILLINGTRANSACTIONID) || ''-'' || ''ASR'') AS INVOICE_KEY,
MD5(''PRIME'' || ''-'' || COALESCE(TRIM(CLI.MASTER_ID),TRIM(RSB.CUSTOMERID)) || ''-'' || ''ASR'') AS CLIENT_KEY,
RSB.BILLINGTRANSACTIONID AS INVOICE_NUMBER,
RSB.BILLINGTRANSACTIONID AS ALTERNATE_INVOICE_NUMBER,
TO_VARCHAR(TRY_TO_DATE( SPLIT_PART(RSB.VISITDATE,'' '',0),''MM/DD/YYYY''),''YYYYMM'') AS period,
''Regular'' AS INVOICE_TYPE,
1 AS NUMBER_OF_CLIENTS,
''PRIME'' AS SYSTEM_CODE,
13 AS SOURCE_SYSTEM_ID,
MD5(''PRIME'' || ''-'' || NVL(TRIM(BM.NEW_LOCATION_ID),''UNKNOWN'') || ''-'' || ''ASR'') AS BRANCH_KEY,
P.PAYERSOURCEID AS PAYOR_CODE,
P.PAYERSOURCENAME AS PAYOR_NAME,
  CASE
		WHEN UPPER(TRIM(RSB.ISPAID)) IN (''TRUE'') THEN FALSE
		WHEN RSB.REIMBAMOUNT < 0 AND (RSB.BILLEDAMOUNT - RSB.REIMBAMOUNT) <= 0 THEN FALSE
		ELSE TRUE
	END AS INVOICE_OPEN_FLAG,
SPLIT_PART(RSB.VISITDATE,'' '',0)::DATETIME  AS FIRST_INVOICE_DATE,
max(COALESCE(SPLIT_PART(RSB.DMY_PAID_DATE,'' '',0),''12/31/1900'')::DATETIME )AS FINAL_PAYMENT_DATE,
RSB.BILLINGTRANSACTIONID AS FIRST_INVOICE_NUMBER,
1 AS BILL_ITERATION,
NULL AS BILL_REPRESENTATIVE,
S.SUPERVISORNAME AS BILL_SUPERVISOR,
NULL AS BILL_MANAGER,
DISM.DERIVED_INVOICE_STATUS AS INVOICE_STATUS,
    CASE 
	    WHEN  RSB.CLAIMSTATUS = 4 then TRUE
	    else FALSE
    END AS WRITEOFF_FLAG,
    CASE 
	    WHEN  RSB.CLAIMSTATUS = 4 then ''MEMO''
	    ELSE  NULL
    END AS WRITEOFF_REASON,
RSB.BILLEDAMOUNT AS AMOUNT_BILLED,
COALESCE (RSB.REIMBAMOUNT,0) AS AMOUNT_COLLECTED,
(AMOUNT_BILLED - AMOUNT_COLLECTED)AS AMOUNT_OUTSTANDING,
''1900-01-01''::DATE AS EFFECTIVE_FROM_DATE,
''9999-12-31''::DATE AS EFFECTIVE_TO_DATE,
:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
CURRENT_USER AS ETL_INSERTED_BY ,
CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
CURRENT_USER AS ETL_LAST_UPDATED_BY,
0 AS ETL_DELETED_FLAG,
0 AS ETL_INFERRED_MEMBER_FLAG
FROM
	ADJ_AND_CLN_INVOICES RSB
LEFT JOIN
    CLIENT CLI ON RSB.CUSTOMERID = CLI.CUSTOMERID
LEFT JOIN 
    DISC_PROD.ASR.BRANCH_MAPPING BM ON TRIM(UPPER(BM.OLD_LOCATION_ID)) = TRIM(UPPER(RSB.LOCATIONID))
LEFT JOIN 
    DISC_PROD.ASR.ASR_PAYERSOURCES P ON UPPER(P.PAYERSOURCEID) = UPPER(RSB.PAYERSOURCEID)
LEFT JOIN 
   DISC_PROD.ASR.ASR_SUPERVISORS S ON S.SUPERVISORID=CLI.SUPERVISORID
LEFT JOIN 
   INVOICE_STATUS_MAPPING ISM ON ISM.INVOICE_NO = RSB.INVOICENUMBER
LEFT JOIN 
   DW_PROD.HAH.DIM_INVOICE_STATUS_MAPPING DISM ON DISM.INVOICE_STATUS_KEY = ISM.INVOICE_STATUS_KEY
WHERE RSB.BILLINGTRANSACTIONID IS NOT NULL
AND NVL(BM.IS_ASR_BRANCH, TRUE) = TRUE
GROUP BY
RSB.BILLINGTRANSACTIONID,CLI.MASTER_ID,RSB.CUSTOMERID,RSB.VISITDATE,RSB.BILLEDAMOUNT,RSB.REIMBAMOUNT,RSB.ISPAID,RSB.CLAIMSTATUS,
P.PAYERSOURCEID,P.PAYERSOURCENAME,BM.NEW_LOCATION_ID,S.SUPERVISORNAME,DISM.DERIVED_INVOICE_STATUS,RSB.AMOUNT_BILLED;

SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
	RETURN return_result;
    END;
';