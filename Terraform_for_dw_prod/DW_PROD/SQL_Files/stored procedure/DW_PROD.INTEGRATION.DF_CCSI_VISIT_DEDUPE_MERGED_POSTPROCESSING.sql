CREATE OR REPLACE PROCEDURE DW_PROD.INTEGRATION.DF_CCSI_VISIT_DEDUPE_MERGED_POSTPROCESSING("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result varchar(1000);
BEGIN

insert overwrite into DW_PROD.INTEGRATION.DF_CCSI_VISIT_DEDUPE_MERGED 
WITH NEW AS (
SELECT * FROM (
SELECT (CASE WHEN SOURCE_SYSTEM_ID=3 THEN 1
WHEN SOURCE_SYSTEM_ID =8 THEN 2
end) as SRC_PRI,
row_number() over(partition by Cluster_ID order by SRC_PRI) min_record_id,
VISIT_KEY,CLIENT_KEY,CLIENT_PID,EMPLOYEE_KEY,SOURCE_SYSTEM_ID,SERVICE_DATE, CLUSTER_ID FROM DW_PROD.INTEGRATION.DF_CCSI_VISIT_DEDUPE WHERE CLUSTER_ID IS NOT NULL
)
WHERE min_record_id = 1
) --select * from NEW;
, OLD AS (
SELECT * FROM (
SELECT (CASE WHEN SOURCE_SYSTEM_ID=3 THEN 1
WHEN SOURCE_SYSTEM_ID =8 THEN 2
end) as SRC_PRI,
row_number() over(partition by Cluster_ID order by SRC_PRI DESC) min_record_id,
VISIT_KEY,CLIENT_KEY,CLIENT_PID,EMPLOYEE_KEY,SOURCE_SYSTEM_ID,SERVICE_DATE,CLUSTER_ID FROM DW_PROD.INTEGRATION.DF_CCSI_VISIT_DEDUPE  WHERE Cluster_ID IS NOT NULL
)  --WHERE min_record_id = 1
) --SELECT * FROM OLD;
, final as (
SELECT distinct N.VISIT_KEY AS DF_VISIT_KEY ,N.CLIENT_KEY AS DF_CLIENT_KEY,N.CLIENT_PID AS DF_CLIENT_PID,N.EMPLOYEE_KEY AS DF_EMPLOYEE_KEY,N.SOURCE_SYSTEM_ID AS DF_SOURCE_SYSTEM_ID,
  O.VISIT_KEY as CCSI_VISIT_KEY,O.CLIENT_KEY AS CCSI_CLIENT_KEY ,O.CLIENT_PID AS CCSI_CLIENT_PID,O.EMPLOYEE_KEY AS CCSI_EMPLOYEE_KEY,O.SOURCE_SYSTEM_ID AS CCSI_SOURCE_SYSTEM_ID
FROM DW_PROD.INTEGRATION.DF_CCSI_VISIT_DEDUPE R
LEFT JOIN OLD O ON O.CLUSTER_ID = R.CLUSTER_ID AND O.SERVICE_DATE = R.SERVICE_DATE
LEFT JOIN NEW N ON N.CLUSTER_ID =R.CLUSTER_ID AND  N.SERVICE_DATE =R.SERVICE_DATE
) select * from final;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;
';