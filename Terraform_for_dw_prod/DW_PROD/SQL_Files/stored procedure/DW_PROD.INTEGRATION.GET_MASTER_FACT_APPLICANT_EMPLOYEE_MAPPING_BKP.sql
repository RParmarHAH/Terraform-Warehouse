CREATE OR REPLACE PROCEDURE DW_PROD.INTEGRATION.GET_MASTER_FACT_APPLICANT_EMPLOYEE_MAPPING_BKP()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var sql = `
  INSERT OVERWRITE INTO DW_PROD.INTEGRATION.FACT_APPLICANT_EMPLOYEE_MAPPING
  WITH APPLICANT_CLUSTERS AS (
    SELECT * 
    FROM DW_PROD.INTEGRATION.APPLICANT_EMPLOYEE_DEDUPE_OUTPUT 
    WHERE CLUSTER_ID IN (
      SELECT cluster_id FROM DW_PROD.INTEGRATION.APPLICANT_EMPLOYEE_DEDUPE_OUTPUT 
      WHERE SOURCE_SYSTEM_ID IN (20,12)
    )
  )
  --SELECT * FROM APPLICANT_CLUSTERS  WHERE CLUSTER_ID = 117;
  , SOURCE_SYSTEM_COUNT_MORE_THAN_2_CTE AS (
    select * from (
      select count(source_system_id) over (partition by cluster_id) source_system_count, *
      from APPLICANT_CLUSTERS
    ) where source_system_count > 2
  )
  --select * FROM SOURCE_SYSTEM_COUNT_MORE_THAN_2_CTE;
  , RECORD AS (
    SELECT * FROM (
      select row_number() over(partition by cluster_id order by EMPLOYEE_LAST_CHECK_DATE DESC NULLS LAST, EMPLOYEE_FIRST_CHECK_DATE DESC NULLS LAST, EMPLOYEE_LAST_WORKED_DATE DESC NULLS LAST, HIRED_DATE DESC NULLS LAST) rn,*
      from SOURCE_SYSTEM_COUNT_MORE_THAN_2_CTE 
      WHERE source_system_id NOT IN (12,20)
      UNION ALL
      select row_number() over(partition by cluster_id order by HIRED_DATE DESC NULLS LAST, APPLIED_DATE DESC NULLS LAST) rn,*
      from SOURCE_SYSTEM_COUNT_MORE_THAN_2_CTE 
      WHERE source_system_id IN (12,20)
    ) WHERE RN = 1
  )
  -- SELECT * FROM RECORD ORDER BY CLUSTER_ID::INT;
  , SOURCE_SYSTEM_COUNT_EQUAL_TO_2_CTE AS (
    SELECT * FROM 
    (
      SELECT COUNT(SOURCE_SYSTEM_ID) OVER (PARTITION BY CLUSTER_ID) SOURCE_SYSTEM_COUNT,*
      FROM APPLICANT_CLUSTERS
    ) WHERE source_system_count = 2
  )
  , EMPLOYEE_RECORDS AS (
    SELECT EMPLOYEE_KEY,EMPLOYEE_ID,SYSTEM_CODE,SOURCE_SYSTEM_ID,APPLIED_DATE,HIRED_DATE,ETL_INSERTED_DATE,CLUSTER_ID 
    FROM RECORD WHERE SOURCE_SYSTEM_ID NOT IN (12,20)
    UNION ALL
    SELECT EMPLOYEE_KEY,EMPLOYEE_ID,SYSTEM_CODE,SOURCE_SYSTEM_ID,APPLIED_DATE,HIRED_DATE,ETL_INSERTED_DATE,CLUSTER_ID
    FROM SOURCE_SYSTEM_COUNT_EQUAL_TO_2_CTE WHERE SOURCE_SYSTEM_ID NOT IN (12,20)
  )
  , APPLICANT_RECORDS AS (
    SELECT EMPLOYEE_KEY,EMPLOYEE_ID,SYSTEM_CODE,SOURCE_SYSTEM_ID,APPLIED_DATE,HIRED_DATE,ETL_INSERTED_DATE,CLUSTER_ID
    FROM RECORD WHERE SOURCE_SYSTEM_ID IN (12,20)
    UNION ALL
    SELECT EMPLOYEE_KEY,EMPLOYEE_ID,SYSTEM_CODE,SOURCE_SYSTEM_ID,APPLIED_DATE,HIRED_DATE,ETL_INSERTED_DATE,CLUSTER_ID
    FROM SOURCE_SYSTEM_COUNT_EQUAL_TO_2_CTE WHERE SOURCE_SYSTEM_ID IN (12,20)
  )
  SELECT
    A.EMPLOYEE_KEY AS APPLICANT_KEY,  
    E.EMPLOYEE_KEY AS EMPLOYEE_KEY,
    A.EMPLOYEE_ID AS APPLICANT_ID,
    E.EMPLOYEE_ID AS EMPLOYEE_ID,
    A.SOURCE_SYSTEM_ID AS APPLICANT_SOURCE_SYSTEM_ID,
    E.SOURCE_SYSTEM_ID AS EMPLOYEE_SOURCE_SYSTEM_ID,
    A.SYSTEM_CODE AS APPLICANT_SYSTEM_CODE,
    E.SYSTEM_CODE AS EMPLOYEE_SYSTEM_CODE,
    A.APPLIED_DATE AS APPLICANT_APPLIED_DATE,
    E.HIRED_DATE AS EMPLOYEE_HIRED_DATE,  
    A.ETL_INSERTED_DATE AS APPLICANT_ETL_INSERTED_DATE,
    E.ETL_INSERTED_DATE AS EMPLOYEE_ETL_INSERTED_DATE
  FROM APPLICANT_RECORDS A INNER JOIN EMPLOYEE_RECORDS E ON A.CLUSTER_ID = E.CLUSTER_ID;
`;
  try {
        snowflake.execute (
            {sqlText: sql}
            );
            return "Succeeded.";   // Return a success/error indicator.
        }
    catch (err)  {
        return "Failed: " + err;   // Return a success/error indicator.
        }  
  ';