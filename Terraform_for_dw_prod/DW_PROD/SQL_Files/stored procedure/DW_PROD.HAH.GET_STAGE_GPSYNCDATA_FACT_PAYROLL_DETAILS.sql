CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_GPSYNCDATA_FACT_PAYROLL_DETAILS("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '

BEGIN
--******************************************************************************************************************************************
-- NAME:  GPSYNCDATA_FACT_PAYROLL_DETAILS
--
-- PURPOSE: Creates one row per pay code per pay check per employee
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -------------------------------------------------------------------------------------------------------        
-- 12/??/21    Alex Marianyi		 Initial development
-- 22/03/22    Aditya Shukla		 Initial devleopment	
--******************************************************************************************************************************************
--
-- Build FACT_PAYROLL_DETAIL based on GPSYNCDATA.PAYSTUB_DETAILLINE

INSERT OVERWRITE INTO STAGE.GPSYNCDATA_FACT_PAYROLL_DETAILS

WITH EMPLOYEE AS (
	SELECT DISTINCT 
		MASTER_ID, EMPLOYEE_ID, DB, OFFICE_NO, WORK_STATE,
		MD5(CAST(TRIM(MASTER_ID) AS VARCHAR)||''-''|| DB) AS EMPLOYEE_KEY
	FROM DISC_DEDUPE_PROD.GPSYNCDATA.EMPLOYEE_MASTER_LIST
	UNION
	SELECT DISTINCT 
		MASTER_ID, EMPLOYEE_ID, DB, OFFICE_NO, WORK_STATE,
		MD5(CAST(TRIM(MASTER_ID) AS VARCHAR)||''-''|| DB) AS EMPLOYEE_KEY
	FROM DISC_DEDUPE_PROD.GPSYNCDATA.EMPLOYEE_MATCH_LIST
	WHERE EMPLOYEE_ID NOT IN (SELECT DISTINCT EMPLOYEE_ID FROM DISC_DEDUPE_PROD.GPSYNCDATA.EMPLOYEE_MASTER_LIST)
),
PAY_CODE_TYPE_DESCRIPTION AS 
(
	SELECT DISTINCT 
		pd.CODETYPES,
		CASE
			WHEN pd.CODETYPES IN (''P'') THEN ''PAY CODES''
			WHEN pd.CODETYPES IN (''D'') THEN ''DEDUCTIONS''
			WHEN pd.CODETYPES IN (''S'') THEN ''STATE TAXES''
			WHEN pd.CODETYPES IN (''L'') THEN ''LOCAL TAXES''
			WHEN pd.CODETYPES IN (''F'') THEN ''FEDERAL PAYROLL TAX''
			ELSE NULL
		END AS PAY_CODE_TYPE_DESCRIPTION
	FROM DISC_PROD.GPSYNCDATA.PAYSTUB_DETAILLINE pd
	GROUP BY 1, 2
),
UNIT_TYPE AS 
(
	SELECT DISTINCT 
		PAYCODE_MAPPING_KEY,
		CASE
			WHEN PAY_CODE_CATEGORY IN (''Reimbursement'') THEN ''R''
			WHEN PAY_CODE_CATEGORY IN (''Daily'') THEN ''D''
			WHEN PAY_CODE_CATEGORY IN (''Travel Time & Mileage'') THEN ''M''
			ELSE ''H''
		END AS UNIT_TYPE_CODE,
		CASE
			WHEN PAY_CODE_CATEGORY IN (''Reimbursement'', ''Daily'') THEN PAY_CODE_CATEGORY
			WHEN PAY_CODE_CATEGORY IN (''Travel Time & Mileage'') THEN ''Mileage''
			ELSE ''Hourly''
		END AS UNIT_TYPE_DESCRIPTION
	FROM HAH.DIM_PAYCODE_MAPPING
	WHERE SOURCE_SYSTEM_ID = 5
),
PAYROLL AS 
(
	SELECT DISTINCT
		TRIM(PM.EMPLOYEEID) AS EMPLOYEEID,
		TRIM(PM.DB) AS DB,
		TRIM(PM.PAYDATE) AS PAYDATE,
		TRIM(PM.PERIODSTART) AS PERIODSTART,
		TRIM(PM.PERIODEND) AS PERIODEND,
		TRIM(PM.CHECKNUMBER) CHECKNUMBER,
		TRIM(PD.PAYCODE) AS PAYCODE,
		TRIM(PD.DESCRIPTIONS) AS DESCRIPTIONS,
		TRIM(PD.CODETYPES) AS CODETYPES,
		TRIM(PM.WORKSTATE) AS WORKSTATE,
		OFFICENUMBER,
		COMPANYNAME,
		SUM(PD.AMOUNT) AS AMOUNT,
		SUM(PD.UNITS) AS UNITS,
		SUM(PD.RATE) AS RATE
	FROM DISC_PROD.GPSYNCDATA.PAYSTUB_MASTER PM
	LEFT JOIN (SELECT *	FROM DISC_PROD.GPSYNCDATA.PAYSTUB_DETAILLINE
		WHERE AMOUNT <> 0) PD ON
		TRIM(PM.CHECKID) = TRIM(PD.CHECKID)
	WHERE PM.AUDITTRAILNUMBER NOT LIKE ''%ABANDONED%''
		AND NVL(UPPER(TRIM(PD.DESCRIPTIONS)) || TRIM(PD.CODETYPES), '''') 
		NOT LIKE ''%DEDUCTION REFUND%P%'' 
	GROUP BY 1, 2, 3, 4, 5,	6, 7, 8, 9, 10, 11, 12
)
SELECT DISTINCT
	MD5(''5'' || COALESCE(EMP_D.MASTER_ID, P.EMPLOYEEID)::VARCHAR || P.DB || P.CHECKNUMBER || COALESCE(P.PAYCODE, ''UNKNOWN'') || COALESCE(P.DESCRIPTIONS, ''UNKNOWN'') || ''GPSYNCDATA'') AS PAYROLL_DETAIL_KEY,
	MD5(CAST(P.PAYDATE AS VARCHAR) || CAST(COALESCE(EMP_D.MASTER_ID, P.EMPLOYEEID) AS VARCHAR) || P.DB || P.CHECKNUMBER) AS PAYROLL_KEY,
	P.PAYDATE::DATE AS REPORT_DATE,
	COALESCE(EMP_D.EMPLOYEE_KEY,
	MD5(P.EMPLOYEEID::VARCHAR || ''-'' || P.DB)) AS EMPLOYEE_KEY,
	COALESCE(BRANCH.BRANCH_KEY, CASE WHEN P.COMPANYNAME ILIKE ''%HELP AT HOME%'' THEN MD5(5 || ''Help At Home, LLC'' || ''GPSYNCDATA'') ELSE NULL END, (''Unknown'' || ''-'' ||  P.db)) AS Branch_Key,
	5 AS SOURCE_SYSTEM_ID,
	P.PAYDATE AS PAYROLL_DATE,
	COALESCE(EMP_D.EMPLOYEE_ID, P.EMPLOYEEID) AS EMPLOYEE_ID,
	COALESCE(BRANCH.DETAILED_OFFICE_NAME, CASE WHEN P.COMPANYNAME ILIKE ''%HELP AT HOME%'' THEN ''Help At Home, LLC'' ELSE NULL END, ''Unknown'') AS BRANCH_NAME,
	P.DB AS SYSTEM_CODE,
	P.PERIODSTART AS PAY_PERIOD_START_DATE,
	P.PERIODEND AS PAY_PERIOD_END_DATE,
	P.CHECKNUMBER AS CHECK_NUMBER,
	P.PAYCODE AS PAY_CODE,
	P.DESCRIPTIONS AS PAY_CODE_DESCRIPTION,
	P.CODETYPES AS PAY_CODE_TYPE,
	pctd.PAY_CODE_TYPE_DESCRIPTION AS PAY_CODE_TYPE_DESCRIPTION,
	PCM.PAY_CODE_CATEGORY AS PAY_CODE_CATEGORY,
	P.UNITS AS NUMBER_OF_UNITS,
	CASE
		WHEN P.PAYCODE = ''ADMF''
		AND P.EMPLOYEEID IN (''207000025634'', ''214000084290'', ''214000087828'') THEN ''D''
		ELSE ut.UNIT_TYPE_CODE
	END AS UNIT_TYPE_CODE,
	CASE
		WHEN P.PAYCODE = ''ADMF''
		AND P.EMPLOYEEID IN (''207000025634'', ''214000084290'', ''214000087828'') THEN ''Daily''
		ELSE ut.UNIT_TYPE_DESCRIPTION
	END AS UNIT_TYPE_DESCRIPTION,
	P.RATE AS RATE,
	P.AMOUNT AS AMOUNT,
	-1 AS ETL_TASK_KEY,
	-1 AS ETL_INSERTED_TASK_KEY,
	convert_timezone(''UTC'',
	CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY,
	convert_timezone(''UTC'',
	CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	0 AS ETL_DELETED_FLAG
FROM PAYROLL P
LEFT JOIN EMPLOYEE EMP_D 
	ON TRIM(EMP_D.EMPLOYEE_ID) = TRIM(P.EMPLOYEEID)
	AND UPPER(TRIM(EMP_D.DB)) = UPPER(TRIM(P.DB))
LEFT JOIN PAY_CODE_TYPE_DESCRIPTION pctd 
	ON P.CODETYPES = pctd.CODETYPES
LEFT JOIN DW_PROD.HAH.DIM_PAYCODE_MAPPING PCM
	ON MD5(''5'' || P.DB || P.WORKSTATE || P.PAYCODE || P.CODETYPES) = PCM.PAYCODE_MAPPING_KEY
LEFT JOIN UNIT_TYPE ut
	ON PCM.PAYCODE_MAPPING_KEY = ut.PAYCODE_MAPPING_KEY
LEFT JOIN DW_PROD.HAH.DIM_BRANCH BRANCH ON  
	TRIM(BRANCH.OFFICE_NUMBER) = TRIM(COALESCE(EMP_D.OFFICE_NO, P.OFFICENUMBER))::INTEGER AND BRANCH.SOURCE_SYSTEM_ID = 3 AND TRIM(UPPER(BRANCH.OFFICE_STATE_CODE)) = UPPER(TRIM(COALESCE(CASE WHEN EMP_D.OFFICE_NO = 53 THEN ''IN'' ELSE EMP_D.WORK_STATE END, P.WORKSTATE)))
 OR ( LPAD( CAST( BRANCH.Office_Number AS VARCHAR), 3, ''0'') = LPAD( TRIM( EMP_D.Office_NO), 3, ''0'') AND BRANCH.Source_System_ID = 3 AND EMP_D.Office_No NOT IN (908, 950, 951, 17, 52, 53, 60, -1)) 
 OR ( LPAD( CAST( BRANCH.Office_Number AS VARCHAR), 3, ''0'') = LPAD( TRIM( EMP_D.Office_NO), 3, ''0'') AND BRANCH.Source_System_ID = 3 AND EMP_D.Office_No IN (908, 950, 951, 17, 52, 53, 60, -1) AND BRANCH.Office_State_Code = UPPER( TRIM( EMP_D.Work_State)))
 OR ( TRY_CAST(EMP_D.office_no AS INT) = BRANCH.OFFICE_NUMBER  AND BRANCH.source_system_id = 5);

END;
';