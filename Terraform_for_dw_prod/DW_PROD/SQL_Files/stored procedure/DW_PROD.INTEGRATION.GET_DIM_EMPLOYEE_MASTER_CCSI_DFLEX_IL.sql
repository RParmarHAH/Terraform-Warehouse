CREATE OR REPLACE PROCEDURE DW_PROD.INTEGRATION.GET_DIM_EMPLOYEE_MASTER_CCSI_DFLEX_IL("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result varchar(1000);
	return_result_temp varchar(1000);
BEGIN
delete FROM DW_PROD.INTEGRATION.DIM_EMPLOYEE_MASTER WHERE (SOURCE_SYSTEM_ID=3 AND SYSTEM_CODE= ''IL'') OR SOURCE_SYSTEM_ID=8;

SELECT CONCAT(''Message : '',"number of rows deleted",'' Rows Deleted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

INSERT INTO DW_PROD.INTEGRATION.DIM_EMPLOYEE_MASTER
with
  cte_matches as (
      select
          filename
          , cluster_id
          , count(0) cnt
      from  DISC_DEDUPE_PROD.CCSI.DF_CCSI_EMP_DEDUPE_SOURCE
      group by
          filename
          , cluster_id
      having cnt > 1
  )
  ,
  cte_clusters as (
      select
          dedupe.record_id
          ,dedupe.cluster_id
          ,ccsi_emp.EMPLOYEE_FIRST_NAME
		  ,ccsi_emp.EMPLOYEE_LAST_NAME
          ,ccsi_emp.EMPLOYEE_ID
		  ,ccsi_emp.SOURCE_SYSTEM_ID
          ,ccsi_emp.SYSTEM_CODE
		  ,ccsi_emp.EMPLOYEE_LAST_WORKED_DATE
    	  ,ccsi_emp.EMPLOYEE_HIRE_DATE
          ,row_number() over(partition by dedupe.cluster_id order by nvl(EMPLOYEE_LAST_WORKED_DATE, ''9999-12-31'') DESC,ccsi_emp.EMPLOYEE_HIRE_DATE DESC) record_order 
      from DISC_DEDUPE_PROD.CCSI.DF_CCSI_EMP_DEDUPE_SOURCE dedupe
      inner join DW_PROD.HAH.DIM_EMPLOYEE ccsi_emp on
            dedupe.record_id = ccsi_emp.EMPLOYEE_KEY
      inner join cte_matches matches on
            matches.filename = dedupe.filename
            and matches.cluster_id = dedupe.cluster_id
      order by dedupe.cluster_id
  )
SELECT clusts.record_id MASTER_KEY, 
clusts.EMPLOYEE_ID, clusts.SYSTEM_CODE, clusts.SOURCE_SYSTEM_ID, EMPLOYEE_PID, EMPLOYEE_NUMBER, EMPLOYEE_DOB, 
EMPLOYEE_DATE_OF_DEATH, clusts.EMPLOYEE_HIRE_DATE, EMPLOYEE_REHIRE_DATE, EMPLOYEE_BENEFIT_START_DATE, 
EMPLOYEE_FIRST_CHECK_DATE, EMPLOYEE_LAST_CHECK_DATE, clusts.EMPLOYEE_LAST_WORKED_DATE, EMPLOYEE_TERMINATE_DATE, 
REASON_TO_TERMINATE, ACTIVE_EMPLOYEE_FLAG, ABLE_TO_REHIRE_FLAG, EMPLOYEE_PREFIX, clusts.EMPLOYEE_FIRST_NAME, 
EMPLOYEE_MIDDLE_NAME, clusts.EMPLOYEE_LAST_NAME, EMPLOYEE_SUFFIX, EMPLOYEE_ADDRESS1, EMPLOYEE_ADDRESS2, 
EMPLOYEE_CITY, EMPLOYEE_STATE_CODE, EMPLOYEE_ZIP, EMPLOYEE_HOME_PHONE, EMPLOYEE_CELL_PHONE, EMPLOYEE_WORK_PHONE, 
EMPLOYEE_PERSONAL_EMAIL, EMPLOYEE_WORK_EMAIL, LINKED_IN_PROFILE_URL, EMPLOYEE_GENDER, EMPLOYEE_ETHNICITY, 
EMPLOYEE_LANGUAGE, EMPLOYEE_MARITAL_STATUS, EMPLOYEE_TYPE, EMPLOYEE_CATEGORY, EXEMPT_FLAG, JOB_TITLE, 
JOB_DESCRIPTION, CLASS_ID, WORKERS_COMP, PAYROLL_ID, PERCENT_401K_DEDUCTION, AMOUNT_401K_DEDUCTION, 
JAZZHR_APPLICANT_ID, JAZZHR_USER_ID, JAZZHR_CONTACT_ID, WORK_STATE, SUTA_STATE, EMPLOYEE_DEPARTMENT, 
EMPLOYEE_OFFICE_CODE, PRIMARY_BRANCH_KEY, PRIMARY_BRANCH_STATE, PRIMARY_BRANCH_NAME, PRIMARY_BRANCH_SYSTEM_CODE, 
CASE_MANAGER_FLAG, SUPERVISOR_FLAG, COORDINATOR_FLAG, EFFECTIVE_FROM_DATE, EFFECTIVE_TO_DATE, 
MDM_DIM_EMPLOYEE_KEY, ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE, ETL_INSERTED_BY, 
ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG, ETL_INFERRED_MEMBER_FLAG
from DW_PROD.HAH.DIM_EMPLOYEE ccsi_emp
inner join cte_clusters clusts on clusts.record_id=ccsi_emp.EMPLOYEE_KEY
    and clusts.record_order = 1
union
select EMPLOYEE_KEY MASTER_KEY, ccsi_emp.EMPLOYEE_ID, ccsi_emp.SYSTEM_CODE, ccsi_emp.SOURCE_SYSTEM_ID, EMPLOYEE_PID, EMPLOYEE_NUMBER, EMPLOYEE_DOB, 
EMPLOYEE_DATE_OF_DEATH, ccsi_emp.EMPLOYEE_HIRE_DATE, EMPLOYEE_REHIRE_DATE, EMPLOYEE_BENEFIT_START_DATE, 
EMPLOYEE_FIRST_CHECK_DATE, EMPLOYEE_LAST_CHECK_DATE, ccsi_emp.EMPLOYEE_LAST_WORKED_DATE, EMPLOYEE_TERMINATE_DATE, 
REASON_TO_TERMINATE, ACTIVE_EMPLOYEE_FLAG, ABLE_TO_REHIRE_FLAG, EMPLOYEE_PREFIX, ccsi_emp.EMPLOYEE_FIRST_NAME, 
EMPLOYEE_MIDDLE_NAME, ccsi_emp.EMPLOYEE_LAST_NAME, EMPLOYEE_SUFFIX, EMPLOYEE_ADDRESS1, EMPLOYEE_ADDRESS2, 
EMPLOYEE_CITY, EMPLOYEE_STATE_CODE, EMPLOYEE_ZIP, EMPLOYEE_HOME_PHONE, EMPLOYEE_CELL_PHONE, EMPLOYEE_WORK_PHONE, 
EMPLOYEE_PERSONAL_EMAIL, EMPLOYEE_WORK_EMAIL, LINKED_IN_PROFILE_URL, EMPLOYEE_GENDER, EMPLOYEE_ETHNICITY, 
EMPLOYEE_LANGUAGE, EMPLOYEE_MARITAL_STATUS, EMPLOYEE_TYPE, EMPLOYEE_CATEGORY, EXEMPT_FLAG, JOB_TITLE, 
JOB_DESCRIPTION, CLASS_ID, WORKERS_COMP, PAYROLL_ID, PERCENT_401K_DEDUCTION, AMOUNT_401K_DEDUCTION, 
JAZZHR_APPLICANT_ID, JAZZHR_USER_ID, JAZZHR_CONTACT_ID, WORK_STATE, SUTA_STATE, EMPLOYEE_DEPARTMENT, 
EMPLOYEE_OFFICE_CODE, PRIMARY_BRANCH_KEY, PRIMARY_BRANCH_STATE, PRIMARY_BRANCH_NAME, PRIMARY_BRANCH_SYSTEM_CODE, 
CASE_MANAGER_FLAG, SUPERVISOR_FLAG, COORDINATOR_FLAG, EFFECTIVE_FROM_DATE, EFFECTIVE_TO_DATE, 
MDM_DIM_EMPLOYEE_KEY, ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE, ETL_INSERTED_BY, 
ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG, ETL_INFERRED_MEMBER_FLAG
from DW_PROD.HAH.DIM_EMPLOYEE ccsi_emp
left join cte_clusters dups
    on dups.record_id=ccsi_emp.EMPLOYEE_KEY
where dups.record_id is null
and ((ccsi_emp.SOURCE_SYSTEM_ID=3 AND ccsi_emp.SYSTEM_CODE=''IL'') OR ccsi_emp.SOURCE_SYSTEM_ID=8);

SELECT CONCAT('' '',"number of rows inserted",'' Rows Inserted.'') into :return_result_temp FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return CONCAT(return_result,'' | '',return_result_temp);
END;
';