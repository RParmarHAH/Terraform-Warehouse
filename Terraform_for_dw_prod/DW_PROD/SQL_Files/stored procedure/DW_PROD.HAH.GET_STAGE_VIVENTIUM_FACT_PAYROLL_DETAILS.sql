CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_VIVENTIUM_FACT_PAYROLL_DETAILS("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '

BEGIN

--*****************************************************************************************************************************
-- NAME: VIVENTIUM_FACT_PAYROLL_DETAILS
--
-- PURPOSE: Creates one row for each paycode according to Viventium
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------        
-- 06/15/23		Meet Dalwadi		 Initial Development      
--*****************************************************************************************************************************


INSERT OVERWRITE INTO dw_prod.STAGE.viventium_fact_payroll_details 
WITH MASTER_EMPLOYEES AS (
	SELECT DISTINCT 
		MASTER_ID, EMPLOYEEKEY, COMPANYCODE
	FROM DISC_DEDUPE_PROD.VIVENTIUM.EMPLOYEE_MASTER_LIST
	UNION 
	SELECT DISTINCT 
		MASTER_ID, ID, COMPANYCODE
	FROM DISC_DEDUPE_PROD.VIVENTIUM.EMPLOYEE_MATCH_LIST 
	WHERE ID NOT IN (SELECT DISTINCT EMPLOYEEKEY FROM DISC_DEDUPE_PROD.VIVENTIUM.EMPLOYEE_MASTER_LIST)
),
EARNINGS_HOURS_RATE_AMOUNT AS (
select  EU.COMPANYCODE,EU.EMPLOYEENUMBER,EU.CHECKDATE,EU.CHECKORVOUCHERNUMBER ,e.value:earningCode AS earningCode,SUM(IFF(e.value:hours IS NULL,0,e.value:hours)) as HOURS, 
AVG(IFF(e.value:rate IS NULL,0,e.value:rate)) as RATE,SUM(IFF(e.value:amount IS NULL,0,e.value:amount)) as AMOUNT
FROM disc_prod.VIVENTIUM.EXPORTCHECKS_UNFLATTEN EU,lateral flatten(input => earnings,outer => True) e 
group BY EU.COMPANYCODE, EU.EMPLOYEENUMBER,EU.CHECKDATE,EU.CHECKORVOUCHERNUMBER,e.value:earningCode
),
TAX_AMOUNT AS(
SELECT EU.COMPANYCODE,EU.EMPLOYEENUMBER,EU.CHECKDATE,EU.CHECKORVOUCHERNUMBER ,t.value:taxCode AS taxCode ,SUM(IFF(t.value:taxAmount IS NULL,0,t.value:taxAmount)) as AMOUNT
FROM disc_prod.VIVENTIUM.EXPORTCHECKS_UNFLATTEN EU,lateral flatten(input => taxes,outer => True) t 
group by EU.COMPANYCODE,EU.EMPLOYEENUMBER,EU.CHECKDATE,EU.CHECKORVOUCHERNUMBER,t.value:taxCode
),
DEDUCTION_AMOUNT AS(
SELECT EU.COMPANYCODE,EU.EMPLOYEENUMBER,EU.CHECKDATE,EU.CHECKORVOUCHERNUMBER ,d.value:deductionCode AS deductionCode ,SUM(IFF(d.value:amount IS NULL,0,d.value:amount)) as AMOUNT
FROM disc_prod.VIVENTIUM.EXPORTCHECKS_UNFLATTEN EU,lateral flatten(input => deductions,outer => True) d 
group by EU.COMPANYCODE,EU.EMPLOYEENUMBER,EU.CHECKDATE,EU.CHECKORVOUCHERNUMBER,d.value:deductionCode
)
SELECT DISTINCT
MD5(EC.COMPANYCODE || ''-''|| EC.CHECKDATE || ''-'' || EC.CHECKKEY::VARCHAR || ''-''||  EC.EMPLOYEENUMBER::VARCHAR || ''-'' || PC.PAY_CODE::VARCHAR || ''-'' || ''VIVENTIUM'') AS PAYROLL_DETAIL_KEY,
MD5(EC.COMPANYCODE  || ''-''|| EC.CHECKDATE || ''-''||  EC.CHECKKEY::VARCHAR || ''-'' || EC.EMPLOYEENUMBER::VARCHAR ||  ''-'' || ''VIVENTIUM'') AS PAYROLL_KEY,
EC.CHECKDATE AS REPORT_DATE,
MD5(EC.COMPANYCODE ||''-'' ||trim(ME.MASTER_ID) || ''-'' ||''VIVENTIUM'') AS EMPLOYEE_KEY,
MD5( BR.SYSTEM_CODE || ''-'' || BR.OFFICE_NAME || ''-'' || ''VIVENTIUM'')  AS BRANCH_KEY,
34 AS SOURCE_SYSTEM_ID,
EC.CHECKDATE AS PAYROLL_DATE,
EC.employeeNumber AS EMPLOYEE_ID,
BR.OFFICE_NAME AS BRANCH_NAME,
EC.COMPANYCODE  AS SYSTEM_CODE,
EC.periodBeginDate AS PAY_PERIOD_START_DATE,
EC.periodEndDate AS PAY_PERIOD_END_DATE,
EC.checkOrVoucherNumber AS CHECK_NUMBER,
PC.PAY_CODE AS PAY_CODE,
PC.PAY_CODE_DESCRIPTION AS PAY_CODE_DESCRIPTION,
PC.PAY_CODE_TYPE AS PAY_CODE_TYPE,
CASE WHEN PC.PAY_CODE_TYPE =''T'' THEN ''TAX''
WHEN PC.PAY_CODE_TYPE =''E'' THEN ''EARNING''
WHEN PC.PAY_CODE_TYPE =''D'' THEN ''DEDUCTION''
ELSE NULL
END AS PAY_CODE_TYPE_DESCRIPTION,
NULL AS PAY_CODE_CATEGORY,
CASE WHEN PC.PAY_CODE_TYPE =''E'' THEN HRA.HOURS ELSE NULL END AS NUMBER_OF_UNITS,
LEFT(UPPER(EE.payType),1) AS UNIT_TYPE_CODE,
EE.payType AS UNIT_TYPE_DESCRIPTION ,
CASE WHEN PC.PAY_CODE_TYPE =''E'' THEN HRA.RATE ELSE NULL END AS RATE,
CASE WHEN PC.PAY_CODE_TYPE =''T'' THEN TA.AMOUNT
WHEN PC.PAY_CODE_TYPE =''E''THEN HRA.AMOUNT 
WHEN PC.PAY_CODE_TYPE =''D'' THEN DA.AMOUNT 
ELSE NULL END AS AMOUNT,
-1 AS ETL_TASK_KEY,
			:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
			CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	0 AS ETL_DELETED_FLAG,
	0 AS ETL_INFERRED_MEMBER_FLAG
FROM disc_prod.VIVENTIUM.EXPORTCHECKS EC 
LEFT OUTER JOIN MASTER_EMPLOYEES ME ON EC.COMPANYCODE = ME.COMPANYCODE AND EC.EMPLOYEEKEY = ME.EMPLOYEEKEY
left join dw_prod.hah.dim_branch BR on EC.COMPANYCODE  = BR.SYSTEM_CODE 
LEFT JOIN disc_prod.VIVENTIUM.PAY_CODES PC 
ON EC.COMPANYCODE = PC.COMPANYCODE AND EC.DIVISIONCODE = PC.DIVISIONCODE AND (EC.TAXES_TAXCODE = PC.PAY_CODE
OR ec.EARNINGS_EARNINGCODE = pc.PAY_CODE OR EC.DEDUCTIONS_DEDUCTIONCODE = PC.PAY_CODE )
LEFT JOIN EARNINGS_HOURS_RATE_AMOUNT HRA ON EC.EMPLOYEENUMBER = HRA.EMPLOYEENUMBER AND EC.CHECKDATE  = HRA.CHECKDATE AND EC.CHECKORVOUCHERNUMBER = HRA.CHECKORVOUCHERNUMBER AND EC.EARNINGS_EARNINGCODE = HRA.earningCode AND EC.COMPANYCODE=HRA.COMPANYCODE
LEFT JOIN TAX_AMOUNT TA ON EC.EMPLOYEENUMBER  = TA.EMPLOYEENUMBER AND EC.CHECKDATE  = TA.CHECKDATE AND EC.CHECKORVOUCHERNUMBER = TA.CHECKORVOUCHERNUMBER AND TA.TAXCODE = EC.TAXES_TAXCODE AND TA.COMPANYCODE =EC.COMPANYCODE 
LEFT JOIN DEDUCTION_AMOUNT DA ON EC.EMPLOYEENUMBER  = DA.EMPLOYEENUMBER AND EC.CHECKDATE  = DA.CHECKDATE AND EC.CHECKORVOUCHERNUMBER = DA.CHECKORVOUCHERNUMBER AND EC.DEDUCTIONS_DEDUCTIONCODE = DA.deductionCode AND EC.COMPANYCODE  = DA.COMPANYCODE
LEFT JOIN disc_prod.VIVENTIUM.EXPORTEMPLOYEES EE ON EC.EMPLOYEENUMBER = EE.EMPLOYEENUMBER AND EE.COMPANYCODE = EC.COMPANYCODE ;

RETURN ''Success'';

END;
';