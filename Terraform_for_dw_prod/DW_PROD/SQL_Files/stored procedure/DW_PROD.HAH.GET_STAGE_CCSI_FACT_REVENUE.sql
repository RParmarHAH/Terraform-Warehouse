CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_CCSI_FACT_REVENUE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
        var sql = `
    --*****************************************************************************************************************************
-- NAME:  CCSI_FACT_REVENUE
--
-- PURPOSE: Creates one row per Revenue according to CCSI
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 08/25/2021  MOIN SAIYED           Initial development
-- 25/11/23    Pradeep Thippani     Added bill_unit_type column for RCM(Requested By Natalie)
-- 28/12/23    Pinkal Panchal    	Updated amount_collected and amount_outstanding logic
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.CCSI_FACT_REVENUE
WITH RAWVRFP AS  --VISIT DATA
(
    SELECT DISTINCT RECORD_NUMBER
                    ,CLIENT_ID
                    ,AREA_2
                    ,DAY_OF_SERVICE
                    ,PAY_PERIOD_ENDING_DATE
                    ,DATEADD(DAY,(IFNULL(DAY_OF_SERVICE,1) - 1),DATE_TRUNC(''MONTH'',TRY_TO_DATE(PERIOD_DATE, ''MMDDYY''))) AS "PERIOD_DATE" --CHANGE
                    ,EMPLOYEE_NUMBER
                    ,EMP_DESK
                    ,HOURS_WORKED
                    ,UPPER (TRIM (CONTRACT_NO)) AS "CONTRACT_NO" 
                    ,SERVICE_TYPE
                    ,CASE WHEN SERVICE_TYPE = ''021'' THEN MD5(RECORD_NUMBER|| ''-'' || CLIENT_ID || ''-'' || ''CCSI'') ELSE ''I'' END AS INVOICE_KEY
            FROM DISC_PROD.CCSI.RAWVRFP
            WHERE PERIOD_DATE IS NOT NULL
                AND TRY_TO_DATE(PERIOD_DATE, ''MMDDYY'') > ''2015-12-31''
                AND DAY_OF_SERVICE  IS NOT NULL
                AND CLIENT_ID IS NOT NULL
)
,DIM_EMPLOYEE AS
(
SELECT EMPLOYEE_NUMBER, AREA, HIRE_DATE, TERMINATION_DATE,MASTER_ID,RN FROM 
(
SELECT *,ROW_NUMBER() OVER (PARTITION BY EMPLOYEE_NUMBER,AREA ORDER BY UPDATED_DATE, CREATED_DATE DESC) AS DUP FROM 
(
SELECT * FROM 
(
    SELECT DISTINCT DIM_EMPLOYEE_NUMBER AS "EMPLOYEE_NUMBER"
            ,AREA
            ,HIRE_DATE
            ,TERMINATION_DATE
            ,(RECORD_NUMBER::STRING || ''-'' || NVL(AREA,''C'')::STRING || ''-'' || ''CCSI'') AS MASTER_ID
            ,ROW_NUMBER() OVER (PARTITION BY DIM_EMPLOYEE_NUMBER,AREA ORDER BY UPDATED_DATE, CREATED_DATE DESC) AS          RN 
            ,UPDATED_DATE, CREATED_DATE
    FROM  DISC_DEDUPE_PROD.CCSI.EMP_MASTER_LIST_CCSI    
) WHERE RN = 1
UNION 
SELECT * FROM 
(
    SELECT DISTINCT DIM_EMPLOYEE_NUMBER AS EMPLOYEE_NUMBER
            ,AREA
            ,HIRE_DATE
            ,TERMINATION_DATE
            ,MASTER_ID
            ,ROW_NUMBER() OVER (PARTITION BY EMPLOYEE_NUMBER,AREA ORDER BY UPDATED_DATE,CREATED_DATE DESC) AS RN 
            ,UPDATED_DATE, CREATED_DATE
    FROM DISC_DEDUPE_PROD.CCSI.EMP_MATCH_CCSI R
    WHERE 
    EMPLOYEE_NUMBER IS NOT NULL 
    AND NOT EXISTS (SELECT 1 FROM DISC_DEDUPE_PROD.CCSI.EMP_MASTER_LIST_CCSI A WHERE (A.RECORD_NUMBER || A.AREA) = (R.RECORD_NUMBER || R.AREA))
) WHERE RN > 1 
) 
) WHERE DUP = 1
)
,DIM_CLIENT AS 
(
SELECT CLIENT_NUMBER, AREA, CLIENT_NAME, MASTER_ID,RN,SHORT_DATE FROM 
(
SELECT *,ROW_NUMBER() OVER (PARTITION BY CLIENT_NUMBER,AREA ORDER BY SHORT_DATE DESC) AS DUP FROM 
(
    SELECT CLIENT_IDOA_NO AS "CLIENT_NUMBER"
            ,USED_FOR_AREA AS "AREA"
            ,FINAL_CLIENT_NAME AS "CLIENT_NAME"
            ,CASE WHEN 
                    UPDATED_DATE LIKE ''%/OV%''  OR CREATED_DATE LIKE ''%/OV%''  OR UPDATED_DATE IS NULL 
                    THEN COALESCE(TRY_TO_DATE(CREATED_DATE ,''MM/DD/YY'') , TRY_TO_DATE(ACTION_DATE ,''YYYYMMDD''))
                ELSE TO_DATE(UPDATED_DATE,''MM/DD/YY'') END AS SHORT_DATE
            ,(RECORD_NUMBER  || ''-'' ||  NVL(USED_FOR_AREA, ''CCSI'') || ''-'' || ''CCSI'') AS MASTER_ID
            ,ROW_NUMBER() OVER (PARTITION BY (CLIENT_NUMBER  || ''-'' ||  NVL(USED_FOR_AREA, ''CCSI'') || ''-'' || ''CCSI'') ORDER BY 
                CASE WHEN 
                    UPDATED_DATE LIKE ''%/OV%''  OR CREATED_DATE LIKE ''%/OV%''  OR UPDATED_DATE IS NULL 
                    THEN COALESCE(TRY_TO_DATE(CREATED_DATE ,''MM/DD/YY'') , TRY_TO_DATE(ACTION_DATE ,''YYYYMMDD''))
                ELSE TO_DATE(UPDATED_DATE,''MM/DD/YY'') 
                END
            ,RECORD_NUMBER DESC) AS RN FROM  DISC_DEDUPE_PROD.CCSI.CLIENT_MASTER_LIST_CCSI  
) WHERE RN = 1
UNION 
SELECT *,ROW_NUMBER() OVER (PARTITION BY CLIENT_NUMBER,AREA ORDER BY SHORT_DATE DESC) AS DUP FROM 
(
    SELECT CLIENT_IDOA_NO AS "CLIENT_NUMBER"
            ,USED_FOR_AREA AS "AREA"
            ,COMBINED_CLIENT_NAME AS "CLIENT_NAME"
            ,CASE WHEN 
                    UPDATED_DATE LIKE ''%/OV%''  OR CREATED_DATE LIKE ''%/OV%''  OR UPDATED_DATE IS NULL 
                    THEN COALESCE(TRY_TO_DATE(CREATED_DATE ,''MM/DD/YY'') , TRY_TO_DATE(ACTION_DATE ,''YYYYMMDD''))
                ELSE TO_DATE(UPDATED_DATE,''MM/DD/YY'') END AS SHORT_DATE
            ,MASTER_ID
            ,ROW_NUMBER() OVER (PARTITION BY (CLIENT_NUMBER  || ''-'' ||  NVL(USED_FOR_AREA, ''CCSI'') || ''-'' || ''CCSI'') ORDER BY 
                CASE WHEN 
                    UPDATED_DATE LIKE ''%/OV%''  OR CREATED_DATE LIKE ''%/OV%''  OR UPDATED_DATE IS NULL 
                    THEN COALESCE(TRY_TO_DATE(CREATED_DATE ,''MM/DD/YY'') , TRY_TO_DATE(ACTION_DATE ,''YYYYMMDD''))
                ELSE TO_DATE(UPDATED_DATE,''MM/DD/YY'') 
                END
            ,RECORD_NUMBER DESC) AS RN 
            FROM DISC_DEDUPE_PROD.CCSI.CLIENT_MATCH_LIST_CCSI R
            WHERE CLIENT_IDOA_NO IS NOT NULL 
    AND NOT EXISTS (SELECT 1 FROM DISC_DEDUPE_PROD.CCSI.CLIENT_MASTER_LIST_CCSI A WHERE (A.RECORD_NUMBER || A.USED_FOR_AREA) = (R.RECORD_NUMBER || R.USED_FOR_AREA))
) WHERE RN > 1
) WHERE DUP = 1
)
,OTHERINV AS
(
    SELECT DISTINCT TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'') AS "DATE_OF_SERVICE"
                    ,SUM(AMOUNT_BILLED) AS "AMOUNT_BILLED"
                    ,CLIENT_ID
                    ,AREA 
                    ,SUM(UNITS_PROVIDED) AS "UNITS"
                    ,SUM(BALANCE) AS "BALANCE"
                    ,(SUM(NVL(AMOUNT1,0)) + SUM(NVL(AMOUNT2,0)) + SUM(NVL(AMOUNT3,0))) AS "AMOUNT_PAID"
                    ,MIN(TO_DATE(DATE_PAID,''YYYYMMDD'')) AS "PAYMENT_DATE"
                    ,TYPE_OF_SERVICE AS "SERVICE_TYPE"
                    ,MIN(RECORD_NUMBER) AS "RECORD_NUMBER"
                FROM DISC_PROD.CCSI.OTHERINV
                GROUP BY CLIENT_ID,AREA,TYPE_OF_SERVICE 
                ,TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'')
)
,MAXOTHERINV AS
(
    SELECT DISTINCT MAX(TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'')) AS "DATE_OF_SERVICE"
                    ,SUM(AMOUNT_BILLED) AS "AMOUNT_BILLED"
                    ,CLIENT_ID
                    ,AREA 
                    ,SUM(UNITS_PROVIDED) AS "UNITS"
                    ,SUM(BALANCE) AS "BALANCE"
                    ,(SUM(NVL(AMOUNT1,0)) + SUM(NVL(AMOUNT2,0)) + SUM(NVL(AMOUNT3,0))) AS "AMOUNT_PAID"
                    ,MIN(TO_DATE(DATE_PAID,''YYYYMMDD'')) AS "PAYMENT_DATE"
                    ,TYPE_OF_SERVICE AS "SERVICE_TYPE"
                    ,MIN(RECORD_NUMBER) AS "RECORD_NUMBER"
                FROM DISC_PROD.CCSI.OTHERINV
                GROUP BY CLIENT_ID,AREA,TYPE_OF_SERVICE
                ,TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'')
)
, MCOINVOICE AS
(
    SELECT DISTINCT TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'') AS "DATE_OF_SERVICE"
                    ,SUM(DOLLAR_AMOUNT) AS "AMOUNT_BILLED"
                    ,CLIENT_ID
                    ,UPPER(CCSI_OFFICE) AS "AREA"
                    ,SUM(BALANCE) AS "BALANCE"
                    ,SUM(UNITS) AS "UNITS"
--                  ,(SUM(NVL(AMOUNT_1,0)) + SUM(NVL(AMOUNT_2,0)) + SUM(NVL(AMOUNT_3,0))) AS "AMOUNT_PAID"
                    ,(SUM(NVL(AMOUNT_1,0)) + SUM(NVL(AMOUNT_2,0)) + SUM(NVL(AMOUNT_3,0))+SUM(NVL(AMOUNT_NO_4,0))) AS "AMOUNT_PAID" --UPDATED ON 28/12/23 FOR RCM 
                    ,MIN(TRY_TO_DATE(P_PAYMENT_DATE_1,''MM/DD/YYYY'')) AS "PAYMENT_DATE"
                    ,SERVICE_TYPE
                    ,MIN(RECORD_NUMBER) AS "RECORD_NUMBER"
            FROM DISC_PROD.CCSI.MCOINV
            GROUP BY CLIENT_ID,UPPER(CCSI_OFFICE)
                    ,SERVICE_TYPE
                    ,TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'')
)   
, MAXMCOINVOICE AS
(
    SELECT DISTINCT MAX(TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'')) AS "DATE_OF_SERVICE"
                    ,SUM(DOLLAR_AMOUNT) AS "AMOUNT_BILLED"
                    ,CLIENT_ID
                    ,UPPER(CCSI_OFFICE) AS "AREA"
                    ,SUM(BALANCE) AS "BALANCE"
                    ,SUM(UNITS) AS "UNITS"
--                  ,(SUM(NVL(AMOUNT_1,0)) + SUM(NVL(AMOUNT_2,0)) + SUM(NVL(AMOUNT_3,0))) AS "AMOUNT_PAID"
                    ,(SUM(NVL(AMOUNT_1,0)) + SUM(NVL(AMOUNT_2,0)) + SUM(NVL(AMOUNT_3,0))+SUM(NVL(AMOUNT_NO_4,0))) AS "AMOUNT_PAID" --UPDATED ON 28/12/23 FOR RCM
                    ,MIN(TRY_TO_DATE(P_PAYMENT_DATE_1,''MM/DD/YYYY'')) AS "PAYMENT_DATE"
                    ,SERVICE_TYPE
                    ,MIN(RECORD_NUMBER) AS "RECORD_NUMBER"
            FROM DISC_PROD.CCSI.MCOINV
            GROUP BY CLIENT_ID,UPPER(CCSI_OFFICE),SERVICE_TYPE
            ,TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'')
)   
, RAWVRFP_OTHERINV AS --DATA RELATED OTHER INVOICE
(
    SELECT * FROM RAWVRFP WHERE try_to_numeric(SERVICE_TYPE) IS NOT NULL --NUMERIC OTHER INV
)
, RAWVRFP_MCOINV AS --DATA RELATED MCO INVOICE
(
    SELECT * FROM RAWVRFP WHERE try_to_numeric(SERVICE_TYPE) IS NULL --NON NUMERIC FOR MCO INV
)
SELECT 
REVENUE_KEY
        ,SERVICE_DATE
        ,BRANCH_KEY
        ,EMPLOYEE_KEY
        ,CLIENT_KEY
        ,CONTRACT_KEY
        ,NVL(INVOICE_KEY,''I'') AS "INVOICE_KEY"
        ,SOURCE_SYSTEM_ID
        ,SUPERVISOR_KEY
        ,REVENUE_DATE
        ,PAYMENT_DATE
        ,BRANCH_NAME
        ,EMPLOYEE_ID
        ,CLIENT_NUMBER
        ,CONTRACT_CODE
        ,INVOICE_NUMBER
        ,INVOICE_TYPE
        ,BILL_UNIT_TYPE
        ,NUMBER_OF_CLIENTS
        ,SYSTEM_CODE
        ,SUPERVISOR_CODE
        ,BILL_CODE
        ,INVOICE_HOURS
        ,INVOICE_RATE
        ,AMOUNT_BILLED
        ,AMOUNT_COLLECTED
        ,AMOUNT_OUTSTANDING
        ,ETL_TASK_KEY
        ,ETL_INSERTED_TASK_KEY
        ,ETL_INSERTED_DATE
        ,ETL_INSERTED_BY 
        ,ETL_LAST_UPDATED_DATE
        ,ETL_LAST_UPDATED_BY
        ,ETL_DELETED_FLAG   
FROM 
(
WITH RESULT AS
(
SELECT DISTINCT
MD5(NVL(R.CLIENT_ID,''E'')::STRING || ''-'' || NVL(R.PERIOD_DATE::STRING,''E'')::STRING || ''-'' || NVL(R.DAY_OF_SERVICE,''E'')::STRING
            || ''-'' || NVL(R.RECORD_NUMBER,''E'')::STRING
            || ''-'' || ''CCSI'') AS REVENUE_KEY
        ,R.PERIOD_DATE AS "SERVICE_DATE"
        ,B.BRANCH_KEY
        ,MD5(E.MASTER_ID) AS "EMPLOYEE_KEY"
        ,MD5(C.MASTER_ID) AS "CLIENT_KEY"
        ,CO.CONTRACT_KEY
        ,NVL(MD5(COALESCE(O.RECORD_NUMBER,O1.RECORD_NUMBER)|| ''-'' || ''MCOINV'' || ''-'' || ''CCSI'')
            ,R.INVOICE_KEY) AS INVOICE_KEY --NEED TO CONFIRM
        ,8 AS "SOURCE_SYSTEM_ID"
        ,MD5(D.AREA ||''-''|| NVL(D.SUPERVISOR_INITIAL,''UNKNOWN'') ||''-''|| ''CCSI'') AS SUPERVISOR_KEY--DIM SUPERVISOR
        ,TRY_TO_DATE(R.PAY_PERIOD_ENDING_DATE, ''MMDDYY'') AS "REVENUE_DATE" 
        ,O.PAYMENT_DATE 
        ,UPPER(B.BRANCH_NAME) AS "BRANCH_NAME"
        ,R.EMPLOYEE_NUMBER AS "EMPLOYEE_ID"
        ,R.CLIENT_ID AS "CLIENT_NUMBER"
        ,CO.CONTRACT_CODE
        ,(COALESCE(O.RECORD_NUMBER,O1.RECORD_NUMBER)||''MCOINV'') AS "INVOICE_NUMBER"
        ,''REGULAR'' AS "INVOICE_TYPE"
        ,''HOURLY'' AS "BILL_UNIT_TYPE"
        ,1 AS NUMBER_OF_CLIENTS
        ,''CCSI'' AS SYSTEM_CODE
        ,UPPER(D.SUPERVISOR_INITIAL) AS "SUPERVISOR_CODE" 
        ,NULL AS "BILL_CODE"
        ,R.HOURS_WORKED AS "INVOICE_HOURS"
        ,ROUND((NULLIF(COALESCE(O.AMOUNT_BILLED,O1.AMOUNT_BILLED),0)/NULLIF((COALESCE(O.UNITS,O1.UNITS)/4),0)), 2) AS "INVOICE_RATE"
        ,ROUND(((NULLIF(COALESCE(O.AMOUNT_BILLED,O1.AMOUNT_BILLED),0)/NULLIF((COALESCE(O.UNITS,O1.UNITS)/4),0)) * R.HOURS_WORKED), 2) AS "AMOUNT_BILLED"
        ,ROUND(((NULLIF(COALESCE(O.AMOUNT_PAID,O1.AMOUNT_PAID),0)/NULLIF((COALESCE(O.UNITS,O1.UNITS)/4),0)) * R.HOURS_WORKED),2) AS "AMOUNT_COLLECTED"
--      ,O.BALANCE AS "AMOUNT_OUTSTANDING"
        ,ROUND( (NULLIF(O.BALANCE, 0) / NULLIF((COALESCE(O.UNITS, O1.UNITS)/4),0)) * R.HOURS_WORKED, 2) AS AMOUNT_OUTSTANDING --UPDATED ON 28/12/23 FOR RCM
        ,-1 AS ETL_TASK_KEY
        ,-1 AS ETL_INSERTED_TASK_KEY
        ,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
        ,CURRENT_USER AS ETL_INSERTED_BY 
        ,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
        ,CURRENT_USER AS ETL_LAST_UPDATED_BY
        ,0 AS ETL_DELETED_FLAG  
    FROM RAWVRFP_MCOINV R 
    LEFT JOIN MCOINVOICE O  
        ON R.CLIENT_ID = O.CLIENT_ID
        AND R.AREA_2 = O.AREA 
        AND  (MONTH(O.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE) AND YEAR(O.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE))
        AND R.SERVICE_TYPE = O.SERVICE_TYPE
    LEFT JOIN MAXMCOINVOICE O1  
        ON R.CLIENT_ID = O1.CLIENT_ID
        AND R.AREA_2 = O1.AREA 
        AND  (MONTH(O1.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE)-1 AND YEAR(O1.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE))
        AND R.SERVICE_TYPE = O1.SERVICE_TYPE
    INNER JOIN DW_PROD.HAH.DIM_BRANCH B 
        ON R.AREA_2  = B.OFFICE_CODE AND B.SOURCE_SYSTEM_ID  = 8
    INNER JOIN DIM_EMPLOYEE E       
        ON R.EMPLOYEE_NUMBER = E.EMPLOYEE_NUMBER AND R.AREA_2 = E.AREA 
    INNER JOIN DIM_CLIENT C
        ON R.CLIENT_ID = C.CLIENT_NUMBER AND R.AREA_2 = C.AREA
    INNER JOIN DW_PROD.HAH.DIM_CONTRACT CO ON R.CONTRACT_NO = CO.CONTRACT_CODE AND CO.SOURCE_SYSTEM_ID  = 8  
    INNER JOIN DISC_PROD.CCSI.DESKINFO D 
        ON R.EMP_DESK = D.DESK_DESIGNATOR AND R.AREA_2 = D.AREA
UNION   
SELECT DISTINCT
MD5(NVL(R.CLIENT_ID,''E'')::STRING || ''-'' || NVL(R.PERIOD_DATE::STRING,''E'')::STRING || ''-'' || NVL(R.DAY_OF_SERVICE,''E'')::STRING
            || ''-'' || NVL(R.RECORD_NUMBER,''E'')::STRING
            || ''-'' || ''CCSI'') AS REVENUE_KEY
        ,R.PERIOD_DATE AS "SERVICE_DATE"
        ,B.BRANCH_KEY
        ,MD5(E.MASTER_ID) AS "EMPLOYEE_KEY"
        ,MD5(C.MASTER_ID) AS "CLIENT_KEY"
        ,CO.CONTRACT_KEY
        ,NVL(MD5(COALESCE(O.RECORD_NUMBER,O1.RECORD_NUMBER)|| ''-'' || ''OTHERINV'' || ''-'' || ''CCSI'')
            ,R.INVOICE_KEY) AS INVOICE_KEY
        ,8 AS "SOURCE_SYSTEM_ID"
        ,MD5(D.AREA ||''-''|| NVL(D.SUPERVISOR_INITIAL,''UNKNOWN'') ||''-''|| ''CCSI'') AS SUPERVISOR_KEY--DIM SUPERVISOR
        ,TRY_TO_DATE(R.PAY_PERIOD_ENDING_DATE, ''MMDDYY'') AS "REVENUE_DATE" --PAYROLL DATE
        ,O.PAYMENT_DATE
        ,UPPER(B.BRANCH_NAME) AS "BRANCH_NAME"
        ,R.EMPLOYEE_NUMBER AS "EMPLOYEE_ID"
        ,R.CLIENT_ID AS "CLIENT_NUMBER"
        ,CO.CONTRACT_CODE
        ,(COALESCE(O.RECORD_NUMBER,O1.RECORD_NUMBER)||''OTHERINV'') AS "INVOICE_NUMBER"
        ,''REGULAR'' AS "INVOICE_TYPE"
        ,''HOURLY'' AS "BILL_UNIT_TYPE"
        ,1 AS NUMBER_OF_CLIENTS
        ,''CCSI'' AS SYSTEM_CODE
        ,UPPER(D.SUPERVISOR_INITIAL) AS "SUPERVISOR_CODE" 
        ,NULL AS "BILL_CODE"
        ,R.HOURS_WORKED AS "INVOICE_HOURS"
        ,ROUND((NULLIF(COALESCE(O.AMOUNT_BILLED,O1.AMOUNT_BILLED),0)/NULLIF(COALESCE(O.UNITS,O1.UNITS),0)), 2) AS "INVOICE_RATE"
        ,ROUND(((NULLIF(COALESCE(O.AMOUNT_BILLED,O1.AMOUNT_BILLED),0)/NULLIF(COALESCE(O.UNITS,O1.UNITS),0)) * R.HOURS_WORKED), 2) AS "AMOUNT_BILLED"
        ,ROUND(((NULLIF(COALESCE(O.AMOUNT_PAID,O1.AMOUNT_PAID),0)/NULLIF(COALESCE(O.UNITS,O1.UNITS),0)) * R.HOURS_WORKED), 2) AS "AMOUNT_COLLECTED"
--      ,O.BALANCE AS "AMOUNT_OUTSTANDING"
        ,ROUND((NULLIF(O.BALANCE, 0) / NULLIF(COALESCE(O.UNITS, O1.UNITS),0)) * R.HOURS_WORKED, 2) AS AMOUNT_OUTSTANDING --UPDATED ON 28/12/23 FOR RCM
        ,-1 AS ETL_TASK_KEY
        ,-1 AS ETL_INSERTED_TASK_KEY
        ,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
        ,CURRENT_USER AS ETL_INSERTED_BY 
        ,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
        ,CURRENT_USER AS ETL_LAST_UPDATED_BY
        ,0 AS ETL_DELETED_FLAG  
    FROM RAWVRFP_OTHERINV R 
    LEFT JOIN OTHERINV O  
        ON R.CLIENT_ID = O.CLIENT_ID
        AND R.AREA_2 = O.AREA 
        AND  (MONTH(O.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE) AND YEAR(O.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE))
        AND R.SERVICE_TYPE = O.SERVICE_TYPE
    LEFT JOIN MAXOTHERINV O1  
        ON R.CLIENT_ID = O1.CLIENT_ID
        AND R.AREA_2 = O1.AREA 
        AND  (MONTH(O1.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE)-1 AND YEAR(O1.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE))
        AND R.SERVICE_TYPE = O1.SERVICE_TYPE
    INNER JOIN DW_PROD.HAH.DIM_BRANCH B 
        ON R.AREA_2  = B.OFFICE_CODE AND B.SOURCE_SYSTEM_ID  = 8
    INNER JOIN DIM_EMPLOYEE E       
        ON R.EMPLOYEE_NUMBER = E.EMPLOYEE_NUMBER AND R.AREA_2 = E.AREA 
    INNER JOIN DIM_CLIENT C
        ON R.CLIENT_ID = C.CLIENT_NUMBER AND R.AREA_2 = C.AREA
    INNER JOIN DW_PROD.HAH.DIM_CONTRACT CO ON R.CONTRACT_NO = CO.CONTRACT_CODE AND CO.SOURCE_SYSTEM_ID  = 8  
    INNER JOIN DISC_PROD.CCSI.DESKINFO D 
        ON R.EMP_DESK = D.DESK_DESIGNATOR AND R.AREA_2 = D.AREA
)
        SELECT *
        ,ROW_NUMBER() OVER (PARTITION BY REVENUE_KEY ORDER BY REVENUE_KEY DESC) AS RN  
        FROM RESULT
        )       
        WHERE RN = 1;`;
          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
          ';