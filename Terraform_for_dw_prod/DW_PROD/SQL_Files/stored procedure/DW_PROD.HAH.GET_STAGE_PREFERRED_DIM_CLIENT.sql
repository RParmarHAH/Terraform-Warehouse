CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_PREFERRED_DIM_CLIENT("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result varchar(1000);
BEGIN

--*****************************************************************************************************************************
-- NAME:  PREFERRED_DIM_CLIENT
--
-- DATE        NAME                		CHANGES
-- --------    -------------------   	-----------------------------------------------------------------------------------------------
-- 05/12/23     DEEPEN GAJJAR           ADD LOGIC FOR ETHNICITY, REPLACED IT WITH NULL
-- 07/27/2023   DEEPEN GAJJAR            ADDED REFERRER_KEY FIELD
-- 08/31/2023   Sandesh Gosavi          Update logic of last_visit_date to avoid future date 
-- 11/08/2023	Shikhar Saxena 			Updated CLIENT_ETHNICITY logic and added HISPANIC_OR_LATINO column
-- 11/20/2023  Sandesh Gosavi          ADDED A COULUMN AND CTE FOR CLIENT STATUS
-- 11/21/2023   Sandesh Gosavi         ADDED A LOGIC AND COLUMN FOR DISCHARGE_REASON
-- 01/22/24    Trushali Ramoliya       added a logic for gender as per IDDOX - 308 gender sensitivity issue.
--*****************************************************************************************************************************
INSERT OVERWRITE  INTO STAGE.PREFERRED_DIM_CLIENT
WITH  CLIENT AS
(
	SELECT * FROM
	(
		SELECT MD5((AGENCYID||''-''||MASTER_ID||''-''||''PREFERRED'' )) as CLIENT_KEY,
		PATIENTID, MASTER_ID, AGENCYID, LASTNAME, FIRSTNAME, OFFICEID
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT MD5((M.AGENCYID||''-''||M.MASTER_ID||''-''||''PREFERRED'' )) as CLIENT_KEY,
        MA.PATIENTID AS CLIENT_NUMBER, MA.MASTER_ID, MA.AGENCYID, MA.LASTNAME, MA.FIRSTNAME, MA.OFFICEID
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.CLIENT_MATCH_LIST MA
		LEFT JOIN DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.CLIENT_MASTER_LIST M ON M.MASTER_ID =MA.MASTER_ID 
		WHERE MA.PATIENTID NOT IN (SELECT PATIENTID FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.CLIENT_MASTER_LIST)
	)
),
EMPLOYEE AS 
(
	SELECT * FROM
	(
		SELECT CAREGIVERID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.EMPLOYEE_MASTER_LIST
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT CAREGIVERID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.EMPLOYEE_MATCH_LIST
		WHERE CAREGIVERID NOT IN (SELECT CAREGIVERID FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.EMPLOYEE_MASTER_LIST ) 
	) 
),	
 RESCHEDULED AS 
( 
	WITH DELETEDVISIT AS 
	( 
		SELECT PATIENTID,VISITDATE FROM DISC_PROD.HHAEXCHANGEPREFERRED.TBLVISITS_REPL
		WHERE DELETED=TRUE 
		GROUP BY PATIENTID ,VISITDATE 
	)
	SELECT *
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.TBLVISITS_REPL VISIT 
	INNER JOIN DELETEDVISIT DT 
	ON VISIT.PATIENTID =DT.PATIENTID AND VISIT.VISITDATE=DT.VISITDATE
	WHERE DELETED =FALSE 
),
STATUS_NAME AS 
(
	SELECT DISTINCT  STATUSID, PATIENTSTATUSNAME AS CLIENT_STATUS
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.PATIENTSTATUSCHANGEACTIVITY 
	)
,				
DISCHARGE_REASON AS (SELECT 
                     DISTINCT PATIENTID,
FIRST_VALUE(TRIM(DISCHARGEREASONTEXT)) OVER (PARTITION BY PATIENTID ORDER BY STARTDATE DESC,DISCHARGEDATE desc) AS DISCHARGEREASONTEXT
FROM DISC_PROD.HHAEXCHANGEPREFERRED.PATIENTCONTRACTCHANGES)
,								
STATUS AS (
SELECT DISTINCT
	VISITS.VISITID, VISITS.AGENCYID,
	CASE 
	WHEN  RE.VISITID IS NOT NULL  AND VR.ISMISSEDVISIT = 0  AND  VR.BILLED = 1 AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL --AND NVL(INVOICE.VISITPAYMENTSTATUS,0) in(0,1,2) 
    THEN  ''ReScheduled In Review-Billed''
	WHEN  RE.VISITID IS NOT NULL  AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN  ''ReScheduled In Review Notbillable''
	WHEN  RE.VISITID IS NOT NULL AND VR.VISITDATE::DATE < GETDATE() AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN  ''ReScheduled Completed-Notbillable''
	WHEN  RE.VISITID IS NOT NULL AND VR.VISITDATE::DATE < GETDATE() AND VR.ISMISSEDVISIT = 0  AND  VR.BILLED = 1 --AND NVL(INVOICE.VISITPAYMENTSTATUS,0) in(0,1,2) 
    THEN  ''ReScheduled Completed-Billed''
    WHEN  RE.VISITID IS NOT NULL AND (VR.BILLED =0) AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL 
    THEN  ''ReScheduled In Review Unbilled''
    WHEN  RE.VISITID IS NOT NULL AND VR.VISITDATE::DATE < GETDATE() AND VR.ISMISSEDVISIT = 0  AND  VR.BILLED = 0
    THEN  ''ReScheduled Completed-Unbilled''
	WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 1  AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Cancelled Not billable'' 
	WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =1 AND VR.DELETED = TRUE
    THEN ''Cancelled Billed'' 
    WHEN (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL )  AND VR.VISITDATE::DATE > GETDATE()AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Scheduled Future Notbillable''--yes
    WHEN RE.VISITID IS NULL  AND IV.VISITID IS NOT NULL  AND INVOICE.VISITID IS NULL AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Scheduled In Review Notbillable''
    WHEN RE.VISITID IS NULL  AND IV.VISITID IS NOT NULL  AND INVOICE.VISITID IS NULL AND VR.BILLED =1
    THEN ''Scheduled In Review billed''
    WHEN  RE.VISITID IS NULL  AND VR.BILLED =0 AND VR.ISMISSEDVISIT = 0 AND( INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL )
    THEN ''Scheduled In Review Unbilled''
    WHEN (VR.VISITDATE::DATE < GETDATE() AND RE.VISITID IS NULL ) AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )--AND INVOICE.VISITPAYMENTSTATUS = ''0'') OR (INVOICE.VISITPAYMENTSTATUS IN (''1'',''2''))) 
    THEN ''Scheduled Completed Not billable''
    WHEN (VR.VISITDATE::DATE < GETDATE() AND  RE.VISITID IS NULL )  AND VR.ISMISSEDVISIT = 0 AND VR.BILLED =1
    THEN ''Scheduled Completed Billed''
    WHEN (VR.VISITDATE::DATE < GETDATE() AND RE.VISITID IS NULL ) AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL AND ((VR.DELETED =FALSE AND VR.BILLED = 1) )--OR ( INVOICE.VISITPAYMENTSTATUS = ''0'') OR (INVOICE.VISITPAYMENTSTATUS = ''1''))--DONE
    THEN ''Completed In Review '' --yes
	WHEN (VR.VISITDATE::DATE < GETDATE() AND  RE.VISITID IS NULL ) AND (VR.BILLED = 0 )AND VR.ISMISSEDVISIT = 0 --AND IV.VISITID IS NULL
    THEN ''Scheduled Completed UnBilled''
    WHEN  (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL)  AND  (VR.BILLED =0 )AND NVL(VR.ISMISSEDVISIT,0) =''0''
    THEN ''Scheduled Future Unbilled''
    WHEN (VR.VISITDATE::DATE > GETDATE() AND  RE.VISITID IS NOT NULL ) AND  (VR.BILLED =0 )AND NVL(VR.ISMISSEDVISIT,0) =''0''
    THEN ''Rescheduled Future Unbilled''
    WHEN (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL ) AND (VR.BILLED =0 )AND VR.DELETED=FALSE
    THEN ''Scheduled Unbilled''--yes
    WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL
    THEN ''Cancelled In Review Unbilled''--yes
--  WHEN (VR.VISITDATE::DATE > GETDATE() AND  RE.VISITID IS NULL ) AND VR.ISMISSEDVISIT=1 AND (VR.BILLED =0 )AND VR.DELETED=TRUE
--  THEN ''Scheduled Cancelled Unbilled''--yes
    WHEN VR.VISITDATE::DATE > GETDATE() AND VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE
    THEN ''Future Cancelled Unbilled''
	WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE
    THEN ''Cancelled Unbilled''
    WHEN (VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE())
    THEN ''Cancelled''
    END AS DERIVED_DISC_STATUS
FROM DISC_PROD.HHAEXCHANGEPREFERRED.VISITINFO_REPL VISITS
JOIN DISC_PROD.HHAEXCHANGEPREFERRED.TBLVISITS_REPL VR 
	ON VISITS.VISITID = VR.VISITID AND VISITS.AGENCYID = VR.AGENCYID
LEFT JOIN DISC_PROD.HHAEXCHANGEPREFERRED.INREVIEWVISITS IV
	ON IV.VISITID=VISITS.VISITID
LEFT JOIN RESCHEDULED RE 
	ON VISITS.VISITID=RE.VISITID
LEFT JOIN DISC_PROD.HHAEXCHANGEPREFERRED.SERVICECODES SC
ON VISITS.PRIMARYSERVICECODEID=SC.SERVICECODEID
LEFT JOIN DISC_PROD.HHAEXCHANGEPREFERRED.TBLINVOICEDETAILS_REPL INVOICE 
	ON VISITS.VISITID = INVOICE.VISITID AND VISITS.PRIMARYSERVICECODEID = INVOICE.INVSERVICECODEID
), PREFERRED_VISITS AS
(
	SELECT * FROM DISC_PROD.HHAEXCHANGEPREFERRED.VISITS
	QUALIFY DENSE_RANK() OVER (PARTITION BY VISITID ORDER BY LASTMODIFIEDDATE DESC) = 1
),
AGENCY_OFFICES_INCLUDE AS
(
	SELECT CONFIG.AGENCYID, INCLUDE_ALL_OFFICES, GET(CONTRACT.VALUE, ''OFFICEID'')::STRING AS OFFICEID
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.AGENCY_MAPPING CONFIG
		, TABLE(FLATTEN(PARSE_JSON(CONFIG.OFFICES_TO_INCLUDE), OUTER => TRUE)) CONTRACT
	WHERE CONFIG.ISACTIVE = TRUE
)
,CONFIRMED_VISITS AS
(
	SELECT DISTINCT	
	          coalesce(DC.CLIENT_NUMBER,VR.PATIENTID) AS PATIENTID 
			 , DATE_TRUNC (DAY, VR.VISITDATE) AS VISITDATE
			--, DC.CLIENT_NUMBER AS CLIENT_NUMBER
			
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.VISITINFO_REPL VISITS
	JOIN DISC_PROD.HHAEXCHANGEPREFERRED.TBLVISITS_REPL VR
		ON VISITS.VISITID = VR.VISITID
			AND VISITS.AGENCYID = VR.AGENCYID
	INNER JOIN PREFERRED_VISITS VS
		ON VS.VISITID = VR.VISITID 
	JOIN CLIENT C
		ON VR.PATIENTID = C.PATIENTID
			AND VISITS.AGENCYID = C.AGENCYID
	JOIN HAH.DIM_CLIENT DC
		ON DC.CLIENT_KEY =  C.CLIENT_KEY
		AND DC.SYSTEM_CODE = ''PREFERRED''
	JOIN EMPLOYEE E
		ON VR.CAREGIVERID = E.CAREGIVERID
			AND VISITS.AGENCYID = E.AGENCYID
	LEFT JOIN STATUS DS ON DS.VISITID=VISITS.VISITID AND DS.AGENCYID= VISITS.AGENCYID
	LEFT JOIN AGENCY_OFFICES_INCLUDE OFFICES_I
		ON OFFICES_I.AGENCYID = VISITS.AGENCYID
	WHERE DS.DERIVED_DISC_STATUS IN (''ReScheduled Completed-Billed'',''Completed Billed'',''ReScheduled Completed'',''ReScheduled Billed'',''Scheduled Completed Billed'')  
	AND (OFFICES_I.INCLUDE_ALL_OFFICES = TRUE OR VISITS.OFFICEID = OFFICES_I.OFFICEID)
)--SELECT * FROM VISIT_DATA WHERE CLIENT_NUMBER = ''19513592'';
,
BEGIN_DATE AS 
(
	SELECT DISTINCT S.AGENCYID, S.PATIENTID, S.PATIENTCREATEDDATE AS BEGIN_DATE 
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.PATIENTSTATUSCHANGEACTIVITY S 
), SERVICE_DATE AS 
(
	SELECT DISTINCT  VISITS.PATIENTID              
					, MIN(DATE_TRUNC(DAY,VISITS.VISITDATE)) AS SERVICE_START_DATE
					, MAX(DATE_TRUNC(DAY,VISITS.VISITDATE)) AS SERVICE_END_DATE 
	FROM CONFIRMED_VISITS VISITS
	GROUP BY VISITS.PATIENTID 
  )
SELECT DISTINCT MD5((M.AGENCYID||''-''||MASTER_ID||''-''||''PREFERRED'' )) as CLIENT_KEY
		, M.PATIENTID AS CLIENT_NUMBER
		, ''PREFERRED'' AS SYSTEM_CODE
		, 17 AS SOURCE_SYSTEM_ID
		, HEX_ENCODE((SSN))  AS CLIENT_PID 
		, NULLIF(TRIM(MEDICARENUMBER), '''') AS CLIENT_MEDICARE_ID
		, NULLIF(TRIM(MEDICAIDNUMBER), '''') AS MEDICAID_ID 
		, DATEOFBIRTH  AS CLIENT_DOB 
		, NULL AS CLIENT_DATE_OF_DEATH 
		, UPPER(trim(GENDER))  AS CLIENT_GENDER
		,UPPER (CASE 
		WHEN M.RACE IS NOT NULL THEN COALESCE(NULLIF(TRIM(M.RACE),''''), NULLIF(TRIM(M.ETHNICITY),''''), ''UNKNOWN'' )
		WHEN M.RACE ILIKE ''%HISPANIC%'' OR  M.ETHNICITY ILIKE ''%HISPANIC%'' THEN NULL																	
			ELSE NULL  
			END)  AS Client_Ethnicity,
		CASE WHEN M.ETHNICITY ILIKE ANY  (''%not%HISPANIC%OR%LATINO%'')THEN FALSE 
		WHEN (UPPER(TRIM(M.RACE)) = ''HISPANIC OR LATINO'' OR M.RACE IS NULL) AND M.ETHNICITY ILIKE ANY  (''%HISPANIC%OR%LATINO%'') THEN TRUE 
		ELSE FALSE END AS HISPANIC_OR_LATINO       --missing   -- ADD LOGIC FOR ETHNICITY, REPLACED IT WITH NULL ON MAY 8, 2023 - TR.      
		, NULL AS CLIENT_GENDER_IDENTITY -- NA
		, NULL AS CLIENT_SEXUAL_ORIENTATION -- NA
		, NULL AS CLIENT_RACE -- NA  
        , NULL AS CLIENT_MARITAL_STATUS   --missing 
		, NULL  AS CLIENT_SALUTATION
		, FIRSTNAME  AS CLIENT_FIRST_NAME
		, MIDDLENAME AS CLIENT_MIDDLE_NAME
		, LASTNAME  AS CLIENT_LAST_NAME
		--	,TO_CHAR(LASTNAME) || '', '' || TO_CHAR(FIRSTNAME) || '' '' || TO_CHAR(MIDDLENAME)  AS CLIENT_NAME
		, CONCAT(UPPER(TRIM(LASTNAME)), '', '' , UPPER(TRIM(FIRSTNAME)) , '' '',nvl(UPPER(TRIM(MIDDLENAME)),'''')) AS CLIENT_NAME
  		, M.ADDRESS1 AS CLIENT_ADDRESS1
		, M.ADDRESS2 AS CLIENT_ADDRESS2 
		, UPPER(TRIM(M.CITY)) AS CLIENT_CITY
		, UPPER(TRIM(M.STATE)) AS CLIENT_STATE_CODE
		, ZIP5  AS CLIENT_ZIP
		, NULL AS CLIENT_CLN_ADDRESS1
		, NULL AS CLIENT_CLN_ADDRESS2
		, NULL AS CLIENT_CLN_CITY
		, NULL AS CLIENT_CLN_STATE_CODE
		, NULL AS CLIENT_CLN_ZIP
		, NULL AS CLIENT_STD_ADDRESS1
		, NULL AS CLIENT_STD_ADDRESS2
		, NULL AS CLIENT_STD_CITY
		, NULL AS CLIENT_STD_STATE_CODE
		, NULL AS CLIENT_STD_ZIP
       	, TRIM( REGEXP_REPLACE( M.HOMEPHONE,''\\\\\\\\.|\\\\\\\\,|\\\\\\\\+|\\\\\\\\-|\\\\\\\\?|\\\\\\\\]|\\\\\\\\/|\\\\\\\\(|\\\\\\\\)|\\\\\\\\\\\\\\\\|\\\\\\\\s|[a-z]|[A-Z]|'',''''))  AS CLIENT_HOME_PHONE
		, TRIM( REGEXP_REPLACE( M.PHONE2,''\\\\\\\\.|\\\\\\\\,|\\\\\\\\+|\\\\\\\\-|\\\\\\\\?|\\\\\\\\]|\\\\\\\\/|\\\\\\\\(|\\\\\\\\)|\\\\\\\\\\\\\\\\|\\\\\\\\s|[a-z]|[A-Z]|'','''')) AS CLIENT_CELL_PHONE  
		, TRIM( REGEXP_REPLACE( M.PHONE3,''\\\\\\\\.|\\\\\\\\,|\\\\\\\\+|\\\\\\\\-|\\\\\\\\?|\\\\\\\\]|\\\\\\\\/|\\\\\\\\(|\\\\\\\\)|\\\\\\\\\\\\\\\\|\\\\\\\\s|[a-z]|[A-Z]|'',''''))  AS CLIENT_WORK_PHONE 
     	, NULL AS CLIENT_FAX_NUMBER 
		, NULL AS CLIENT_PERSONAL_EMAIL            --missing 
		, REFERRALRECEIVEDDATE  AS REFERRAL_DATE  --missing   
        , SERVICE_END_DATE::DATE -SERVICE_START_DATE::DATE   AS DAYS_TO_SERVICE
		, NULL AS CONTRACT_BEGIN_DATE   
		, NULL AS CONTRACT_END_DATE   
		, SERVICE_START_DATE as FIRST_SERVICE_DATE   
		, SERVICE_END_DATE as LAST_SERVICE_DATE  -- PROJECTEDDCDATE
		, BEGIN_DATE  AS BEGIN_DATE        --PATIENTCREATEDDATE  PATIENTSTATUSCHANGEACTIVITY
	    , CASE WHEN M.STATUSID = 5 THEN SERVICE_END_DATE::DATE ELSE NULL END  AS END_DATES        -- Discharged status STATUSCHANGEDATE  PATIENTSTATUSCHANGEACTIVITY STATUSID
        , CASE WHEN M.STATUSID = 5 THEN FALSE ELSE TRUE END  AS ACTIVE_CLIENT_FLAG 
		,UPPER(SN.CLIENT_STATUS) AS CLIENT_STATUS								   
		,CASE  WHEN len(DR.DISCHARGEREASONTEXT) > 4995 
		       THEN LEFT(TRIM(DR.DISCHARGEREASONTEXT), 4995) 
		       ELSE TRIM(DR.DISCHARGEREASONTEXT) END AS DISCHARGE_REASON										 
		, NULL AS ON_HOLD_FLAGART_DATE
		, NULL AS ON_HOLD_EN        --PATIENTSTATUSNAME  PATIENTSTATUSCHANGEACTIVITY
		, NULL AS ON_HOLD_STD_DATE
        , NULL as LINKED_ID
		, NULL AS ACQUIRED_FROM_COMPANY_KEY
		, NULL AS ACQUIRED_FROM_COMPANY_ID
		, NULL AS ACQUIRED_FROM_COMPANY_FULL_NAME
		, NULL AS ACQUISITION_DATE
		, NULL AS ACQUISITION_FLAG
		, NULL AS ADMISSION_DATE
		, NULL AS ADMISSION_FLAG
		, NULL AS CLIENT_CONVERTED_FLAG 
		, NULL AS PRIMARY_SUPERVISOR_KEY 
		, NULL AS PRIMARY_SUPERVISOR_CODE
		, NULL AS PRIMARY_SUPERVISOR_NAME  --COORDINATORS  NURSEID
		, NULL AS SECONDARY_SUPERVISOR_KEY
		, NULL AS SECONDARY_SUPERVISOR_CODE
		, NULL AS SECONDARY_SUPERVISOR_NAME
		, MD5(''PREFERRED'' || ''-'' || ''PREFERRED CORPORATE OFFICE'' || ''-'' || ''PREFERRED'') AS PRIMARY_BRANCH_KEY 
		, ''PREFERRED CORPORATE OFFICE'' AS PRIMARY_BRANCH_NAME 
		, ''NY'' AS PRIMARY_BRANCH_STATE
		, NULL AS GUARANTOR_NAME
		, PO.OFFICENAME AS NOTES
        , NULL AS AGENCY
		,MD5(RS.AGENCYID||''-''||RS."REFERRALSOURCEID"||''-''||''PREFERRED'') REFERRER_KEY
		, TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE
		, TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
		
        :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,

		CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ as ETL_INSERTED_DATE,
		CURRENT_USER as ETL_INSERTED_BY,
		CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ as ETL_UPDATED_DATE,
		CURRENT_USER as ETL_LAST_UPDATED_BY,
		0 as ETL_DELETED_FLAG,
		0 as ETL_INFERRED_MEMBER_FLAG
FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.CLIENT_MASTER_LIST M
INNER JOIN DISC_PROD.HHAEXCHANGEPREFERRED.AGENCY_MAPPING AGENCY_CONFIG
	ON AGENCY_CONFIG.AGENCYID = M.AGENCYID
		AND AGENCY_CONFIG.ISACTIVE = TRUE
LEFT JOIN SERVICE_DATE D ON D.PATIENTID = M.PATIENTID
LEFT JOIN BEGIN_DATE S ON S.PATIENTID = M.PATIENTID 
--LEFT JOIN DISC_PROD.HHAEXCHANGEPREFERRED.OFFICE_OFFICES_REPL  O ON M.OFFICEID = O.OFFICEID
LEFT JOIN DW_PROD.HAH.DIM_ZIP_CODE_DETAILED Z1 ON Z1.ZIP = LEFT(M.ZIP5,5)
LEFT JOIN DW_PROD.STAGE.PREFERRED_PHYSICAL_OFFICES po on Z1.ZIP IS NOT NULL
LEFT JOIN DW_PROD.HAH.DIM_ZIP_CODE_DETAILED Z2 ON Z2.ZIP = po.ZIP
LEFT JOIN STATUS_NAME SN ON SN.STATUSID = M.STATUSID													
LEFT JOIN DISCHARGE_REASON DR ON TRIM(M.PATIENTID) = TRIM(DR.PATIENTID)																	   
LEFT JOIN DISC_PROD.HHAEXCHANGEPREFERRED.REFERRALSOURCE RS ON RS.REFERRALSOURCEID = M.REFERRALSOURCEID
QUALIFY DENSE_RANK() OVER (PARTITION BY M.PATIENTID 
							ORDER BY ST_DISTANCE(ST_MAKEPOINT(Z1.LNG, Z1.LAT)
									, ST_MAKEPOINT(Z2.LNG, Z2.LAT))
						  ) = 1;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;
';