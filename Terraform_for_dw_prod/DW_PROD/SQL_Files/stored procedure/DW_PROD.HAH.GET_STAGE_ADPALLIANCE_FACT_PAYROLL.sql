CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_ADPALLIANCE_FACT_PAYROLL("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN

--*****************************************************************************************************************************
-- NAME: ADPALLIANCE_FACT_PAYROLL
--
-- PURPOSE: Creates one row for each PAYROLL according to ADP-ALLIANCE
--
-- DEVELOPMENT LOG:
-- DATE				AUTHOR                					NOTES:
-- ----------		--------------------------------		-------------------------------------------------------------------
-- 18/10/2022		Aditya Shukla / Jigar Prajapati			Initial Development
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.ADPALLIANCE_FACT_PAYROLL

WITH EMPLOYEE AS (
	SELECT  
		MASTER_ID, FILE_NUMBER, MD5(18 || ''ADP'' || MASTER_ID || ''ALLIANCE'') AS EMPLOYEE_KEY
	FROM DISC_DEDUPE_PROD.ADP.ALLIANCE_EMPLOYEE_MASTER_LIST
	UNION 
	SELECT DISTINCT 
		MASTER_ID, FILE_NUMBER, MD5(18 || ''ADP'' || MASTER_ID || ''ALLIANCE'') AS EMPLOYEE_KEY
	FROM DISC_DEDUPE_PROD.ADP.ALLIANCE_EMPLOYEE_MATCH_LIST
	WHERE ID NOT IN (SELECT DISTINCT EMPLOYEE_ID FROM DISC_DEDUPE_PROD.ADP.ALLIANCE_EMPLOYEE_MASTER_LIST)
), 
SALARY AS (
	SELECT DISTINCT
		FILE_NUMBER AS ID,
		"PAY_DATE"::DATE AS PAY_DATE,
		PERIOD_BEGINNING_DATE::DATE AS BEGIN_DATE,
		SUM(NVL(REGULAR_HOURS, 0)) AS REGULAR_HOURS,
		SUM(NVL(OVERTIME_HOURS, 0)) AS OVERTIME_HOURS,
--		SUM(NVL(ADDITIONAL_HOURS__COR_CORP_PTO, 0)  + NVL(ADDITIONAL_HOURS__TOH_PTO_HOURLY, 0))
		NULL AS VACATION_HOURS,
		SUM(NVL(TOTAL_HOURS, 0)) AS PAY_HOURS,
--		SUM(/*NVL("ADDITIONAL HOURS   CV1-OSHA ETS", 0) + */NVL("ADDITIONAL HOURS   HBO-HHA HOURLY B", 0))
		NULL AS NON_SERVICE_UNITS,
		SUM(NVL(REPLACE(OVERTIME_EARNINGS, '','')::NUMBER(38, 4) / CASE WHEN OVERTIME_HOURS = 0 THEN NULL ELSE REPLACE(OVERTIME_HOURS, '','')::NUMBER(38, 4) END, 0))::NUMBER(38, 4) AS OVERTIME_RATE,
		SUM(NVL(REGULAR_EARNINGS, 0)) AS SERVICE_PAY_AMOUNT,
		SUM(NVL(OVERTIME_EARNINGS, 0)) AS OVERTIME_PAY_AMOUNT,
		SUM(COALESCE(
		ADDITIONAL_EARNINGS__CAL_AGN_ON_CALL, ADDITIONAL_EARNINGS__GRO_GRV_ON_CALL, ADDITIONAL_EARNINGS__HHL_HOL_ON_CALL, ADDITIONAL_EARNINGS__MSA_MSK_ON_CALL, ADDITIONAL_EARNINGS__STC_STJ_ON_CALL
		)) AS NON_SRV_PAY,
		SUM(NVL(GROSS_PAY, 0)) AS GROSS_PAY,
		SUM(NVL(TOTAL_EMPLOYEE_TAX, 0)) AS TAX_AMOUNT,
		SUM(NVL(TAKE_HOME, 0)) AS NET_PAY_AMOUNT,
		SUM(NVL(VOLUNTARY_DEDUCTION_MIL_MILEAGE, 0) + NVL(VOLUNTARY_DEDUCTION_TB_TB_TEST, 0)) AS REINBURSMENT_AMOUNT,
		SUM(NVL(TOTAL_VOLUNTARY_DEDUCTIONS, 0)) AS OTHER_DEDUCTIONS_AMOUNT
	FROM DISC_PROD.ADP.ALLIANCE_PAYROLL
	GROUP BY 1, 2, 3
)
SELECT DISTINCT 
	MD5(18 || ''ADP'' || PAY.PAY_DATE::DATE || EMP.FILE_NUMBER || PAY.CHECK_VOUCHER_NUMBER || PERIOD_BEGINNING_DATE::DATE || ''-'' || ''ALLIANCE'') AS PAYROLL_KEY,
	PAY.PAY_DATE::DATE AS REPORT_DATE,
	MD5(18 || ''ADP'' || EMP.FILE_NUMBER || ''ALLIANCE'') AS EMPLOYEE_KEY,
	CASE WHEN GEN_EMP.CLASSNAME = ''MSK'' THEN ''714f508daef5c1193b2370453e32765f''
		WHEN GEN_EMP.CLASSNAME = ''STJ'' THEN ''51fcb87e480f1af80d8746b845819a6d''
		WHEN GEN_EMP.CLASSNAME = ''HOF'' THEN ''276e4edca481724119e78a94c7a471ed''
		WHEN PAY.TAX_ID = ''367279931'' THEN ''cc171e4dea83d6915f649a24507f6112''
		ELSE COALESCE(BRANCH.BRANCH_KEY, MD5(''ADP'' || ''-'' || ''UNKNOWN'' || ''-'' || ''ALLIANCE'')) 
	END AS BRANCH_KEY,
	18 AS SOURCE_SYSTEM_ID,
	PAY.PAY_DATE::DATE AS PAYROLL_DATE,
	EMP.FILE_NUMBER AS EMPLOYEE_ID,
	CASE WHEN GEN_EMP.CLASSNAME = ''MSK'' THEN ''MUSKEGON''
		WHEN GEN_EMP.CLASSNAME = ''STJ'' THEN ''ST.JOSEPH''
		WHEN GEN_EMP.CLASSNAME = ''HOF'' THEN ''HOLLAND''
		WHEN PAY.TAX_ID = ''367279931'' THEN ''ALLEGAN''
		ELSE COALESCE(BRANCH.BRANCH_NAME, ''UNKNOWN'') 
	END AS BRANCH_NAME,
	''ADP-ALLIANCE'' AS SYSTEM_CODE,
	PERIOD_BEGINNING_DATE::DATE AS PAY_PERIOD_START_DATE,
	PERIOD_ENDING_DATE::DATE AS PAY_PERIOD_END_DATE,
	PAY.CHECK_VOUCHER_NUMBER AS CHECK_NUMBER,
	SALARY.PAY_HOURS AS PAY_HOURS,
	SALARY.REGULAR_HOURS AS SERVICE_HOURS,
	SALARY.OVERTIME_HOURS AS OVERTIME_HOURS,
	SALARY.NON_SERVICE_UNITS AS NON_SERVICE_UNITS,
	ADDITIONAL_HOURS__SIP_SICK_PAY AS SICK_HOURS,
	SALARY.VACATION_HOURS AS VACATION_HOURS,			-- need TO confirm
	REPLACE("RATE", '','') AS PAY_RATE,
	SALARY.OVERTIME_PAY_AMOUNT / CASE WHEN SALARY.OVERTIME_HOURS = 0 THEN NULL ELSE SALARY.OVERTIME_HOURS END AS OVERTIME_RATE,
	SALARY.GROSS_PAY AS GROSS_PAY_AMOUNT,
--	SALARY.REGULAR_HOURS * REPLACE("RATE", '','') + SALARY.OVERTIME_PAY_AMOUNT + SALARY.NON_SRV_PAY AS GROSS_PAY_AMOUNT_DERIVED,
	SALARY.SERVICE_PAY_AMOUNT AS SERVICE_PAY_AMOUNT,
--	CASE WHEN SALARY.SERVICE_PAY_AMOUNT = 0
--		THEN SALARY.REGULAR_HOURS * REPLACE("RATE", '','')
--	END AS SERVICE_PAY_AMOUNT_DERIVED,
	SALARY.OVERTIME_PAY_AMOUNT,
	SALARY.NON_SRV_PAY  AS NON_SERVICE_PAY_AMOUNT,
	SALARY.TAX_AMOUNT AS TAX_AMOUNT,
	SALARY.NET_PAY_AMOUNT AS NET_PAY_AMOUNT,
--	SALARY.GROSS_PAY - SALARY.TAX_AMOUNT - SALARY.OTHER_DEDUCTIONS_AMOUNT + SALARY.REINBURSMENT_AMOUNT AS NET_PAY_AMOUNT_DERIVED,
	SALARY.OTHER_DEDUCTIONS_AMOUNT AS OTHER_DEDUCTIONS_AMOUNT,
	NULL AS UNION_DUES_AMOUNT,
	SALARY.REINBURSMENT_AMOUNT AS REINBURSMENT_AMOUNT,
		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
		:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_INSERTED_DATE,
		CURRENT_USER AS ETL_INSERTED_BY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_LAST_UPDATED_DATE,
		CURRENT_USER AS ETL_LAST_UPDATED_BY,
		FALSE AS ETL_DELETED_FLAG
FROM DISC_PROD.ADP.ALLIANCE_PAYROLL PAY
LEFT JOIN SALARY
	ON TRIM(SALARY.ID) = TRIM(PAY.FILE_NUMBER) AND SALARY.PAY_DATE = PAY."PAY_DATE"::DATE --AND SALARY.BEGIN_DATE = PAY.PERIOD_BEGINNING_DATE::DATE
LEFT JOIN EMPLOYEE EMP
	ON EMP.FILE_NUMBER = PAY.FILE_NUMBER
LEFT JOIN DISC_DEDUPE_PROD.GENERATIONSALLIANCE.EMPLOYEE_MASTER_LIST GEN_EMP
	ON PAY.TAX_ID = GEN_EMP.SOCIALSECURITYNUM
LEFT JOIN DW_PROD.STAGE.ADPALLIANCE_DIM_BRANCH BRANCH
	ON UPPER(BRANCH.BRANCH_NAME) LIKE ''%'' || CASE WHEN "LOCATION" = ''STJOS - St. Joseph'' THEN ''ST.JOSEPH''
									ELSE UPPER(TRIM(SUBSTRING(LOCATION, CHARINDEX(''-'', "LOCATION") + 1))) END || ''%''
WHERE SALARY.GROSS_PAY <> 0 AND PAY.GROSS_PAY <> 0;

END;
';