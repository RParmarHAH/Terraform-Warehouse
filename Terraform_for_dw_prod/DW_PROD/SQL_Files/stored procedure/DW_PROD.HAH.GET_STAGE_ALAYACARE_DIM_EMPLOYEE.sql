CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_ALAYACARE_DIM_EMPLOYEE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
  RETURN_RESULT VARCHAR(1000);
BEGIN
    --*****************************************************************************************************************************
-- NAME:  ALAYACARE_DIM_EMPLOYEE
--
-- PURPOSE: Creates one row per EMPLOYEE according to Alayacare
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 10/28/2021  MOIN SAIYED        Initial development
--25/2/22      VAIDEHI SHAH       implemnting dedupe for record linkage
-- 03/08/2022	Mir Ali				Added LINKED_ID
-- 25/09/2023  Darshan Gosai		Payroll ID correction for Alabama
-- 25/09/2023  Meet Dalwadi        Updated Logic For EMPLOYEE_PID
-- 10/11/2023  Shikhar Saxena		Updated employee ethnicity logic and added HISPANIC_OR_LATINO column
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.ALAYACARE_DIM_EMPLOYEE

WITH EMPLOYEE AS 
(
SELECT * FROM 
(
	SELECT EMPLOYEE_ID,MASTER_ID,EMPLOYEE_ID AS ORIGINAL_RECORD_ID,BRANCH_ID
	FROM  DISC_DEDUPE_PROD.ALAYACARE.EMPLOYEE_MASTER_LIST  
) 
UNION
SELECT * FROM 
(
	SELECT DISTINCT ID,MASTER_ID,ID AS ORIGINAL_RECORD_ID,BRANCH_ID
	FROM DISC_DEDUPE_PROD.ALAYACARE.EMPLOYEE_MATCH_LIST 
	WHERE ID NOT IN (SELECT EMPLOYEE_ID FROM DISC_DEDUPE_PROD.ALAYACARE.EMPLOYEE_MASTER_LIST ) 
) 
)
, LAST_SERVICE AS (
SELECT  NVL(E.BRANCH_ID,VISITS.BRANCH_ID) AS BRANCH_ID
		,NVL(E.MASTER_ID::INT,VISITS.EMPLOYEE_ID::INT) AS EMPLOYEE_ID 
		,MAX(DATE_TRUNC (DAY,START_AT)) AS LAST_SERVICE_DATE
	FROM DISC_PROD.ALAYACARE.VISIT VISITS
	LEFT JOIN EMPLOYEE E ON VISITS.EMPLOYEE_ID = E.EMPLOYEE_ID AND VISITS.BRANCH_ID = E.BRANCH_ID
	WHERE  VISITS.IS_PAID = 1 OR VISITS.IS_INVOICED = 1 OR VISITS.VISIT_COMPLETED = 1 --WHEN VISITS.IS_PAID = 1 THEN ''05'' WHEN VISITS.IS_INVOICED = 1 THEN ''04'' WHEN VISITS.VISIT_COMPLETED = 1 THEN ''02''
	GROUP BY NVL(E.BRANCH_ID,VISITS.BRANCH_ID),NVL(E.MASTER_ID::INT,VISITS.EMPLOYEE_ID::INT)
)
, EMPLOYYE_CATEGORY AS 
(
	SELECT
		ED.EMPLOYEE_ID::INT AS EMPLOYEE_ID 
		,listagg(ED.PROFILE_COMPANY, '','') AS EMPLOYEE_CATEGORY
	FROM
		DISC_PROD.ALAYACARE.EMPLOYEE_DEPARTMENT ED
	INNER JOIN EMPLOYEE E
		ON
		ED.EMPLOYEE_ID = E.EMPLOYEE_ID
	GROUP BY ED.EMPLOYEE_ID::INT
)
SELECT DATA.* FROM (SELECT DISTINCT 
MD5(NVL(TRIM(COMPANY.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(E.BRANCH_ID,''-1'') || '')'' || ''-'' || NVL(E.MASTER_ID::INT,-1) || ''-'' || ''ALAYACARE'') AS EMPLOYEE_KEY
,E.EMPLOYEE_ID
,UPPER(NVL(TRIM(COMPANY.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(E.BRANCH_ID,''-1'') || '')'') AS SYSTEM_CODE
,9 AS SOURCE_SYSTEM_ID
--,CASE WHEN TRIM( E.PROFILE_SSN) NOT IN (SELECT SSN FROM Data_Management.Data_Quality.Invalid_SSN)
--			AND TRIM( E.PROFILE_SSN) NOT LIKE ''00000%'' AND LENGTH( TRIM( E.PROFILE_SSN)) = 9
--			THEN HEX_ENCODE( TRIM( E.PROFILE_SSN))
--		 ELSE NULL
--		END AS EMPLOYEE_PID
,CASE WHEN TRIM( REGEXP_REPLACE(E.PROFILE_SSN, ''[^[:digit:]]'', '''')) NOT IN (SELECT SSN FROM Data_Management.Data_Quality.Invalid_SSN)
			AND TRIM( REGEXP_REPLACE(E.PROFILE_SSN, ''[^[:digit:]]'', '''')) NOT LIKE ''00000%'' AND LENGTH( TRIM( REGEXP_REPLACE(E.PROFILE_SSN, ''[^[:digit:]]'', ''''))) = 9
			THEN HEX_ENCODE(TRIM( REGEXP_REPLACE(E.PROFILE_SSN, ''[^[:digit:]]'', '''')))
		 ELSE NULL
		END AS EMPLOYEE_PID --UPDATED LOGIC
,E.EMPLOYEE_ID AS EMPLOYEE_NUMBER
,CASE WHEN E.PROFILE_BIRTHDAY::DATE < ''1901-01-01''::DATE 
			OR E.PROFILE_BIRTHDAY::DATE > DATEADD( YEAR, -12, CURRENT_DATE) THEN NULL
		 ELSE COALESCE(TRY_TO_DATE(E.PROFILE_BIRTHDAY, ''YYYY-MM-DD''), TRY_TO_DATE(E.PROFILE_BIRTHDAY, ''YYYY-M-DD''))
		END AS EMPLOYEE_DOB
,NULL AS EMPLOYEE_DATE_OF_DEATH
,COALESCE(REPLACE(REPLACE(REPLACE(REPLACE(E.PROFILE_START_DATE,''2022/05/09'',''2022-05-09''),''05-10-2022'',''2022-05-10''),''2022/09/02'',''2022-09-02''),''2022/09/05'',''2022-09-05''),E.CREATED_AT::DATE)::DATE AS EMPLOYEE_HIRE_DATE 
,NULL AS EMPLOYEE_REHIRE_DATE 
,NULL AS EMPLOYEE_BENEFIT_START_DATE 
,NULL AS EMPLOYEE_FIRST_CHECK_DATE
,NULL AS EMPLOYEE_LAST_CHECK_DATE
,LAST_SERVICE_DATE AS EMPLOYEE_LAST_WORKED_DATE
,CASE WHEN PROFILE_TERMINATION_DATE = '''' THEN NULL ELSE 
	COALESCE(TRY_TO_DATE(E.PROFILE_TERMINATION_DATE, ''YYYY-MM-DD''), TRY_TO_DATE(E.PROFILE_TERMINATION_DATE, ''YYYY-M-DD''))
	END AS EMPLOYEE_TERMINATE_DATE
,LEFT(TRIM(PROFILE_TERMINATION_REASON), 50) AS REASON_TO_TERMINATE
,CASE WHEN E.STATUS IN (1,4,5) THEN ''TRUE'' ELSE ''FALSE'' END AS ACTIVE_EMPLOYEE_FLAG --01 - Active, 02 - Terminated, 03 - Suspended, 04 - Hold, 05 - Pending, 06 - Applicant, 07 - Rejected
,CASE  PROFILE_DO_NOT_HIRE_ WHEN ''YES'' THEN TRUE WHEN  ''NO'' THEN FALSE ELSE NULL END AS ABLE_TO_REHIRE_FLAG 
,NULL AS Employee_Prefix 
,UPPER( TRIM( E.PROFILE_FIRST_NAME)) AS EMPLOYEE_FIRST_NAME
,UPPER( TRIM( E.PROFILE_MIDDLE_NAME)) AS EMPLOYEE_MIDDLE_NAME
,UPPER( TRIM( E.PROFILE_LAST_NAME)) AS EMPLOYEE_LAST_NAME
,NULL AS EMPLOYEE_SUFFIX
,UPPER( TRIM( E.PROFILE_ADDRESS)) AS EMPLOYEE_ADDRESS_1
,UPPER( TRIM( E.PROFILE_ADDRESS_SUITE)) AS EMPLOYEE_ADDRESS_2
,UPPER( TRIM(E.PROFILE_CITY)) AS EMPLOYEE_CITY
,CASE WHEN UPPER(TRIM(E.PROFILE_STATE)) IN (''GEORGIA'',''PORT WENTWORTH'',''SAVANNAH'',''FORSYTH'',''CENTERVILLE'',''MACON'',''FORT VALLEY'',''SAVANNAH'',''HAVANA'',''georgia'',''VALDOSTA'',''GEORGIA'',''SOUTH CAROLINA'',''ALBANY'',''AMERICUS'')
	THEN ''GA'' 
   WHEN UPPER(TRIM(E.PROFILE_STATE)) = ''SOUTH CAROLINA''
	THEN ''SC'' 
  WHEN UPPER(TRIM(E.PROFILE_STATE)) = ''ALABAMA''
	THEN ''AL'' 
  WHEN UPPER(TRIM(E.PROFILE_STATE)) = ''TEXAS''
	THEN ''TX''
  WHEN UPPER(TRIM(E.PROFILE_STATE)) = ''MARYLAND''
	THEN ''MD''
  WHEN LEN(UPPER(TRIM(E.PROFILE_STATE)))>2 THEN NULL
	ELSE UPPER(TRIM(E.PROFILE_STATE))
	END AS EMPLOYEE_STATE_CODE
--,UPPER( TRIM(E.PROFILE_STATE)) AS EMPLOYEE_STATE_CODE
,CASE WHEN TRIM(E.PROFILE_ZIP) IN (''GA'',''Ga'',''Florida'') THEN NULL 
WHEN LEN(TRIM(E.PROFILE_ZIP))>5 THEN NULL
ELSE TRIM(E.PROFILE_ZIP)
END AS EMPLOYEE_ZIP
,NULL AS EMPLOYEE_HOME_PHONE
,CASE WHEN TRIM( REGEXP_REPLACE( E.PROFILE_PHONE_MAIN,''\\\\\\\\\\\\\\\\.|\\\\\\\\\\\\\\\\,|\\\\\\\\\\\\\\\\+|\\\\\\\\\\\\\\\\-|\\\\\\\\\\\\\\\\?|\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\/|\\\\\\\\\\\\\\\\(|\\\\\\\\\\\\\\\\)|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\\\\\\\\\\\\\\\\s|[a-z]|[A-Z]|'','''')) NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) AND E.PROFILE_PHONE_MAIN NOT LIKE ''%0000000%'' AND LENGTH( TRIM( REGEXP_REPLACE( E.PROFILE_PHONE_MAIN,''\\\\\\\\\\\\\\\\.|\\\\\\\\\\\\\\\\,|\\\\\\\\\\\\\\\\+|\\\\\\\\\\\\\\\\-|\\\\\\\\\\\\\\\\?|\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\/|\\\\\\\\\\\\\\\\(|\\\\\\\\\\\\\\\\)|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\\\\\\\\\\\\\\\\s|[a-z]|[A-Z]|'',''''))) = 10 
THEN TRIM( REGEXP_REPLACE( E.PROFILE_PHONE_MAIN,''\\\\\\\\\\\\\\\\.|\\\\\\\\\\\\\\\\,|\\\\\\\\\\\\\\\\+|\\\\\\\\\\\\\\\\-|\\\\\\\\\\\\\\\\?|\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\/|\\\\\\\\\\\\\\\\(|\\\\\\\\\\\\\\\\)|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\\\\\\\\\\\\\\\\s|[a-z]|[A-Z]|'',''''))
         ELSE NULL END AS EMPLOYEE_CELL_PHONE
,CASE WHEN TRIM( REGEXP_REPLACE( E.PROFILE_PHONE_PERSONAL,''\\\\\\\\\\\\\\\\.|\\\\\\\\\\\\\\\\,|\\\\\\\\\\\\\\\\+|\\\\\\\\\\\\\\\\-|\\\\\\\\\\\\\\\\?|\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\/|\\\\\\\\\\\\\\\\(|\\\\\\\\\\\\\\\\)|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\\\\\\\\\\\\\\\\s|[a-z]|[A-Z]|'','''')) NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) AND E.PROFILE_PHONE_PERSONAL NOT LIKE ''%0000000%'' AND LENGTH( TRIM( REGEXP_REPLACE( E.PROFILE_PHONE_PERSONAL,''\\\\\\\\\\\\\\\\.|\\\\\\\\\\\\\\\\,|\\\\\\\\\\\\\\\\+|\\\\\\\\\\\\\\\\-|\\\\\\\\\\\\\\\\?|\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\/|\\\\\\\\\\\\\\\\(|\\\\\\\\\\\\\\\\)|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\\\\\\\\\\\\\\\\s|[a-z]|[A-Z]|'',''''))) = 10 
THEN TRIM( REGEXP_REPLACE( E.PROFILE_PHONE_PERSONAL,''\\\\\\\\\\\\\\\\.|\\\\\\\\\\\\\\\\,|\\\\\\\\\\\\\\\\+|\\\\\\\\\\\\\\\\-|\\\\\\\\\\\\\\\\?|\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\/|\\\\\\\\\\\\\\\\(|\\\\\\\\\\\\\\\\)|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\\\\\\\\\\\\\\\\s|[a-z]|[A-Z]|'',''''))
         ELSE NULL END AS EMPLOYEE_WORK_PHONE
,TRIM(E.PROFILE_PERSONAL_EMAIL) AS Employee_Personal_Email
,TRIM(E.PROFILE_EMAIL) AS Employee_Work_Email
,NULL AS Linked_In_Profile_URL
,CASE WHEN UPPER(TRIM(E.PROFILE_GENDER)) IN (''M'',''MALE'') THEN ''MALE''
				WHEN UPPER(TRIM(E.PROFILE_GENDER)) IN (''F'',''FEMALE'') THEN ''FEMALE''
				ELSE NULL  
		END AS Employee_Gender
,CASE WHEN UPPER( TRIM( E.PROFILE_ETHNICITY)) ILIKE ''%NONE%'' OR TRIM(  E.PROFILE_ETHNICITY) = '''' OR  E.PROFILE_ETHNICITY IS NULL THEN NULL
	   WHEN TRIM(E.PROFILE_ETHNICITY) LIKE ''%Black or African%'' THEN UPPER(''Black or African American'')
				WHEN TRIM(E.PROFILE_ETHNICITY) LIKE ''%White%'' THEN UPPER(''White'')
				WHEN TRIM(E.PROFILE_ETHNICITY) LIKE ''%Asian'' THEN UPPER(''Asian'')
				WHEN TRIM(E.PROFILE_ETHNICITY) LIKE ''%American Indian or Alaskan Native%'' THEN UPPER(''American Indian or Alaska Native'')
				WHEN TRIM(E.PROFILE_ETHNICITY) IN  (''07 – Two or More Races'', ''07 - Two or More Races'') THEN UPPER(''Two or More'') 
				WHEN TRIM(E.PROFILE_ETHNICITY) IN  (''04 – Native Hawaiian or Other Pacific Islander'',''04 - Native Hawaiian or Other Pacific Islander'') THEN UPPER(''Native Hawaiian or Other Pacific Islander'')
				WHEN TRIM(E.PROFILE_ETHNICITY) ILIKE ANY (''%HISPANIC%'',''%LATINO%'')  THEN NULL
				ELSE UPPER(E.PROFILE_ETHNICITY) END AS Employee_Ethnicity
,CASE WHEN E.PROFILE_ETHNICITY ILIKE ANY  (''%not%HISPANIC%OR%LATINO%'')THEN FALSE 
  WHEN E.PROFILE_ETHNICITY ILIKE ANY  (''%HISPANIC%OR%LATINO%'') THEN TRUE 
  ELSE FALSE END AS HISPANIC_OR_LATINO
,CASE WHEN PROPERTIES_TBL_USERS_LANGUAGE = ''en_us'' THEN ''English'' END AS EMPLOYEE_LANGUAGE
,CASE UPPER(TRIM(E.PROFILE_MARITAL_STATUS))
			WHEN ''D'' THEN ''Divorced''
			WHEN ''S'' THEN ''Single''
			WHEN ''W'' THEN ''Widowed''
			WHEN ''M'' THEN ''Married''
			WHEN ''DIVORCED'' THEN ''Divorced''
			WHEN ''SINGLE'' THEN ''Single''
			WHEN ''WIDOWED'' THEN ''Widowed''
			WHEN ''MARRIED'' THEN ''Married''
			ELSE NULL END AS EMPLOYEE_MARITAL_STATUS
,NULL AS EMPLOYEE_TYPE --NEED TO CONFIRM PROFILE_TYPE_OF_CAREGIVER IS PROPER COLUMN TO USE HERE?
--,''FIELD'' AS EMPLOYEE_CATEGORY --THERE ARE SOME  EMPLOYEE WHICH ARE NOT FILED, NEED TO CONFIRM
,CASE
			WHEN UPPER(EC.EMPLOYEE_CATEGORY) ILIKE UPPER(''%Admin%'') THEN ''ADMIN''
			ELSE ''FIELD''
		END AS EMPLOYEE_CATEGORY
,NULL AS EXEMPT_FLAG
,UPPER( TRIM( E.PROFILE_JOB_TITLE)) AS JOB_TITLE
,NULL AS Job_Description
,NULL AS CLASS_ID
,NULL AS WORKERS_COMP

,CASE -- Employee Payroll id 
	  WHEN E.BRANCH_ID = ''3554'' THEN E.USER_SETTINGS_STAFFING_PAYROLL_NUMBER
	  ELSE  CONCAT(''AC'', LPAD(E.GUID, 9, ''0'')) 
 END AS PAYROLL_ID


,NULL AS PERCENT_401K_DEDUCTION
,NULL AS AMOUNT_401K_DEDUCTION
,NULL AS JAZZHR_APPLICANT_ID
,NULL AS JAZZHR_USER_ID
,NULL AS JAZZHR_CONTACT_ID
,CASE WHEN UPPER(TRIM(E.PROFILE_STATE)) IN (''GEORGIA'',''PORT WENTWORTH'',''SAVANNAH'',''FORSYTH'',''CENTERVILLE'',''MACON'',''FORT VALLEY'',''SAVANNAH'',''HAVANA'',''georgia'',''VALDOSTA'',''GEORGIA'',''SOUTH CAROLINA'',''ALBANY'',''AMERICUS'')
	THEN ''GA'' 
   WHEN UPPER(TRIM(E.PROFILE_STATE)) = ''SOUTH CAROLINA''
	THEN ''SC'' 
  WHEN UPPER(TRIM(E.PROFILE_STATE)) = ''ALABAMA''
	THEN ''AL'' 
  WHEN UPPER(TRIM(E.PROFILE_STATE)) = ''TEXAS''
	THEN ''TX''
  WHEN UPPER(TRIM(E.PROFILE_STATE)) = ''MARYLAND''
	THEN ''MD''
 WHEN LEN(UPPER(TRIM(E.PROFILE_STATE)))>2 THEN NULL
	ELSE UPPER(TRIM(E.PROFILE_STATE))
	END AS Work_State
--,UPPER( TRIM(E.PROFILE_STATE)) AS Work_State 
,NULL AS SUTA_State
,NULL AS Employee_Department
,GROUPS.GROUP_ID AS EMPLOYEE_OFFICE_CODE 
,MD5(NVL(TRIM(COMPANY.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(E.BRANCH_ID,''-1'') || '')'' || ''-'' || GROUPS.GROUP_ID || ''-'' || ''ALAYACARE'') AS PRIMARY_BRANCH_KEY
,UPPER(TRIM(COALESCE(STATE.STATE_ISO_CODE, COMPANY.PROFILE_STATE))) AS PRIMARY_BRANCH_STATE
,UPPER(TRIM(GROUPS.PROFILE_COMPANY)) AS PRIMARY_BRANCH_NAME
,UPPER(NVL(TRIM(COMPANY.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(E.BRANCH_ID,''-1'') || '')'') AS PRIMARY_BRANCH_SYSTEM_CODE 
,NULL AS CASE_MANAGER_FLAG
,NULL AS SUPERVISOR_FLAG
,NULL AS COORDINATOR_FLAG
,E.PROFILE_IMPORT_ID AS LINKED_ID
,TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE
,TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE
,NULL AS MDM_DIM_EMPLOYEE_KEY,
:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,        
convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
CURRENT_USER as ETL_INSERTED_BY,
convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
CURRENT_USER as ETL_LAST_UPDATED_BY,
0 as ETL_DELETED_FLAG,
0 as ETL_INFERRED_MEMBER_FLAG
FROM DISC_DEDUPE_PROD.ALAYACARE.EMPLOYEE_MASTER_LIST E
LEFT JOIN EMPLOYYE_CATEGORY EC
	ON E.EMPLOYEE_ID= EC.EMPLOYEE_ID--changed by harshala
LEFT JOIN DISC_PROD.ALAYACARE.TBL_GUID_COST_CENTRE_TIER_4 COST_CENTRE_MAPPING
ON COST_CENTRE_MAPPING.GUID_TO = E.GUID
LEFT JOIN DISC_PROD.ALAYACARE.TBL_COST_CENTRES_TIER_4 AS COST_CENTRE
ON COST_CENTRE.ID = COST_CENTRE_MAPPING.COST_CENTRE_ID
LEFT JOIN DISC_PROD.ALAYACARE.GROUPS AS GROUPS
ON GROUPS.BRANCH_ID = COST_CENTRE.PROPERTIES_BRANCH_ID
AND GROUPS.PROFILE_COMPANY = COST_CENTRE.PROPERTIES_DESCRIPTION
LEFT JOIN DISC_PROD.ALAYACARE.BRANCH AS COMPANY
ON COMPANY.BRANCH_ID = E.BRANCH_ID 
LEFT JOIN HAH.DIM_STATE AS STATE
		ON UPPER(TRIM(STATE.STATE_NAME)) = UPPER(TRIM(COMPANY.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION))
LEFT JOIN LAST_SERVICE AS LS 
ON  E.MASTER_ID = LS.EMPLOYEE_ID 
AND E.BRANCH_ID=LS.BRANCH_ID)DATA 
INNER JOIN DISC_PROD.ALAYACARE.CONFIGURATION CONFIG 
	ON UPPER(CONFIG.SYSTEM_CODE) = UPPER(DATA.SYSTEM_CODE)
	AND CONFIG.CONFIGURATION_ACTIVE=TRUE
	AND CONFIG.SYSTEM_CODE IS NOT NULL;
SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
	RETURN return_result;
    END;
    ';