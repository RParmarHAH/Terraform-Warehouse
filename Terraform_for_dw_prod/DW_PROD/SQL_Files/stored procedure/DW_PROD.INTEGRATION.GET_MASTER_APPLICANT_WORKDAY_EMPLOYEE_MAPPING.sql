CREATE OR REPLACE PROCEDURE DW_PROD.INTEGRATION.GET_MASTER_APPLICANT_WORKDAY_EMPLOYEE_MAPPING()
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result varchar(1000);
BEGIN
--*****************************************************************************************************************************
-- NAME:  _AMS_PAYROLL_MAPPING
--
-- PURPOSE: Populates MAPPING BETWEEN AMS AND PAYROLL
--			
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 07/09/23   Jigar Prajapati        Initial version
--*****************************************************************************************************************************

INSERT OVERWRITE INTO DW_PROD.integration.APPLICANT_WORKDAY_EMPLOYEE_MAPPING
WITH MAPPING_DATA AS (  -- PULL THE LIST OF DUPLICATES
    SELECT * FROM   DW_PROD.INTEGRATION.APPLICANT_EMPLOYEE_DEDUPE_OUTPUT_NEW  WHERE CLUSTER_ID IS NOT NULL
) --select * from MAPPING_DATA;
,EMPLOYEE AS (
select M.* from MAPPING_DATA M 
  LEFT JOIN DW_PROD.HAH.DIM_EMPLOYEE E ON M.EMPLOYEE_KEY = E.EMPLOYEE_KEY
  WHERE SOURCE_SYSTEM = ''EMPLOYEE''
QUALIFY ROW_NUMBER() OVER (PARTITION BY CLUSTER_ID ORDER BY   
                                 case when  M.SYSTEM_CODE in (SELECT SYSTEM_CODE FROM DW_PROD.HAH.SOURCE_SYSTEM_MIGRATION where STATUS = ''LEGACY'') then ''1900-01-01''::DATE ELSE current_Date END  DESC
                                ,coalesce(DERIVED_LAST_SERVICE_DATE,''1900-01-01''::Date) DESC,E.EMPLOYEE_HIRE_DATE DESC,E.EMPLOYEE_KEY DESC ) =1 
) 
,workday as (
select * from MAPPING_DATA WHERE SOURCE_SYSTEM = ''APPLICANT'' AND SYSTEM_CODE  =''WORKDAY''
) --SELECT * FROM workday;
,PARADOX as (
select * from MAPPING_DATA WHERE SOURCE_SYSTEM = ''APPLICANT'' AND SYSTEM_CODE  =''PARADOX''
) --SELECT * FROM PARADOX;
,WORKDAY_PARADOX AS (
SELECT P.EMPLOYEE_KEY AS APPLICANT_KEY,P.EMPLOYEE_ID AS APPLICANT_ID, P.SYSTEM_CODE,P.SOURCE_SYSTEM_ID,
  W.EMPLOYEE_ID AS WORKDAY_ID, W.CLUSTER_ID AS CLUSTER_ID FROM workday W LEFT JOIN PARADOX P ON P.CLUSTER_ID = W.CLUSTER_ID
) --SELECT * FROM WORKDAY_PARADOX;
,APPLICANTS AS (
select * from MAPPING_DATA WHERE SOURCE_SYSTEM = ''APPLICANT''
) 
SELECT * FROM (
SELECT DISTINCT  
  COALESCE(WP.APPLICANT_KEY,A.EMPLOYEE_KEY) AS APPLICANT_KEY ,
  COALESCE(WP.APPLICANT_ID,A.EMPLOYEE_ID) AS APPLICANT_ID , 
  COALESCE(WP.SYSTEM_CODE,A.SYSTEM_CODE) AS APPLICANT_SYSTEM_CODE ,
  COALESCE(WP.SOURCE_SYSTEM_ID,A.SOURCE_SYSTEM_ID)::NUMBER AS APPLICANT_SOURCE_SYSTEM_ID
  ,WP.WORKDAY_ID AS WORKDAY_ID,
  E.EMPLOYEE_KEY AS EMPLOYEE_KEY,
  E.EMPLOYEE_ID AS EMPLOYEE_ID,
  E.SYSTEM_CODE AS EMPLOYEE_SYSTEM_CODE,
  E.SOURCE_SYSTEM_ID::NUMBER AS EMPLOYEE_SOURCE_SYSTEM_ID
  FROM  EMPLOYEE E
  LEFT JOIN WORKDAY_PARADOX WP ON E.CLUSTER_ID = WP.CLUSTER_ID
  LEFT JOIN  APPLICANTS A ON E.CLUSTER_ID = A.CLUSTER_ID
QUALIFY ROW_NUMBER() OVER (PARTITION BY E.EMPLOYEE_KEY ORDER BY A.APPLIED_DATE DESC,A.HIRED_DATE DESC,A.EMPLOYEE_KEY DESC ) =1  
);

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result; 
END;
';