CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_WORKDAY_FACT_APPLICANT_STATUS("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
	return_result VARCHAR(1000);
BEGIN
-------------------------------------------------------------------------------------------------------------------------------
/*
Object Type : 	Procedure
Object Name	: 	GET_STAGE_WORKDAY_FACT_APPLICANT_STATUS
Author		:	Harshala Kadam
Description :
	- This procedure populates the Status of the Applicants who have applied for a job available, in Workday
*/
--*****************************************************************************************************************************
	
-- CHANGE LOG :
-- Version	Date(MM/DD/YYYY)	Author				Change Description
-- --------	----------------   	------------------	---------------------------------------------------------------------------
-- 1.0		09/25/2023    		JAINAM SHAH 		Initial Development
-- 1.1		10/20/2023			HARSHALA KADAM 		Optimized and Revised code

--*****************************************************************************************************************************
INSERT OVERWRITE INTO DW_PROD.STAGE.WORKDAY_FACT_APPLICANT_STATUS
WITH HIST_APPLICANTS AS (
	SELECT
		DISTINCT EMPLOYEE_ID 
	FROM
		DISC_PROD.WORKDAY.HIST_WORKER_ADDITIONAL_INFORMATION ADINFO
	WHERE (TRIM(ADINFO.PRE_BOARDING_COMPLETION)::BOOLEAN = 0 OR TRIM(ADINFO.PRE_BOARDING_COMPLETION)::BOOLEAN IS NULL)
),
HIST_PROFILES AS
(SELECT 
	IFF(CJ_C.EMPLOYEE_ID IS NOT NULL, CJ_C.EMPLOYEE_ID,CJ.EMPLOYEE_ID) AS EMPLOYEE_ID,
	IFF(CJ_C.EMPLOYEE_ID IS NOT NULL, CJ_C.JOB_PROFILE,CJ.JOB_PROFILE) AS JOB_PROFILE,
	IFF(CJ_C.EMPLOYEE_ID IS NOT NULL, CJ_C.BUSINESS_SITE,CJ.BUSINESS_SITE) AS BUSINESS_SITE,
	IFF(CJ_C.EMPLOYEE_ID IS NOT NULL, CJ_C.POSITION_TITLE,CJ.POSITION_TITLE) AS POSITION_TITLE,
	IFF(CJ_C.EMPLOYEE_ID IS NOT NULL, CJ_C.JOB_FAMILY,CJ.JOB_FAMILY) AS JOB_FAMILY , 
	IFF(CJ_C.EMPLOYEE_ID IS NOT NULL, CJ_C.BUSINESS_SITE_NAME,CJ.BUSINESS_SITE_NAME) AS BUSINESS_SITE_NAME,
	IFF(CJ_C.EMPLOYEE_ID IS NOT NULL, CJ_C.BUSINESS_SITE_REGION,CJ.BUSINESS_SITE_REGION) AS BUSINESS_SITE_REGION
	FROM
		DISC_PROD.WORKDAY.HIST_WORKER_POSITION_DATA CJ
	LEFT JOIN
		DISC_PROD.WORKDAY.WORKER_POSITION_DATA CJ_C
	ON CJ_C.EMPLOYEE_ID = CJ.EMPLOYEE_ID
	QUALIFY ROW_NUMBER() OVER (PARTITION BY CJ.EMPLOYEE_ID ORDER BY CJ.ETL_INSERTED_DATE DESC, CJ.PROCESSED_TIMESTAMP DESC, CJ.LANDING_INSERTED_DATE DESC ) =1
),
FINAL AS (
SELECT 
    MD5(''WORKDAY'' || '' - '' || EM.EMPLOYEE_ID || '' - '' || POS.JOB_PROFILE || '' - '' || ''WORKDAY'') APPLICANT_STATUS_KEY,
    36 AS SOURCE_SYSTEM_ID,
    ''WORKDAY'' AS SYSTEM_CODE,
    MD5(''WORKDAY'' || '' - '' || EM.EMPLOYEE_ID || '' - '' || ''WORKDAY'') AS APPLICANT_KEY,
    MD5(''WORKDAY'' || 
    CASE 
	    WHEN  UPPER(TRIM(re.BUSINESS_SITE_NAME)) IS NOT NULL THEN UPPER(TRIM(re.BUSINESS_SITE))
        ELSE UPPER(TRIM(POS.BUSINESS_SITE)) END  ||POS.JOB_PROFILE ||  '' - '' ||POS.POSITION_TITLE|| '' - '' ||''WORKDAY'' ) AS JOB_KEY,
    POS.JOB_FAMILY AS JOB_FAMILY,
    EM.EMPLOYEE_ID AS CANDIDATE_ID,
    TRIM(ADINFO.PARADOX_PREHIRE_ID) AS LINKED_ID,--NEW FIELD 
    CASE 
	    WHEN ADINFO.SEND_TO_AMS=0 THEN ''FALSE'' ELSE ''TRUE'' END AS SEND_TO_AMS,--NEW field
    CASE 
	    WHEN ADINFO.PRE_BOARDING_COMPLETION=0 THEN ''FALSE'' 
        WHEN ADINFO.PRE_BOARDING_COMPLETION IS NULL THEN ''FALSE''
	    ELSE ''TRUE''
	END AS PRE_BOARDING_COMPLETION,--NEW field
    TO_TIMESTAMP_NTZ(ADINFO.APPLICANT_ENTERED_DATE,''yyyy-mm-dd-hh:mi'') as DATE_APPLIED,
    NULL AS CONVERSATION_INPROGRESS_DATETIME,
    NULL AS INTERVIEW_SCHEDULED_DATETIME,
    NULL AS INTERVIEW_RESCHEDULED_DATETIME,
    NULL AS INTERVIEW_COMPLETED_DATETIME,
    NULL AS INTERVIEW_NO_AVAILABILITY_DATETIME,
    NULL AS INTERVIEW_NO_SHOW_DATETIME,
    NULL AS NUMBER_OF_TIMES_INTERVIEW_SCHEDULED,
    NULL AS APPLICATION_AND_BACKGROUND_CHECK_CONSENT_FORM_COMPLETE_DATETIME,
    NULL AS OFFERS_SENT_DATETIME,
    NULL AS OFFERS_ACCEPTED_DATETIME,
    NULL AS ONBOARDING_SENT_DATETIME,
    NULL AS ONBOARDING_COMPLETED_DATETIME,
	CASE 
	    WHEN ADINFO.PRE_BOARDING_COMPLETION=0 THEN ''FALSE'' 
        WHEN ADINFO.PRE_BOARDING_COMPLETION IS NULL THEN ''FALSE''
	    ELSE ''TRUE''
	END AS ONBOARDING_COMPLETE_FLAG,--NEW field
    CASE 
    WHEN ADINFO.PRE_BOARDING_COMPLETION=1
    THEN ST.ORIGINAL_HIRE_DATE END AS HIRED_DATETIME,
	CASE
        WHEN ST.REHIRE = TRUE THEN ST.HIRE_DATE
        WHEN ST.ORIGINAL_HIRE_DATE<>ST.HIRE_DATE THEN ST.HIRE_DATE
        ELSE NULL
    END AS REHIRE_DATETIME,
  	NULL AS OFFER_DECLINED_DATETIME, 
    NULL AS REJECTED_DATETIME,
    NULL AS REJECTION_REASON,
    NULL AS MOST_RECENT_STAGE_DATETIME,    
    CASE WHEN HIRED_DATETIME IS NOT NULL THEN ''HIRED''
	ELSE ''NOT HIRED'' 
    END AS APPLICANT_STATUS,
    ST.EMPLOYEE_STATUS AS EMPLOYEE_STATUS,
    CASE WHEN ST.EMPLOYEE_STATUS=''Active''THEN ST.HIRE_REASON
         WHEN ST.EMPLOYEE_STATUS=''Terminated'' THEN ST.PRIMARY_TERMINATION_REASON
         ELSE ST.EMPLOYEE_STATUS END AS DISPOSITION_REASON,--NEW FIELD
    NULL AS PRIOR_STATUS,
    NULL AS PRIOR_STATUS_DATETIME,
    MD5(''WORKDAY'' || '' - '' || 
		CASE 
			WHEN re.BUSINESS_SITE_NAME IS NOT NULL THEN UPPER(TRIM(re.BUSINESS_SITE))
			ELSE UPPER(TRIM(POS.BUSINESS_SITE)) 
		END 
	|| '' - '' || ''WORKDAY'') AS BRANCH_KEY,
    CASE WHEN re.BUSINESS_SITE_NAME IS NOT NULL THEN UPPER(TRIM(re.BUSINESS_SITE_NAME))
           ELSE UPPER(TRIM(POS.BUSINESS_SITE_NAME)) END AS BRANCH_NAME,
		   
	
     
    NULL AS SOURCE, 
    
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
     
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
    CURRENT_USER AS ETL_INSERTED_BY,
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_UPDATED_DATE,
    CURRENT_USER AS ETL_LAST_UPDATED_BY,
    0 AS ETL_DELETED_FLAG,
	UPPER(TRIM(DS.STATE_ISO_CODE))AS BRANCH_STATE_CODE
FROM DISC_PROD.WORKDAY.WORKER_SUMMARY EM
     LEFT JOIN DISC_PROD.WORKDAY.WORKER_ADDITIONAL_INFORMATION ADINFO
	 ON EM.EMPLOYEE_ID = ADINFO.EMPLOYEE_ID
	 LEFT JOIN DISC_PROD.WORKDAY.WORKER_STATUS ST
	 ON EM.EMPLOYEE_ID = ST.EMPLOYEE_ID
	-- LEFT JOIN DISC_PROD.WORKDAY.WORKER_POSITION_DATA POS
	 LEFT JOIN HIST_PROFILES POS
	 ON EM.EMPLOYEE_ID = POS.EMPLOYEE_ID
	 LEFT JOIN DISC_PROD.WORKDAY.REMOTE_LOCATIONS re
	 ON POS.BUSINESS_SITE_NAME = RE.BUSINESS_SITE_NAME
	 LEFT JOIN DW_PROD.HAH.DIM_STATE DS 
	 ON UPPER(POS.BUSINESS_SITE_REGION) = UPPER(DS.STATE_NAME)
	 LEFT JOIN DISC_PROD.PARADOX.CANDIDATE_JOURNEY CJ
     ON CJ.CANDIDATE_ID=ADINFO.PARADOX_PREHIRE_ID
	 LEFT JOIN HIST_APPLICANTS APP
	 ON APP.EMPLOYEE_ID = EM.EMPLOYEE_ID
	 
	
WHERE 
	(APP.EMPLOYEE_ID IS NOT NULL -- ALL APPLICANTS Historically
	OR ADINFO.EMPLOYEE_ID IS NULL )-- All workers who don''t have a additional info (Future hires)
    AND EM.EMPLOYEE_ID NOT IN(SELECT "CFI INT005 Worker ID LRV" FROM DISC_PROD.WORKDAY.WORKER_EXCLUDE_LIST)) 
    SELECT * FROM FINAL;
	
SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;
';