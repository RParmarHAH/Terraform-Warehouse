CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_SANDATAIMPORT_DIM_INVOICE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN
    --*****************************************************************************************************************************
-- NAME:  SandataImport_DIM_INVOICE
--
-- PURPOSE: Creates one row per INVOICE according to SandataImport
--
-- NOTE: Payment Date is not available yet
--      Still missing Bill Rep, Bill Supervisor, Bill Manager, and Payor Name (unsure)
--      BillCode is attached Invoice Header unlike in DataFlex where is it in Invoice Detail
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------        
-- 02/10/20    Mohd Kamaludin        Initial Development
-- 02/11/20	   Mohd Kamaludin		 Updated per changes on DIM INVOICE sqldbm model
-- 02/13/20    Mohd Kamaludin        Reordered columns based on changes to model design,
--                                      added invoice status translation, limit to PA Agency ID
-- 03/18/20     Frank Noordover      Updated for Production rollout
-- 03/24/23		Darshan Gosai       Seprated SANDATA CARECOORIDNATE recrds on basis of system_code
-- 21/04/23		PINKAL PANCHAL		ADDED INVOICE_STATUS_MAPPING FOR RCM
-- 05/07/23		PINKAL PANCHAL		ADDED ''PARTIAL PAY'' STATUS INTO INVOICE_STATUS_MAPPING 
-- 03/10/23     Pradeep Thippani     Modified Invoice_status logic and Amount columns
-- 21/11/23		Pinkal Panchal		Changed SANDATA_INVOICEDETAILS table to SANDATA_INVOICEDETAILS_20231102_FULL and 
--									Added condition to exclude statusid 8,9 and 10. 
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO DW_PROD.STAGE.SandataImport_DIM_INVOICE
--SELECT 
--		 INVOICE_KEY
--		,CLIENT_KEY
--		,INVOICE_NUMBER
--		,PERIOD
--		,INVOICE_TYPE
--		,NUMBER_OF_CLIENTS
--		,SYSTEM_CODE
--		,SOURCE_SYSTEM_ID
--		,BRANCH_KEY
--		,PAYOR_CODE
--		,PAYOR_NAME
--		,INVOICE_OPEN_FLAG
--		,FIRST_INVOICE_DATE
--		,FINAL_PAYMENT_DATE
--		,FIRST_INVOICE_NUMBER
--		,BILL_ITERATION
--		,BILL_REPRESENTATIVE
--		,BILL_SUPERVISOR
--		,BILL_MANAGER
--		,INVOICE_STATUS
--		,WRITEOFF_FLAG
--		,WRITEOFF_REASON
--		,SUM(AMOUNT_BILLED) AS AMOUNT_BILLED
--		,SUM(AMOUNT_COLLECTED) AS AMOUNT_COLLECTED
--		,SUM(AMOUNT_OUTSTANDING) AS AMOUNT_OUTSTANDING
--		,EFFECTIVE_FROM_DATE
--		,EFFECTIVE_TO_DATE
--		,ETL_TASK_KEY
--		,ETL_INSERTED_TASK_KEY
--		,ETL_INSERTED_DATE
--		,ETL_INSERTED_BY 
--		,ETL_LAST_UPDATED_DATE
--		,ETL_LAST_UPDATED_BY
--		,ETL_DELETED_FLAG
--		,ETL_INFERRED_MEMBER_FLAG
--FROM 
--(
WITH CLIENT AS		-- Added on 20/01/23
(
	SELECT * FROM
	(
		SELECT CLIENTID, MASTER_ID,AGENCYID
		FROM DISC_DEDUPE_PROD.SANDATAIMPORT.CLIENT_MASTER_LIST
        WHERE AGENCYID=8485 
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT CLIENTID, MASTER_ID,AGENCYID
		FROM DISC_DEDUPE_PROD.SANDATAIMPORT.CLIENT_MATCH_LIST
		WHERE CLIENTID NOT IN (SELECT CLIENTID FROM DISC_DEDUPE_PROD.SANDATAIMPORT.CLIENT_MASTER_LIST ) 
        AND AGENCYID=8485
	)
),
INVOICE_STATUS_MAPPING AS 
(									
SELECT DISTINCT
	INV.INVOICENUMBER,
	4 AS SOURCE_SYSTEM_ID,
	CASE WHEN D.SERVICEID IN (''CARECO'',''VBPCG'') THEN ''CC_''||inv.AGENCYID 
	ELSE inv.AGENCYID END AS SYSTEM_CODE,
	CASE INV.STATUSID 
		WHEN ''01'' THEN ''UNKNOWN''
		WHEN ''05'' THEN ''UNBILLED''
--		WHEN ''06'' THEN --''BILLED''
--                CASE WHEN SUM(D.PAIDAMOUNT)>0 AND sum(D.NETAMOUNT)>0 THEN ''PARTIAL PAY''
--                ELSE ''BILLED'' END
--		WHEN ''07'' THEN --''PAID''		--Changes made on 27/07/23 by Pinkal
--				CASE WHEN SUM(D.PAIDAMOUNT)>0 AND sum(D.NETAMOUNT)>0 THEN ''PARTIAL PAY''
--				ELSE ''PAID'' END
--Changes made on 03/10/23 for RCM
        WHEN ''06'' THEN   
        CASE 
            WHEN NVL(NVL(inv.ADJUSTEDAMOUNT,0)-NVL(inv.BALANCE,0),0)>0 AND NVL(inv.BALANCE,0)<=0 THEN ''PAID''
	        WHEN NVL(NVL(inv.ADJUSTEDAMOUNT,0)-NVL(inv.BALANCE,0),0)>0 AND NVL(inv.BALANCE,0)>0 THEN ''PARTIAL PAY''
	        ELSE ''BILLED''
         END
		WHEN ''07'' THEN
			    CASE WHEN NVL(NVL(inv.ADJUSTEDAMOUNT,0)-NVL(inv.BALANCE,0),0)>0 AND NVL(inv.BALANCE,0)>0 THEN ''PARTIAL PAY''  
				ELSE ''PAID'' END
		WHEN ''09'' THEN ''UNKNOWN''
		WHEN ''10'' THEN ''CANCELLED''
		WHEN ''11'' THEN ''UNKNOWN''
		ELSE ''UNKNOWN''
	END AS DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY
FROM DISC_PROD.SANDATAIMPORT.SANDATA_INVOICEHEADER inv
LEFT JOIN DISC_PROD.SANDATAIMPORT.SANDATA_INVOICEDETAILS D ON D.AGENCYID = inv.AGENCYID AND D.INVOICENUMBER = inv.INVOICENUMBER 
WHERE INV.AGENCYID =''8485''
--GROUP BY SYSTEM_CODE,INV.AGENCYID,INV.STATUSID,INV.INVOICENUMBER
)
SELECT
    DISTINCT
	CASE WHEN D.SERVICEID IN (''CARECO'',''VBPCG'') 
		THEN md5(''CC_''||inv.AGENCYID ||''-''|| inv.INVOICENUMBER ||''-''|| ''SANDATAIMPORT'')
		ELSE md5(inv.AGENCYID ||''-''|| inv.INVOICENUMBER ||''-''|| ''SANDATAIMPORT'') END AS INVOICE_KEY --PK
      
    ,COALESCE( MD5(CL.AGENCYID || ''-'' || CL.MASTER_ID || ''-'' || ''SANDATAIMPORT''),MD5(COALESCE(CL.AGENCYID,INV.AGENCYID,-1) || ''-'' || NVL(CL.MASTER_ID,-1) || ''-'' || ''SANDATAIMPORT'')) AS CLIENT_KEY
    , inv.INVOICENUMBER AS INVOICE_NUMBER --BK
    , NULL AS PERIOD
    , ''Regular'' AS INVOICE_TYPE
    , 1 AS NUMBER_OF_CLIENTS
	,CASE WHEN D.SERVICEID IN (''CARECO'',''VBPCG'') 
		THEN ''CC_''||inv.AGENCYID ELSE inv.AGENCYID END AS SYSTEM_CODE --BK
    , 4 AS SOURCE_SYSTEM_ID --BK
    , MD5(INV.AGENCYID || ''-'' || COALESCE(ADM.LOCATIONID, ''-1'') || ''-'' || ''SANDATAIMPORT'') AS BRANCH_KEY
    , pay.payorid AS PAYOR_CODE
    , pay.name AS PAYOR_NAME
    , IFF(inv.BALANCE > 0, True, False) AS INVOICE_OPEN_FLAG
    , inv.INVOICEDATE AS FIRST_INVOICE_DATE
    , IFF(inv.BALANCE = 0, inv.STATUSCHANGEDATE, NULL) AS FINAL_PAYMENT_DATE
    , inv.INVOICENUMBER AS FIRST_INVOICE_NUMBER
    , 1 AS BILL_ITERATION
    , NULL AS BILL_REPRESENTATIVE
    , NULL AS BILL_SUPERVISOR
    , NULL AS BILL_MANAGER
--    , CASE inv.STATUSID WHEN ''01'' THEN ''Pending''
--        WHEN ''05'' THEN ''Billable''
--        WHEN ''06'' THEN ''Bill Sent''
--        WHEN ''07'' THEN ''Bill Paid''
--        WHEN ''09'' THEN ''Hold''
--        WHEN ''10'' THEN ''Cancelled''
--        WHEN ''11'' THEN ''Resubmit''
--        ELSE ''Undefined'' END AS INVOICE_STATUS
-- CHANGES MADE ON 21/04/23 FOR RCM INVOICE_STATUS_MAPPING BY PINKAL
	,DISM.DERIVED_INVOICE_STATUS AS INVOICE_STATUS
    , 0 AS WRITEOFF_FLAG
    , NULL AS WRITEOFF_REASON
    ,NVL(inv.ADJUSTEDAMOUNT,0) AS AMOUNT_BILLED
    ,NVL(NVL(inv.ADJUSTEDAMOUNT,0)-NVL(inv.BALANCE,0),0) AS AMOUNT_COLLECTED
    ,NVL(inv.BALANCE,0) AS AMOUNT_OUTSTANDING
--    , SUM(D.BILLEDAMOUNT) AS AMOUNT_BILLED
--    , SUM(D.PAIDAMOUNT) AS AMOUNT_COLLECTED
--  --  , SUM(D.NETAMOUNT) AS AMOUNT_OUTSTANDING
--    ,CASE WHEN INV.STATUSID IN (''05'',''06'')  AND  TRIM(UPPER(ADM.ADMISSIONTYPE))=''WAV'' THEN SUM(D.BILLEDAMOUNT)
--		  WHEN INV.STATUSID =''10'' THEN AVG(D.NETAMOUNT) 
--          ELSE  SUM(D.NETAMOUNT) END AS AMOUNT_OUTSTANDING
--changes made on 03/10/23 for RCM
    , NVL(inv.DATEFROM, ''1900-01-01'') AS EFFECTIVE_FROM_DATE
    , NVL(inv.DATETO, ''9999-12-31'') AS EFFECTIVE_TO_DATE
    ,:STR_ETL_TASK_KEY AS ETL_TASK_KEY
	,:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
    ,convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG,
    0 AS ETL_INFERRED_MEMBER_FLAG
FROM DISC_PROD.SANDATAIMPORT.SANDATA_INVOICEHEADER inv
--LEFT JOIN DISC_PROD.SANDATAIMPORT.SANDATA_INVOICEDETAILS D ON D.AGENCYID = inv.AGENCYID AND D.INVOICENUMBER = inv.INVOICENUMBER 
LEFT JOIN DISC_PROD.SANDATAIMPORT.SANDATA_INVOICEDETAILS_20231102_FULL D ON D.AGENCYID = inv.AGENCYID AND D.INVOICENUMBER = inv.INVOICENUMBER 
LEFT JOIN DISC_PROD.SANDATAIMPORT.SANDATA_PAYORS pay ON inv.payorid = pay.PAYORID AND inv.BILLCODE = pay.BILLCODE
    AND inv.AGENCYID = pay.AGENCYID
LEFT JOIN DISC_PROD.SANDATAIMPORT.SANDATA_CLIENTADMISSIONS ADM
    ON ADM.AGENCYID = INV.AGENCYID AND ADM.ADMISSIONID = INV.ADMISSIONID
LEFT JOIN CLIENT CL ON CL.AGENCYID= ADM.AGENCYID AND ADM.CLIENTID = CL.CLIENTID
LEFT JOIN INVOICE_STATUS_MAPPING ISM ON ISM.INVOICENUMBER = inv.INVOICENUMBER 
LEFT JOIN HAH.DIM_INVOICE_STATUS_MAPPING DISM ON DISM.INVOICE_STATUS_KEY = ISM.INVOICE_STATUS_KEY
WHERE inv.AGENCYID = ''8485'' --limit to PA only
AND D.statusid not in (''09'', ''10'', ''8'')
AND (inv.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz
OR pay.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz)
--GROUP BY 
--	inv.AGENCYID
--    ,CL.AGENCYID
--	,inv.INVOICENUMBER
--    ,ADM.CLIENTID
--    ,ADM.LOCATIONID
--    ,pay.payorid
--	,D.SERVICEID
--    ,pay.name
--    ,inv.BALANCE
--    ,inv.INVOICEDATE
--    ,FINAL_PAYMENT_DATE
--    ,INVOICE_STATUS
--    ,inv.DATEFROM
--    ,inv.DATETO
--,INV.STATUSID
--,D.UNITTYPEID
--,CL.MASTER_ID
--,TRIM(UPPER(ADM.ADMISSIONTYPE))
--) t
--GROUP BY 
--		 INVOICE_KEY
--		,CLIENT_KEY
--		,INVOICE_NUMBER
--		,PERIOD
--		,INVOICE_TYPE
--		,NUMBER_OF_CLIENTS
--		,SYSTEM_CODE
--		,SOURCE_SYSTEM_ID
--		,BRANCH_KEY
--		,PAYOR_CODE
--		,PAYOR_NAME
--		,INVOICE_OPEN_FLAG
--		,FIRST_INVOICE_DATE
--		,FINAL_PAYMENT_DATE
--		,FIRST_INVOICE_NUMBER
--		,BILL_ITERATION
--		,BILL_REPRESENTATIVE
--		,BILL_SUPERVISOR
--		,BILL_MANAGER
--		,INVOICE_STATUS
--		,WRITEOFF_FLAG
--		,WRITEOFF_REASON
--		,EFFECTIVE_FROM_DATE
--		,EFFECTIVE_TO_DATE
--		,ETL_TASK_KEY
--		,ETL_INSERTED_TASK_KEY
--		,ETL_INSERTED_DATE
--		,ETL_INSERTED_BY 
--		,ETL_LAST_UPDATED_DATE
--		,ETL_LAST_UPDATED_BY
--		,ETL_DELETED_FLAG
--		,ETL_INFERRED_MEMBER_FLAG
; --187,170 PA
;
    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

    return return_result;
END;
    ';