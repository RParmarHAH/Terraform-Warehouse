CREATE OR REPLACE PROCEDURE DW_PROD.INTEGRATION.GET_MASTER_FACT_APPLICANT_EMPLOYEE_MAPPING()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var sql = `
  INSERT OVERWRITE INTO DW_PROD.INTEGRATION.FACT_APPLICANT_EMPLOYEE_MAPPING
  WITH MAPPING_DATA AS (
      SELECT * FROM (
        SELECT *,COUNT(DISTINCT SOURCE_SYSTEM) OVER(PARTITION BY CLUSTER_ID) SYSTEM_COUNT
        FROM DW_PROD.INTEGRATION.APPLICANT_EMPLOYEE_DEDUPE_OUTPUT WHERE CLUSTER_ID IS NOT NULL)
        WHERE SYSTEM_COUNT > 1
      )
  --       SELECT * FROM MAPPING_DATA;
        , APPLICANT_RECORDS AS (
          SELECT * FROM (
            SELECT 
              ROW_NUMBER() OVER(PARTITION BY CLUSTER_ID ORDER BY coalesce(HIRED_DATE,APPLIED_DATE,EMPLOYEE_HIRE_DATE) DESC NULLS LAST, EMPLOYEE_ID desc) RN,EMPLOYEE_KEY,EMPLOYEE_ID,SYSTEM_CODE,SOURCE_SYSTEM_ID,SSN,DOB,APPLIED_DATE,HIRED_DATE,HIRED_DATE_MONTH,NAME,FIRST_NAME,LAST_NAME,PHONE,EMAIL,ADDRESS,CITY,STATE,POSTAL,BRANCH_KEY,BRANCH_NAME,ETL_INSERTED_DATE,EMPLOYEE_LAST_CHECK_DATE,EMPLOYEE_FIRST_CHECK_DATE,EMPLOYEE_LAST_WORKED_DATE,EMPLOYEE_HIRE_DATE,SOURCE_SYSTEM,CLUSTER_ID
            FROM MAPPING_DATA
            WHERE SOURCE_SYSTEM = ''APPLICANT'' --AND CLUSTER_ID IS NOT NULL --AND CLUSTER_ID = 1630.0
          ) WHERE RN = 1
        ) 
  --       SELECT COUNT(DISTINCT CLUSTER_ID) FROM APPLICANT_RECORDS
  --       UNION ALL 
  --       SELECT COUNT(*) FROM APPLICANT_RECORDS;
        , EMPLOYEE_RECORDS AS (
          SELECT * FROM (
            SELECT 
              ROW_NUMBER() OVER(PARTITION BY CLUSTER_ID ORDER BY EMPLOYEE_LAST_CHECK_DATE DESC NULLS LAST, EMPLOYEE_FIRST_CHECK_DATE DESC NULLS LAST, EMPLOYEE_LAST_WORKED_DATE DESC NULLS LAST, EMPLOYEE_HIRE_DATE DESC NULLS LAST) RN,EMPLOYEE_KEY,EMPLOYEE_ID,SYSTEM_CODE,SOURCE_SYSTEM_ID,SSN,DOB,APPLIED_DATE,HIRED_DATE,HIRED_DATE_MONTH,NAME,FIRST_NAME,LAST_NAME,PHONE,EMAIL,ADDRESS,CITY,STATE,POSTAL,BRANCH_KEY,BRANCH_NAME,ETL_INSERTED_DATE,EMPLOYEE_LAST_CHECK_DATE,EMPLOYEE_FIRST_CHECK_DATE,EMPLOYEE_LAST_WORKED_DATE,EMPLOYEE_HIRE_DATE,SOURCE_SYSTEM,CLUSTER_ID
            FROM MAPPING_DATA
            WHERE SOURCE_SYSTEM = ''EMPLOYEE'' --AND CLUSTER_ID IS NOT NULL
          ) WHERE RN = 1
        )
  --       SELECT COUNT(DISTINCT CLUSTER_ID) FROM EMPLOYEE_RECORDS
  --       UNION ALL 
  --       SELECT COUNT(*) FROM EMPLOYEE_RECORDS;
  --       SELECT * FROM APPLICANT_RECORDS WHERE CLUSTER_ID NOT IN (SELECT CLUSTER_ID FROM EMPLOYEE_RECORDS);
        SELECT
          A.EMPLOYEE_KEY AS APPLICANT_KEY,  
          E.EMPLOYEE_KEY AS EMPLOYEE_KEY,
          A.EMPLOYEE_ID AS APPLICANT_ID,
          E.EMPLOYEE_ID AS EMPLOYEE_ID,
          A.SOURCE_SYSTEM_ID::NUMBER AS APPLICANT_SOURCE_SYSTEM_ID,
          E.SOURCE_SYSTEM_ID::NUMBER AS EMPLOYEE_SOURCE_SYSTEM_ID,
          A.SYSTEM_CODE AS APPLICANT_SYSTEM_CODE,
          E.SYSTEM_CODE AS EMPLOYEE_SYSTEM_CODE,
          A.APPLIED_DATE AS APPLICANT_APPLIED_DATE,
          E.HIRED_DATE AS EMPLOYEE_HIRED_DATE,  
          A.ETL_INSERTED_DATE AS APPLICANT_ETL_INSERTED_DATE,
          E.ETL_INSERTED_DATE AS EMPLOYEE_ETL_INSERTED_DATE
        FROM APPLICANT_RECORDS A INNER JOIN EMPLOYEE_RECORDS E ON A.CLUSTER_ID = E.CLUSTER_ID
        qualify ROW_NUMBER() OVER(PARTITION BY A.EMPLOYEE_KEY ORDER BY A.APPLIED_DATE desc) = 1;
`;
  try {
        snowflake.execute (
            {sqlText: sql}
            );
            return "Succeeded.";   // Return a success/error indicator.
        }
    catch (err)  {
        return "Failed: " + err;   // Return a success/error indicator.
        }  
  ';