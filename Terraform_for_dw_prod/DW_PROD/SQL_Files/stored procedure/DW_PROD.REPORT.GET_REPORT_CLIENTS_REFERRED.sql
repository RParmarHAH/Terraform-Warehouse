CREATE OR REPLACE PROCEDURE DW_PROD.REPORT.GET_REPORT_CLIENTS_REFERRED("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result varchar(1000);
BEGIN
INSERT OVERWRITE INTO REPORT.CLIENTS_REFERRED 
WITH CLIENT_INFO AS 
(
	SELECT DISTINCT I.CONTRACT_KEY AS FIRST_CONTRACT_KEY
					, C.REFERRER_KEY
					, C.REFERRALS 
					, I.CONTRACT_CODE AS FIRST_CONTRACT_CODE
					, FIRST_VALUE(I.CONTRACT_CODE) OVER (PARTITION BY C.CLIENT_KEY ORDER BY I.REPORT_DATE DESC) LATEST_CONTRACT_CODE
					, I.HOURS_AUTHORIZED_NON_ADJUSTED AS FIRST_NON_ADJUSTED_AUTH_HOURS
					, I.HOURS_AUTHORIZED AS FIRST_ADJUSTED_AUTH_HOURS
					, COALESCE(FEV.NEXT_SCHEDULED_VISIT_DATE,FV.NEXT_SCHEDULED_VISIT_DATE) NEXT_SCHEDULED_VISIT_DATE
					, C.CLIENT_NUMBER
					, FIRST_VALUE(C.ORIGINAL_CLIENT_NUMBER) OVER (PARTITION BY C.CLIENT_KEY ORDER BY CASE WHEN C.CLIENT_KEY = C.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END) AS ORIGINAL_CLIENT_NUMBER
					--CASE WHEN C2.SOURCE_SYSTEM_ID = 3 THEN C.CLIENT_NUMBER END AS DF_CLIENT_NUMBER,
					, CASE WHEN C2.SOURCE_SYSTEM_ID = 3 THEN C.CLIENT_NUMBER
						   WHEN C2.SOURCE_SYSTEM_ID = 8 AND C.ORIGINAL_SOURCE_SYSTEM_ID = 8 
								THEN (FIRST_VALUE(C.ORIGINAL_CLIENT_NUMBER) OVER (PARTITION BY C.CLIENT_KEY ORDER BY CASE WHEN C.CLIENT_KEY = C.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END))
					  END AS DF_CLIENT_NUMBER
					, C.CLIENT_KEY
					--C.ORIGINAL_CLIENT_KEY ,
					, FIRST_VALUE(C.ORIGINAL_CLIENT_KEY) OVER (PARTITION BY C.CLIENT_KEY ORDER BY CASE WHEN C.CLIENT_KEY = C.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END) AS ORIGINAL_CLIENT_KEY
					, C.SYSTEM_CODE
					--CASE WHEN C2.SOURCE_SYSTEM_ID = 3 THEN C2.SYSTEM_CODE END AS DF_SYSTEM_CODE,
					, CASE WHEN C2.SOURCE_SYSTEM_ID = 3 THEN C2.SYSTEM_CODE 
						   WHEN C2.SOURCE_SYSTEM_ID = 8 AND C.ORIGINAL_SOURCE_SYSTEM_ID = 8 
								THEN C.SYSTEM_CODE 
					  END AS DF_SYSTEM_CODE
					--FIRST_VALUE(C.SOURCE_SYSTEM_ID) OVER (PARTITION BY C.CLIENT_KEY ORDER BY I.REPORT_DATE DESC) AS SOURCE_SYSTEM_ID ,
					, C.SOURCE_SYSTEM_ID
					--FIRST_VALUE(C.ORIGINAL_SOURCE_SYSTEM_ID) OVER (PARTITION BY C.CLIENT_KEY ORDER BY I.REPORT_DATE ASC) AS ORIGINAL_SOURCE_SYSTEM_ID ,
					, FIRST_VALUE(COALESCE(c.Original_Source_System_Id, -1)) OVER (PARTITION BY c.Client_Key ORDER BY IFF(c.Original_Source_System_ID <> c.Source_System_ID, 0, 1)) AS Original_Source_System_ID
					--C.ORIGINAL_SOURCE_SYSTEM_ID ,
					, C.CLIENT_NAME
					, C.CLIENT_HOME_PHONE
					, C.CLIENT_WORK_PHONE
					, COALESCE(FIRST_VALUE(V.SUPERVISOR_KEY) OVER(PARTITION BY C.CLIENT_KEY ORDER BY MIN(V.REPORT_DATE))
					, FIRST_VALUE(COALESCE(C.PRIMARY_SUPERVISOR_KEY,C.SECONDARY_SUPERVISOR_KEY)) OVER (PARTITION BY C.CLIENT_KEY ORDER BY MIN(V.REPORT_DATE))) AS SUPERVISOR_KEY
					, FIRST_VALUE(I.BRANCH_KEY) OVER(PARTITION BY C.CLIENT_KEY ORDER BY MIN(I.REPORT_DATE)) AS BRANCH_KEY
					, FIRST_VALUE(I.ORIGINAL_BRANCH_KEY) OVER (PARTITION BY C.CLIENT_KEY ORDER BY CASE WHEN C.CLIENT_KEY = C.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END, MIN(I.REPORT_DATE)) AS ORIGINAL_BRANCH_KEY
					, FIRST_VALUE(FV2.FIRST_BILLABLE_VISIT) IGNORE NULLS OVER(PARTITION BY C.CLIENT_KEY ORDER BY FV2.FIRST_BILLABLE_VISIT DESC) AS FIRST_VISIT_DATE
					--CASE WHEN MIN(MIN(C.DERIVED_FIRST_SERVICE_DATE)) OVER(PARTITION BY C.CLIENT_KEY) IS NOT NULL THEN MIN(MIN(C.DERIVED_FIRST_SERVICE_DATE)) OVER(PARTITION BY C.CLIENT_KEY)
						   --ELSE MIN(MIN(V.REPORT_DATE)) OVER(PARTITION BY C.CLIENT_KEY) END AS FIRST_VISIT_DATE
					, FIRST_VALUE(FV2.LATEST_BILLABLE_VISIT) IGNORE NULLS OVER(PARTITION BY C.CLIENT_KEY ORDER BY FV2.LATEST_BILLABLE_VISIT DESC) AS LATEST_VISIT_DATE
					--CASE WHEN max(MAX(C.DERIVED_LAST_SERVICE_DATE)) OVER(PARTITION BY C.CLIENT_KEY) IS NOT NULL THEN MAX(MAX(C.DERIVED_LAST_SERVICE_DATE)) OVER(PARTITION BY C.CLIENT_KEY) 
						   --ELSE MAX(MAX(V.REPORT_DATE)) OVER(PARTITION BY C.CLIENT_KEY) END AS LATEST_VISIT_DATE
					, MIN(MIN(C.DERIVED_REFERRAL_DATE)) OVER (PARTITION BY C.CLIENT_KEY) AS REFERRED_DATE
					, CASE WHEN (FIRST_VISIT_DATE IS NOT NULL AND MAX(C.DAYS_TO_SERVICE) IS NOT NULL) THEN DATEDIFF(''DAY'',REFERRED_DATE,FIRST_VISIT_DATE) 
  						   ELSE NULL END AS DAYS_TO_SERVICE
					, C.END_DATE
					, CASE WHEN C.END_DATE IS NOT NULL 
							THEN CASE WHEN FIRST_VISIT_DATE IS NULL AND LATEST_VISIT_DATE IS NULL AND C.END_DATE>=CURRENT_DATE THEN 1 ELSE 0 END
						   ELSE CASE WHEN FIRST_VISIT_DATE IS NULL AND LATEST_VISIT_DATE IS NULL THEN 1 ELSE 0 END
					  END AS OPEN_REFERRAL
					--CASE WHEN FIRST_VISIT_DATE IS NULL AND LATEST_VISIT_DATE IS NULL THEN 1 ELSE 0 END AS OPEN_REFERRAL,
					, CASE WHEN OPEN_REFERRAL=1 THEN DATEDIFF(''DAY'',REFERRED_DATE,CURRENT_DATE) ELSE NULL END AS REFERRAL_AGE
					, MIN(MIN(I.REAUTHORIZED_DATE)) OVER (PARTITION BY C.CLIENT_KEY) FIRST_CONTRACT_BEGIN_DATE
FROM INTEGRATION.DIM_CLIENT_MERGED C
LEFT JOIN HAH.DIM_CLIENT C2 
	ON C2.CLIENT_KEY = C.ORIGINAL_CLIENT_KEY
LEFT JOIN INTEGRATION.FACT_VISIT_MERGED V 
	ON C.ORIGINAL_CLIENT_KEY=V.ORIGINAL_CLIENT_KEY AND NVL(V.CONFIRMED_FLAG, ''YES'')=''YES''
		--AND NVL(V.STATUS_CODE, ''02'') IN (''02'', ''03'', ''04'', ''05'')
LEFT JOIN INTEGRATION.FACT_INTAKE_MERGED I 
	ON C.ORIGINAL_CLIENT_KEY=I.ORIGINAL_CLIENT_KEY
LEFT JOIN (SELECT CLIENT_KEY,MIN(REPORT_DATE) AS NEXT_SCHEDULED_VISIT_DATE FROM INTEGRATION.FACT_VISIT_MERGED FVM LEFT JOIN HAH.DIM_CONTRACT DC ON DC.CONTRACT_KEY = FVM.CONTRACT_KEY WHERE FVM.REPORT_DATE>CURRENT_DATE AND DC.BILLABLE_FLAG = ''TRUE'' GROUP BY CLIENT_KEY) FV 
	ON FV.CLIENT_KEY=C.CLIENT_KEY
LEFT JOIN (SELECT CLIENT_KEY,MIN(REPORT_DATE) AS NEXT_SCHEDULED_VISIT_DATE FROM HAH.FACT_EVV_VISIT FE LEFT JOIN HAH.DIM_CONTRACT DC ON DC.CONTRACT_KEY = FE.CONTRACT_KEY WHERE FE.REPORT_DATE>CURRENT_DATE AND DC.BILLABLE_FLAG = ''TRUE'' GROUP BY CLIENT_KEY) FEV 
	ON FEV.CLIENT_KEY=C.CLIENT_KEY
LEFT JOIN (SELECT CLIENT_KEY, MIN(REPORT_DATE) AS FIRST_BILLABLE_VISIT, MAX(REPORT_DATE) AS LATEST_BILLABLE_VISIT FROM INTEGRATION.FACT_VISIT_MERGED FVME LEFT JOIN HAH.DIM_CONTRACT DCO ON FVME.CONTRACT_KEY = DCO.CONTRACT_KEY WHERE DCO.BILLABLE_FLAG = ''TRUE'' GROUP BY CLIENT_KEY ) FV2
	ON FV2.CLIENT_KEY = C.CLIENT_KEY																																																																							 
GROUP BY I.CONTRACT_KEY
			,C.REFERRER_KEY
			,C.REFERRALS 
  			, I.CONTRACT_CODE
  			, I.REPORT_DATE
  			, C.END_DATE
  			, I.HOURS_AUTHORIZED_NON_ADJUSTED
  			, I.HOURS_AUTHORIZED
  			, FV.NEXT_SCHEDULED_VISIT_DATE
  			, FEV.NEXT_SCHEDULED_VISIT_DATE
			, FV2.FIRST_BILLABLE_VISIT
  			, FV2.LATEST_BILLABLE_VISIT					 
  			, I.BRANCH_KEY
  			, I.ORIGINAL_BRANCH_KEY
  			, V.SUPERVISOR_KEY
  			, C.CLIENT_KEY
  			, C.ORIGINAL_CLIENT_KEY
  			, C.CLIENT_NAME
  			, C.CLIENT_HOME_PHONE
  			, C.CLIENT_WORK_PHONE
  			, C.CLIENT_NUMBER
  			, C.ORIGINAL_CLIENT_NUMBER
  			, CASE WHEN C2.SOURCE_SYSTEM_ID = 3 THEN C.CLIENT_NUMBER END
  			, C.SYSTEM_CODE
  			, CASE WHEN C2.SOURCE_SYSTEM_ID = 3 THEN C2.SYSTEM_CODE END
  			, C.SOURCE_SYSTEM_ID
  			, C.ORIGINAL_SOURCE_SYSTEM_ID 
  			, COALESCE(C.PRIMARY_SUPERVISOR_KEY,C.SECONDARY_SUPERVISOR_KEY)
  			, C2.SOURCE_SYSTEM_ID
  			, C2.SYSTEM_CODE
QUALIFY DENSE_RANK() OVER (PARTITION BY C.CLIENT_KEY ORDER BY I.REPORT_DATE) = 1
)
, DF_CLIENT_CONTRACTS AS 
(
	SELECT CI.*,CC.SERVICEAREA
	FROM CLIENT_INFO CI
	LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.DFCLIENTCONTRACTS CC 
		ON CI.DF_SYSTEM_CODE = CC.DBNAME 
			AND TO_VARCHAR(CI.DF_CLIENT_NUMBER) = TO_VARCHAR(CC.CLIENTNUMBER) 
			AND CI.LATEST_CONTRACT_CODE = CC.CONTRACTCODE
), OLD_VIEW AS 
(
SELECT DISTINCT FIRST_CONTRACT_KEY
				, FIRST_CONTRACT_CODE
				, FIRST_ADJUSTED_AUTH_HOURS
				, FIRST_NON_ADJUSTED_AUTH_HOURS
				, NEXT_SCHEDULED_VISIT_DATE
				, C.CLIENT_NUMBER
				, C.ORIGINAL_CLIENT_NUMBER
				, C.CLIENT_KEY
				, C.ORIGINAL_CLIENT_KEY
				, C.SYSTEM_CODE
				, C.SOURCE_SYSTEM_ID
				, C.ORIGINAL_SOURCE_SYSTEM_ID
				, C.CLIENT_NAME
				, C.CLIENT_HOME_PHONE
				, C.CLIENT_WORK_PHONE
				, C.SUPERVISOR_KEY
				, C.BRANCH_KEY
				, C.ORIGINAL_BRANCH_KEY
				, C.FIRST_VISIT_DATE
				, C.LATEST_VISIT_DATE
				, C.REFERRED_DATE
				, C.DAYS_TO_SERVICE
				, C.OPEN_REFERRAL
				, C.REFERRAL_AGE
				, C.FIRST_CONTRACT_BEGIN_DATE
				, C.END_DATE
				, DFC.OFFICENUMBER AS OFFICE_NUMBER
				, COALESCE(DFC.SERVICEAREA,C.SERVICEAREA) AS SERVICE_AREA
				, COALESCE(S1.CCUAGREENO,S2.CCUAGREENO) AS CCU_AGREE_NUMBER
				, COALESCE(S1.CONTRACTNUMBER,S2.CONTRACTNUMBER) AS CONTRACT_NUMBER
				, COALESCE(S1.GAURNAME,S2.GAURNAME) AS GAUR_NAME
				, COALESCE(S1.NAME,S2.NAME) AS NAME
				, C.REFERRER_KEY
				, C.REFERRALS 
FROM DISC_PROD.DATAFLEXSYNCDATA.DFCLIENTS DFC
RIGHT JOIN DF_CLIENT_CONTRACTS C 
	ON DFC.DBNAME=C.SYSTEM_CODE AND TO_VARCHAR(DFC.NUMBER) = TO_VARCHAR(C.CLIENT_NUMBER)
LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.DFSERVICES S1 
	ON S1.DBNAME = C.SYSTEM_CODE AND S1.AREA = C.SERVICEAREA
LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.DFSERVICES S2 
	ON S2.DBNAME = DFC.DBNAME AND S2.AREA = DFC.SERVICEAREA
), NEW_VIEW AS 
(
	SELECT DISTINCT OLD_VIEW.*
					, -1 ETL_TASK_KEY
					, -1 ETL_INSERTED_TASK_KEY
					, CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
					, CURRENT_USER AS ETL_INSERTED_BY
					, CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
					, CURRENT_USER AS ETL_LAST_UPDATED_BY
					, 0 AS ETL_DELETED_FLAG
	FROM OLD_VIEW
)
SELECT DISTINCT FIRST_CONTRACT_KEY
				, FIRST_CONTRACT_CODE
				, FIRST_ADJUSTED_AUTH_HOURS
				, FIRST_NON_ADJUSTED_AUTH_HOURS
				, NEXT_SCHEDULED_VISIT_DATE
				, CLIENT_NUMBER
				, ORIGINAL_CLIENT_NUMBER
				, CLIENT_KEY
				, ORIGINAL_CLIENT_KEY
				, SYSTEM_CODE
				, SOURCE_SYSTEM_ID
				, ORIGINAL_SOURCE_SYSTEM_ID
				, CLIENT_NAME
				, CLIENT_HOME_PHONE
				, CLIENT_WORK_PHONE
				, SUPERVISOR_KEY
				, BRANCH_KEY
				, ORIGINAL_BRANCH_KEY
				, FIRST_VISIT_DATE
				, LATEST_VISIT_DATE
				, REFERRED_DATE
				, DAYS_TO_SERVICE
				, OPEN_REFERRAL
				, REFERRAL_AGE
				, FIRST_CONTRACT_BEGIN_DATE
				, END_DATE
				, OFFICE_NUMBER
				, SERVICE_AREA
				, CCU_AGREE_NUMBER
				, CONTRACT_NUMBER
				, GAUR_NAME
				, NAME
				, REFERRER_KEY
				, REFERRALS 
				, ETL_TASK_KEY
				, ETL_INSERTED_TASK_KEY
				, ETL_INSERTED_DATE
				, ETL_INSERTED_BY
				, ETL_LAST_UPDATED_DATE
				, ETL_LAST_UPDATED_BY
				, ETL_DELETED_FLAG
FROM NEW_VIEW
--WHERE REFERRED_DATE IS null
--AND CLIENT_KEY IS NULL 
--AND FIRST_CONTRACT_KEY IS NULL ;
 ;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;
';