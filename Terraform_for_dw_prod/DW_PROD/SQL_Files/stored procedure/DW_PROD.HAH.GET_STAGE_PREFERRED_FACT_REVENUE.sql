CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_PREFERRED_FACT_REVENUE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
                BEGIN
--*****************************************************************************************************************************
-- NAME:  PREFERRED_FACT_REVENUE
--
-- PURPOSE: Creates one row per revenue according to PREFERRED
--
-- DEVELOPMENT LOG:
-- DATE        	AUTHOR                	NOTES:
-- --------    	-------------------   	-----------------------------------------------------------------------------------------------
-- 05/09/2022	Moin Saiyed          	Initial development
-- 07/29/2022	Mohit Vaghadiya		 	Using DIM_EMPLOYEE and DIM_CLIENT to use the CLIENT and EMPLOYEE KEY 
--									 	as client may have moved to other agency, due to which it was generating
--									 	different client key which was not there in DIM_CLIENT
-- 02/01/2023	Mohit Vaghadiya			Added Contract Rates CTE to avoid multiple rates w/ same as of date - going with latest modified date
-- 24/11/2023	Preeti Sharma		    Added Bill_Unit_Type Column for RCM(Requested By Natalie)
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO STAGE.PREFERRED_FACT_REVENUE
WITH EMPLOYEE AS
(
	SELECT * FROM
	(
		SELECT CAREGIVERID,MASTER_ID,CAREGIVERID AS ORIGINAL_RECORD_ID
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.EMPLOYEE_MASTER_LIST
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT CAREGIVERID,MASTER_ID,CAREGIVERID AS ORIGINAL_RECORD_ID
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.EMPLOYEE_MATCH_LIST
		WHERE CAREGIVERID NOT IN (SELECT CAREGIVERID FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.EMPLOYEE_MASTER_LIST)
	)
)
, CLIENT AS 
(
	SELECT * FROM
	(
		SELECT MD5((AGENCYID||''-''||MASTER_ID||''-''||''PREFERRED'' )) as CLIENT_KEY,
		PATIENTID, MASTER_ID, AGENCYID, LASTNAME, FIRSTNAME, OFFICEID
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT MD5((M.AGENCYID||''-''||M.MASTER_ID||''-''||''PREFERRED'' )) as CLIENT_KEY,
        MA.PATIENTID AS CLIENT_NUMBER, MA.MASTER_ID, MA.AGENCYID, MA.LASTNAME, MA.FIRSTNAME, MA.OFFICEID
		FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.CLIENT_MATCH_LIST MA
		LEFT JOIN DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.CLIENT_MASTER_LIST M ON M.MASTER_ID =MA.MASTER_ID 
		WHERE MA.PATIENTID NOT IN (SELECT PATIENTID FROM DISC_DEDUPE_PROD.HHAEXCHANGEPREFERRED.CLIENT_MASTER_LIST)
	)
), VISIT_DATA AS
(
	SELECT DISTINCT V.VISITID, V.AGENCYID, V.CONTRACTID 
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.VISITS V 
	INNER JOIN DISC_PROD.HHAEXCHANGEPREFERRED.AGENCY_MAPPING AGENCY_CONFIG
		ON AGENCY_CONFIG.AGENCYID = V.AGENCYID
			AND AGENCY_CONFIG.ISACTIVE = TRUE
), COORDINATOR AS
(
	SELECT P.PATIENTID, PC1.COORDINATORID AS COORDINATORID1, PC1.COORDINATORNAME AS COORDINATORNAME1
	FROM CLIENT P
	JOIN DISC_PROD.HHAEXCHANGEPREFERRED.PROVIDERPATIENTCOORDINATORS PC1 
		ON P.PATIENTID = PC1.PATIENTID
			AND P.AGENCYID = PC1.AGENCYID
			AND PC1.COORDINATORSRNO = 1
	INNER JOIN DISC_PROD.HHAEXCHANGEPREFERRED.AGENCY_MAPPING AGENCY_CONFIG
		ON AGENCY_CONFIG.AGENCYID = P.AGENCYID
			AND AGENCY_CONFIG.ISACTIVE = TRUE
), PAYMENT_DATA1 AS 
(
	SELECT PAYMENTS.INVOICEDETAILID 
			, MIN(PAYMENTS.INVOICEDATE) AS INVOICEDATE
			, MAX(PAYMENTS.PAIDDATE) AS PAIDDATE
			, SUM(BILLEDAMOUNT) AS BILLEDAMOUNT
			, SUM(NVL(PAYMENTS.PAIDAMOUNT, 0) + NVL(PAYMENTS.ADJUSTMENT, 0) + NVL(PAYMENTS.TTADJUSTMENT, 0) + NVL(PAYMENTS.WRITEOFF, 0) + NVL(PAYMENTS.OTHERADJUSTMENT, 0))  AS PAIDAMOUNT
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.PAYMENTS PAYMENTS
	INNER JOIN DISC_PROD.HHAEXCHANGEPREFERRED.AGENCY_MAPPING AGENCY_CONFIG
		ON AGENCY_CONFIG.AGENCYID = PAYMENTS.AGENCYID
			AND AGENCY_CONFIG.ISACTIVE = TRUE
	GROUP BY PAYMENTS.INVOICEDETAILID
), PAYMENT_DATA2 AS
(
	SELECT VISITID
			, PAYERID,SUM(NVL(PAIDAMOUNT, 0) + NVL(ADJUSTMENT, 0) + NVL(TTADJUSTMENT, 0) + NVL(WRITEOFF, 0) + NVL(OTHERADJUSTMENT, 0)) AS PAIDAMOUNT 
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.BILLING_PAIDVISITS_REPL 
	GROUP BY VISITID, PAYERID
), PREFERRED_REVENUE_SEG AS
(
   	SELECT VISITID, REVENUE_CATEGORY, REVENUE_SUBCATEGORY_NAME, REVENUE_SUBCATEGORY_CODE 
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.REVENUE_MAPPING
	GROUP BY VISITID, REVENUE_CATEGORY, REVENUE_SUBCATEGORY_NAME, REVENUE_SUBCATEGORY_CODE
), AGENCY_OFFICES_INCLUDE AS
(
	SELECT CONFIG.AGENCYID, INCLUDE_ALL_OFFICES, GET(CONTRACT.VALUE, ''OFFICEID'')::STRING AS OFFICEID
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.AGENCY_MAPPING CONFIG
		, TABLE(FLATTEN(PARSE_JSON(CONFIG.OFFICES_TO_INCLUDE), OUTER => TRUE)) CONTRACT
	WHERE CONFIG.ISACTIVE = TRUE
), AGENCY_OFFICES_EXCLUDE AS
(
	SELECT CONFIG.AGENCYID, INCLUDE_ALL_OFFICES, GET(CONTRACT.VALUE, ''OFFICEID'')::STRING AS OFFICEID
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.AGENCY_MAPPING CONFIG
		, TABLE(FLATTEN(PARSE_JSON(CONFIG.OFFICES_TO_EXCLUDE), OUTER => TRUE)) CONTRACT
	WHERE CONFIG.ISACTIVE = TRUE
			AND CONFIG.OFFICES_TO_EXCLUDE IS NOT NULL
), CONTRACT_RATES AS -- Added this CTE to avoid multiple rates w/ same as of date - going with latest modified date
(
	SELECT CR.*
	FROM DISC_PROD.HHAEXCHANGEPREFERRED.CONTRACTRATES CR
	WHERE CR.TODATE::DATE > GETDATE()
			AND CR.FROMDATE::DATE <= GETDATE()
	QUALIFY ROW_NUMBER() OVER (PARTITION BY CR.AGENCYID, CR.CONTRACTID, CR.SERVICECODEID ORDER BY CR.MODIFIEDDATE DESC) = 1 
)
SELECT	DISTINCT MD5(''PREFERRED'' ||''-''|| INVOICE.InvoiceDetailID ||''-''|| INVOICE.VISITID ||''-''|| ''PREFERRED'') AS REVENUE_KEY
				, DATE_TRUNC (DAY,VISITS.VISITDATE) AS REPORT_DATE
				, MD5(''PREFERRED'' || ''-'' || ''PREFERRED CORPORATE OFFICE'' || ''-'' || ''PREFERRED'') AS BRANCH_KEY
				, DE.EMPLOYEE_KEY AS EMPLOYEE_KEY
				, DC.CLIENT_KEY AS CLIENT_KEY
				, MD5(VISITS.AGENCYID || ''-'' || NVL(SC.CONTRACTID,-1) || ''-'' || NVL(CR.CONTRACTRATEID, -1) || 
					''-'' || NVL(SC.SERVICECODEID, -1) || 
					''-'' || NVL(PS.REVENUE_SUBCATEGORY_CODE, ''UNKNOWN'') || ''PREFERRED'') AS CONTRACT_KEY
				, MD5(''PREFERRED'' || ''-'' || INV_HEAD.AGENCYID || ''-'' || INV_HEAD.INVOICEHEADERID || ''-'' || ''PREFERRED'') AS INVOICE_KEY
				, 17 AS SOURCE_SYSTEM_ID
				, MD5(''PREFERRED'' || ''-'' || VISITS.AGENCYID || ''-'' || NVL(COORDINATOR.COORDINATORID1,-1) || ''-'' || ''PREFERRED'') AS SUPERVISOR_KEY
				, DATE_TRUNC(DAY,(COALESCE(PAYMENTS.INVOICEDATE,INVOICE.CREATEDDATE))) AS REVENUE_DATE -- NEED TO CONFIRM WITH DAVID
				, DATE_TRUNC(DAY,PAYMENTS.PAIDDATE) AS PAYMENT_DATE -- NEED TO CONFIRM WITH DAVID AFTER PAYMENT TABLE CONFIRMATION DATE_TRUNC(DAY,PAYMENTS.PAIDDATE)
				, ''PREFERRED CORPORATE OFFICE'' AS BRANCH_NAME
				, TO_NUMBER(DE.EMPLOYEE_ID) AS EMPLOYEE_ID
				, DC.CLIENT_NUMBER AS CLIENT_NUMBER
				, NVL(TO_VARCHAR(SC.CONTRACTID), ''Unknown'') AS CONTRACT_CODE
				, INV_HEAD.VENDORINVOICENUMBER AS INVOICE_NUMBER
				, ''Regular'' AS INVOICE_TYPE --NEED TO CONFIRM
				, CASE WHEN INVOICE.INVRATETYPE =''Hourly'' THEN ''HOURLY''
	 		  		  WHEN INVOICE.INVRATETYPE = ''Daily'' THEN ''DAILY''
	 		          WHEN INVOICE.INVRATETYPE = ''Visit'' THEN ''VISIT''
	             END AS BILL_UNIT_TYPE
				, 1 AS NUMBER_OF_CLIENTS --NEED TO CONFIRM
				, ''PREFERRED'' AS SYSTEM_CODE
				, VISITS.COORDINATORID AS SUPERVISOR_CODE 
				, NVL(TO_VARCHAR(SC.SERVICECODE), ''Unknown'') AS BILL_CODE --NEED TO CONFIRM THIS COLUMN IS OKAY OR NEED TO TAKE ANOTHER COLUMN?--VISITS.INVSERVICECODEID/SERVICECODE.SERVICECODE?--SERVICECODE.SERVICECODE have too long strings
				/*
                , CASE WHEN (VS.MISSEDVISIT = ''N'' AND VS.IVRCallIn IS NOT NULL AND VS.IVRCallOut IS NOT NULL) 
							OR (VS.MISSEDVISIT = ''N'' AND (VS.IVRCallIn IS NULL OR VS.IVRCallOut IS NULL) 
										AND (VS.VISITSTARTTIME IS NOT NULL AND VS.VISITENDTIME IS NOT NULL) 
										AND VS.TimesheetReceived = ''Y'' AND VS.TimesheetRequired = ''Y''
								)
							OR (VS.VISITSTARTTIME IS NOT NULL AND VS.VISITENDTIME IS NOT NULL 
								AND VS.MISSEDVISIT = ''N'' AND VS.TimesheetReceived =''N'' 
								AND VS.TimesheetRequired = ''N''
								)
							THEN
							  	CASE WHEN CHARINDEX(''T1020'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VISITS.VISITSTARTTIME, VISITS.VISITENDTIME)/60.0,0) > 13 THEN 13
					               WHEN CHARINDEX(''S5126'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VISITS.VISITSTARTTIME, VISITS.VISITENDTIME)/60.0,0) > 13 THEN 13
					               WHEN CHARINDEX(''S5151'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VISITS.VISITSTARTTIME, VISITS.VISITENDTIME)/60.0,0) > 13 THEN 13
					               WHEN CHARINDEX(''PCA LEVEL II LIVE IN 263200'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI", VISITS.VISITSTARTTIME, VISITS.VISITENDTIME)/60.0,0) > 13 THEN 13
					               WHEN CHARINDEX(''HHA LIVE IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI", VISITS.VISITSTARTTIME, VISITS.VISITENDTIME)/60.0,0) > 13 THEN 13
					               WHEN CHARINDEX(''C LIVE IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI", VISITS.VISITSTARTTIME, VISITS.VISITENDTIME)/60.0,0) > 13 THEN 13
					               WHEN CHARINDEX(''PCA LIVE-IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI", VISITS.VISITSTARTTIME, VISITS.VISITENDTIME)/60.0,0) > 13 THEN 13
					               WHEN CHARINDEX(''HHA LIVE-IN OVERTIME'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI", VISITS.VISITSTARTTIME, VISITS.VISITENDTIME)/60.0,0) > 13 THEN 13
					               WHEN CHARINDEX(''2405004 LIVE IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI", VISITS.VISITSTARTTIME, VISITS.VISITENDTIME)/60.0,0) > 13 THEN 13
					               ELSE IFNULL(DATEDIFF("MI", VISITS.VISITSTARTTIME, VISITS.VISITENDTIME)/60.0,0)
					          	END
					   ELSE 0
				  END AS INVOICE_HOURS
                */
                , NVL(ROUND(INVOICE.BILLEDHOURS / 60.00, 2), 0.00) AS INVOICE_HOURS 
				, INVOICE.BILLEDRATE AS INVOICE_RATE
				, COALESCE(INVOICE.BILLEDAMOUNT, 0) AS AMOUNT_BILLED
				, COALESCE(PR.PAIDAMOUNT,PAYMENTS.PAIDAMOUNT,0) AS AMOUNT_COLLECTED--NVL(PAYMENTS.PAIDAMOUNT, 0) + NVL(PAYMENTS.ADJUSTMENT, 0) + NVL(PAYMENTS.TTADJUSTMENT, 0) + NVL(PAYMENTS.WRITEOFF, 0) + NVL(PAYMENTS.OTHERADJUSTMENT, 0) AS AMOUNT_COLLECTED
				, NVL((AMOUNT_BILLED - AMOUNT_COLLECTED),0) AS AMOUNT_OUTSTANDING,--CASE INVOICE.VISITPAYMENTSTATUS WHEN 1 THEN NVL(INVOICE.BILLEDAMOUNT, 0) ELSE 0 END AS AMOUNT_OUTSTANDING,
		 		-- AS PER DAVID NEED TO TAKE DATA FROM tblinvoicedetails_REPL NOT FROM PAYMENT, AS PER OLD STRUCTURE FROM PAYMENT TABLE AMOUNT_BILLED - (AMOUNT_COLLECTED + (SUM(NVL(PAYMENTS.ADJUSTMENT, 0) + NVL(PAYMENTS.TTADJUSTMENT, 0) + NVL(PAYMENTS.WRITEOFF, 0) + NVL(PAYMENTS.OTHERADJUSTMENT, 0))))
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
                        
  				, CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
			    , CURRENT_USER as ETL_INSERTED_BY
			    , CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_UPDATED_DATE
			    , CURRENT_USER AS ETL_LAST_UPDATED_BY
			    , 0 AS ETL_DELETED_FLAG
FROM DISC_PROD.HHAEXCHANGEPREFERRED.tblinvoicedetails_REPL INVOICE
INNER JOIN DISC_PROD.HHAEXCHANGEPREFERRED.TBLINVOICEHEADER_REPL INV_HEAD
	ON INVOICE.INVOICEHEADERID = INV_HEAD.INVOICEHEADERID
INNER JOIN DISC_PROD.HHAEXCHANGEPREFERRED.tblVisits_REPL VISITS 
	ON INVOICE.VISITID = VISITS.VISITID --INNER JOIN DUE TO THERE 8 VISIT ID IN tblinvoicedetails_REPL BUT NOT IN VisitContracts_REPL
        AND VISITS.PAYERID = INVOICE.PAYERID 
INNER JOIN DISC_PROD.HHAEXCHANGEPREFERRED.VISITS VS
	ON VS.VISITID = VISITS.VISITID 
		--AND VS.PAYERID = INVOICE.PAYERID 
INNER JOIN EMPLOYEE E 
	ON INVOICE.CAREGIVERID = E.CAREGIVERID --INNER JOIN DUE TO THERE 3882 CAREGIVERID IN tblinvoicedetails_REPL BUT NOT IN EMPLOYEE -- need TO ask dedupe team / david
INNER JOIN HAH.DIM_EMPLOYEE DE
	ON DE.EMPLOYEE_ID = E.MASTER_ID
		AND DE.SYSTEM_CODE = ''PREFERRED''
INNER JOIN CLIENT C 
	ON INVOICE.PATIENTID = C.PATIENTID
INNER JOIN HAH.DIM_CLIENT DC
ON DC.CLIENT_KEY = C.CLIENT_KEY
		AND DC.SYSTEM_CODE = ''PREFERRED''
INNER JOIN DISC_PROD.HHAEXCHANGEPREFERRED.AGENCY_MAPPING AGENCY_CONFIG
	ON AGENCY_CONFIG.AGENCYID = INVOICE.AGENCYID
		AND AGENCY_CONFIG.ISACTIVE = TRUE
LEFT JOIN PREFERRED_REVENUE_SEG PS
	ON PS.VISITID = VISITS.VISITID 
LEFT JOIN PAYMENT_DATA2 PR 
	ON INVOICE.VISITID = PR.VISITID AND INVOICE.PAYERID = PR.PAYERID 
LEFT JOIN PAYMENT_DATA1 PAYMENTS ON INVOICE.INVOICEDETAILID  = PAYMENTS.INVOICEDETAILID 
JOIN VISIT_DATA V 
	ON VISITS.VISITID = V.VISITID AND VISITS.AGENCYID = V.AGENCYID
JOIN DISC_PROD.HHAEXCHANGEPREFERRED.VISITINFO_REPL VINFO
	ON VISITS.VISITID = VINFO.VISITID
		AND VISITS.AGENCYID = VINFO.AGENCYID
LEFT JOIN COORDINATOR
	ON C.PATIENTID = COORDINATOR.PATIENTID
LEFT JOIN DISC_PROD.HHAEXCHANGEPREFERRED.SERVICECODES SC 
	ON INVOICE.INVSERVICECODEID = SC.SERVICECODEID
		AND SC.AGENCYID = VISITS.AGENCYID
LEFT JOIN CONTRACT_RATES CR
	ON SC.CONTRACTID = CR.CONTRACTID
		AND SC.AGENCYID = CR.AGENCYID
		AND SC.SERVICECODEID = CR.SERVICECODEID
		AND CR.TODATE::DATE > GETDATE()
		AND CR.FROMDATE::DATE <= GETDATE()
LEFT JOIN AGENCY_OFFICES_INCLUDE OFFICES_I
	ON OFFICES_I.AGENCYID = VISITS.AGENCYID
LEFT JOIN AGENCY_OFFICES_EXCLUDE OFFICES_E
	ON OFFICES_E.AGENCYID = VISITS.AGENCYID 
		AND VISITS.OFFICEID = OFFICES_E.OFFICEID
WHERE (OFFICES_I.INCLUDE_ALL_OFFICES = TRUE OR VISITS.OFFICEID = OFFICES_I.OFFICEID)
 		AND OFFICES_E.OFFICEID IS NULL
;
    RETURN ''SUCCESS'';
    END;
    ';