CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_PAYLOCITY_FACT_PAYROLL_DETAILS("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN 

--******************************************************************************************************************************************
-- NAME: PAYLOCITY_FACT_PAYROLL_DETAIL
--
-- PURPOSE: Creates one row per pay code per pay check per employee
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -------------------------------------------------------------------------------------------------------        
-- 21/03/22    Aditya Shukla		 Initial development
-- 05/19/23		Aditya Shukla		Excluded Adaptive Hospice Inc (33978)
--******************************************************************************************************************************************

INSERT OVERWRITE INTO "STAGE".PAYLOCITY_FACT_PAYROLL_DETAILS

WITH EMPLOYEES AS (
	SELECT DISTINCT 
		MASTER_ID, EMPLOYEEID, COMPANYID, DEPARTMENTPOSITION_COSTCENTER1
	FROM DISC_DEDUPE_PROD.PAYLOCITY.EMPLOYEE_MASTER_LIST
	UNION 
	SELECT DISTINCT 
		MASTER_ID, EMPLOYEEID, COMPANYID, DEPARTMENTPOSITION_COSTCENTER1
	FROM DISC_DEDUPE_PROD.PAYLOCITY.EMPLOYEE_MATCH_LIST 
	WHERE EMPLOYEEID NOT IN (SELECT DISTINCT EMPLOYEEID FROM DISC_DEDUPE_PROD.PAYLOCITY.EMPLOYEE_MASTER_LIST)
),
CHECKDATE AS (
SELECT
	TRIM(PSS.EMPLOYEEID) AS EMPLOYEEID,
	TRIM(PSS.CHECKDATE) AS CHECKDATE,
	TRIM(PSS.COMPANYID) AS COMPANYID,
	TRIM(PSS.TRANSACTIONNUMBER) AS TRANSACTIONNUMBER,
	TRIM(BEGINDATE) AS BEGINDATE,
	TRIM(ENDDATE) AS ENDDATE,
	TRIM(CHECKNUMBER) AS CHECKNUMBER,
	TRIM(DETCODE) AS DETCODE,
	TRIM(DET) AS DET,
	TRIM(DETTYPE) AS DETTYPE,
	SUM(PSD.HOURS) AS HOURS,
	SUM(PSD.RATE) AS RATE,
	SUM(PSD.AMOUNT) AS AMOUNT
FROM DISC_PROD.PAYLOCITY.PAY_STATEMENT_SUMMARY PSS
LEFT JOIN (SELECT * FROM DISC_PROD.PAYLOCITY.PAY_STATEMENT_DETAILS WHERE AMOUNT <> 0) PSD 
	ON TRIM(PSS.EMPLOYEEID) = TRIM(PSD.EMPLOYEEID) AND TRIM(PSS.COMPANYID) = TRIM(PSD.COMPANYID) AND PSS.CHECKDATE = PSD.CHECKDATE
GROUP BY 1,2,3,4,5,6,7,8,9,10
)
SELECT DISTINCT 
	MD5(''10'' || COALESCE(EMP.MASTER_ID, CD.EMPLOYEEID) || NVL(DETCODE, ''UNKNOWN'') || NVL(DET, ''UNKNOWN'') || TRANSACTIONNUMBER || CD.COMPANYID ||''PAYLOCITY'') AS PAYROLL_DETAIL_KEY,
	MD5(CD.TRANSACTIONNUMBER || TRIM(COALESCE(EMP.MASTER_ID, CD.EMPLOYEEID)) || CD.COMPANYID || ''PAYLOCITY'') AS PAYROLL_KEY,
	CD.CHECKDATE::DATE AS REPORT_DATE,
	MD5(CD.COMPANYID || ''-'' || TRIM(COALESCE(EMP.MASTER_ID, CD.EMPLOYEEID)) || ''-'' || ''PAYLOCITY'') AS EMPLOYEE_KEY,
	COALESCE(BRANCH.BRANCH_KEY, (CD.COMPANYID || ''-'' || ''Unknown'' || ''PAYLOCITY'')) AS BRANCH_KEY,
	10 AS SOURCE_SYSTEM_ID,
	CD.CHECKDATE::DATE AS PAYROLL_DATE,
	COALESCE(EMP.EMPLOYEEID, CD.EMPLOYEEID) AS EMPLOYEE_ID,
	COALESCE(BRANCH.BRANCH_NAME, ''UNKONWN'') AS BRANCH_NAME,
	CD.COMPANYID AS SYSTEM_CODE,
	BEGINDATE::DATE AS PAY_PERIOD_START_DATE,
	ENDDATE::DATE AS PAY_PERIOD_END_DATE,
	CD.CHECKNUMBER AS CHECK_NUMBER,
	DETCODE AS PAY_CODE,
	NULL AS PAY_CODE_DESCRIPTION,
	DET AS PAY_CODE_TYPE,
	DETTYPE AS PAY_CODE_TYPE_DESCRIPTION,
	NULL AS PAY_CODE_CATEGORY,
	CD.HOURS AS NUMBER_OF_UNITS,
	NULL AS UNIT_TYPE_CODE,
	NULL AS UNIT_TYPE_DESCRIPTION,
	CD.RATE AS RATE,
	CD.AMOUNT AS AMOUNT,
	-1 AS ETL_TASK_KEY,
    -1 AS ETL_INSERTED_TASK_KEY,    
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	CURRENT_USER as ETL_INSERTED_BY,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	CURRENT_USER as ETL_LAST_UPDATED_BY,
	0 as ETL_DELETED_FLAG
FROM CHECKDATE CD
LEFT JOIN EMPLOYEES EMP
	ON EMP.EMPLOYEEID = CD.EMPLOYEEID
LEFT JOIN HAH.DIM_EMPLOYEE DE
	ON MD5(CD.COMPANYID || ''-'' || TRIM(CD.EMPLOYEEID) || ''-'' || ''PAYLOCITY'') = DE.EMPLOYEE_KEY
LEFT JOIN HAH.DIM_BRANCH BRANCH
	ON EMP.COMPANYID = BRANCH.SYSTEM_CODE
	AND TRIM(EMP.DEPARTMENTPOSITION_COSTCENTER1) = BRANCH.OFFICE_CODE
WHERE CD.COMPANYID NOT IN (''33978'');

END;
';