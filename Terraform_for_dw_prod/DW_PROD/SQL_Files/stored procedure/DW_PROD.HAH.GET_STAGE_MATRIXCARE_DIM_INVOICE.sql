CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_MATRIXCARE_DIM_INVOICE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
                BEGIN
    --*****************************************************************************************************************************
-- NAME:  MATRIXCARE_DIM_INVOICE
--
-- PURPOSE: Creates one row per invoice according to MatrixCare-MyData
--
-- DEVELOPMENT LOG:
-- DATE         AUTHOR              NOTES:
-- --------     ------------------- -----------------------------------------------------------------------------------------------
-- 04/30/21		Mir Ali				Initial development
-- 06/06/21     Jashvant Patel		Remove duplicates for Branch and Client
-- 06/23/21     Prateek Bhatt 		Added MATRIXCARE client key logic for mapping table
-- 03/17/23     Mirisha Jarecha     Added Dedupe Logic
-- 21/04/23 	PINKAL PANCHAL 		ADDED INVOICE_STATUS_MAPPING FOR RCM
-- 27/09/23     Pradeep Thippani    Invoice_status logic change for PAID and PARTIAL PAY
-- 03/10/23     Pradeep Thippani    Changed amount_billed logic
-- NOTES:
-- STVHC_T_PAYMENTPOSTING Table: POSTTYP_POSTINGTYPE 0 ARE PAYMENTS, POSTTYP_POSTINGTYPE 1 ARE REVADJUSTMENTS, POSTTYP_POSTINGTYPE 2 and 3 do not exist, and POSTTYP_POSTINGTYPE 4 seem to be ignored in Charges/Payments/Balance calculation
--	INVD_TOTALCHARGES + INVD_TOTALREVADJUSTMENTS = AMOUNT_BILLED
-- 	AMOUNT_BILLED - INVD_TOTALPAYMENTS = INVD_BALANCE
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO STAGE.MATRIXCARE_DIM_INVOICE
WITH INVOICE_DETAILS AS 
(
	SELECT INVOICE_DETAILS.INVD_INVHID AS INVH_ID, 
        SUM(NVL(INVOICE_DETAILS.INVD_ADJUSTEDCHARGETOTAL,0)) AS AMOUNT_BILLED, 
--		SUM(NVL(INVOICE_DETAILS.INVD_TOTALCHARGES, 0) + NVL(INVOICE_DETAILS.INVD_TOTALREVADJUSTMENTS, 0)) AS AMOUNT_BILLED,
-- Changes made on 28/09/2023 for RCM
		SUM(INVOICE_DETAILS.INVD_TOTALPAYMENTS * -1) AS AMOUNT_COLLECTED, -- Payments are in negative amounts 
		SUM(INVOICE_DETAILS.INVD_BALANCE) AS AMOUNT_OUTSTANDING,
		MAX(PAYMENT_POSTING.POST_POSTEDDATE) AS FINAL_PAYMENT_DATE,
		MAX(
			GREATEST(
				NVL(INVOICE_DETAILS.ETL_LAST_UPDATED_DATE, ''1/1/1900''),
				NVL(PAYMENT_POSTING.ETL_LAST_UPDATED_DATE, ''1/1/1900''))) AS ETL_LAST_UPDATED_DATE
	FROM DISC_PROD.MATRIXCARE.STVHC_T_INVOICEDETAILS AS INVOICE_DETAILS
	LEFT JOIN (
		SELECT POST_INVOICEDETAILID, MAX(POST_POSTEDDATE) AS POST_POSTEDDATE, MAX(ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
		FROM DISC_PROD.MATRIXCARE.STVHC_T_PAYMENTPOSTING
		GROUP BY POST_INVOICEDETAILID
	) AS PAYMENT_POSTING
		ON PAYMENT_POSTING.POST_INVOICEDETAILID = INVOICE_DETAILS.INVD_ID 
	GROUP BY INVOICE_DETAILS.INVD_INVHID
),
 CLIENT AS 
(
	SELECT * FROM 
	(
		SELECT CLI_ID,MASTER_ID
		FROM DISC_DEDUPE_PROD.MATRIXCARE.CLIENT_MASTER_LIST 
	) 
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT ID AS CLI_ID,MASTER_ID
		FROM DISC_DEDUPE_PROD.MATRIXCARE.CLIENT_MATCH_LIST
		WHERE CLI_ID NOT IN (SELECT CLI_ID FROM DISC_DEDUPE_PROD.MATRIXCARE.CLIENT_MASTER_LIST)
	)
),
INVOICE_STATUS_MAPPING AS
(
SELECT DISTINCT
	INVOICE_HEADER.INVH_ID,
	7 AS SOURCE_SYSTEM_ID,	
	''MATRIXCARE'' AS SYSTEM_CODE, 
	CASE WHEN INVOICE_HEADER.INVH_CANCELDATE IS NOT NULL THEN ''CANCELLED''
--          WHEN INVOICE_DETAILS.AMOUNT_COLLECTED >= INVOICE_DETAILS.AMOUNT_BILLED THEN ''PAID''
--			WHEN INVOICE_DETAILS.AMOUNT_COLLECTED > 0 THEN ''PARTIAL PAY''
--   changes made on 27/09/2023 for RCM
			WHEN INVOICE_DETAILS.AMOUNT_COLLECTED > 0 AND INVOICE_DETAILS.AMOUNT_OUTSTANDING <= 0  THEN ''PAID''
			WHEN INVOICE_DETAILS.AMOUNT_COLLECTED > 0 AND INVOICE_DETAILS.AMOUNT_OUTSTANDING > 0   THEN ''PARTIAL PAY''
			WHEN INVOICE_DETAILS.AMOUNT_BILLED > 0 THEN ''BILLED''
			WHEN NVL(INVOICE_DETAILS.AMOUNT_BILLED, 0) = 0 THEN ''UNBILLED''
	ELSE ''UNKNOWN'' END AS DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY
FROM DISC_PROD.MATRIXCARE.STVHC_T_INVOICEHEADER AS INVOICE_HEADER
LEFT JOIN INVOICE_DETAILS AS INVOICE_DETAILS
ON INVOICE_DETAILS.INVH_ID = INVOICE_HEADER.INVH_ID
)
,OLD_DATA AS 
(
	SELECT MD5(''MATRIXCARE'' || ''-'' || INVOICE_HEADER.INVH_ID::STRING || ''-'' || ''MATRIXCARE'') AS INVOICE_KEY,
		MD5(''MATRIXCARE'' || ''-'' ||NVL(COALESCE (C.MASTER_ID::STRING,C.CLI_ID::STRING,INVOICE_HEADER.INVH_CLIENTID::STRING),'''')|| ''-'' || ''MATRIXCARE'') AS CLIENT_KEY,
		TRIM(INVOICE_HEADER.INVH_INVOICENUMBER) AS INVOICE_NUMBER,
		NULL AS PERIOD,
		''Regular'' AS INVOICE_TYPE,
		1 AS NUMBER_OF_CLIENTS,
		''MATRIXCARE'' AS SYSTEM_CODE,
		7 AS SOURCE_SYSTEM_ID,
		MD5(''MATRIXCARE'' || ''-'' || INVOICE_HEADER.INVH_BRANCHID::STRING || ''-'' || ''MATRIXCARE'') AS BRANCH_KEY,
		MD5(''MATRIXCARE'' || ''-'' || INVOICE_HEADER.INVH_PAYERID::STRING || ''-'' || ''MATRIXCARE'') AS PAYOR_CODE,
		NVL(TRIM(PAYER_TYPE.PAYTYP_NAME) || '' - '', '''') || NVL(TRIM(PAYERS.PAY_NAME), ''Unknown'') AS PAYOR_NAME,
		IFF(INVOICE_HEADER.INVH_PERIODCLOSEDID IS NULL, TRUE, FALSE) AS INVOICE_OPEN_FLAG,
		INVOICE_HEADER.INVH_INVOICEDATE AS FIRST_INVOICE_DATE,
		--TO_DATE(DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', INVOICE_HEADER.INVH_INVOICEDATE))) AS FIRST_INVOICE_DATE,
        INVOICE_DETAILS.FINAL_PAYMENT_DATE,
		--TO_DATE(DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', INVOICE_DETAILS.FINAL_PAYMENT_DATE))) AS FINAL_PAYMENT_DATE,
        TRIM(INVOICE_HEADER.INVH_INVOICENUMBER) AS FIRST_INVOICE_NUMBER,
		1 AS BILL_ITERATION,
		NULL AS BILL_REPRESENTATIVE,
		NULL AS BILL_SUPERVISOR,
		NULL AS BILL_MANAGER,
--		CASE WHEN INVOICE_HEADER.INVH_CANCELDATE IS NOT NULL THEN ''Cancelled''
--			WHEN INVOICE_DETAILS.AMOUNT_COLLECTED >= INVOICE_DETAILS.AMOUNT_BILLED THEN ''Fully Paid''
--			WHEN INVOICE_DETAILS.AMOUNT_COLLECTED > 0 THEN ''Partially Paid''
--			WHEN INVOICE_DETAILS.AMOUNT_BILLED > 0 THEN ''Billed''
--			WHEN NVL(INVOICE_DETAILS.AMOUNT_BILLED, 0) = 0 THEN ''Unbilled''
--			ELSE ''Undefined'' END AS INVOICE_STATUS,
--	CHANGES MADE ON 21/04/23 FOR INVOICE_STATUS_MAPPING BY PINKAL
		DISM.DERIVED_INVOICE_STATUS AS INVOICE_STATUS,
		FALSE AS WRITEOFF_FLAG,
		NULL AS WRITEOFF_REASON,
		NVL(INVOICE_DETAILS.AMOUNT_BILLED, 0) AS AMOUNT_BILLED,
		NVL(INVOICE_DETAILS.AMOUNT_COLLECTED, 0) AS AMOUNT_COLLECTED,
		NVL(INVOICE_DETAILS.AMOUNT_OUTSTANDING, 0) AS AMOUNT_OUTSTANDING,
		TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
		TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
			-- ETL Fields
	    
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
                        
convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE
,CURRENT_USER as ETL_INSERTED_BY
,convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE
	    ,CURRENT_USER as ETL_LAST_UPDATED_BY
	    ,0 as ETL_DELETED_FLAG
	    ,0 as ETL_INFERRED_MEMBER_FLAG
	FROM DISC_PROD.MATRIXCARE.STVHC_T_INVOICEHEADER AS INVOICE_HEADER
		LEFT JOIN CLIENT C 
	    ON C.CLI_ID = INVOICE_HEADER.INVH_CLIENTID
   --INNER JOIN HAH.DIM_CLIENT DC              ---GOT DUPLICATES
	   -- ON DC.CLIENT_NUMBER = C.MASTER_ID 
	LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_PAYERS AS PAYERS
		ON PAYERS.PAY_ID = INVOICE_HEADER.INVH_PAYERID 
	LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_PAYERTYPE AS PAYER_TYPE
		ON PAYER_TYPE.PAYTYP_ID = PAYERS.PAY_PAYERTYPEID 
	LEFT JOIN INVOICE_DETAILS AS INVOICE_DETAILS
		ON INVOICE_DETAILS.INVH_ID = INVOICE_HEADER.INVH_ID
	LEFT JOIN INVOICE_STATUS_MAPPING ISM ON ISM.INVH_ID = INVOICE_HEADER.INVH_ID
	LEFT JOIN HAH.DIM_INVOICE_STATUS_MAPPING DISM ON DISM.INVOICE_STATUS_KEY = ISM.INVOICE_STATUS_KEY
	WHERE INVOICE_HEADER.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
		OR INVOICE_DETAILS.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz		
)
,ALL_DATA AS 
(
	SELECT O.INVOICE_KEY
	, O.CLIENT_KEY	 
--   ,COALESCE (MCM.MASTER_CLIENT_KEY, O.CLIENT_KEY) AS CLIENT_KEY--MCM.MASTER_CLIENT_KEY,O.CLIENT_KEY AS OLD_KEY
	,O.INVOICE_NUMBER, O.PERIOD, O.INVOICE_TYPE, O.NUMBER_OF_CLIENTS, O.SYSTEM_CODE, O.SOURCE_SYSTEM_ID, 
	COALESCE (B.CONVERGED_BRANCH_KEY,O.BRANCH_KEY) AS BRANCH_KEY,
	O.PAYOR_CODE, O.PAYOR_NAME, O.INVOICE_OPEN_FLAG, O.FIRST_INVOICE_DATE, O.FINAL_PAYMENT_DATE, O.FIRST_INVOICE_NUMBER, O.BILL_ITERATION,
	O.BILL_REPRESENTATIVE, O.BILL_SUPERVISOR, O.BILL_MANAGER, O.INVOICE_STATUS, O.WRITEOFF_FLAG, O.WRITEOFF_REASON, O.AMOUNT_BILLED, O.AMOUNT_COLLECTED, 
	O.AMOUNT_OUTSTANDING, O.EFFECTIVE_FROM_DATE, O.EFFECTIVE_TO_DATE, O.ETL_TASK_KEY, O.ETL_INSERTED_TASK_KEY, O.ETL_INSERTED_DATE, O.ETL_INSERTED_BY, 
	O.ETL_UPDATED_DATE, O.ETL_LAST_UPDATED_BY, O.ETL_DELETED_FLAG, O.ETL_INFERRED_MEMBER_FLAG
	FROM OLD_DATA O 
    LEFT JOIN DISC_PROD.MATRIXCARE.MATRIXCARE_MASTER_BRANCH_MAPPING B ON B.BRANCH_KEY=O.BRANCH_KEY
    )  SELECT * FROM ALL_DATA;
    RETURN ''SUCCESS'';
    END;
    ';