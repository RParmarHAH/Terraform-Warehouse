CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_CCSI_DIM_BRANCH("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
        var sql = `
    --*****************************************************************************************************************************
-- NAME:  CCSI_DIM_BRANCH
--
-- PURPOSE: Creates one row per BRANCH according to CCSI
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 08/25/2021  JASHVANT PATEL        Initial development
-- 05/29/2023  Shikhar Saxena		 Changed the logic to add SOURCE_SYSTEM_TYPE field
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO STAGE.CCSI_DIM_BRANCH 
WITH OFFICE_NUMBER AS 
(
	SELECT  B.BRANCH_CODE,
	CASE WHEN B.BRANCH_CODE IN (''CEN'') THEN 236
	 WHEN B.BRANCH_CODE IN (''CHI'') THEN 244
	 WHEN B.BRANCH_CODE IN (''ESL'') THEN 375
	 WHEN B.BRANCH_CODE IN (''FAI'') THEN 324
	 WHEN B.BRANCH_CODE IN (''GRV'') THEN 478
	 WHEN B.BRANCH_CODE IN (''HAR'') THEN 427
	 WHEN B.BRANCH_CODE IN (''JLT'') THEN 558
	 WHEN B.BRANCH_CODE IN (''OAK'') THEN 625
	 WHEN B.BRANCH_CODE IN (''PIT'') THEN 748
	 WHEN B.BRANCH_CODE IN (''QUY'') THEN 789
	 WHEN B.BRANCH_CODE IN (''ROC'') THEN 762
	 WHEN B.BRANCH_CODE IN (''SPI'') THEN 774
	 WHEN B.BRANCH_CODE IN (''VLG'') THEN 854
ELSE NULL
END AS OFFICE_NUMBER
FROM DISC_PROD.CCSI.BRANCH_MAPPING B
)
, MANAGER AS 
(
	SELECT B.BRANCH_CODE, CASE WHEN B.BRANCH_CODE IN (''CEN'') THEN ''CHERRI HILTIBIDAL''
	 WHEN B.BRANCH_CODE IN (''CHI'') THEN ''SAMANTHA DAVIES''
	 WHEN B.BRANCH_CODE IN (''ESL'') THEN ''BETH LOYD''
	 WHEN B.BRANCH_CODE IN (''FAI'') THEN ''GEORGIA JOHNSTON''
	 WHEN B.BRANCH_CODE IN (''GRV'') THEN ''CHERYL COOL''
	 WHEN B.BRANCH_CODE IN (''HAR'') THEN ''VIVIAN DICKERSON''
	 WHEN B.BRANCH_CODE IN (''JLT'') THEN ''DONNA KOLOFA''
	 WHEN B.BRANCH_CODE IN (''OAK'') THEN ''TONYA RUSH''
 	 WHEN B.BRANCH_CODE IN (''PIT'') THEN ''KRISTEN CROSSMAN''
	 WHEN B.BRANCH_CODE IN (''QUY'') THEN ''LAURY CLARK''
	 WHEN B.BRANCH_CODE IN (''ROC'') THEN ''RUTH MORRISON''
	 WHEN B.BRANCH_CODE IN (''SPI'') THEN ''TANYA BOYER''
	 WHEN B.BRANCH_CODE IN (''VLG'') THEN ''STACEY DALZELL''
	 ELSE NULL
END AS MANAGER
FROM DISC_PROD.CCSI.BRANCH_MAPPING B
)
SELECT 
MD5(''CCSI'' || ''-'' || B.BRANCH_CODE || ''-'' || ''CCSI'') AS BRANCH_KEY,          
UPPER(TRIM(B.BRANCH_NAME)) AS BRANCH_NAME,
''CCSI'' AS SYSTEM_CODE,
8 AS SOURCE_SYSTEM_ID,
SOURCE_SYSTEM.SOURCE_SYSTEM_TYPE,
 N.OFFICE_NUMBER,
B.BRANCH_CODE AS OFFICE_CODE,
UPPER(TRIM(B.BRANCH_NAME)) AS OFFICE_NAME,
UPPER(TRIM(B.BRANCH_NAME)) AS OFFICE_NAME_ALT,
UPPER(TRIM(B.BRANCH_NAME)) AS DEPARTMENT_NAME,
NULL AS BRANCH_SERVICE_LINE,
TRUE AS PARENT_FLAG,
MD5(''CCSI'' || ''-'' || B.BRANCH_CODE || ''-'' || ''CCSI'') AS PARENT_BRANCH_KEY,
 N.OFFICE_NUMBER AS PARENT_OFFICE_NUMBER,
B.BRANCH_CODE AS PARENT_OFFICE_CODE,
B.STATE || '' - '' || UPPER(TRIM(B.BRANCH_NAME)) || '' ('' ||  N.OFFICE_NUMBER || '')'' AS PARENT_BRANCH_NAME,
 TRIM(B.ADDRESS)  AS OFFICE_ADDRESS1,
NULL AS OFFICE_ADDRESS2,
TRIM(B.CITY) AS OFFICE_CITY,
B.STATE AS OFFICE_STATE_CODE,
B.ZIP AS OFFICE_ZIP,
B.PHONE AS  OFFICE_PHONE,
B.TOLL_FREE_PHONE AS OFFICE_TOLL_FREE_PHONE,
B.FAX AS OFFICE_FAX,                                                
B.STATE || '' - '' || UPPER(TRIM(B.BRANCH_NAME)) || '' ('' || N.OFFICE_NUMBER || '')'' AS DETAILED_OFFICE_NAME,
NULL AS REGION_NUMBER,
''IL – CCSI''  AS REGION_NAME,
CASE WHEN B.BRANCH_CODE IN (''CEN'', ''ESL'', ''FAI'', ''PIT'', ''QUY'', ''SPI'', ''VLG'') THEN  ''KRISTEN KROSSMAN''
	 WHEN B.BRANCH_CODE IN (''CHI'', ''GRV'', ''HAR'', ''JLT'', ''OAK'', ''ROC'') THEN  ''TONYA RUSH''
ELSE NULL END AS  REGION_MANAGER,
NULL AS REGION_MANAGER_EMPLOYEE_KEY,
NULL AS SUBREGION_NAME,
M.MANAGER AS PRIMARY_BRANCH_MANAGER_NAME,
UPPER (B.EMAIL) AS PRIMARY_BRANCH_EMAIL,
NULL AS PRIMARY_BRANCH_MANAGER_EMPLOYEE_KEY,
NULL AS SECONDARY_BRANCH_MANAGER_NAME,
NULL AS SECONDARY_BRANCH_EMAIL,
NULL AS SECONDARY_BRANCH_MANAGER_EMPLOYEE_KEY,
NULL AS RISKCONNECT_NODE_KEY,
NULL AS RISKCONNECT_NAME,
NULL AS HR_OFFICE_NUMBER,
NULL AS HR_OFFICE_NAME,
TRUE AS ACTIVE_FLAG,
TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
      TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
	  
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_TASK_KEY,
        
	  
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_INSERTED_TASK_KEY,
        
	  convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	  CURRENT_USER as ETL_INSERTED_BY ,
	  convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	  CURRENT_USER as ETL_LAST_UPDATED_BY,
	  0 as ETL_DELETED_FLAG,
	  0 as ETL_INFERRED_MEMBER_FLAG
FROM DISC_PROD.CCSI.BRANCH_MAPPING B
LEFT JOIN OFFICE_NUMBER N ON N.BRANCH_CODE = B.BRANCH_CODE
LEFT JOIN MANAGER M ON M.BRANCH_CODE = B.BRANCH_CODE
LEFT JOIN HAH.DIM_SOURCE_SYSTEM AS SOURCE_SYSTEM WHERE SOURCE_SYSTEM.SOURCE_SYSTEM_ID = 8`;
          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
          ';