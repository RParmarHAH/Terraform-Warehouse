CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_OPENSYSTEMS_FACT_VISIT("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
--*****************************************************************************************************************************
-- NAME:  OPENSYSTEMS_FACT_VISIT
--
-- PURPOSE: Creates one row per visit according to OPENSYSTEMS
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                	NOTES:
-- --------    -------------------   	-----------------------------------------------------------------------------------------------
-- 11/09/2022	Jashvant Patel     		Initial development
-- 23/01/2023   Jay Prajapati           Modified Hours Served Logic
-- 12/05/2023   Sanket Jain          	Added CLIENT_SERVICE_KEY,PARTNER_CONTRACT_SERVICE_KEY,BILLING_KEY
-- 01/08/2023 	Shikhar Saxena			Updated the CLEAN_SHIFT_FLAG logic for Auto Confirmed visits
-- 09/01/2024   Harshala Kadam			Updated VISIT_STATUS LOGIC
--*****************************************************************************************************************************

INSERT OVERWRITE INTO DW_PROD."STAGE".OPENSYSTEMS_FACT_VISIT
WITH EMPLOYEE AS
(
SELECT * FROM
(
SELECT CAREGIVERID, MASTER_ID, AGENCYID --,BRANCHID,OFFICEID
FROM DISC_DEDUPE_PROD.HHAEXCHANGEOPENSYSTEMS.EMPLOYEE_MASTER_LIST
)
UNION
SELECT * FROM
(
SELECT DISTINCT CAREGIVERID, MASTER_ID, AGENCYID --,BRANCHID,OFFICEID
FROM DISC_DEDUPE_PROD.HHAEXCHANGEOPENSYSTEMS.EMPLOYEE_MATCH_LIST
WHERE CAREGIVERID NOT IN (SELECT CAREGIVERID FROM DISC_DEDUPE_PROD.HHAEXCHANGEOPENSYSTEMS.EMPLOYEE_MASTER_LIST)
)
)
,CLIENT AS
(
SELECT * FROM
(
SELECT PATIENTID, MASTER_ID, AGENCYID, LASTNAME, FIRSTNAME, OFFICEID --,ADMISSIONID --,OFFICEID
FROM DISC_DEDUPE_PROD.HHAEXCHANGEOPENSYSTEMS.CLIENT_MASTER_LIST
)
UNION
SELECT * FROM
(
SELECT DISTINCT PATIENTID, MASTER_ID, AGENCYID, LASTNAME, FIRSTNAME, OFFICEID --,ADMISSIONID --,OFFICEID
FROM DISC_DEDUPE_PROD.HHAEXCHANGEOPENSYSTEMS.CLIENT_MATCH_LIST
WHERE PATIENTID NOT IN (SELECT PATIENTID FROM DISC_DEDUPE_PROD.HHAEXCHANGEOPENSYSTEMS.CLIENT_MASTER_LIST)
)
)
--SELECT * FROM CLIENT;
,COORDINATOR AS (
SELECT P.PATIENTID, LASTNAME, FIRSTNAME, PC1.COORDINATORID AS COORDINATORID1, PC1.COORDINATORNAME AS COORDINATORNAME1
FROM CLIENT P
JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.PROVIDERPATIENTCOORDINATORS PC1
ON P.PATIENTID = PC1.PATIENTID
AND PC1.COORDINATORSRNO = 1
)
--SELECT * FROM COORDINATOR;
,RESCHEDULE AS
(
WITH CTE AS
(
SELECT PATIENTID,VISITDATE, ISMISSEDVISIT
FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLVISITS_REPL
WHERE DELETED =TRUE
GROUP BY 1,2,3
)
SELECT VR.VISITID
FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLVISITS_REPL VR JOIN CTE D
ON D.PATIENTID = VR.PATIENTID AND VR.VISITDATE = D.VISITDATE
WHERE DELETED =FALSE
)
,DERIVED_STATUS AS
(
SELECT DISTINCT VISITS.VISITID, VISITS.AGENCYID,
CASE
            WHEN VR.ISMISSEDVISIT = 1 AND  ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%'')) THEN ''Cancelled NotBilllable''
                WHEN (VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE()) THEN ''Cancelled''
                WHEN  R.VISITID IS NOT NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
                AND VR."VISITENDTIME" IS NOT NULL AND VR.BILLED = 1 AND NVL(INVOICE.visitpaymentstatus,0) IN (0,1,2) THEN ''Rescheduled Completed Billed''
                WHEN  R.VISITID IS NOT NULL AND ((VR.BILLED = 1 AND INVOICE.visitpaymentstatus = ''0'') OR (INVOICE.visitpaymentstatus IN (''1'',''2''))) THEN ''Rescheduled Billed''
                WHEN (VR.VISITDATE::DATE > GETDATE() OR R.VISITID IS NULL ) AND (VR.VISITDATE::DATE > GETDATE()) AND ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%'')) THEN ''Scheduled Future NotBilled''
                WHEN  R.VISITID IS NOT NULL AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	            AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%''))  THEN  ''Rescheduled In review NotBillable''
                WHEN  R.VISITID IS NOT NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
                AND VR."VISITENDTIME" IS NOT NULL AND ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%''))  THEN  ''Rescheduled Completed NotBillable''
                WHEN  R.VISITID IS NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
                AND VR."VISITENDTIME" IS NOT NULL AND VR.BILLED = 1 AND NVL(INVOICE.visitpaymentstatus,0) IN (0,1,2) THEN ''Scheduled Completed billed'' 
                WHEN  R.VISITID IS NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
                AND VR."VISITENDTIME" IS NOT NULL AND ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%'')) THEN ''Scheduled Completed NotBilled''
                WHEN  R.VISITID IS NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
                AND VR."VISITENDTIME" IS NOT NULL AND VR.BILLED = 0 THEN ''Scheduled Completed Unbilled''
                WHEN  R.VISITID IS NULL AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	            AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL )AND ((VR.BILLED =0 AND VR.DELETED = FALSE) OR (V.PRIMARYSERVICECODE ILIKE ''%NON%BILLABLE%''))THEN ''Scheduled In review NotBilled''
			    WHEN  R.VISITID IS NULL AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	            AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND VR.BILLED = 1 AND NVL(INVOICE.visitpaymentstatus,0) IN (0,1,2) THEN ''Scheduled In review Billed''
                WHEN (VR.VISITDATE::DATE > GETDATE() OR R.VISITID IS NULL )  THEN ''Scheduled Future''
         END    AS DERIVED_DISC_STATUS
,MD5((CONCAT(''OPENSYSTEMS - '',STATE)) ||''-'' || NVL(DERIVED_DISC_STATUS,''S'') || ''-'' || ''HHAEXCHANGE'') AS VISIT_STATUS_KEY
FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.VISITINFO_REPL VISITS
JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLVISITS_REPL VR
ON VISITS.VISITID = VR.VISITID
AND VISITS.AGENCYID = VR.AGENCYID
JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.VISITS V ON VISITS.VISITID = V.VISITID
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLINVOICEDETAILS_REPL INVOICE
ON VISITS.VISITID = INVOICE.VISITID
AND VISITS.PRIMARYSERVICECODEID = INVOICE.INVSERVICECODEID
JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.OFFICE_OFFICES_REPL O
ON O.OfficeID = VISITS.OfficeID
LEFT JOIN RESCHEDULE R ON VISITS.VISITID = R.VISITID
)
, OPENSYSTEMS_CONTRACTRATES AS
(
SELECT CR.CONTRACTRATEID
, CR.RATE
, CR.CONTRACTID
, CR.SERVICECODEID
, CR.UNITS
FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.CONTRACTRATES CR
WHERE TODATE :: DATE > GETDATE()
AND FROMDATE :: DATE <= GETDATE()
QUALIFY ROW_NUMBER() OVER(PARTITION BY CR.CONTRACTID, CR.SERVICECODEID, CR.AGENCYID
ORDER BY CR.RATE DESC, CR.MODIFIEDDATE DESC) = 1
)
,Latest_Check_Number AS (
SELECT VISITID, first_value(CHECKNUMBER) OVER (PARTITION BY VISITID ORDER BY PAIDDATE DESC) AS CHECKNUMBER
,first_value(INVOICENUMBER) OVER (PARTITION BY VISITID ORDER BY PAIDDATE DESC) AS INVOICENUMBER
FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.PAYMENTS
)
,Latest_Visit_Auth AS (
WITH cte AS (SELECT VISITID, 
PA.AUTHORIZATIONID,SRNO, --var.AUTHORIZATIONNUMBER, pa.MAXUNITSFORPERIOD ,p.ADMISSIONID,P.FIRSTNAME ,P.LASTNAME ,
MAX(srno) OVER (PARTITION BY visitid) AS max_srno
FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.VISITAUTHORIZATIONS_REPL VAR
JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.PATIENTAUTHORIZATION PA ON PA.AUTHORIZATIONID = VAR.AUTHORIZATIONID
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.PATIENTS P ON P.PATIENTID = VAR.PATIENTID 
WHERE NOT (var.AUTHORIZATIONNUMBER ILIKE ''%TEMP%'' AND pa.MAXUNITSFORPERIOD <900) --AND VISITID =''353116002''
)
SELECT DISTINCT VISITID ,AUTHORIZATIONID --, AUTHORIZATIONNUMBER ,MAXUNITSFORPERIOD, ADMISSIONID, FIRSTNAME, LASTNAME 
FROM CTE WHERE SRNO = max_srno
)
,CALLS AS (                --EXCEPTION      
	SELECT
    V.VISITID,
    TRIM(CM.STATUS) AS STATUS
FROM
    DISC_PROD.HHAEXCHANGEOPENSYSTEMS.CALLMAINTENANCE CM
INNER JOIN
    DISC_PROD.HHAEXCHANGEOPENSYSTEMS.VISITS V
    ON V.AIDEID = CM.AIDEID
    AND V.VISITDATE = CAST(CM.CALLTIME AS DATE)
    AND V.AGENCYID = CM.AGENCYID
LEFT JOIN
    DISC_PROD.HHAEXCHANGEOPENSYSTEMS.OFFICE_OFFICES_REPL OFFICE 
    ON CM.OFFICEID = OFFICE.OFFICEID
GROUP BY V.VISITID,
    V.VISITDATE::DATE,
    OFFICE.STATE,
    CM.STATUS
),
AUTO_CONFIRMED_VISITS AS (
SELECT UV.VISITID
FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.UNTOUCHEDVISITS UV
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.INREVIEWVISITS IV
ON UV.VISITID = IV.VISITID
WHERE IV.VISITID IS NULL
)
SELECT DISTINCT MD5(CONCAT(''OPENSYSTEMS'') || ''-'' || VISITS.VISITID || ''-'' || ''HHAEXCHANGE'') AS VISIT_KEY
, DATE_TRUNC (DAY, VR.VISITDATE::DATE) AS REPORT_DATE
, MD5(''OPENSYSTEMS''
|| ''-'' || O.OFFICEID
|| ''-'' || ''HHAEXCHANGE'') AS BRANCH_KEY
, MD5(''OPENSYSTEMS''
|| ''-'' || C.MASTER_ID
|| ''-'' || ''HHAEXCHANGE'') AS CLIENT_KEY
, MD5(''OPENSYSTEMS''
|| ''-'' || nvl(SC.CONTRACTID,-1)
|| ''-'' || nvl(CR.CONTRACTRATEID,-1)
|| ''-'' || nvl(SC.SERVICECODEID,-1)
|| ''-'' || ''HHAEXCHANGE'') AS CONTRACT_KEY
, MD5(''OPENSYSTEMS''
|| ''-'' || E.MASTER_ID
|| ''-'' || ''HHAEXCHANGE'') AS SCHEDULED_EMPLOYEE_KEY --NEED TO CHECK
, MD5(''OPENSYSTEMS''
|| ''-'' || E.MASTER_ID
|| ''-'' || ''HHAEXCHANGE'') AS EMPLOYEE_KEY
, 17 AS SOURCE_SYSTEM_ID
, MD5(''OPENSYSTEMS''
|| ''-'' || NVL(COORDINATOR.COORDINATORID1,-1)
|| ''-'' || ''HHAEXCHANGE'') AS SUPERVISOR_KEY
, MD5(''OPENSYSTEMS''
|| ''-'' || INVOICE.INVOICEHEADERID
|| ''-'' || ''HHAEXCHANGE'') AS INVOICE_KEY
, MD5(''OPENSYSTEMS''
|| ''-'' || PAYROLL.PAYROLLVISITID
|| ''-'' || ''HHAEXCHANGE'') AS PAYROLL_KEY
, MD5(''OPENSYSTEMS'' 
|| ''-'' || LVA.AUTHORIZATIONID 
|| ''-'' || ''HHAEXCHANGE'') AS CLIENT_SERVICE_KEY
,MD5(''OPENSYSTEMS''
|| ''-'' || IFNULL(SC.AGENCYID, -1) 
|| ''-'' || IFNULL(PR.PAYERID, -1) 
|| ''-'' || IFNULL(SC.CONTRACTID, -1) 
|| ''-'' || IFNULL(SC.SERVICECODEID, -1) 
|| ''-'' || IFNULL(SC.VISITTYPE, ''-1'') 
|| ''-'' || IFNULL(SC.RATETYPETEXT, ''-1'')
|| ''-'' || O.STATE
|| ''-'' || ''HHAEXCHANGE'') AS PARTNER_CONTRACT_SERVICE_KEY
,MD5(''OPENSYSTEMS''
|| ''-'' || SC.SERVICECODEID 
|| ''-'' || ''HHAEXCHANGE'') AS BILLING_KEY
, DATE_TRUNC(DAY, VR.VISITDATE::DATE) AS SERVICE_DATE
, DATE_TRUNC(DAY, PAYROLL.PAYROLLDATE::DATE) AS PAYROLL_DATE
, UPPER(TRIM(O.OFFICENAME)) AS BRANCH_NAME
, NVL(C.PATIENTID, C.MASTER_ID) AS CLIENT_NUMBER
, NVL(TO_VARCHAR(SC.CONTRACTID), ''Unknown'') AS CONTRACT_CODE
, NVL(E.CAREGIVERID,E.MASTER_ID) AS SCHEDULED_EMPLOYEE_ID   --NEED TO CHECK
, NVL(E.CAREGIVERID,E.MASTER_ID) AS EMPLOYEE_ID
, CONCAT(''OPENSYSTEMS - '',O.STATE) AS SYSTEM_CODE
, COORDINATOR.COORDINATORID1 AS SUPERVISOR_CODE
, LCN.INVOICENUMBER AS INVOICE_ID
, LCN.CHECKNUMBER AS CHEQUE_NUMBER
, CASE WHEN ACV.VISITID IS NOT NULL THEN TRUE ELSE FALSE END AS CLEAN_SHIFT_FLAG
, M.SCHEDULE_STATUS_CODE AS SCHEDULE_STATUS_CODE
, M.SCHEDULE_STATUS_NAME AS SCHEDULE_STATUS_NAME
, M.SCHEDULE_STATUS_DESCRIPTION AS SCHEDULE_STATUS_DESCRIPTION
, M.VISIT_STATUS_CODE AS VISIT_STATUS_CODE
, M.VISIT_STATUS_NAME AS VISIT_STATUS_NAME
, M.VISIT_STATUS_DESCRIPTION AS VISIT_STATUS_DESCRIPTION
, M.INVOICE_STATUS_CODE AS INVOICE_STATUS_CODE
, M.INVOICE_STATUS_NAME AS INVOICE_STATUS_NAME
, M.INVOICE_STATUS_DESCRIPTION AS INVOICE_STATUS_DESCRIPTION
, M.PAYROLL_STATUS_CODE AS PAYROLL_STATUS_CODE
, M.PAYROLL_STATUS_NAME AS PAYROLL_STATUS_NAME
, M.PAYROLL_STATUS_DESCRIPTION AS PAYROLL_STATUS_DESCRIPTION
, NULL AS CANCEL_REASON_CODE
, NULL AS CANCEL_REASON_DESCRIPTION
, NULL AS CANCEL_REASON_NOTES
, IFF(EC.VISITID IS NULL, ''NO'' , ''YES'') AS EXCEPTION_REASON_INDICATOR
, NULL AS RESOLUTION_CODE
, NULL AS RESOLUTION_DESCRIPTION
, NULL AS REJECTION_CODE
, NULL AS REJECTION_DESCRIPTION
, NVL(TO_VARCHAR(SC.SERVICECODE), ''Unknown'') AS BILL_CODE
, COALESCE(INVOICE.BILLEDRATE, 0) AS BILL_RATE
, INVOICE.BILLEDUNITS AS BILL_UNITS_SERVED
, SC.RATETYPETEXT AS BILL_UNIT_TYPE
, NULL AS OVERHEAD_RATE
, VR.SCHEDULEDSTARTTIME AS SCHEDULE_TIMEIN
, VR.SCHEDULEDENDTIME AS SCHEDULE_TIMEOUT
, IFNULL(ROUND(DATEDIFF("MI",VR.SCHEDULEDSTARTTIME, VR.SCHEDULEDENDTIME)/60.0,2),0) AS SCHEDULE_DURATION
, VR.VISITSTARTTIME AS ACTUAL_TIMEIN
, VR.VISITENDTIME AS ACTUAL_TIMEOUT
, IFNULL(ROUND(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,2),0) AS ACTUAL_DURATION
, NULL AS ADJUSTED_TIMEIN
, NULL AS ADJUSTED_TIMEOUT
, NULL AS ADJUSTED_DURATION
, CASE WHEN VR.DELETED = FALSE AND VR.ISMISSEDVISIT = FALSE 
	           AND  VR.VISITSTARTTIME IS NOT NULL AND VR.VISITENDTIME IS NOT NULL
	           AND (DATEDIFF(MINUTE,VR.VISITSTARTTIME, VR.VISITENDTIME)/60) > 0
	   THEN ROUND(DATEDIFF(MINUTE,VR.VISITSTARTTIME, VR.VISITENDTIME)/60,2)
	   ELSE 0
   END AS HOURS_SERVED
 , VR.UPDATECOMMENTS AS COMMENTS
--, VR.VISITID AS COMMENTS
, IFF(VISITS.IVRCALLIN IS NOT NULL AND VISITS.IVRCALLOUT IS NOT NULL AND (VR.ISMISSEDVISIT != 1 OR VS.MISSEDVISIT = ''N''), ''Y'', ''N'') AS IS_EVV_FLAG
, NULL AS TIMESHEET_TYPE
, NULL AS TRACKING_ID
-- ETL Fields
, :STR_ETL_TASK_KEY AS ETL_TASK_KEY
, :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
, CONVERT_TIMEZONE(''UTC'',CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
, CURRENT_USER AS ETL_INSERTED_BY
, CONVERT_TIMEZONE(''UTC'',CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
, CURRENT_USER AS ETL_LAST_UPDATED_BY
, 0 AS ETL_DELETED_FLAG
,M.CONFIRMED_FLAG AS CONFIRMED_FLAG
FROM DISC_PROD.HHAEXCHANGEOPENSYSTEMS.VISITINFO_REPL VISITS
JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLVISITS_REPL VR
ON VISITS.VISITID = VR.VISITID
JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.VISITS VS
ON VS.VISITID = VR.VISITID
JOIN CLIENT C ON VR.PATIENTID = C.PATIENTID
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.PATIENTS P ON P.PATIENTID = C.PATIENTID
JOIN EMPLOYEE E ON VR.CAREGIVERID = E.CAREGIVERID --- THIS IS USED FOR EMPLOYEE_KEY
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.OFFICE_OFFICES_REPL O ON VISITS.OFFICEID = O.OFFICEID ---THIS IS USED
LEFT JOIN COORDINATOR ON C.PATIENTID = COORDINATOR.PATIENTID
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.SERVICECODES SC --- THIS IS USED FOR BILLCODE
ON VISITS.PRIMARYSERVICECODEID = SC.SERVICECODEID
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.CONTRACTS
ON SC.CONTRACTID = CONTRACTS.CONTRACTID
LEFT JOIN OPENSYSTEMS_CONTRACTRATES CR ON CONTRACTS.CONTRACTID = CR.CONTRACTID
AND SC.SERVICECODEID = CR.SERVICECODEID
LEFT JOIN Latest_Visit_Auth LVA ON LVA.VISITID = VR.VISITID 
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.PAYROLL_VISITS_REPL PAYROLL
ON VR.VISITID = PAYROLL.VISITID
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.TBLINVOICEDETAILS_REPL INVOICE ---- THIS IS USED FOR BILL RATE
ON VR.VISITID = INVOICE.VISITID AND VISITS.PRIMARYSERVICECODEID = INVOICE.INVSERVICECODEID
LEFT JOIN DERIVED_STATUS DS ON DS.VISITID=VISITS.VISITID AND DS.AGENCYID= VISITS.AGENCYID
LEFT JOIN HAH.DIM_VISIT_STATUS_MAPPING M ON DS.VISIT_STATUS_KEY = M.VISIT_STATUS_KEY AND M.SYSTEM_CODE IN (''OPENSYSTEMS - DE'', ''OPENSYSTEMS - PA'')
LEFT JOIN DISC_PROD.HHAEXCHANGEOPENSYSTEMS.PAYER_REPL PR
ON IFNULL(PR.CONTRACTID,PR.PAYERID) = SC.CONTRACTID
LEFT JOIN Latest_Check_Number LCN ON LCN.VISITID = VR.VISITID
LEFT JOIN CALLS EC ON VS.VISITID = EC.VISITID
LEFT JOIN AUTO_CONFIRMED_VISITS ACV ON ACV.VISITID = VISITS.VISITID
WHERE O.STATE IN (''PA'',''DE'');

return ''SUCCESS'';
end;
';