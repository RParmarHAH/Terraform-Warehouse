CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_EMPEONEDISON_DIM_EMPLOYEE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN

--*****************************************************************************************************************************
-- NAME:  EMPEONEDISON_DIM_EMPLOYEE
--
-- PURPOSE: Creates one row per EMPLOYEE_ID according to EMPEONEDISON
--
-- DEVELOPMENT LOG:
-- DATE         AUTHOR              					NOTES:
-- --------     -----------------------------------     --------------------------------------------------------------------------
-- 10/06/22		Dhaval Vachheta/Jigar Prajapati			Initial development
-- 11/10/2023   Trushali Ramoliya                       Added a logic for HISPANIC_OR_LATINO and update the logic for ethnicity as per ticket - IDDOX- 388.	
-- 12/13/2023	Saurav Purohit                          Added ACQUIRED_SYSTEM column
--*****************************************************************************************************************************


INSERT OVERWRITE INTO STAGE.EMPEONEDISON_DIM_EMPLOYEE

WITH RATE AS (
		SELECT 
			ROW_NUMBER() OVER (PARTITION BY TRIM(CO || TRIM(ID)) ORDER BY STARTDATE DESC) AS RANK,
			CO, TRIM(ID) AS ID,
			CASE WHEN SALARY = 0 
				 THEN NULL 
				 ELSE SALARY*52 
			END AS SALARY, 
			CASE WHEN RATE = 0 
				 THEN NULL 
				 ELSE RATE 
			END AS PAY_RATE
		FROM DISC_PROD.EMPEONEDISON.ERATE QUALIFY RANK = 1        
	),
	EMPLOYEE_CHECK_DATE AS
	(
		SELECT CO,
		   ID AS EMPLOYEE_ID, 
		   MIN(CHECKDATE) AS FIRST_CHECK_DATE,
		   MAX(CHECKDATE) AS LAST_CHECK_DATE
		FROM DISC_PROD.EMPEONEDISON.EPAYENTRY
		GROUP BY CO, EMPLOYEE_ID
	),
	ACTIVE_EMPLOYEES AS 
	(
		SELECT DISTINCT 
			ROW_NUMBER() OVER (PARTITION BY TRIM(ES.ID) ORDER BY ES.STARTDATE DESC) AS RANK,
			TRIM(ES.ID) AS ID,
			ES.STATUS,
			CES.DESCRIPTION AS EMP_STATUS,
			ES.STARTDATE,
			ES.ELIGIBLEFORREHIRE
		FROM DISC_PROD.EMPEONEDISON.ESTATUS ES
		LEFT JOIN DISC_PROD.EMPEONEDISON.CEMPSTATUS CES
			ON CES.STATUS = ES.STATUS
		QUALIFY RANK = 1
	)
	SELECT DISTINCT 
		MD5(''EMPEON'' || MASTER_ID || ''-'' || ''EMPEONEDISON'') AS EMPLOYEE_KEY,
		TRIM(emp_m.ID) AS EMPLOYEE_ID,
		''EMPEONEDISON'' || ''-'' || emp_m.CO AS SYSTEM_CODE,
		22 AS SOURCE_SYSTEM_ID,
		HEX_ENCODE(TRIM(REPLACE(SSN, ''-''))) AS EMPLOYEE_PID,
		TRY_CAST(emp_m.ID AS INT) AS EMPLOYEE_NUMBER,
		BIRTHDATE::DATE AS EMPLOYEE_DOB,
		NULL AS EMPLOYEE_DATE_OF_DEATH,
		HIREDATE::DATE AS EMPLOYEE_HIRE_DATE,
		REHIREDATE::DATE AS EMPLOYEE_REHIRE_DATE,
		NULL AS EMPLOYEE_BENEFIT_START_DATE,
		COALESCE(FIRSTPAYDATE, e_check.FIRST_CHECK_DATE)::DATE AS EMPLOYEE_FIRST_CHECK_DATE, 
		COALESCE(LASTPAYDATE, e_check.LAST_CHECK_DATE)::DATE AS EMPLOYEE_LAST_CHECK_DATE, 
		COALESCE(TERMDATE, e_check.LAST_CHECK_DATE)::DATE AS EMPLOYEE_LAST_WORKED_DATE,
		TERMDATE::DATE AS EMPLOYEE_TERMINATE_DATE,
		TRIM(LEGACYTERMREASON) AS REASON_TO_TERMINATE,
		CASE 
			-- FOR SCENARIO WHEN TERMINATE DATE IS NOT NULL, AND IS > HIREDATE / OR WHEN THERES NO PAY FOR 1+ YEARS
			WHEN TERMDATE::DATE IS NOT NULL	AND (TERMDATE::DATE > NVL(REHIREDATE::DATE, HIREDATE::DATE)
				 OR DATEADD(''YEAR'', 1, COALESCE(e_check.LAST_CHECK_DATE, LASTPAYDATE)::DATE) <= CURRENT_DATE()
			) THEN FALSE
			-- FOR SCENARIO WHEN RECORD ONLY HAS HIREDATE AND TERMINATE DATE, AND TERM DATE IS > HIREDATE
			WHEN TERMDATE::DATE IS NOT NULL AND TERMDATE::DATE > HIREDATE::DATE		   
				AND REHIREDATE::DATE IS NULL
				AND COALESCE(e_check.FIRST_CHECK_DATE, FIRSTPAYDATE)::DATE IS NULL 
				AND COALESCE(e_check.LAST_CHECK_DATE, LASTPAYDATE)::DATE IS NULL
			THEN FALSE
			-- FOR SCENARIO WHEN RECORD DOESN''T HAVE TERMDATE BUT EMP HASN''T BEEN PAID FOR 1+ YEAR
			WHEN TERMDATE::DATE IS NULL 											   
				AND DATEADD(''YEAR'', 1, COALESCE(e_check.LAST_CHECK_DATE, LASTPAYDATE)::DATE) <= CURRENT_DATE() 
			THEN FALSE
			 -- FOR SCENARIO WHEN SOURCE STATUS IS ''TERM'' AND REST DATE FIELDS ARE NULL
			WHEN COALESCE(LEGACYEMPSTATUS, ae.STATUS) = ''T''						      
				AND TERMDATE::DATE IS NULL 
				AND COALESCE(e_check.FIRST_CHECK_DATE, FIRSTPAYDATE)::DATE IS NULL 
				AND COALESCE(e_check.LAST_CHECK_DATE, LASTPAYDATE)::DATE IS NULL 
			THEN FALSE
			-- FOR SCENARIO WHEN SOURC STATUS IS ''TERM'' AND EMP HASNT BEEN PAID FOR 1+ YEAR AND TERM DATE IS NULL
			WHEN COALESCE(LEGACYEMPSTATUS, ae.STATUS) = ''T'' 					       
				AND (DATEADD(''YEAR'', 1, COALESCE(e_check.LAST_CHECK_DATE, LASTPAYDATE)::DATE) <= CURRENT_DATE() 
				AND TERMDATE::DATE IS NULL)
			THEN FALSE 
			ELSE TRUE
		END AS ACTIVE_EMPLOYEE_FLAG,
		LEGACYELIGIBLEFORREHIRE AS ABLE_TO_REHIRE_FLAG,
		NULL AS EMPLOYEE_PREFIX,
		TRIM(UPPER(FIRSTNAME)) AS EMPLOYEE_FIRST_NAME,
		TRIM(UPPER(MIDDLENAME)) AS EMPLOYEE_MIDDLE_NAME,
		TRIM(UPPER(LASTNAME)) AS EMPLOYEE_LAST_NAME,
		NULL AS EMPLOYEE_SUFFIX,
		TRIM(emp_m.ADDRESS1) AS EMPLOYEE_ADDRESS1,
		TRIM(emp_m.ADDRESS2) AS EMPLOYEE_ADDRESS2,
		emp_m.CITY AS EMPLOYEE_CITY,
		CASE WHEN emp_m.STATE= ''Kentucky'' THEN ''KY''
			WHEN emp_m.STATE = ''Alabama'' THEN ''AL''
			WHEN EMP_M.STATE = ''Alaska'' THEN ''AK''
			WHEN EMP_M.STATE = ''Washington'' THEN ''WA''
			WHEN EMP_M.STATE = ''California'' THEN ''CA''
			WHEN UPPER(TRIM(EMP_M.STATE))=''NEW YORK'' THEN ''NY''
			WHEN EMP_M.STATE = ''Illinois'' THEN ''IL''
			WHEN EMP_M.STATE = ''Virginia'' THEN ''VA''
			 ELSE emp_m.STATE 
		END AS EMPLOYEE_STATE_CODE,
		TRIM(emp_m.ZIP) AS EMPLOYEE_ZIP,
		TRIM(REPLACE(HOMEPHONE, ''-'', '''')) AS EMPLOYEE_HOME_PHONE,
		TRIM(REPLACE(CELLPHONE, ''-'', '''')) AS EMPLOYEE_CELL_PHONE,
		TRIM(REPLACE(WORKPHONE, ''-'', '''')) AS EMPLOYEE_WORK_PHONE,
		EMAILADDRESS AS EMPLOYEE_PERSONAL_EMAIL,
		WORKEMAIL AS EMPLOYEE_WORK_EMAIL,
		NULL AS LINKED_IN_PROFILE_URL,
		CASE 
			 WHEN UPPER(TRIM(SEX)) = ''M'' THEN ''MALE''
		 	 WHEN UPPER(TRIM(SEX)) = ''F'' THEN ''FEMALE''
		 	 ELSE NULL
		END AS EMPLOYEE_GENDER,
			TRIM(UPPER(
CASE WHEN c.DESCRIPTION ILIKE ANY (''%BLACK%'',''%African American%'') THEN ''Black or African American''
 WHEN c.DESCRIPTION ILIKE ANY (''%AMERICAN INDIAN%'',''%Alaska Native%'') THEN ''American Indian or Alaska Native''
  WHEN c.DESCRIPTION ILIKE ANY (''%PACIFIC ISLANDER%'',''%Native Hawaiian%'') THEN ''Native Hawaiian or Other Pacific Islander''
  WHEN c.DESCRIPTION ILIKE ANY (''%TWO OR MORE RACES%'',''%MULTIPLE%'') THEN ''TWO OR MORE''
  WHEN c.DESCRIPTION ILIKE ANY  (''%HISPANIC%'',''%LATINO%'') THEN NULL
  WHEN c.DESCRIPTION ILIKE ANY  (''CARIBBEAN%'') THEN ''CARIBBEAN INDIAN''
  WHEN c.DESCRIPTION ILIKE ANY (''%NOT APPLICABLE%'',''%NO ANSWER%'') OR LENGTH (TRIM(c.DESCRIPTION)) = 1 THEN ''UNKNOWN'' 
  ELSE TRIM(UPPER(c.DESCRIPTION)) END )) AS EMPLOYEE_ETHNICITY,	
IFF(UPPER(TRIM(c.DESCRIPTION)) ILIKE ANY(''HISPANIC%'',''LATINO%'',''HISPANIC OR LATINO%''), TRUE, FALSE) AS HISPANIC_OR_LATINO, 
		LANGUAGESSPOKEN AS EMPLOYEE_LANGUAGE,
		CASE 
			 WHEN UPPER(TRIM(MARITALSTATUS)) = ''S'' THEN ''SINGLE''
	 		 WHEN UPPER(TRIM(MARITALSTATUS)) = ''M'' THEN ''MARRIED''
	 		 ELSE NULL
		END AS EMPLOYEE_MARITAL_STATUS,
		NULL AS EMPLOYEE_TYPE,
		CASE
			WHEN CC4 LIKE ''%62000%'' OR CC4 LIKE ''%77000%'' OR emp_m.CC1 LIKE ''%RN%'' THEN ''RN NURSES''
			WHEN emp_m.CC1 LIKE ''%LPN%'' THEN ''LPN NURSES'' 
			WHEN TRIM(emp_m.CO) IN (''3795'', ''3795O'') THEN ''ADMIN''
			WHEN TRIM(EMP_M.CO) = ''3795D'' THEN ''FIELD'' 
		END AS EMPLOYEE_CATEGORY,
		NULL AS EXEMPT_FLAG,
		cd.NAME AS JOB_TITLE,
		NULL AS JOB_DESCRIPTION,
		NULL AS CLASS_ID,
		NULL AS WORKERS_COMP,
		TRIM(emp_m.ID) AS PAYROLL_ID,
		NULL AS PERCENT_401K_DEDUCTION,
		NULL AS AMOUNT_401K_DEDUCTION,
		NULL AS JAZZHR_APPLICANT_ID,
		NULL AS JAZZHR_USER_ID,
		NULL AS JAZZHR_CONTACT_ID,
		WORKSTATE AS WORK_STATE,
		''NY'' AS SUTA_STATE,
		NULL AS EMPLOYEE_DEPARTMENT,
		NULL AS EMPLOYEE_OFFICE_CODE,
		MD5(22 || ''-'' || TRIM(emp_m.CO) || ''-'' || ''EMPEONEDISON'') AS PRIMARY_BRANCH_KEY,
		''NY'' AS PRIMARY_BRANCH_STATE,
		TRIM(emp_m.CO) AS PRIMARY_BRANCH_NAME,
		NULL AS PRIMARY_BRANCH_SYSTEM_CODE,
		ISMANAGER AS CASE_MANAGER_FLAG,
		NULL AS SUPERVISOR_FLAG,
		NULL AS COORDINATOR_FLAG,
		NULL AS LINKED_ID,
		HEX_ENCODE(COALESCE(r.SALARY, r.PAY_RATE * 40 * 52)) AS SALARY,
		HEX_ENCODE(r.PAY_RATE) AS PAY_RATE, 
		IFF( REHIREDATE IS NULL, IFF( HIREDATE IS NULL, CAST( ''1900-01-01'' AS DATE), HIREDATE), REHIREDATE) AS Effective_From_Date,
		IFF( TERMDATE IS NULL, CAST( ''2070-12-31'' AS DATE), TERMDATE) AS Effective_To_Date,
		NULL AS MDM_DIM_EMPLOYEE_KEY,
		-1 AS ETL_TASK_KEY,
	    -1 AS ETL_INSERTED_TASK_KEY,
	    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	    CURRENT_USER AS ETL_INSERTED_BY,
	    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	    CURRENT_USER AS ETL_LAST_UPDATED_BY,
	    FALSE AS ETL_DELETED_FLAG,
	    FALSE AS ETL_INFERRED_MEMBER_FLAG,
		''EDISON'' as ACQUIRED_SYSTEM 
	FROM DISC_DEDUPE_PROD.EMPEONEDISON.EMPLOYEE_MASTER_LIST AS emp_m
	LEFT JOIN EMPLOYEE_CHECK_DATE AS e_check 
		ON TRIM(emp_m.ID) = TRIM(e_check.EMPLOYEE_ID) AND TRIM(emp_m.CO) = TRIM(e_check.CO)
	LEFT JOIN DISC_PROD.EMPEONEDISON.CDEPT1 AS cd
		ON TRIM(emp_m.CC1) = TRIM(cd.CC1) AND TRIM(emp_m.CO) = TRIM(cd.CO)
	LEFT JOIN DISC_PROD.EMPEONEDISON.CETHNICITY AS c 
		ON TRIM(emp_m.ETHNICITY) = TRIM(c.ETHNICITY)
	LEFT JOIN ACTIVE_EMPLOYEES AS ae
		ON TRIM(ae.ID) = TRIM(emp_m.ID)
	LEFT JOIN RATE r 
		ON r.CO = emp_m.CO AND TRIM(r.ID) = TRIM(emp_m.ID);
--	WHERE DW_PROD.STAGE.SSN_CLEANUP(TRIM(REPLACE(SSN, ''-''))) IS NOT NULL;
	
END;
';