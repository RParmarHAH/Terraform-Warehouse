CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_ALAYACARE_FACT_CLIENT_SERVICE_BKCP2610("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN
--*****************************************************************************************************************************
-- NAME:  ALAYACARE_FACT_CLIENT_SERVICE
--07/25/2023    Rajat Sapkal             Initial development
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.ALAYACARE_FACT_CLIENT_SERVICE_BKCP2610
WITH
CLIENT AS  
(
SELECT * FROM
(
    SELECT CLIENT_ID,MASTER_ID,CLIENT_ID AS ORIGINAL_RECORD_ID,GUID,BRANCH_ID
    FROM  DISC_DEDUPE_PROD.ALAYACARE.CLIENT_MASTER_LIST
)
UNION
SELECT * FROM
(
    SELECT DISTINCT ID,MASTER_ID,ID AS ORIGINAL_RECORD_ID,GUID,BRANCH_ID
    FROM DISC_DEDUPE_PROD.ALAYACARE.CLIENT_MATCH_LIST
    WHERE ID NOT IN (SELECT CLIENT_ID FROM DISC_DEDUPE_PROD.ALAYACARE.CLIENT_MASTER_LIST )
))
,DEDUPE AS (
    SELECT S.SERVICE_CLIENT_ID,F.* 
    FROM DISC_PROD.ALAYACARE.FUNDING_BLOCK_TIER_4 F
    INNER JOIN DW_PROD.HAH.DIM_DATE AS DATES
        ON DATES.CALENDAR_DATE BETWEEN F.FUNDING_BLOCK_START_DATE AND F.FUNDING_BLOCK_END_DATE--JOIN WITH dim_date 63k TO 18k
    LEFT JOIN DISC_PROD.ALAYACARE.SERVICE S ON F.SERVICE_ID= S.SERVICE_ID
    WHERE F.MASTER=1 AND F.FUNDING_BLOCK_START_DATE>=''1970-01-01'' --AND F.FUNDING_BLOCK_ID in(459711,459765,73720,328639,727964,728019)
    QUALIFY ROW_NUMBER() OVER (PARTITION BY S.SERVICE_ID,S.SERVICE_CLIENT_ID,F.FUNDING_BLOCK_START_DATE ,F.FUNDING_BLOCK_END_DATE 
    ORDER BY FUNDING_BLOCK_REVISION_DATE DESC,FUNDING_QUANTITY DESC,FUNDING_BLOCK_ID desc)=1)
--SELECT * FROM DEDUPE WHERE SERVICE_CLIENT_ID=1031 AND SERVICE_ID =2776;
,COMPLETE_OVERLAP AS(       --To identify subset of records who are getting totally overlapped
    SELECT DISTINCT 
        D2.FUNDING_BLOCK_ID ,D2.SERVICE_CLIENT_ID,D2.SERVICE_ID,
        D2.FUNDING_BLOCK_START_DATE, D2.FUNDING_BLOCK_END_DATE,
        D2.master,D2.FUNDING_FREQUENCY,D2.FUNDING_UNITS,D2.FUNDING_QUANTITY
    FROM DEDUPE D1 JOIN DEDUPE D2 ON D1.SERVICE_CLIENT_ID= D2.SERVICE_CLIENT_ID AND D1.SERVICE_ID=D2.SERVICE_ID
    WHERE D1.FUNDING_BLOCK_ID <>D2.FUNDING_BLOCK_ID
        AND (D2.FUNDING_BLOCK_START_DATE>=D1.FUNDING_BLOCK_START_DATE AND D2.FUNDING_BLOCK_END_DATE<=D1.FUNDING_BLOCK_END_DATE)
--OR (D1.FUNDING_BLOCK_START_DATE>=D2.FUNDING_BLOCK_START_DATE AND D1.FUNDING_BLOCK_END_DATE<=D2.FUNDING_BLOCK_END_DATE))
)--SELECT * FROM COMPLETE_OVERLAP WHERE SERVICE_CLIENT_ID=1031 AND SERVICE_ID =2776;
,PARTIAL_OVERLAP AS(--modifying dates OF partially overlapped records TO REMOVE overlap
SELECT FUNDING_BLOCK_ID,SERVICE_CLIENT_ID,SERVICE_ID,FUNDING_BLOCK_START_DATE,DERIVED_FUNDING_BLOCK_END_DATE AS FUNDING_BLOCK_END_DATE,
master,FUNDING_FREQUENCY,FUNDING_UNITS,FUNDING_QUANTITY FROM 
(SELECT DISTINCT 
    D1.FUNDING_BLOCK_ID ,D1.SERVICE_CLIENT_ID,D1.SERVICE_ID ,D1.FUNDING_BLOCK_START_DATE,D1.FUNDING_BLOCK_END_DATE,
    LEAD(D1.FUNDING_BLOCK_START_DATE) 
    OVER(PARTITION BY D1.SERVICE_CLIENT_ID ,D1.SERVICE_ID ORDER BY D1.FUNDING_BLOCK_START_DATE,D1.FUNDING_BLOCK_END_DATE)
    AS next_start_date,
CASE 
  WHEN next_start_date <= D1.FUNDING_BLOCK_END_DATE
  THEN 
LEAD(DATEADD(DAY,-1,D1.FUNDING_BLOCK_START_DATE),1,D1.FUNDING_BLOCK_END_DATE) OVER 
(PARTITION BY D1.SERVICE_CLIENT_ID ,D1.SERVICE_ID ORDER BY D1.FUNDING_BLOCK_START_DATE,D1.FUNDING_BLOCK_END_DATE)
ELSE D1.FUNDING_BLOCK_END_DATE END 
AS DERIVED_FUNDING_BLOCK_END_DATE,
D1.master,D1.FUNDING_FREQUENCY,D1.FUNDING_UNITS,D1.FUNDING_QUANTITY
    FROM DEDUPE D1 JOIN DEDUPE D2 ON D1.SERVICE_CLIENT_ID= D2.SERVICE_CLIENT_ID AND D1.SERVICE_ID=D2.SERVICE_ID
    WHERE D1.FUNDING_BLOCK_ID <>D2.FUNDING_BLOCK_ID --AND D1.FUNDING_BLOCK_ID in(1303159,919404,709689,1099984,1016789,1106833,803806,386549)
    AND D1.FUNDING_BLOCK_ID NOT IN(SELECT DISTINCT FUNDING_BLOCK_ID FROM COMPLETE_OVERLAP)--EXCLUDING subset Of complete OVERLAPS but INCLUDING correct funding blocks AS we may have PARTIAL overlap ON those
    AND D2.FUNDING_BLOCK_ID NOT IN(SELECT DISTINCT FUNDING_BLOCK_ID FROM COMPLETE_OVERLAP)
    AND (D2.FUNDING_BLOCK_START_DATE BETWEEN D1.FUNDING_BLOCK_START_DATE AND D1.FUNDING_BLOCK_END_DATE
    OR D2.FUNDING_BLOCK_END_DATE BETWEEN D1.FUNDING_BLOCK_START_DATE AND D1.FUNDING_BLOCK_END_DATE--removing condtn wrong
--OR D1.FUNDING_BLOCK_END_DATE BETWEEN D2.FUNDING_BLOCK_START_DATE AND D2.FUNDING_BLOCK_END_DATE
--OR D1.FUNDING_BLOCK_START_DATE BETWEEN D2.FUNDING_BLOCK_START_DATE AND D2.FUNDING_BLOCK_END_DATE
)))
,AUTH_UNIQUE AS --taking those auths who ARE NOT fully OR partially overlapped
    (
    SELECT DISTINCT D1.FUNDING_BLOCK_ID,D1.SERVICE_CLIENT_ID,D1.SERVICE_ID,D1.FUNDING_BLOCK_START_DATE, D1.FUNDING_BLOCK_END_DATE
    ,D1.master,D1.FUNDING_FREQUENCY,D1.FUNDING_UNITS,D1.FUNDING_QUANTITY
FROM DEDUPE D1 
WHERE D1.FUNDING_BLOCK_ID NOT IN (SELECT DISTINCT FUNDING_BLOCK_ID FROM PARTIAL_OVERLAP)
AND D1.FUNDING_BLOCK_ID NOT IN (SELECT DISTINCT FUNDING_BLOCK_ID FROM COMPLETE_OVERLAP)
)--SELECT * FROM AUTH_UNIQUE WHERE SERVICE_CLIENT_ID=1040 AND SERVICE_ID=1310;
,AUTH AS(
    SELECT * FROM PARTIAL_OVERLAP
    UNION 
    SELECT * FROM AUTH_UNIQUE
    )--SELECT * FROM FINAL_AUTH WHERE FUNDING_BLOCK_ID=131641;--WHERE SERVICE_ID=531 AND SERVICE_CLIENT_ID=1166;
,final_auth AS(SELECT * FROM AUTH WHERE FUNDING_BLOCK_START_DATE<=FUNDING_BLOCK_END_DATE)
,DATA AS(
SELECT DISTINCT
MD5(NVL(BRANCH.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION, ''Unknown'') || '' ('' || NVL(s.BRANCH_ID, ''-1'') || '')'' || ''-'' || S.SERVICE_FUNDER_ID || ''-''||  NVL(C.MASTER_ID::INT,-1) ||''-'' || AUTH.FUNDING_BLOCK_ID || ''-''|| S.SERVICE_CODE_ID || ''-'' || ''ALAYACARE'')
AS client_service_key--,FUNDING_BLOCK_ID,auth.SERVICE_ID,VISIT_COMPUTED_RATE_UNITS
, 9 AS SOURCE_SYSTEM_ID
,UPPER(NVL(TRIM(BRANCH.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(S.BRANCH_ID,-1) || '')'') AS SYSTEM_CODE          
,MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || ''-'' || 
NVL(C.BRANCH_ID,-1) || ''-'' || 
NVL(C.MASTER_ID::INT,-1)--S.SERVICE_CLIENT_ID 
 || ''-'' || 
S.SERVICE_FUNDER_ID || ''-'' || 
S.SERVICE_ID || ''-'' || NVL(VISITS.VISIT_COMPUTED_RATE_UNITS, ''Unknown'') || ''-'' || ''ALAYACARE'') AS CLIENT_ADMISSION_KEY
,MD5(NVL(TRIM(BRANCH.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(s.BRANCH_ID,-1) || '')'' || ''-'' || NVL(C.MASTER_ID::INT,-1) || ''-'' || ''ALAYACARE'') AS CLIENT_KEY
,MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(BC.BRANCH_ID,-1) || '')'' || ''-'' || 
NVL(TRIM(S.SERVICE_CODE_ID::STRING), ''Unknown'') || ''-'' || NVL(VISITS.VISIT_COMPUTED_RATE_UNITS, ''Unknown'') || ''-'' || 
NVL(CASE WHEN CHARINDEX(''HOMECARE'', REPLACE(UPPER(BC.GL_REVENUE_ACC_ACCOUNT_NAME), '' '', '''')) > 0
         THEN ''HC''
    WHEN CHARINDEX(''HOMEHEALTH'', REPLACE(UPPER(BC.GL_REVENUE_ACC_ACCOUNT_NAME), '' '', '''')) > 0
        THEN ''HH''
    ELSE ''NA'' END, ''NA'') || ''-'' || ''ALAYACARE'') AS SERVICE_KEY
,MD5(TRIM(BRANCH.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION) || '' ('' || s.BRANCH_ID || '')'' || ''-'' || s.SERVICE_FUNDER_ID || ''-'' || S.SERVICE_CODE_ID || ''-'' || NVL(BC.BILL_CODE_ID, ''-1'') || ''-'' || NVL(VISITS.VISIT_COMPUTED_RATE_UNITS, ''Unknown'') || ''-'' || ''ALAYACARE'') AS PARTNER_CONTRACT_SERVICE_KEY
, UPPER(BC.BILL_CODE_ID) AS BILL_CODE
,CASE WHEN BC.UNITS =''hours'' THEN ''Hourly'' 
               WHEN BC.UNITS = ''visits'' THEN ''Visit''
          ELSE INITCAP(BC.UNITS) END AS BILL_TYPE 
    , CASE WHEN BC.UNITS =''hours'' THEN ''Hourly'' 
          ELSE INITCAP(BC.UNITS) END AS BILL_UOM 
   , CASE WHEN VISITS.VISIT_COMPUTED_RATE_UNITS =''hours'' THEN ''Hourly'' 
               WHEN VISITS.VISIT_COMPUTED_RATE_UNITS = ''visits'' THEN ''Visit''
          ELSE ''Unknown'' END
          AS SCHEDULE_TYPE 
    , CASE WHEN VISITS.VISIT_COMPUTED_RATE_UNITS =''hours'' THEN ''Hourly'' 
               WHEN VISITS.VISIT_COMPUTED_RATE_UNITS = ''visits'' THEN ''Visit''
          ELSE ''Unknown'' END
           AS SCHEDULE_UOM 
          ,s.SERVICE_DESCRIPTION AS AUTHORIZATION_DISCIPLINE
--,FUNDING_BLOCK_START_DATE AS AUTHORIZATION_DATE
,IFF(CUTOVER.START_DATE > FUNDING_BLOCK_START_DATE, CUTOVER.START_DATE, FUNDING_BLOCK_START_DATE) AS AUTHORIZATION_DATE
,IFF(CUTOVER.START_DATE > FUNDING_BLOCK_START_DATE, CUTOVER.START_DATE, FUNDING_BLOCK_START_DATE) AS AUTHORIZATION_PERIOD_START_DATE
    --,FUNDING_BLOCK_START_DATE AS AUTHORIZATION_PERIOD_START_DATE
    --,FUNDING_BLOCK_END_DATE AS AUTHORIZATION_PERIOD_END_DATE
,IFF(CUTOVER.END_DATE < FUNDING_BLOCK_END_DATE, CUTOVER.END_DATE, FUNDING_BLOCK_END_DATE) AS AUTHORIZATION_PERIOD_END_DATE--,DERIVED_FUNDING_BLOCK_END_DATE
   ,IFNULL((DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1),0) AS EFFECTIVE_DAYS
    ,CASE WHEN FUNDING_UNITS =''hours'' THEN ''Hourly'' 
               WHEN FUNDING_UNITS = ''visits'' THEN ''Visit''
          ELSE ''Unknown'' END
          AS AUTHORIZATION_TYPE
    --,FUNDING_FREQUENCY AS authorization_uom
     ,CASE WHEN FUNDING_FREQUENCY=''weekly'' THEN ''Week''
     WHEN FUNDING_FREQUENCY=''monthly'' THEN ''Month''
     WHEN FUNDING_FREQUENCY=''total'' then ''Entire Period''
     WHEN FUNDING_FREQUENCY=''custom'' then ''custom''
     END AS  authorization_uom
    ,NULL AS AUTH_INFO 
    ,FUNDING_QUANTITY AS AUTHORIZATION_MAX_UNITS_BY_UOM
	,authorization_max_units_by_uom AS authorization_max_units_by_uom_adjusted
--
--    ,CASE WHEN FUNDING_FREQUENCY=''weekly'' AND FUNDING_UNITS=''hours'' AND FUNDING_QUANTITY>168 THEN 168
--    --WHEN FUNDING_FREQUENCY=''weekly'' AND FUNDING_UNITS=''visits'' AND FUNDING_QUANTITY>7 THEN 7
--    WHEN FUNDING_FREQUENCY=''monthly'' AND FUNDING_UNITS=''hours'' AND FUNDING_QUANTITY>744 THEN 744
--    --WHEN FUNDING_FREQUENCY=''monthly'' AND FUNDING_UNITS=''visits'' AND FUNDING_QUANTITY>31 THEN 31
--    WHEN FUNDING_FREQUENCY=''total'' AND FUNDING_UNITS=''hours'' THEN IFF(DIV0(authorization_max_units_by_uom,EFFECTIVE_DAYS)>24,
--    24*EFFECTIVE_DAYS,authorization_max_units_by_uom)
--    WHEN FUNDING_FREQUENCY=''custom'' AND FUNDING_UNITS=''hours'' THEN IFF(DIV0(authorization_max_units_by_uom,EFFECTIVE_DAYS)>24,
--    24*EFFECTIVE_DAYS,authorization_max_units_by_uom)
--    ELSE authorization_max_units_by_uom END AS authorization_max_units_by_uom_adjusted,
--    ,CASE WHEN FUNDING_FREQUENCY=''weekly'' THEN (AUTHORIZATION_MAX_UNITS_BY_UOM/ 7)
--    WHEN FUNDING_FREQUENCY=''monthly'' THEN (AUTHORIZATION_MAX_UNITS_BY_UOM/ 30)
--    WHEN FUNDING_FREQUENCY=''total'' THEN DIV0(AUTHORIZATION_MAX_UNITS_BY_UOM,(DATEDIFF(''DAY'',authorization_period_start_date,AUTHORIZATION_PERIOD_END_DATE)+1))
--    WHEN FUNDING_FREQUENCY=''custom'' THEN DIV0(AUTHORIZATION_MAX_UNITS_BY_UOM,(DATEDIFF(''DAY'',authorization_period_start_date,AUTHORIZATION_PERIOD_END_DATE)+1))
--    END AS auth_hrs_per_day
--         ,auth_hrs_per_day* EFFECTIVE_DAYS AS AUTHORIZATION_MAX_UNITS
--         ,auth_hrs_per_day* EFFECTIVE_DAYS AS AUTHORIZATION_MAX_UNITS_ADJUSTED
    ,CASE WHEN FUNDING_FREQUENCY=''weekly'' then (authorization_max_units_by_uom*(EFFECTIVE_DAYS/ 7)) 
    WHEN FUNDING_FREQUENCY=''monthly'' THEN (authorization_max_units_by_uom*MONTHS_BETWEEN(AUTHORIZATION_PERIOD_END_DATE,AUTHORIZATION_PERIOD_START_DATE))
    WHEN FUNDING_FREQUENCY=''total'' THEN AUTHORIZATION_MAX_UNITS_BY_UOM
    WHEN FUNDING_FREQUENCY=''custom'' THEN AUTHORIZATION_MAX_UNITS_BY_UOM
    END AS AUTHORIZATION_MAX_UNITS
	,AUTHORIZATION_MAX_UNITS as AUTHORIZATION_MAX_UNITS_ADJUSTED
         ,iff(current_date() between authorization_period_start_date and AUTHORIZATION_PERIOD_END_DATE, true, false)                                as active_flag
		 ,FALSE AS INVALID_FLAG
    ,FALSE  AS CANCELLED_FLAG
  ,:STR_ETL_TASK_KEY AS ETL_TASK_KEY
      ,:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
     ,convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
     CURRENT_USER                                              as ETL_INSERTED_BY,
     convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
     CURRENT_USER as ETL_LAST_UPDATED_BY,
     0 AS ETL_DELETED_FLAG   
FROM final_auth AS AUTH
LEFT JOIN DISC_PROD.ALAYACARE.SERVICE S ON AUTH.SERVICE_ID = S.SERVICE_ID
LEFT JOIN DISC_PROD.ALAYACARE.BILL_CODE BC ON BC.BILL_CODE_ID = S.SERVICE_BILL_CODE_ID
LEFT JOIN DISC_PROD.ALAYACARE.BRANCH B ON B.BRANCH_ID= S.BRANCH_ID
LEFT JOIN CLIENT C ON C.CLIENT_ID= S.SERVICE_CLIENT_ID
--LEFT JOIN (SELECT DISTINCT s.SERVICE_FUNDER_ID,v.SERVICE_CODE_ID,VISIT_COMPUTED_RATE_UNITS,v.BRANCH_ID 
--FROM DISC_PROD.ALAYACARE.VISIT v JOIN DISC_PROD.ALAYACARE.SERVICE s ON v.SERVICE_ID =s.SERVICE_ID ) VISITS 
--ON VISITS.SERVICE_CODE_ID = S.SERVICE_CODE_ID AND VISITS.BRANCH_ID = NVL(BC.BRANCH_ID,-1) AND VISITS.SERVICE_FUNDER_ID=s.SERVICE_FUNDER_ID
LEFT JOIN (SELECT DISTINCT SERVICE_CODE_ID,VISIT_COMPUTED_RATE_UNITS,BRANCH_ID FROM DISC_PROD.ALAYACARE.VISIT 
QUALIFY ROW_NUMBER()OVER(PARTITION BY SERVICE_CODE_ID,BRANCH_ID ORDER BY VISIT_COMPUTED_RATE_UNITS)=1) VISITS 
ON VISITS.SERVICE_CODE_ID = S.SERVICE_CODE_ID AND VISITS.BRANCH_ID = NVL(BC.BRANCH_ID,-1)
--LEFT JOIN (SELECT DISTINCT SERVICE_ID,SERVICE_CODE_ID,VISIT_COMPUTED_RATE_UNITS,BRANCH_ID FROM DISC_PROD.ALAYACARE.VISIT) VISITS 
--ON VISITS.SERVICE_ID = S.SERVICE_ID AND VISITS.SERVICE_CODE_ID = S.SERVICE_CODE_ID AND VISITS.BRANCH_ID = NVL(S.BRANCH_ID,-1)
--LEFT JOIN (SELECT DISTINCT SERVICE_ID,SERVICE_CODE_ID,VISIT_COMPUTED_RATE_UNITS,BRANCH_ID FROM DISC_PROD.ALAYACARE.VISIT WHERE SERVICE_ID=3888 
--QUALIFY ROW_NUMBER()OVER(PARTITION BY SERVICE_ID,SERVICE_CODE_ID,BRANCH_ID ORDER BY VISIT_COMPUTED_RATE_UNITS)=1) VISITS 
-- ON VISITS.SERVICE_CODE_ID = S.SERVICE_CODE_ID AND VISITS.BRANCH_ID = NVL(BC.BRANCH_ID,-1)
--LEFT JOIN DISC_PROD.ALAYACARE.BILL_CODE BC ON s.SERVICE_BILL_CODE_ID = BC.BILL_CODE_ID 
--LEFT JOIN DISC_PROD.ALAYACARE.VISIT VISITS ON VISITS.SERVICE_ID = S.SERVICE_ID AND VISITS.CLIENT_ID =s.SERVICE_CLIENT_ID  AND VISITS.START_AT BETWEEN 
LEFT JOIN DISC_PROD.ALAYACARE.BRANCH AS BRANCH
ON BRANCH.BRANCH_ID = s.BRANCH_ID
LEFT JOIN (SELECT DISTINCT SOURCE_SYSTEM_ID,SYSTEM_CODE,OFFICE_STATE_CODE,BRANCH_KEY,PARTNER_CONTRACT_SERVICE_KEY,START_DATE,END_DATE FROM HAH.FACT_SYSTEM_CUTOVER_DATE_2_0) AS CUTOVER
                ON CUTOVER.SOURCE_SYSTEM_ID=9
                AND UPPER(CUTOVER.SYSTEM_CODE) = UPPER(NVL(TRIM(BRANCH.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(S.BRANCH_ID,-1) || '')'')
                and NVL(CUTOVER.PARTNER_CONTRACT_SERVICE_KEY, MD5(TRIM(BRANCH.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION) || '' ('' || s.BRANCH_ID || '')'' || ''-'' || s.SERVICE_FUNDER_ID || ''-'' || S.SERVICE_CODE_ID || ''-'' || NVL(BC.BILL_CODE_ID, ''-1'') || ''-'' || NVL(VISITS.VISIT_COMPUTED_RATE_UNITS, ''Unknown'') || ''-'' || ''ALAYACARE'')) 
                = MD5(TRIM(BRANCH.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION) || '' ('' || s.BRANCH_ID || '')'' || ''-'' || s.SERVICE_FUNDER_ID || ''-'' || S.SERVICE_CODE_ID || ''-'' || NVL(BC.BILL_CODE_ID, ''-1'') || ''-'' || NVL(VISITS.VISIT_COMPUTED_RATE_UNITS, ''Unknown'') || ''-'' || ''ALAYACARE'')
INNER JOIN DISC_PROD.ALAYACARE.CONFIGURATION CONFIG  
    ON UPPER(CONFIG.SYSTEM_CODE)= UPPER(NVL(TRIM(BRANCH.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), ''Unknown'') || '' ('' || NVL(S.BRANCH_ID,-1) || '')'')
    AND CONFIG.CONFIGURATION_ACTIVE= TRUE
    AND CONFIG.SYSTEM_CODE IS NOT NULL)
    SELECT CLIENT_SERVICE_KEY,SOURCE_SYSTEM_ID,SYSTEM_CODE,PARTNER_CONTRACT_SERVICE_KEY,CLIENT_ADMISSION_KEY,CLIENT_KEY,SERVICE_KEY,
BILL_CODE,BILL_TYPE,BILL_UOM,SCHEDULE_TYPE,SCHEDULE_UOM,AUTHORIZATION_DISCIPLINE,AUTHORIZATION_DATE,
AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE,EFFECTIVE_DAYS,AUTHORIZATION_TYPE,AUTHORIZATION_UOM,AUTH_INFO,AUTHORIZATION_MAX_UNITS_BY_UOM,AUTHORIZATION_MAX_UNITS,authorization_max_units_by_uom_adjusted,
AUTHORIZATION_MAX_UNITS_ADJUSTED,ACTIVE_FLAG, INVALID_FLAG,CANCELLED_FLAG,ETL_TASK_KEY,ETL_INSERTED_TASK_KEY,
ETL_INSERTED_DATE,ETL_INSERTED_BY,ETL_LAST_UPDATED_DATE,ETL_LAST_UPDATED_BY,
ETL_DELETED_FLAG FROM DATA
WHERE AUTHORIZATION_PERIOD_START_DATE<=AUTHORIZATION_PERIOD_END_DATE;
SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
RETURN return_result;

END;

';