CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_MATRIXCARE_DIM_PARTNER_CONTRACT("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
    --*****************************************************************************************************************************
-- NAME:  MATRIXCARE_DIM_PARTNER_CONTRACT
--
-- PURPOSE: Creates one row per PARTNER_CONTRACT according to MATRIXCARE 
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 04/04/23     RAJAT SAPKAL          Initial development
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.MATRIXCARE_DIM_PARTNER_CONTRACT

WITH state AS (
SELECT DISTINCT  sc.svcc_id,COALESCE(MAPPING.OFFICE_STATE, BRANCH.BR_STATEORPROVINCE, ''IN'') AS ss
FROM  DISC_PROD.MATRIXCARE.STVHC_T_SCHEDULES AS SCH
left join DISC_PROD.matrixcare.STVHC_T_SERVICECODE sc on sc.svcc_id = SCH_SERVICECODEID
LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_BRANCHES AS BRANCH ON BRANCH.BR_ID = SCH.SCH_BRANCHID 
LEFT JOIN DISC_PROD."STAGE".MATRIXCARE_OFFICE_MAPPING AS MAPPING 
		ON MAPPING.BR_ID = BRANCH.BR_ID
)
,PAYER_SERVICES AS (
	SELECT DISTINCT FINAL_LIST.PAYERID, FINAL_LIST.SERVICECODEID, 
		IFF(MAX(FINAL_LIST.UNITFLAG_RANK) OVER (PARTITION BY FINAL_LIST.PAYERID, FINAL_LIST.SERVICECODEID) = 1, FIRST_VALUE(FINAL_LIST.UNITFLAG) OVER (PARTITION BY FINAL_LIST.PAYERID, FINAL_LIST.SERVICECODEID ORDER BY 1), NULL) AS UNITFLAG, -- Take the UnitFlag only if there is one unique value for all payer + service combinations
		IFF(MAX(FINAL_LIST.SERVICECODE_RANK) OVER (PARTITION BY FINAL_LIST.PAYERID) = 1, TRUE, FALSE) AS HAS_SINGLE_SERVICE_CODE,
		MAX(FINAL_LIST.ETL_LAST_UPDATED_DATE) OVER (PARTITION BY FINAL_LIST.PAYERID, FINAL_LIST.SERVICECODEID) AS ETL_LAST_UPDATED_DATE
	FROM (
		SELECT DISTINCT LIST.PAYERID, LIST.SERVICECODEID, LIST.UNITFLAG,
			DENSE_RANK() OVER (PARTITION BY LIST.PAYERID, LIST.SERVICECODEID ORDER BY LIST.UNITFLAG) AS UNITFLAG_RANK,
			DENSE_RANK() OVER (PARTITION BY LIST.PAYERID ORDER BY LIST.SERVICECODEID) AS SERVICECODE_RANK, -- Used to determine if there are multiple services
			MAX(LIST.ETL_LAST_UPDATED_DATE) OVER (PARTITION BY LIST.PAYERID, LIST.SERVICECODEID) AS ETL_LAST_UPDATED_DATE
		FROM (
			-- PayerServices setup
			SELECT PAYERSERVICES.PAYSVC_PAYERID AS PAYERID, 
				PAYERSERVICES.PAYSVC_SERVICECODEID AS SERVICECODEID,
				NULLIF(PAYERSERVICES.PAYSVC_DEFAULTBILLRATEUNITFLAG, 0) AS UNITFLAG,
				NVL(MAX(PAYERSERVICES.ETL_LAST_UPDATED_DATE), ''1/1/1900'') AS ETL_LAST_UPDATED_DATE
			FROM DISC_PROD.MATRIXCARE.STVHC_T_PAYERSERVICES AS PAYERSERVICES
			GROUP BY PAYERSERVICES.PAYSVC_PAYERID, PAYERSERVICES.PAYSVC_SERVICECODEID, NULLIF(PAYERSERVICES.PAYSVC_DEFAULTBILLRATEUNITFLAG, 0)
			UNION
			-- Schedules: This logic is coming from MatrixCare_Fact_Visit
			SELECT COALESCE(
					SCHEDULEPAYERS.SCHCP_PAYERID, 
					CLIENTPAYERS.CLIPAY_PAYERID, 
					INVOICEDETAILS.INVD_PAYERID,
					AUTHORIZATIONS.AUTH_PAYERID,
					PAYERBRANCHES.PAYBR_PAYERID) AS PAYERID,
				SCHEDULES.SCH_SERVICECODEID AS SERVICECODEID,
				NULLIF(SCHEDULES.SCH_BILLRATEUNITFLAG, 0) AS UNITFLAG,
				GREATEST(
					NVL(MAX(SCHEDULES.ETL_LAST_UPDATED_DATE), ''1/1/1900''), 
					NVL(MAX(CLIENTPAYERS.ETL_LAST_UPDATED_DATE), ''1/1/1900''),
					NVL(MAX(INVOICEDETAILS.ETL_LAST_UPDATED_DATE), ''1/1/1900''),
					NVL(MAX(AUTHORIZATIONS.ETL_LAST_UPDATED_DATE), ''1/1/1900''),
					NVL(MAX(PAYERBRANCHES.ETL_LAST_UPDATED_DATE), ''1/1/1900'')) AS ETL_LAST_UPDATED_DATE
			FROM DISC_PROD.MATRIXCARE.STVHC_T_SCHEDULES AS SCHEDULES
			LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_SCHEDULEPAYERS AS SCHEDULEPAYERS
				ON SCHEDULEPAYERS.SCHCP_SCHEDULEID = SCHEDULES.SCH_ID
			LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_CLIENTPAYERS AS CLIENTPAYERS
				ON SCHEDULEPAYERS.SCHCP_ID IS NULL 
					AND CLIENTPAYERS.CLIPAY_CLIENTID = SCHEDULES.SCH_CLIENTID 
			LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_INVOICEDETAILS AS INVOICEDETAILS
				ON SCHEDULEPAYERS.SCHCP_ID IS NULL 
					AND CLIENTPAYERS.CLIPAY_ID IS NULL
					AND INVOICEDETAILS.INVD_SCHEDULEID = SCHEDULES.SCH_ID
			LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_AUTHORIZATION AS AUTHORIZATIONS
				ON SCHEDULEPAYERS.SCHCP_ID IS NULL 
					AND CLIENTPAYERS.CLIPAY_ID IS NULL 
					AND INVOICEDETAILS.INVD_ID IS NULL
					AND AUTHORIZATIONS.AUTH_ADMISSIONID = SCHEDULES.SCH_ADMISSIONID 
			LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_PAYERBRANCHES AS PAYERBRANCHES
				ON SCHEDULEPAYERS.SCHCP_ID IS NULL 
					AND CLIENTPAYERS.CLIPAY_ID IS NULL 
					AND INVOICEDETAILS.INVD_ID IS NULL 
					AND AUTHORIZATIONS.AUTH_ID IS NULL
					AND PAYERBRANCHES.PAYBR_BRANCH_ID = SCHEDULES.SCH_BRANCHID 
			GROUP BY 1, 2, 3
			UNION
			-- Invoices
			SELECT INVOICEHEADER.INVH_PAYERID AS PAYERID, 
				INVOICEDETAILS.INVD_SERVICECODEID AS SERVICECODEID,
				NULLIF(INVOICEDETAILS.INVD_CHARGEUNITFLAG, 0) AS UNITFLAG,
				GREATEST(NVL(MAX(INVOICEHEADER.ETL_LAST_UPDATED_DATE), ''1/1/1900''), NVL(MAX(INVOICEDETAILS.ETL_LAST_UPDATED_DATE), ''1/1/1900'')) AS ETL_LAST_UPDATED_DATE		
			FROM DISC_PROD.MATRIXCARE.STVHC_T_INVOICEHEADER AS INVOICEHEADER
			JOIN DISC_PROD.MATRIXCARE.STVHC_T_INVOICEDETAILS AS INVOICEDETAILS
				ON INVOICEDETAILS.INVD_INVHID = INVOICEHEADER.INVH_ID
			GROUP BY INVOICEHEADER.INVH_PAYERID, INVOICEDETAILS.INVD_SERVICECODEID, NULLIF(INVOICEDETAILS.INVD_CHARGEUNITFLAG, 0)
			UNION 
			-- Authorizations
			SELECT AUTHORIZATIONS.AUTH_PAYERID AS PAYERID, 
				AUTHORIZATIONS.AUTH_SERVICECODEID AS SERVICECODEID,
				NULLIF(AUTHORIZATIONS.AUTH_UNITFLAG, 0) AS UNITFLAG,
				NVL(MAX(AUTHORIZATIONS.ETL_LAST_UPDATED_DATE), ''1/1/1900'') AS ETL_LAST_UPDATED_DATE				
			FROM DISC_PROD.MATRIXCARE.STVHC_T_AUTHORIZATION AS AUTHORIZATIONS
			GROUP BY AUTHORIZATIONS.AUTH_PAYERID, AUTHORIZATIONS.AUTH_SERVICECODEID, NULLIF(AUTHORIZATIONS.AUTH_UNITFLAG, 0)
		) AS LIST
	) AS FINAL_LIST
)
SELECT DISTINCT MD5(''MATRIXCARE'' || ''-'' || COALESCE(s.ss,b.BR_STATEORPROVINCE) || ''-'' || P.PAY_ID || ''-'' || ''MATRIXCARE'') AS PARTNER_CONTRACT_KEY,       --payer,partner and contract are same which is payer.
7 AS SOURCE_SYSTEM_ID,
	''MATRIXCARE'' AS SYSTEM_CODE,
    b.BR_STATEORPROVINCE AS STATE,
	MD5(''MATRIXCARE'' || ''-'' || P.PAY_ID || ''-'' || ''MATRIXCARE'') AS PARTNER_KEY,
	NVL(P.PAY_ID,-1) AS PARTNER_CODE,
    IFNULL(P.PAY_NAME,''UNKNOWN'') AS PARTNER_NAME,
    NVL(P.PAY_ID,-1) AS CONTRACT_CODE,
    IFNULL(P.PAY_NAME,''UNKNOWN'') AS CONTRACT_NAME,
    PAY_ACTIVE AS ACTIVE_FLAG,
	TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS START_DATE,
	TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS END_DATE
		, :STR_ETL_TASK_KEY AS ETL_TASK_KEY
	 	, :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
	    , Convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
		, CURRENT_USER AS ETL_INSERTED_BY
		, Convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
		, CURRENT_USER AS ETL_LAST_UPDATED_BY
	 	, 0 AS ETL_DELETED_FLAG
FROM DISC_PROD.MATRIXCARE.STVHC_T_PAYERS p 
LEFT JOIN DISC_PROD.MATRIXCARE.STVHC_T_BRANCHES b ON b.BR_ID = p.PAY_BRANCHID
LEFT JOIN PAYER_SERVICES AS PAYER_SERVICES
		ON PAYER_SERVICES.PAYERID = p.PAY_ID
LEFT JOIN state s ON PAYER_SERVICES.SERVICECODEID = s.svcc_id;
	
return ''SUCCESS'';
END;
';