CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_COASTALGP_DIM_PAYCODE_MAPPING("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result varchar(1000);
BEGIN

--*****************************************************************************************************************************
-- NAME: COASTALGP_DIM_PAYCODE_MAPPING
--
-- PURPOSE: Creates one row for each database (DB), paycode and assigns a paycode category according to Great Plains
--
-- DEVELOPMENT LOG:
-- DATE				AUTHOR                NOTES:
-- ----------		----------------- 	  -------------------------------------------------------------------------------------        
-- 08/02/2022		Aditya Shukla 		  Initial Development
--*****************************************************************************************************************************
--

INSERT OVERWRITE INTO STAGE.COASTALGP_DIM_PAYCODE_MAPPING
WITH PAYCODE_DESCRIPTION AS (
	SELECT CASE WHEN TRIM(wm.$1) =''Altrus'' THEN ''ALTRU''
	WHEN TRIM(wm.$1) =''Coastal'' THEN ''SHC'' ELSE NULL END
	AS DB,
	WM.$2 AS PAYCODE,WM.$3 AS Description
FROM @DW_PROD.Stage.AZStage/Jigar_test/paycode (file_format => DW_PROD."PUBLIC".CSV_Format)wm
),
PAYCODE_USAGE_DATES AS (
	SELECT 6 AS Source_System_ID,trim(DB) as DB,
	upper(trim(PAYCODE)) AS Pay_Code,
	MIN( CHECKDATE) AS First_Used_Date,
	MAX( CHECKDATE) AS Most_Recent_Used_Date,
	CAST( COUNT( DISTINCT EMPLOYEEID) AS INTEGER) AS Number_Employees_Used
FROM DISC_PROD.COSTALSYNCDATA.GPALLPAYCHECKDETAILSBASE
GROUP BY DB, Pay_Code
)
SELECT DISTINCT
	MD5(''11'' || D.DB || STATECODE || D.PAYCODE || PAYCODETYPE || ''-'' || ''COSTALGP'') as PAYCODE_MAPPING_KEY,
	11 as SOURCE_SYSTEM_ID ,
	UPPER(TRIM(D.DB)) as SYSTEM_CODE ,
	UPPER(TRIM(STATECODE)) as STATE_CODE,
	UPPER(TRIM( D.PAYCODE)) as PAY_CODE,
	UPPER(TRIM(COALESCE(p.DESCRIPTION,DS.Description))) as PAY_CODE_DESCRIPTION ,
	PAYCODETYPE as PAY_CODE_TYPE , --USE RECORD_TYPE
	CASE
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%MEDIC%INS%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%VOL%LIFE%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%LIFE%INS%'' OR UPPER(PAY_CODE_DESCRIPTION) = ''STD'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%DEDUCT%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%AD&D%'' OR UPPER(PAY_CODE_DESCRIPTION) = ''LTD'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%HSA%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%CRITIC%I%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%VISION%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%FLEX%SPEND%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%DISABILITY%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%401%K%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%GARNISH%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%DENTAL%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%HOSP%INDEM%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%ACCIDENT%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%HEALTH%INS%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%FSA%'' THEN ''Benefits & Deductions''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%TRAVEL%TIME%'' THEN ''Travel Time & Mileage''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%OVER%TIME%'' THEN ''Overtime''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%VAC%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%PTO%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%BEREAV%'' THEN ''PTO''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''RN %'' /*varify*/ OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%RESPITE%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%HOME%'' THEN ''Regular Pay''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%REIMB%'' THEN ''Reimbursement''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%SUPERV%'' THEN ''Supervisor''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%INSERV%'' THEN ''Training''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%ON%CALL%'' THEN ''On-Call''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%COVID%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%RETRO%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%SEVER%'' THEN ''Adjustment''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%BONUS%'' THEN ''Bonus''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%HOLID%'' THEN ''Holiday''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%DAILY%'' THEN ''Daily''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%ASSES%'' THEN ''Assessment''
	END AS PAY_CODE_CATEGORY ,
	NULL AS FINANCE_CATEGORY , --NULL
	NULL AS REVENUE_CATEGORY , ---NULL
	NULL AS REVENUE_SUBCATEGORY_CODE , --NULL
	NULL AS REVENUE_SUBCATEGORY_NAME , --NULL
	U.First_Used_Date as FIRST_USED_DATE , -- paycode_usage_dates
	U.Most_Recent_Used_Date as MOST_RECENT_USED_DATE , --paycode_usage_dates
	U.Number_Employees_Used as NUMBER_EMPLOYEES_USED , --paycode_usage_dates
	CAST(CASE WHEN DATEADD(''YEAR'', 1, U.Most_Recent_Used_Date) >= CURRENT_DATE THEN ''TRUE'' ELSE FALSE END AS Boolean) AS ACTIVE_FLAG,
	NULL AS ADMIN_PAY_RATE_FLAG , -- NULL PAYCODE_ADMIN_USAGE -- FIELD_WORKER_FLAG CAN USE TO IDENTIFY ADMIN AND FIELD WORKER --NULL
	NULL AS FIELD_PAY_RATE_FLAG , -- NULL PAYCODE_FIELD_USAGE
	NULL AS INCLUDE_SALARY_PAYRATE_CALC_FLAG , --SALARY_HOURS_USAGE
	NULL AS INCLUDE_FULL_TIME_HOURS_CALC_FLAG , --SALARY_HOURS_USAGE -- USE TYPE COLUMN
	
   :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
   :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
       
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	CURRENT_USER as ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
	CURRENT_USER as ETL_LAST_UPDATED_BY,
	0 as ETL_DELETED_FLAG
FROM DISC_PROD.COSTALSYNCDATA.GPALLPAYCHECKDETAILSBASE D
LEFT JOIN DISC_PROD.COSTALSYNCDATA.GPALLPAYCODESBASE p ON
upper(trim(D.DB))=upper(trim(p.DB)) AND upper(trim(D.PAYCODE)) = upper(trim(p.PAY_CODE))
LEFT JOIN PAYCODE_DESCRIPTION DS ON
upper(trim(DS.DB))=upper(trim(D.DB)) AND upper(trim(DS.PAYCODE)) = upper(trim(D.PAYCODE))
LEFT JOIN PAYCODE_USAGE_DATES U ON upper(trim(U.DB))=upper(trim(D.DB)) AND upper(trim(U.Pay_Code)) = upper(trim(D.PAYCODE));

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;
';