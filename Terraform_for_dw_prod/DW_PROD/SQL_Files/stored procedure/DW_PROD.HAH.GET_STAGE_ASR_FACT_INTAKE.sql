CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_ASR_FACT_INTAKE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
                BEGIN
--*****************************************************************************************************************************
-- NAME:  ASR_FACT_INTAKE
--
-- PURPOSE: Creates one row per intake according to ASR
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 12/29/2021	Jay Prajapati			Initial Development
-- 04/04/2022	Abhishek Sunil			Revised logic
-- 05/06/2022	Abhishek Sunil			Leveraged Dedupe and added 5 new fields for AUTH detail
-- 07/06/2022	Abhishek Sunil			Redesigned and added logic to generate possible intakes based on PlanOfService and its recurrences
-- 31/10/2023   Pooja Bagane		    Modified Intake key	                
--*****************************************************************************************************************************
INSERT OVERWRITE INTO DW_PROD.STAGE.ASR_FACT_INTAKE
WITH MIN_MAX_VISIT AS (
	SELECT 
		V.SERVICEVISITID, 
		MIN(TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')) AS STARTPOINT, 
		MAX(TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')) AS ENDPOINT 
	FROM DISC_PROD.ASR.ASR_VISITS V
	LEFT JOIN DISC_PROD.ASR.BRANCH_MAPPING BR ON V.LOCATIONID = BR.OLD_LOCATION_ID
	WHERE NVL(BR.IS_ASR_BRANCH,TRUE) = TRUE
	GROUP BY SERVICEVISITID
) 
-- FOR WEEKLY AND BY_REQUEST RECURRENCE CALCULATION
, WEEKLY_INTAKES AS (
	SELECT
		PL.SERVICEVISITID,
		D.CALENDAR_DATE,
		D.DAY_NAME,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
		PL.CUSTOMERID,
		PL.VISITSTARTDATE,
		PL.VISITENDDATE,
		PL.SERVICETYPE,
		PL.HOURSASSIGNED,
		PL.WEEKDAY,
		PL.RECURRENCETYPE,
		NULL AS PICKER
	FROM
		DISC_PROD.ASR.ASR_PLANOFSERVICE PL
	LEFT JOIN
		MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
	JOIN DW_PROD.HAH.DIM_DATE D ON
		D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
								ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
							END
		AND D.CALENDAR_DATE <= CASE 
									WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
									WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 14 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 2 weeks ago THEN LOOKUP TILL 14days FOR a possible visit
									ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
								END
		AND CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END = D.DAY_OF_WEEK
	WHERE
		PL.RECURRENCETYPE IN (0,1,7)
)
-- FOR BIWEEKLY, Every 14 Days, Every 3 Weeks, Every 4 Weeks RECURRENCE CALCULATION
, BIWEEKLY_TO_EVERY4WEEK_INTAKES AS (
	SELECT
		PL.SERVICEVISITID,
		D.CALENDAR_DATE,
		D.DAY_NAME,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
		PL.CUSTOMERID,
		PL.VISITSTARTDATE,
		PL.VISITENDDATE,
		PL.SERVICETYPE,
		PL.HOURSASSIGNED,
		PL.WEEKDAY,
		PL.RECURRENCETYPE,
		ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID ORDER BY D.CALENDAR_DATE) AS PICKER
	FROM
		DISC_PROD.ASR.ASR_PLANOFSERVICE PL
	LEFT JOIN
		MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
	JOIN DW_PROD.HAH.DIM_DATE D ON
		D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
								ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
							END
		AND D.CALENDAR_DATE <= CASE 
									WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
									WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 31 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
									ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
								END
		AND CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END = D.DAY_OF_WEEK
	WHERE
		PL.RECURRENCETYPE IN (2,6,9,13)
)
-- FOR MONTHLY RECURRENCE CALCULATION
, MONTHLY_INTAKES AS (
	SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE, PICKER FROM (
		SELECT
			PL.SERVICEVISITID,
			D.CALENDAR_DATE,
			D.DAY_NAME,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
			PL.CUSTOMERID,
			PL.VISITSTARTDATE,
			PL.VISITENDDATE,
			PL.SERVICETYPE,
			PL.HOURSASSIGNED,
			PL.WEEKDAY,
			PL.RECURRENCETYPE,
			ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID, DATE_TRUNC(MONTH,D.CALENDAR_DATE) ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
			DISC_PROD.ASR.ASR_PLANOFSERVICE PL
		LEFT JOIN
			MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
		JOIN DW_PROD.HAH.DIM_DATE D ON
			D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
									ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
								END
			AND D.CALENDAR_DATE <= CASE 
										WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
										WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 31 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
										ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
									END
			AND CASE
					WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
					WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
					WHEN PL.WEEKDAY IS NULL THEN 1
					ELSE PL.WEEKDAY
				END = D.DAY_OF_WEEK
		WHERE
			PL.RECURRENCETYPE = 3)
	WHERE PICKER = 1
)
-- FOR BIMONTHLY RECURRENCE CALCULATION
, BIMONTHLY_INTAKES AS (
	SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE, PICKER, SKIPPER FROM (
		SELECT
			PL.SERVICEVISITID,
			D.CALENDAR_DATE,
			D.DAY_NAME,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
			PL.CUSTOMERID,
			PL.VISITSTARTDATE,
			PL.VISITENDDATE,
			PL.SERVICETYPE,
			PL.HOURSASSIGNED,
			PL.WEEKDAY,
			PL.RECURRENCETYPE,
			ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID, DATE_TRUNC(MONTH,D.CALENDAR_DATE) ORDER BY D.CALENDAR_DATE) AS PICKER,
			DENSE_RANK() OVER (PARTITION BY PL.SERVICEVISITID ORDER BY D.YEAR_MONTH) AS SKIPPER
		FROM
			DISC_PROD.ASR.ASR_PLANOFSERVICE PL
		LEFT JOIN
			MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
		JOIN DW_PROD.HAH.DIM_DATE D ON
			D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
									ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
								END
			AND D.CALENDAR_DATE <= CASE 
										WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
										WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 90 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
										ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
									END
			AND CASE
					WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
					WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
					WHEN PL.WEEKDAY IS NULL THEN 1
					ELSE PL.WEEKDAY
				END = D.DAY_OF_WEEK
		WHERE
			PL.RECURRENCETYPE = 8)
	WHERE PICKER = 1 AND SKIPPER % 2 = 1
)
-- FOR SEMI-ANNUAL and Every 6 MONTHS RECURRENCE CALCULATION (Based on assumption, there''s no data to verify this!)
, SEMI_ANNUAL_INTAKES AS (
	SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE, PICKER FROM (
		SELECT
			PL.SERVICEVISITID,
			D.CALENDAR_DATE,
			D.DAY_NAME,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
			PL.CUSTOMERID,
			PL.VISITSTARTDATE,
			PL.VISITENDDATE,
			PL.SERVICETYPE,
			PL.HOURSASSIGNED,
			PL.WEEKDAY,
			PL.RECURRENCETYPE,
			ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID, DATE_TRUNC(MONTH,D.CALENDAR_DATE) ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
			DISC_PROD.ASR.ASR_PLANOFSERVICE PL
		LEFT JOIN
			MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
		JOIN DW_PROD.HAH.DIM_DATE D ON
			D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
									ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
								END
			AND D.CALENDAR_DATE <= CASE 
										WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
										WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(MONTH,V.ENDPOINT,LAST_DAY(GETDATE())) >= 12 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
										ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
									END
			AND CASE
					WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
					WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
					WHEN PL.WEEKDAY IS NULL THEN 1
					ELSE PL.WEEKDAY
				END = D.DAY_OF_WEEK
		WHERE
			PL.RECURRENCETYPE IN (4,15))
	WHERE PICKER % 6 = 1
) 
-- FOR ANNUAL RECURRENCE CALCULATION  (Based on assumption, there''s no data to verify this!)
, ANNUAL_INTAKES AS ( 
	SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE, PICKER FROM (
		SELECT
			PL.SERVICEVISITID,
			D.CALENDAR_DATE,
			D.DAY_NAME,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
			PL.CUSTOMERID,
			PL.VISITSTARTDATE,
			PL.VISITENDDATE,
			PL.SERVICETYPE,
			PL.HOURSASSIGNED,
			PL.WEEKDAY,
			PL.RECURRENCETYPE,
			ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID, DATE_TRUNC(YEAR,D.CALENDAR_DATE) ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
			DISC_PROD.ASR.ASR_PLANOFSERVICE PL
		LEFT JOIN
			MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
		JOIN DW_PROD.HAH.DIM_DATE D ON
			D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
									ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
								END
			AND D.CALENDAR_DATE <= CASE 
										WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
										WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(MONTH,V.ENDPOINT,LAST_DAY(GETDATE())) >= 24 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
										ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
									END
			AND CASE
					WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
					WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
					WHEN PL.WEEKDAY IS NULL THEN 1
					ELSE PL.WEEKDAY
				END = D.DAY_OF_WEEK
		WHERE
			PL.RECURRENCETYPE =5)
	WHERE PICKER % 12 = 1
)
--FOR Every 5 WEEKS and Every 6 WEEKS RECURRENCE CALCULATION
, EVERY_FIVE_TO_SIX_WEEKS_INTAKES AS (
	SELECT
		PL.SERVICEVISITID,
		D.CALENDAR_DATE,
		D.DAY_NAME,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
		PL.CUSTOMERID,
		PL.VISITSTARTDATE,
		PL.VISITENDDATE,
		PL.SERVICETYPE,
		PL.HOURSASSIGNED,
		PL.WEEKDAY,
		PL.RECURRENCETYPE,
		ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID ORDER BY D.CALENDAR_DATE) AS PICKER
	FROM
		DISC_PROD.ASR.ASR_PLANOFSERVICE PL
	LEFT JOIN
		MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
	JOIN DW_PROD.HAH.DIM_DATE D ON
		D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
								ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
							END
		AND D.CALENDAR_DATE <= CASE 
									WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
									WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 50 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
									ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
								END
		AND CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END = D.DAY_OF_WEEK
	WHERE
		PL.RECURRENCETYPE IN (10,11)
)
--FOR PLANS RECURRING ONCE
, ONE_TIME_INTAKES AS (
	SELECT
		PL.SERVICEVISITID,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
		DERIVED_VISIT_START_DATE AS CALENDAR_DATE,
		DAYNAME(CALENDAR_DATE) AS DAY_NAME,
		PL.CUSTOMERID,
		PL.VISITSTARTDATE,
		PL.VISITENDDATE,
		PL.SERVICETYPE,
		PL.HOURSASSIGNED,
		PL.WEEKDAY,
		PL.RECURRENCETYPE,
		NULL AS PICKER
	FROM
		DISC_PROD.ASR.ASR_PLANOFSERVICE PL
	LEFT JOIN
		MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
	WHERE
		PL.RECURRENCETYPE IN (12)
)
-- FOR Every 90 Days RECURRENCE CALCULATION
, EVERY_NINETY_DAYS_INTAKES AS (
	SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE, PICKER FROM (
		SELECT
			PL.SERVICEVISITID,
			D.CALENDAR_DATE,
			D.DAY_NAME,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
			PL.CUSTOMERID,
			PL.VISITSTARTDATE,
			PL.VISITENDDATE,
			PL.SERVICETYPE,
			PL.HOURSASSIGNED,
			PL.WEEKDAY,
			PL.RECURRENCETYPE,
			ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
			DISC_PROD.ASR.ASR_PLANOFSERVICE PL
		LEFT JOIN
			MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
		JOIN DW_PROD.HAH.DIM_DATE D ON
			D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
									ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
								END
			AND D.CALENDAR_DATE <= CASE 
										WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
										WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 190 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 2 weeks ago THEN LOOKUP TILL 14days FOR a possible visit
										ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
									END
			AND CASE
					WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
					WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
					WHEN PL.WEEKDAY IS NULL THEN 1
					ELSE PL.WEEKDAY
				END = D.DAY_OF_WEEK
		WHERE
			PL.RECURRENCETYPE IN (14))
	WHERE PICKER % 90 = 1
)
,TOTAL_INTAKES AS (
	SELECT * FROM (
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM WEEKLY_INTAKES -- 0, 1 AND 7
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM BIWEEKLY_TO_EVERY4WEEK_INTAKES WHERE RECURRENCETYPE IN (2,13) AND PICKER % 2 = 1 --2 AND 13
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM BIWEEKLY_TO_EVERY4WEEK_INTAKES WHERE RECURRENCETYPE IN (6) AND PICKER % 3 = 1 --6
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM BIWEEKLY_TO_EVERY4WEEK_INTAKES WHERE RECURRENCETYPE IN (9) AND PICKER % 4 = 1 --9
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM MONTHLY_INTAKES --3
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM BIMONTHLY_INTAKES --8
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM SEMI_ANNUAL_INTAKES --4 AND 15
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM ANNUAL_INTAKES --5
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM EVERY_FIVE_TO_SIX_WEEKS_INTAKES WHERE RECURRENCETYPE IN (10) AND PICKER % 5 = 1 --10
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM EVERY_FIVE_TO_SIX_WEEKS_INTAKES WHERE RECURRENCETYPE IN (11) AND PICKER % 6 = 1 --11
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM ONE_TIME_INTAKES --12
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, RECURRENCETYPE 
		FROM EVERY_NINETY_DAYS_INTAKES --14
	) WHERE DERIVED_VISIT_START_DATE >= ''2011-01-01'' -- ASR in Prime was started IN 2011-01-01
)
, CLIENT AS
(
	SELECT * FROM 
	(
		SELECT MASTER_ID, CUSTOMERID
		FROM DISC_DEDUPE_PROD.ASR.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT MASTER_ID, CUSTOMERID
		FROM DISC_DEDUPE_PROD.ASR.CLIENT_MATCH_LIST 
		WHERE CUSTOMERID NOT IN (SELECT CUSTOMERID FROM DISC_DEDUPE_PROD.ASR.CLIENT_MASTER_LIST) 
	)
)
, SCHEDULE_BY_MONTH AS (
	SELECT
		COALESCE(TRIM(CLIENT.MASTER_ID), TRIM(P.CUSTOMERID)) :: NUMBER AS CLIENT_NUMBER,
		DATE_TRUNC(MONTH,P.CALENDAR_DATE) AS REPORT_DATE,
		IFNULL(TRIM(BR.NEW_LOCATION_ID),''UNKNOWN'') AS BRANCH_ID,
		IFNULL(TRIM(BR.NEW_LOCATION_NAME),''UNKNOWN'') AS BRANCH_NAME,
		TRIM(P.SERVICETYPE) AS CONTRACT_CODE,
		SUM(P.HOURSASSIGNED) AS HOURS_AUTHORIZED,
		MAX(P.DERIVED_VISIT_START_DATE) AS REAUTH_DATE
	FROM TOTAL_INTAKES P
	LEFT JOIN DISC_PROD.ASR.ASR_CUSTOMERS CUST ON TRIM(P.CUSTOMERID) = TRIM(CUST.CUSTOMERID)
	LEFT JOIN CLIENT ON TRIM(CUST.CUSTOMERID) = TRIM(CLIENT.CUSTOMERID)
	LEFT JOIN DISC_PROD.ASR.ASR_LOCATIONS LOC ON TRIM(CUST.LOCATIONID) = TRIM(LOC.LOCATIONID)
	JOIN DISC_PROD.ASR.BRANCH_MAPPING BR ON LOC.LOCATIONID = BR.OLD_LOCATION_ID 
	WHERE P.DERIVED_VISIT_START_DATE IS NOT NULL AND NVL(BR.IS_ASR_BRANCH,TRUE) = TRUE
	GROUP BY CLIENT_NUMBER, REPORT_DATE, BRANCH_ID, BRANCH_NAME, CONTRACT_CODE
) 
, CASE_WORKERS AS (
	SELECT
		CML.MASTER_ID,
		CML.CASEWORKERID,
		TRIM(CW.LASTNAME) || '' '' || TRIM(CW.FIRSTNAME) AS CASE_WORKER_NAME
	FROM
		DISC_DEDUPE_PROD.ASR.CLIENT_MASTER_LIST CML
	LEFT JOIN
		DISC_PROD.ASR.ASR_CASEWORKERS CW ON TRIM(CW.CASEWORKERID) = TRIM(CML.CASEWORKERID)
)
,SERVICE_DATES AS 
(
	SELECT 
		COALESCE(TRIM(C.MASTER_ID),TRIM(V.CUSTOMERID)) AS UNIQUE_ID,
		V.SERVICETYPE,
		MIN(TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')) AS FIRST_SERVICE_DATE,
		MAX(TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')) AS LAST_SERVICE_DATE
	FROM 
		CLIENT C
	LEFT JOIN 
		DISC_PROD.ASR.ASR_VISITS V ON TRIM(C.CUSTOMERID) = TRIM(V.CUSTOMERID)
	LEFT JOIN 
		DISC_PROD.ASR.BRANCH_MAPPING BR ON V.LOCATIONID = BR.OLD_LOCATION_ID
	WHERE NVL(BR.IS_ASR_BRANCH,TRUE) = TRUE AND TRIM(V.ISCANCELLED) = ''False''
	GROUP BY UNIQUE_ID, V.SERVICETYPE
) 
, AUTH_DATES AS 
(
	SELECT 
		COALESCE(TRIM(CLIENT.MASTER_ID),TRIM(RAW.ID)) AS UNIQUE_ID,
		SERVICETYPE,
		MAX(AUTH_START_DATE) AS LATEST_AUTH_START_DATE,
		MAX(AUTH_END_DATE) AS LATEST_AUTH_END_DATE
	FROM (
		SELECT DISTINCT
			TRIM(P.CUSTOMERID) AS ID,
			P.SERVICETYPE,
			P.DERIVED_VISIT_START_DATE AS AUTH_START_DATE,
			P.DERIVED_VISIT_END_DATE AS AUTH_END_DATE
		FROM
			TOTAL_INTAKES P
		JOIN
		(
			SELECT
				TRIM(P.CUSTOMERID) AS ID,
				P.SERVICETYPE,
				MAX(P.DERIVED_VISIT_START_DATE) AS LATEST_AUTH_START_DATE
			FROM
				TOTAL_INTAKES P
			WHERE P.DERIVED_VISIT_START_DATE IS NOT NULL
			GROUP BY ID, P.SERVICETYPE 
		) T ON TRIM(ID) = T.ID AND P.SERVICETYPE = T.SERVICETYPE AND P.DERIVED_VISIT_START_DATE = T.LATEST_AUTH_START_DATE
		WHERE P.DERIVED_VISIT_START_DATE IS NOT NULL
	) RAW
	JOIN CLIENT ON TRIM(CLIENT.CUSTOMERID) = TRIM(RAW.ID)
	GROUP BY UNIQUE_ID, SERVICETYPE
)
SELECT
	--MD5(''PRIME'' || ''-'' || SBM.REPORT_DATE || SBM.BRANCH_ID || SBM.CLIENT_NUMBER || SBM.CONTRACT_CODE || ''-'' || ''ASR'') AS INTAKE_KEY,
MD5(''PRIME'' || ''-'' || SBM.REPORT_DATE || ''-'' || SBM.BRANCH_ID || ''-'' || SBM.CLIENT_NUMBER || ''-'' || SBM.CONTRACT_CODE || ''-'' || ''ASR'') AS INTAKE_KEY,
	SBM.REPORT_DATE AS REPORT_DATE,
	MD5(''PRIME'' || ''-'' || SBM.BRANCH_ID || ''-'' || ''ASR'') AS BRANCH_KEY, 
	MD5(''PRIME'' || ''-'' || SBM.CLIENT_NUMBER || ''-'' || ''ASR'') AS CLIENT_KEY, 
	MD5(''PRIME'' || ''-'' || SBM.CONTRACT_CODE || ''-'' || ''ASR'') AS CONTRACT_KEY, 
	13 AS SOURCE_SYSTEM_ID, 
    SBM.REAUTH_DATE AS REAUTHORIZED_DATE,
	NULL AS PRE_AUTH_NUMBER,
	FIRST_SERVICE_DATE AS BEGIN_SERVICE_DATE,
	LAST_SERVICE_DATE AS END_SERVICE_DATE,
	AD.LATEST_AUTH_START_DATE AS LATEST_AUTH_BEGIN_DATE,
	AD.LATEST_AUTH_END_DATE AS LATEST_AUTH_END_DATE,
	SBM.BRANCH_NAME AS BRANCH_NAME,
	SBM.CLIENT_NUMBER AS CLIENT_NUMBER, 
	SBM.CONTRACT_CODE AS CONTRACT_CODE, 
	NULL AS BILL_RATE,
	''PRIME'' AS SYSTEM_CODE, 
	CASE_WORKER_NAME AS CASE_MANAGER, 
	SBM.HOURS_AUTHORIZED AS HOURS_AUTHORIZED, 
	SBM.HOURS_AUTHORIZED AS HOURS_AUTHORIZED_NON_ADJUSTED,
    -1 AS ETL_TASK_KEY,
       -1 AS ETL_INSERTED_TASK_KEY,
                        
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	FALSE AS ETL_DELETED_FLAG
FROM SCHEDULE_BY_MONTH SBM
LEFT JOIN CASE_WORKERS CW ON CW.MASTER_ID = SBM.CLIENT_NUMBER
LEFT JOIN SERVICE_DATES SERV ON SERV.UNIQUE_ID = SBM.CLIENT_NUMBER AND SERV.SERVICETYPE = SBM.CONTRACT_CODE
LEFT JOIN AUTH_DATES AD ON AD.UNIQUE_ID = SBM.CLIENT_NUMBER AND AD.SERVICETYPE = SBM.CONTRACT_CODE;
;
RETURN ''SUCCESS'';
    END;
    ';