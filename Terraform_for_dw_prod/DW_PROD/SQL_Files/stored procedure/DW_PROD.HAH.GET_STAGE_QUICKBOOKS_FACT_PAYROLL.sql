CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_QUICKBOOKS_FACT_PAYROLL("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '

BEGIN

--*****************************************************************************************************************************
-- NAME: QUICKBOOKS_FACT_PAYROLL
--
-- PURPOSE: Creates one row per PAYROLL according to QuickBooks
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR				NOTES:
-- ---------	----------------	-----------------------------------------------------------------------------------------------        
-- 03/17/23		Aditya Shukla		Initial Development
--									(the logic has unions since we had 3 different file formats from source with unique data)
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.QUICKBOOKS_FACT_PAYROLL

SELECT DISTINCT
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(QB_PAYROLL."NAME", '',''))) || QB_PAYROLL.COMPANY || CHK_DATE || 31) AS PAYROLL_KEY,
	CHK_DATE::DATE AS REPORT_DATE,
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(QB_PAYROLL."NAME", '',''))) || QB_PAYROLL.COMPANY || 31) AS EMPLOYEE_KEY,
	COALESCE(QB_BRANCHES.BRANCH_KEY, MD5(''QuickBooks'' || ''QB - CORPORATE'' || 31)) AS BRANCH_KEY,
	31 AS SOURCE_SYSTEM_ID,
	CHK_DATE::DATE AS PAYROLL_DATE,
	MD5(TRIM(UPPER(REPLACE(QB_PAYROLL."NAME", '',''))) || QB_PAYROLL.COMPANY) AS EMPLOYEE_ID,
	COALESCE(QB_BRANCHES.BRANCH_NAME, ''QB - CORPORATE'') AS BRANCH_NAME,
	''QB - '' || QB_PAYROLL.COMPANY AS SYSTEM_CODE,
	PAY_START::DATE AS PAY_PERIOD_START_DATE,
	PAY_END::DATE AS PAY_PERIOD_END_DATE,
	SUM(CASE WHEN CHK_NO = ''DD'' THEN NULL ELSE CHK_NO END) AS CHECK_NUMBER,
	SUM(REPLACE(HOURS, '',''))::VARCHAR AS PAY_HOURS,
	NULL AS SERVICE_HOURS,
	NULL AS OVERTIME_HOURS,
	NULL AS NON_SERVICE_UNITS,
	NULL AS SICK_HOURS,
	NULL AS VACATION_HOURS,
	NULL AS PAY_RATE,
	NULL AS OVERTIME_RATE,
	SUM(REPLACE(GROSS, '','')) AS GROSS_PAY_AMOUNT,
	NULL AS SERVICE_PAY_AMOUNT,
	NULL AS OVERTIME_PAY_AMOUNT,
	NULL AS NON_SERVICE_PAY_AMOUNT,
	SUM(REPLACE(NVL(OTHER_TAX, 0) + NVL(SOC_SEC, 0), '','')) AS TAX_AMOUNT,
	SUM(REPLACE(NET_PAY, '','')) AS NET_PAY_AMOUNT,
	SUM(REPLACE(NVL(FED_W_H, 0) + NVL(MED_CARE, 0) + NVL(MED_CARE_ADDL, 0) + NVL(STATE_W_H, 0) + NVL(PREMIUM_ONLY_PLAN, 0), '','')) AS OTHER_DEDUCTIONS_AMOUNT,
	NULL AS UNION_DUES_AMOUNT,
	SUM(REPLACE(MILEAGE_REIMBURSEMENT, '','')) AS REINBURSMENT_AMOUNT,
		-1 AS ETL_TASK_KEY,
		-1 AS ETL_INSERTED_TASK_KEY,
		current_date() AS ETL_INSERTED_DATE,
		current_user() AS ETL_INSERTED_BY,
		current_date() AS ETL_LAST_UPDATED_DATE,
		current_user() AS ETL_LAST_UPDATED_BY,
		FALSE ETL_DELETED_FLAG
FROM DISC_PROD.ADP.QB_PAYROLL AS QB_PAYROLL
LEFT JOIN DISC_PROD.ADP.QB_SSN_MAPPING QB_MAPPING
	ON QB_MAPPING.COMPANY = QB_PAYROLL.COMPANY
	AND QB_MAPPING."NAME" = UPPER(TRIM(REPLACE(QB_PAYROLL."NAME", '','')))
LEFT JOIN DW_PROD.STAGE.QUICKBOOKS_DIM_BRANCH QB_BRANCHES 
	ON QB_BRANCHES.BRANCH_NAME = TRIM(UPPER(QB_MAPPING.CLASS))
	AND QB_BRANCHES.SYSTEM_CODE = ''QB - '' || QB_MAPPING.COMPANY
GROUP BY 1,	2,	3,	4,	5,	6,	7,	8,	9,	10,	11,	/*12,	13,*/	14,	15,	16,	17,	18,	19,	20,	/*21,*/	22,	23,	24,	/*25,	26,	27,*/	28/*,	29*/
UNION 
SELECT DISTINCT
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(DATES."NAME", '',''))) || DATES.COMPANY || DATES."DATE" || 31) AS PAYROLL_KEY,
	DATES."TYPE"::DATE AS REPORT_DATE,
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(DATES."NAME", '',''))) || DATES.COMPANY || 31) AS EMPLOYEE_KEY,
	COALESCE(QB_BRANCHES.BRANCH_KEY, MD5(''QuickBooks'' || ''QB - CORPORATE'' || 31)) AS BRANCH_KEY,
	31 AS SOURCE_SYSTEM_ID,
	DATES."TYPE"::DATE AS PAYROLL_DATE,
	MD5(TRIM(UPPER(REPLACE(DATES."NAME", '',''))) || DATES.COMPANY) AS EMPLOYEE_ID,
	COALESCE(QB_BRANCHES.BRANCH_NAME, ''QB - CORPORATE'') AS BRANCH_NAME,
	''QB - '' || DATES.COMPANY AS SYSTEM_CODE,
	NULL AS PAY_PERIOD_START_DATE,
	NULL AS PAY_PERIOD_END_DATE,
	NULL AS CHECK_NUMBER,
	REPLACE(HOURS.TOTAL_GROSS_PAY, '','') AS PAY_HOURS,
	NULL AS SERVICE_HOURS,
	REPLACE(NVL(HOURS.ADMIN_OT, 0) + NVL(HOURS.HHA_INS_PRV_OT, 0) + NVL(HOURS.HHA_MEDICAID_OT, 0) + NVL(HOURS.HHA_MEDICARE_OT, 0) + NVL(HOURS.HHA_HOURLY_OT, 0), '','') AS OVERTIME_HOURS,
	NULL AS NON_SERVICE_UNITS,
	NULL AS SICK_HOURS,
	NULL AS VACATION_HOURS,
	NULL AS PAY_RATE,
	REPLACE(NVL(RATE.ADMIN_OT, 0) + NVL(RATE.HHA_INS_PRV_OT, 0) + NVL(RATE.HHA_MEDICAID_OT, 0) + NVL(RATE.HHA_MEDICARE_OT, 0) + NVL(RATE.HHA_HOURLY_OT, 0), '','') AS OVERTIME_RATE,
	REPLACE(DATES.TOTAL_GROSS_PAY, '','') AS GROSS_PAY_AMOUNT,
	NULL AS SERVICE_PAY_AMOUNT,
	NVL(REPLACE(DATES.ADMIN_OT, '',''), 0) + NVL(REPLACE(DATES.HHA_INS_PRV_OT, '',''), 0) + NVL(REPLACE(DATES.HHA_MEDICAID_OT, '',''), 0) + NVL(REPLACE(DATES.HHA_MEDICARE_OT, '',''), 0) + NVL(REPLACE(DATES.HHA_HOURLY_OT, '',''), 0) AS OVERTIME_PAY_AMOUNT,
	NULL AS NON_SERVICE_PAY_AMOUNT,
	NULL AS TAX_AMOUNT,
	REPLACE(DATES.NET_PAY, '','') AS NET_PAY_AMOUNT,
	NULL AS OTHER_DEDUCTIONS_AMOUNT,
	NULL AS UNION_DUES_AMOUNT,
	REPLACE(NVL(DATES.REIMBURSEMENT, 0) + NVL(DATES.REIMBURSEMENT_CPR, 0) + NVL(DATES.MILEAGE_REIMBURSEMENT, 0), '','') AS REINBURSMENT_AMOUNT,
		-1 AS ETL_TASK_KEY,
		-1 AS ETL_INSERTED_TASK_KEY,
		current_date() AS ETL_INSERTED_DATE,
		current_user() AS ETL_INSERTED_BY,
		current_date() AS ETL_LAST_UPDATED_DATE,
		current_user() AS ETL_LAST_UPDATED_BY,
		FALSE ETL_DELETED_FLAG
FROM DISC_PROD.ADP.QB_PAYROLL_DATES DATES
LEFT JOIN DISC_PROD.ADP.QB_PAYROLL_HOURS HOURS
	ON DATES.COMPANY = HOURS.COMPANY AND DATES."NAME" = HOURS."NAME" AND dates.DATE = HOURS.DATE
LEFT JOIN DISC_PROD.ADP.QB_PAYROLL_RATE RATE 
	ON DATES.COMPANY = RATE.COMPANY AND DATES."NAME" = RATE."NAME" AND RATE.DATE = DATES.DATE
LEFT JOIN DISC_PROD.ADP.QB_SSN_MAPPING QB_MAPPING
	ON QB_MAPPING.COMPANY = DATES.COMPANY
	AND QB_MAPPING."NAME" = UPPER(TRIM(REPLACE(DATES."NAME", '','')))
LEFT JOIN DW_PROD.STAGE.QUICKBOOKS_DIM_BRANCH QB_BRANCHES 
	ON QB_BRANCHES.BRANCH_NAME = TRIM(UPPER(QB_MAPPING.CLASS))
	AND QB_BRANCHES.SYSTEM_CODE = ''QB - '' || QB_MAPPING.COMPANY
UNION
SELECT DISTINCT
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(GROSS."NAME", '',''))) || GROSS.COMPANY || GROSS."DATE" || 31) AS PAYROLL_KEY,
	GROSS."DATE"::DATE AS REPORT_DATE,
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(GROSS."NAME", '',''))) || GROSS.COMPANY || 31) AS EMPLOYEE_KEY,
	COALESCE(QB_BRANCHES.BRANCH_KEY, MD5(''QuickBooks'' || ''QB - CORPORATE'' || 31)) AS BRANCH_KEY,
	31 AS SOURCE_SYSTEM_ID,
	GROSS."DATE"::DATE AS PAYROLL_DATE,
	MD5(TRIM(UPPER(REPLACE(GROSS."NAME", '',''))) || GROSS.COMPANY) AS EMPLOYEE_ID,
	COALESCE(QB_BRANCHES.BRANCH_NAME, ''QB - CORPORATE'') AS BRANCH_NAME,
	''QB - '' || GROSS.COMPANY AS SYSTEM_CODE,
	NULL AS PAY_PERIOD_START_DATE,
	NULL AS PAY_PERIOD_END_DATE,
	NULL AS CHECK_NUMBER,
	REPLACE(HOURS.HOURS_TOTAL, '','') AS PAY_HOURS,
	HOURS.HOURS_REGULAR AS SERVICE_HOURS,
	HOURS.HOURS_OT AS OVERTIME_HOURS,
	NVL(HOURS.HOURS_OTHER, 0) + NVL(HOURS.HOURS_OTHER_SN, 0) AS NON_SERVICE_UNITS,
	HOURS.HOURS_SICK AS SICK_HOURS,
	HOURS.HOURS_VAC AS VACATION_HOURS,
	NULL AS PAY_RATE,
	NULL AS OVERTIME_RATE,
	REPLACE(GROSS.GROSS_PAY_TOTAL, '','') AS GROSS_PAY_AMOUNT,
	REPLACE(GROSS.GROSS_PAY_REGULAR, '','') AS SERVICE_PAY_AMOUNT,
	REPLACE(GROSS.GROSS_PAY_OT, '','') AS OVERTIME_PAY_AMOUNT,
	REPLACE(NVL(GROSS.GROSS_PAY_OTHER, 0) + NVL(GROSS.GROSS_PAY_OTHER_SN, 0), '','') AS NON_SERVICE_PAY_AMOUNT,
	NULL AS TAX_AMOUNT,
	REPLACE(GROSS.NET_PAY, '','') AS NET_PAY_AMOUNT,
	REPLACE(GROSS.EMPLOYEE_AFTERTAX_DEDUCTIONS_TOTAL, '','') AS OTHER_DEDUCTIONS_AMOUNT,
	NULL AS UNION_DUES_AMOUNT,
	REPLACE(GROSS.GROSS_PAY_REIMB, '','') AS REINBURSMENT_AMOUNT,
		-1 AS ETL_TASK_KEY,
		-1 AS ETL_INSERTED_TASK_KEY,
		current_date() AS ETL_INSERTED_DATE,
		current_user() AS ETL_INSERTED_BY,
		current_date() AS ETL_LAST_UPDATED_DATE,
		current_user() AS ETL_LAST_UPDATED_BY,
		FALSE ETL_DELETED_FLAG
FROM DISC_PROD.ADP.QB_PAYROLL_MIDWAY_20_GROSS GROSS
LEFT JOIN DISC_PROD.ADP.QB_PAYROLL_MIDWAY_20_HOURS HOURS
	ON GROSS.COMPANY = HOURS.COMPANY 
	AND GROSS."NAME" = HOURS."NAME" 
	AND GROSS."DATE" = HOURS."DATE"
LEFT JOIN DISC_PROD.ADP.QB_SSN_MAPPING QB_MAPPING
	ON QB_MAPPING.COMPANY = GROSS.COMPANY
	AND QB_MAPPING."NAME" = UPPER(TRIM(REPLACE(GROSS."NAME", '','')))
LEFT JOIN DW_PROD.STAGE.QUICKBOOKS_DIM_BRANCH QB_BRANCHES 
	ON QB_BRANCHES.BRANCH_NAME = TRIM(UPPER(QB_MAPPING.CLASS))
	AND QB_BRANCHES.SYSTEM_CODE = ''QB - '' || QB_MAPPING.COMPANY;

RETURN ''SUCESS'';
END;
';