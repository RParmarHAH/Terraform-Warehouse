CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_JAZZHR_FACT_APPLICANT_STATUS("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN

--*****************************************************************************************************************************
-- NAME:  JAZZHR_FACT_APPLICANT_STATUS
--
-- PURPOSE: Creates one row per JOB from JAZZHR
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                               NOTES:
-- --------    -------------------                  ---------------------------------------------------------------------------
-- 05/08/2022  Rutvi Vyas / Aditya Shukla      Initial development
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.JAZZHR_FACT_APPLICANT_STATUS

WITH AH AS
(
WITH RES
AS
(
--BELOW ROW_NUMBER CODE IS NEEDED DUE TO WE ARE MANUALLY MAPPING JOB AND ACTIVITY WHERE WE ARE GETTING DUPLICATES -- ONLY 65% DATA IS ACCURATE BUT AS WE CONFIRMED WITH ONSITE TEAM IF HIRES DATA IS ACCURATE THEN WE CAN PUT THIS ON PROD
SELECT *,ROW_NUMBER() OVER(PARTITION BY APPLICANT_STATUS_KEY ORDER BY APPLICANT_STATUS_KEY) AS RN FROM  -- USED TO IGNORE STRING BASED DUPLICATE DATA NEED TO REMOVE AFTER GETTING API MAPPING BETWEEN JOB AND ACTIVITY FROM JAZZHR
(
WITH BR AS(
SELECT
    DISTINCT J.INTERNAL_CODE,
    J.ID AS APID
FROM
    DISC_PROD.JAZZHR.JOBS J
),
BR_BRANCH
AS
(
SELECT
    DISTINCT BO.INTERNAL_CODE,
    BO.APID,
    B.SOURCE_SYSTEM_ID ,
    B.BRANCH_KEY
FROM
    BR BO
INNER JOIN DW_PROD.HAH.DIM_BRANCH B
ON
UPPER(TRIM(BO.INTERNAL_CODE)) = UPPER(TRIM(B.DETAILED_OFFICE_NAME))
WHERE
    COALESCE(INTERNAL_CODE,
    '''') <> ''''
    AND B.SOURCE_SYSTEM_ID NOT IN (10,6)
),
DF
AS
(
SELECT
    APID,
    BRANCH_KEY,
    ROW_NUMBER() OVER(PARTITION BY APID,
    BRANCH_KEY
    ORDER BY
    CASE
        WHEN SOURCE_SYSTEM_ID IN (3, 4, 9) THEN 1 -- data is coming for 1,2,3,4,9 SOURCE_SYSTEM_ID
        ELSE 2
    END ASC)R
FROM
    BR_BRANCH
QUALIFY R = 1  --IN FUTURE IF ANY DATA COME DUPLICATE THAT TIME THIS CONDITION WILL HELP TO FILTER OUT
)
, ACTIVITIES AS (
SELECT
ACTIVITY_DETAILS,
SPLIT_PART(ACTIVITY_DETAILS, ''"'', 2) AS F,
SPLIT_PART(ACTIVITY_DETAILS, ''"'', 4) AS T,
SPLIT_PART(ACTIVITY_DETAILS, ''"'', 6) AS JOB,
*
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_ACTIVITIES)
,CONVERSATION_INPROGRESS_DATETIME AS (
SELECT
DISTINCT A.APPLICANT_ID,
A.F,
A.T AS STATUS,
A.JOB,
A.ACTIVITY_DATE
,J.JOB_ID AS FS
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
JOIN ACTIVITIES A ON
J.APPLICANT_ID = A.APPLICANT_ID
AND J.JOB_TITLE = A.JOB
AND J.APPLICANT_PROGRESS = A.T
WHERE
STATUS IN ( ''Contacted''
, ''Contacted In Progress''
, ''Screen''
, ''HM Review''
, ''HM Screen''
, ''RECRUITMENT PUSH''
, ''RECRUITMENT PUSH - STILL NEEDS BRANCH CONTACT''
,''Recruitment Push''
,''Recruitment Push - Still Need Branch Contact''
,''Pre-employment Completed''
,''Pre-Employment Completed''))
,INTERVIEW_SCHEDULED_DATETIME AS (
SELECT
DISTINCT A.APPLICANT_ID,
A.F,
A.T AS STATUS,
A.JOB,
A.ACTIVITY_DATE
,J.JOB_ID AS FS
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
JOIN ACTIVITIES A ON
J.APPLICANT_ID = A.APPLICANT_ID
AND J.JOB_TITLE = A.JOB
AND J.APPLICANT_PROGRESS = A.T
WHERE
STATUS IN ( ''3rd Round Interview Scheduled''
, ''3rd Interview Scheduled''
, ''In person interview''
, ''In-Person Interview''
, ''In Person interview''
, ''2nd Round Interview Scheduled''
, ''2nd Interview Scheduled''
, ''1st Interview Scheduled''
, ''Interview Scheduled''
, ''TO PHONE SCREEN''
, ''Phone Interview''
,''Contact - 1st Outreach''
,''Contact - 2nd Outreach''
,''Contact - 3rd Outreach''
,''Contact - 4th Outreach''
,''Email Invite to Interview''
,''Email Screen''
,''INVITED TO PHONE SCREEN''
,''Invited to Phone Screen''
,''Consider''
,''Phone Interview''
,''Phone Screen Complete''
,''Joliet Hiring Event Invite - 9/28/2022''
,''Invited to Interview''
,''Open Interview Event Invitation - Text and Email''
,''Contacted''))
,INTERVIEW_COMPLETED_DATETIME AS (
SELECT
DISTINCT A.APPLICANT_ID,
A.F,
A.T AS STATUS,
A.JOB,
A.ACTIVITY_DATE
,J.JOB_ID AS FS
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
JOIN ACTIVITIES A ON
J.APPLICANT_ID = A.APPLICANT_ID
AND J.JOB_TITLE = A.JOB
AND J.APPLICANT_PROGRESS = A.T
WHERE
STATUS IN (''Face to Face Interview Complete''
, ''Interview Completed''
, ''Completed Branch Interview''
, ''Interview Attended''
, ''3rd Round Interview''
, ''3rd Interview Attended''
, ''3rd Round Interview Attended''
, ''2nd Round Interview''
, ''2nd Round Interview Attended''
, ''1st Round Interview''
, ''1st Interview Attended''
, ''Phone Screen Complete''
,''Reserve''
,''Screened''
,''PRESENTED TO HM'')),
INTERVIEW_NO_SHOW_DATETIME AS (
SELECT
DISTINCT A.APPLICANT_ID,
A.F,
A.T AS STATUS,
A.JOB,
A.ACTIVITY_DATE
,J.JOB_ID AS FS
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
JOIN ACTIVITIES A ON
J.APPLICANT_ID = A.APPLICANT_ID
AND J.JOB_TITLE = A.JOB
AND J.APPLICANT_PROGRESS = A.T
WHERE
STATUS IN ( ''NCNS for Interview''))
,NUMBER_OF_TIMES_INTERVIEW_SCHEDULED AS (
SELECT
DISTINCT A.APPLICANT_ID,
A.F,
A.T AS STATUS,
A.JOB,
A.ACTIVITY_DATE,
J.JOB_ID,
COUNT( STATUS
) OVER ( PARTITION BY A.APPLICANT_ID,J.JOB_ID) AS NUMBER_OF_TIMES_INTERVIEW_SCHEDULED
,J.JOB_ID AS FS
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
JOIN ACTIVITIES A ON
J.APPLICANT_ID = A.APPLICANT_ID
AND J.JOB_TITLE = A.JOB
WHERE
STATUS IN (
''3rd Round Interview Scheduled''
, ''3rd Interview Scheduled''
, ''In person interview''
, ''In-Person Interview''
, ''In Person interview''
, ''2nd Round Interview Scheduled''
, ''2nd Interview Scheduled''
, ''1st Interview Scheduled''
, ''Interview Scheduled''
, ''TO PHONE SCREEN''
, ''Phone Interview''
,''Contact - 1st Outreach''
,''Contact - 2nd Outreach''
,''Contact - 3rd Outreach''
,''Contact - 4th Outreach''
,''Email Invite to Interview''
,''Email Screen''
,''INVITED TO PHONE SCREEN''
,''Invited to Phone Screen''
,''Consider''
,''Phone Interview''
,''Phone Screen Complete''
,''Joliet Hiring Event Invite - 9/28/2022''
,''Invited to Interview''
,''Open Interview Event Invitation - Text and Email''
,''Contacted'')
)
,APPLICATION_AND_BACKGROUND_CHECK_CONSENT_FORM_COMPLETE_DATETIME AS (
SELECT
DISTINCT A.APPLICANT_ID,
A.F,
A.T AS STATUS,
A.JOB,
A.ACTIVITY_DATE
,J.JOB_ID AS FS
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
JOIN ACTIVITIES A ON
J.APPLICANT_ID = A.APPLICANT_ID
AND J.JOB_TITLE = A.JOB
AND J.APPLICANT_PROGRESS = A.T
WHERE
STATUS IN( ''Submitted Application''
)),
OFFERS_SENT_DATETIME AS (
SELECT
DISTINCT A.APPLICANT_ID,
A.F,
A.T AS STATUS,
A.JOB,
A.ACTIVITY_DATE
,J.JOB_ID AS FS
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
JOIN ACTIVITIES A ON
J.APPLICANT_ID = A.APPLICANT_ID
AND J.JOB_TITLE = A.JOB
AND J.APPLICANT_PROGRESS = A.T
WHERE
STATUS IN ( ''Offer Extended - Training Scheduled'' , ''Offer'')
),
OFFERS_ACCEPTED_DATETIME AS(
SELECT
DISTINCT A.APPLICANT_ID,
A.F,
A.T AS STATUS,
A.JOB,
A.ACTIVITY_DATE
,J.JOB_ID AS FS
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
JOIN ACTIVITIES A ON
J.APPLICANT_ID = A.APPLICANT_ID
AND J.JOB_TITLE = A.JOB
AND J.APPLICANT_PROGRESS = A.T
WHERE
STATUS IN ( ''Offer/Move Forward''
))
,AC AS (
SELECT
DISTINCT A.APPLICANT_ID,
A.T STATUS,
A.ACTIVITY_DATE
,A.JOB AS JOB
,A.ACTIVITY_ID
,A.ACTIVITY_TIME
,J.JOB_ID AS FS
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
JOIN ACTIVITIES A ON
J.JOB_TITLE = A.JOB
AND J.APPLICANT_PROGRESS = A.T
AND J.APPLICANT_ID = A.APPLICANT_ID
)
,REJECTED_DATETIME AS (
SELECT
DISTINCT A.APPLICANT_ID,
A.F,
A.T AS STATUS ,
A.JOB,
A.ACTIVITY_DATE,
PM.PARADOX_APPLICANT_STATUS AS REJECTION_REASON
,J.JOB_ID AS FS
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
JOIN ACTIVITIES A ON
J.APPLICANT_ID = A.APPLICANT_ID
AND J.JOB_TITLE = A.JOB
AND J.APPLICANT_PROGRESS = A.T
INNER JOIN DW_PROD.HAH.DIM_JAZZHR_PARADOX_MAPPING PM
ON PM.JAZZHR_APPLICANT_STATUS = A.T  
WHERE
STATUS IN( ''NOT HIRED - CANDIDATE WITHDREW''
, ''Not Hired - Candidate Withdrew''
, ''CANDIDATE WITHDREW''
,''NOT HIRED - CANDIDATE WITHDREW''
, ''UNRESPONSIVE''
, ''NOT HIRED - DID NOT COMPLETE FIRST VISIT''
, ''NCNS for Orientation/Training''
, ''Unresponsive''
, ''Not Hired - Unresponsive''
, ''Not Hired - NCNS for Interview''
, ''Not Hired - Did not complete first visit''
, ''NOT HIRED - NCNS FOR INTERVIEW''
, ''Not Hired: Not completed on-boarding''
, ''Over Qualified''
, ''Out of state''
, ''Not Qualified''
, ''NOT HIRED - DID NOT COMPLETE TRAINING''
, ''Not Hired - Did not complete training''
, ''NOT HIRED - DID NOT COMPLETE FIRST VISIT''
, ''Not Hired''
,''Moved to Drip Campaign''
,''NOT HIRED - DID NOT PASS SCREEN/CLEAR PRE-EMPLOYMENT''
,''Unresponsive''))
,APPLICANT_STATUS AS(
SELECT
Z.*
FROM
(
SELECT
ROW_NUMBER() OVER (PARTITION BY AC.APPLICANT_ID, FS
    ORDER BY
        ACTIVITY_DATE DESC,ACTIVITY_TIME DESC) RN
,AC.APPLICANT_ID,
AC.ACTIVITY_DATE AS H_DATE,
JOB,
PM.PARADOX_APPLICANT_STATUS AS ST
,AC.FS AS FS
FROM
AC
INNER JOIN DW_PROD.HAH.DIM_JAZZHR_PARADOX_MAPPING PM
ON PM.JAZZHR_APPLICANT_STATUS = AC.STATUS ) Z
WHERE
((Z.RN = 1))
)
,HIRES_DEDUPE AS
(
	SELECT
		ID,
		MASTER_ID
	FROM
		DISC_DEDUPE_PROD.JAZZHR.EMPLOYEE_MASTER_LIST
	UNION ALL
		SELECT
		ID,
		MASTER_IDD
	FROM
		DISC_DEDUPE_PROD.JAZZHR.EMPLOYEE_MATCH_LIST
	WHERE
		ID NOT IN (
					SELECT
						ID
					FROM
						DISC_DEDUPE_PROD.JAZZHR.EMPLOYEE_MASTER_LIST)
)
,HIRES AS
(
SELECT
DISTINCT A.APPLICANT_ID,
HD.MASTER_ID,
A.HIRED_DATE AS HIRED_DATE,
 ''Hired: Hired''  AS STATUS
 ,A.JOB_ID
 FROM
 DISC_PROD.JAZZHR.HIRES A 
LEFT JOIN HIRES_DEDUPE HD ON A.APPLICANT_ID = HD.ID
)
,PRIOR_STATUS AS (
SELECT
Z.*
FROM
(
SELECT
ROW_NUMBER() OVER (PARTITION BY AC.APPLICANT_ID, AC.FS
    ORDER BY
        ACTIVITY_DATE DESC,ACTIVITY_TIME DESC) RN,
AC.APPLICANT_ID,
AC.ACTIVITY_DATE AS PA,
PM.PARADOX_APPLICANT_STATUS AS JP,
AC.FS
FROM
AC
INNER JOIN DW_PROD.HAH.DIM_JAZZHR_PARADOX_MAPPING PM
ON PM.JAZZHR_APPLICANT_STATUS = AC.STATUS ) Z
WHERE
((Z.RN = 2))
)
, ALL_CTE AS (
SELECT DISTINCT
 APPLICANT_ID , FS
FROM CONVERSATION_INPROGRESS_DATETIME
UNION ALL
 SELECT DISTINCT APPLICANT_ID , FS
FROM
INTERVIEW_SCHEDULED_DATETIME
UNION ALL
SELECT DISTINCT APPLICANT_ID , FS
FROM
INTERVIEW_COMPLETED_DATETIME
UNION ALL
SELECT DISTINCT APPLICANT_ID , FS
FROM INTERVIEW_NO_SHOW_DATETIME
UNION ALL
SELECT DISTINCT APPLICANT_ID , FS
FROM APPLICATION_AND_BACKGROUND_CHECK_CONSENT_FORM_COMPLETE_DATETIME
UNION ALL
SELECT DISTINCT APPLICANT_ID , FS
FROM OFFERS_SENT_DATETIME
UNION ALL
SELECT DISTINCT APPLICANT_ID , FS
FROM OFFERS_ACCEPTED_DATETIME
UNION ALL
SELECT DISTINCT APPLICANT_ID , FS
FROM REJECTED_DATETIME
)
,REMAINING AS (
SELECT DISTINCT J.APPLICANT_ID AS ID , J.JOB_ID AS JD
FROM DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
EXCEPT
SELECT DISTINCT AC.APPLICANT_ID AS ID , FS
FROM
ALL_CTE AC
)
,FD AS (
SELECT J.APPLICANT_ID AS ID1  , J.JOB_ID AS JD1, J.APPLICANT_PROGRESS AS AST , J.APPLY_DATE AS C_DATE
--,COUNT(*)
FROM DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
JOIN
REMAINING R
ON R.ID = J.APPLICANT_ID
AND R.JD = J.JOB_ID 
--WHERE J.APPLICANT_PROGRESS = ''New''
--GROUP BY J.APPLICANT_ID  , J.JOB_ID ,J.APPLICANT_PROGRESS , J.APPLY_DATE
--HAVING COUNT(*)=1
)
SELECT
    DISTINCT
    MD5(TRIM(NVL(J.APPLICANT_ID, ''UNKNOWN'')) || ''-''  || TRIM(NVL(J.JOB_ID,''UNKNOWN'')) || ''-'' || ''JAZZZHR'') APPLICANT_STATUS_KEY,
    20 AS SOURCE_SYSTEM_ID,
    ''JAZZHR'' AS SYSTEM_CODE,
    MD5(TRIM(COALESCE (HI.MASTER_ID,J.APPLICANT_ID , ''UNKNOWN'')) || ''-'' || ''JAZZHR'') AS APPLICANT_KEY,
    MD5(TRIM(NVL(J.JOB_ID ,''UNKNOWN'')) || ''-'' || ''JAZZHR'') AS JOB_KEY,
    AJ.DEPARTMENT AS JOB_FAMILY,
    J.APPLICANT_ID AS CANDIDATE_ID,
    J.APPLY_DATE AS DATE_APPLIED,
MAX(CID.ACTIVITY_DATE) AS CONVERSATION_INPROGRESS_DATETIME,
MAX(ISD.ACTIVITY_DATE) AS INTERVIEW_SCHEDULED_DATETIME,
NULL                   AS INTERVIEW_RESCHEDULED_DATETIME,
MAX(ICD.ACTIVITY_DATE) AS INTERVIEW_COMPLETED_DATETIME,
MAX(INS.ACTIVITY_DATE) AS INTERVIEW_NO_SHOW_DATETIME,
CASE WHEN NIS.NUMBER_OF_TIMES_INTERVIEW_SCHEDULED IS NULL THEN 0 ELSE NIS.NUMBER_OF_TIMES_INTERVIEW_SCHEDULED END AS NUMBER_OF_TIMES_INTERVIEW_SCHEDULED,    --need TO ask
MAX(ACD.ACTIVITY_DATE) AS APPLICATION_AND_BACKGROUND_CHECK_CONSENT_FORM_COMPLETE_DATETIME,
MAX(OSD.ACTIVITY_DATE) AS OFFERS_SENT_DATETIME,
MAX(OAD.ACTIVITY_DATE) AS OFFERS_ACCEPTED_DATETIME,
NULL                   AS ONBOARDING_SENT_DATETIME,
NULL                   AS ONBOARDING_COMPLETED_DATETIME,
HI.HIRED_DATE          AS HIRED_DATETIME,
NULL                   AS OFFER_DECLINED_DATETIME,
MAX(RD.ACTIVITY_DATE)  AS REJECTED_DATETIME,
RD.REJECTION_REASON    AS REJECTION_REASON,
MAX(AST.H_DATE)        AS MOST_RECENT_STAGE_DATETIME,
COALESCE(HI.STATUS,AST.ST) AS APPLICANT_STATUS,
PS.JP                  AS PRIOR_STATUS,
PS.PA                  AS PRIOR_STATUS_DATETIME,
BK.BRANCH_KEY AS BRANCH_KEY,
    CASE WHEN INTERNAL_CODE LIKE ''%-%'' AND INTERNAL_CODE LIKE ''%(%''
        THEN TRIM(SUBSTRING(INTERNAL_CODE, CHARINDEX(''-'', INTERNAL_CODE) + 1, CHARINDEX(''('', INTERNAL_CODE) - 5))
    WHEN INTERNAL_CODE NOT LIKE ''%(%''
        THEN TRIM(SUBSTRING(INTERNAL_CODE, CHARINDEX(''-'', INTERNAL_CODE) + 1))
    WHEN INTERNAL_CODE NOT LIKE ''%-%''
        THEN TRIM(SUBSTRING(INTERNAL_CODE, 0, CHARINDEX(''('', INTERNAL_CODE) - 1))
    ELSE INTERNAL_CODE
    END AS BRANCH_NAME,
   -1  AS ETL_TASK_KEY,
   -1 AS ETL_INSERTED_TASK_KEY,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_INSERTED_DATE,
    CURRENT_USER AS ETL_INSERTED_BY,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_LAST_UPDATED_DATE,
    CURRENT_USER AS ETL_LAST_UPDATED_BY,
    FALSE AS ETL_DELETED_FLAG
   ,AJ.STATE AS BRANCH_STATE_CODE
FROM
DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
 JOIN DISC_PROD.JAZZHR.JOBS AJ
ON J.JOB_ID = AJ.ID
--LEFT JOIN DISC_PROD.JAZZHR.APPLICANT_DETAILS AD
--ON J.APPLICANT_ID = AD.ID
-- JOIN DISC_PROD.JAZZHR.VW_APPLICANT_DETAILS AD
-- ON J.APPLICANT_ID = AD.ID
LEFT JOIN CONVERSATION_INPROGRESS_DATETIME CID ON
J.APPLICANT_PROGRESS = CID.STATUS
AND J.JOB_TITLE = CID.JOB
AND J.APPLICANT_ID  = CID.APPLICANT_ID
LEFT JOIN INTERVIEW_SCHEDULED_DATETIME ISD ON
J.APPLICANT_PROGRESS = ISD.STATUS
AND J.JOB_TITLE = ISD.JOB
AND J.APPLICANT_ID = ISD.APPLICANT_ID
LEFT JOIN INTERVIEW_COMPLETED_DATETIME ICD ON
J.APPLICANT_PROGRESS = ICD.STATUS
AND J.JOB_TITLE = ICD.JOB
AND J.APPLICANT_ID = ICD.APPLICANT_ID
LEFT JOIN INTERVIEW_NO_SHOW_DATETIME INS ON
    J.APPLICANT_PROGRESS = INS.STATUS
    AND J.JOB_TITLE = INS.JOB
    AND J.APPLICANT_ID  = INS.APPLICANT_ID
LEFT JOIN APPLICATION_AND_BACKGROUND_CHECK_CONSENT_FORM_COMPLETE_DATETIME ACD ON
    J.APPLICANT_PROGRESS = ACD.STATUS
    AND J.JOB_TITLE = ACD.JOB
    AND J.APPLICANT_ID = ACD.APPLICANT_ID
LEFT JOIN OFFERS_SENT_DATETIME OSD ON
    J.APPLICANT_PROGRESS = OSD.STATUS
    AND J.JOB_TITLE = OSD.JOB
    AND J.APPLICANT_ID  = OSD.APPLICANT_ID
LEFT JOIN OFFERS_ACCEPTED_DATETIME OAD ON
    J.APPLICANT_PROGRESS  = OAD.STATUS
    AND J.JOB_TITLE = OAD.JOB
    AND J.APPLICANT_ID = OAD.APPLICANT_ID
LEFT JOIN REJECTED_DATETIME RD ON
J.APPLICANT_PROGRESS = RD.STATUS
AND J.JOB_TITLE = RD.JOB
AND J.APPLICANT_ID = RD.APPLICANT_ID
LEFT JOIN APPLICANT_STATUS AST
ON J.APPLICANT_ID  = AST.APPLICANT_ID AND J.JOB_TITLE = AST.JOB
LEFT JOIN HIRES HI
ON HI.APPLICANT_ID = J.APPLICANT_ID AND J.JOB_ID  = HI.JOB_ID 
LEFT JOIN PRIOR_STATUS PS
ON J.APPLICANT_ID = PS.APPLICANT_ID AND J.JOB_TITLE = PS.FS
LEFT JOIN NUMBER_OF_TIMES_INTERVIEW_SCHEDULED NIS
ON J.APPLICANT_ID = NIS.APPLICANT_ID
AND J.JOB_ID = NIS.JOB_ID
LEFT JOIN DF BK
ON BK.APID = AJ.ID
WHERE 
COALESCE(APPLICANT_STATUS,'''') <> ''''
AND EXISTS
(SELECT 1 FROM ALL_CTE FD WHERE FD.APPLICANT_ID = J.APPLICANT_ID AND FD.FS = J.JOB_ID)
AND J.APPLICANT_ID NOT IN (''prospect_20200506003040_3RLEPBFF5KPLHBCT'') AND J.JOB_ID NOT IN (''job_20210322182205_CEUNLBMN80MJFEB3'') AND APPLICANT_KEY NOT IN (''d72c06a55e6cae7fd1c40c5aa12d67d6'') AND JOB_KEY NOT IN (''d72c06a55e6cae7fd1c40c5aa12d67d6'')
GROUP BY
 -- AD.ID
J.APPLY_DATE,AJ.ID,J.APPLICANT_PROGRESS,J.APPLICANT_ID,AJ.DEPARTMENT
--,AD.APPLY_DATE 
,BK.BRANCH_KEY
  ,PS.JP,PS.PA,AST.ST,NIS.NUMBER_OF_TIMES_INTERVIEW_SCHEDULED,AJ.INTERNAL_CODE ,AJ.STATE ,J.JOB_ID,HI.HIRED_DATE,HI.STATUS,RD.REJECTION_REASON,AST.H_DATE
,HI.MASTER_ID
UNION
SELECT
    DISTINCT
    MD5(TRIM(NVL(J.APPLICANT_ID, ''UNKNOWN'')) || ''-''  || TRIM(NVL(J.JOB_ID,''UNKNOWN'')) || ''-'' || ''JAZZZHR'') APPLICANT_STATUS_KEY,
    20 AS SOURCE_SYSTEM_ID,
    ''JAZZHR'' AS SYSTEM_CODE,
     MD5(TRIM(COALESCE(HI.MASTER_ID,J.APPLICANT_ID , ''UNKNOWN'')) || ''-'' || ''JAZZHR'') AS APPLICANT_KEY,
    MD5(TRIM(NVL(J.JOB_ID ,''UNKNOWN'')) || ''-'' || ''JAZZHR'') AS JOB_KEY,
    NULL AS JOB_FAMILY,
    J.APPLICANT_ID AS CANDIDATE_ID,
    J.APPLY_DATE AS DATE_APPLIED,
NULL AS CONVERSATION_INPROGRESS_DATETIME,
NULL AS INTERVIEW_SCHEDULED_DATETIME,
NULL AS INTERVIEW_RESCHEDULED_DATETIME,
NULL AS INTERVIEW_COMPLETED_DATETIME,
NULL AS INTERVIEW_NO_SHOW_DATETIME,
NULL AS NUMBER_OF_TIMES_INTERVIEW_SCHEDULED,
NULL AS APPLICATION_AND_BACKGROUND_CHECK_CONSENT_FORM_COMPLETE_DATETIME,
NULL AS OFFERS_SENT_DATETIME,
NULL AS OFFERS_ACCEPTED_DATETIME,
NULL AS ONBOARDING_SENT_DATETIME,
NULL AS ONBOARDING_COMPLETED_DATETIME,
HI.HIRED_DATE AS HIRED_DATETIME,
NULL AS OFFER_DECLINED_DATETIME,
NULL AS REJECTED_DATETIME,
NULL AS REJECTION_REASON,
NULL AS MOST_RECENT_STAGE_DATETIME,
COALESCE(HI.STATUS,''Capture: Capture Complete'') AS APPLICANT_STATUS,
NULL AS PRIOR_STATUS,
NULL AS PRIOR_STATUS_DATETIME,
BK.BRANCH_KEY AS BRANCH_KEY,
NULL AS BRANCH_NAME,
NULL AS ETL_TASK_KEY,
NULL AS ETL_INSERTED_TASK_KEY,
NULL AS ETL_INSERTED_DATE,
NULL AS ETL_INSERTED_BY,
NULL AS ETL_LAST_UPDATED_DATE,
NULL AS ETL_LAST_UPDATED_BY,
NULL AS ETL_DELETED_FLAG,
NULL AS BRANCH_STATE_CODE
FROM FD RS
INNER JOIN DISC_PROD.JAZZHR.APPLICANTS_DETAILS_JOBS J
ON RS.ID1 = J.APPLICANT_ID AND RS.JD1 = J.JOB_ID
-- JOIN DISC_PROD.JAZZHR.VW_APPLICANT_DETAILS AD
--ON J.APPLICANT_ID = AD.ID
 JOIN DISC_PROD.JAZZHR.JOBS AJ
ON J.JOB_ID = AJ.ID
LEFT JOIN DF BK
ON BK.APID = J.JOB_ID
LEFT JOIN HIRES HI
ON HI.APPLICANT_ID = J.APPLICANT_ID AND J.JOB_ID  = HI.JOB_ID
WHERE J.APPLICANT_ID NOT IN (''prospect_20200506003040_3RLEPBFF5KPLHBCT'') AND J.JOB_ID NOT IN (''job_20210322182205_CEUNLBMN80MJFEB3'') AND APPLICANT_KEY NOT IN (''d72c06a55e6cae7fd1c40c5aa12d67d6'') AND JOB_KEY NOT IN (''d72c06a55e6cae7fd1c40c5aa12d67d6'')
GROUP BY 
--AD.ID,
RS.ID1,RS.AST,RS.C_DATE,J.APPLICANT_ID,J.APPLY_DATE ,J.JOB_ID ,J.APPLICANT_PROGRESS,AJ.ID,BK.BRANCH_KEY
,HI.STATUS
,HI.MASTER_ID
,HI.HIRED_DATE
)
)
SELECT APPLICANT_STATUS_KEY, SOURCE_SYSTEM_ID, SYSTEM_CODE, APPLICANT_KEY, JOB_KEY, JOB_FAMILY
, CANDIDATE_ID, DATE_APPLIED, CONVERSATION_INPROGRESS_DATETIME, INTERVIEW_SCHEDULED_DATETIME, INTERVIEW_RESCHEDULED_DATETIME
, INTERVIEW_COMPLETED_DATETIME, INTERVIEW_NO_SHOW_DATETIME, NUMBER_OF_TIMES_INTERVIEW_SCHEDULED, APPLICATION_AND_BACKGROUND_CHECK_CONSENT_FORM_COMPLETE_DATETIME, OFFERS_SENT_DATETIME
, OFFERS_ACCEPTED_DATETIME, ONBOARDING_SENT_DATETIME, ONBOARDING_COMPLETED_DATETIME, HIRED_DATETIME, OFFER_DECLINED_DATETIME
, REJECTED_DATETIME,
REJECTION_REASON, MOST_RECENT_STAGE_DATETIME, APPLICANT_STATUS, PRIOR_STATUS, PRIOR_STATUS_DATETIME
, BRANCH_KEY, BRANCH_NAME , ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE
, ETL_INSERTED_BY, ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG, BRANCH_STATE_CODE
FROM RES
WHERE RN = 1
)
SELECT * FROM AH
WHERE APPLICANT_STATUS_KEY NOT IN (
SELECT APPLICANT_STATUS_KEY FROM AH
WHERE DATE_APPLIED > HIRED_DATETIME) ;-- We have not proper data in Jazzhr in which date_applied is greater than hired_date
RETURN ''SUCCESS'';
END;
';