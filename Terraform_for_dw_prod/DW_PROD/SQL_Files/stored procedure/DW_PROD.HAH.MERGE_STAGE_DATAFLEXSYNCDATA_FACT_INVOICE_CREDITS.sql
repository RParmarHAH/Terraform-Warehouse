CREATE OR REPLACE PROCEDURE DW_PROD.HAH.MERGE_STAGE_DATAFLEXSYNCDATA_FACT_INVOICE_CREDITS()
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN


					
    MERGE INTO HAH.FACT_INVOICE_CREDITS TGT 
USING STAGE.DATAFLEXSYNCDATA_FACT_INVOICE_CREDITS STAGE 
ON TGT.CREDIT_KEY = STAGE.CREDIT_KEY
WHEN MATCHED THEN 
UPDATE SET 
    TGT.REPORT_DATE= STAGE.REPORT_DATE
   ,TGT.BRANCH_KEY= STAGE.BRANCH_KEY
   ,TGT.CLIENT_KEY= STAGE.CLIENT_KEY
   ,TGT.CONTRACT_KEY= STAGE.CONTRACT_KEY
   ,TGT.INVOICE_KEY= STAGE.INVOICE_KEY
   ,TGT.SOURCE_SYSTEM_ID= STAGE.SOURCE_SYSTEM_ID
   ,TGT.SYSTEM_CODE= STAGE.SYSTEM_CODE
   ,TGT.PERIOD= STAGE.PERIOD
   ,TGT.PERIOD_DATE= STAGE.PERIOD_DATE
   ,TGT.PAYMENT_DATE= STAGE.PAYMENT_DATE
   ,TGT.BRANCH_NAME= STAGE.BRANCH_NAME
   ,TGT.CLIENT_NUMBER= STAGE.CLIENT_NUMBER
   ,TGT.CONTRACT_CODE= STAGE.CONTRACT_CODE
   ,TGT.SERVICE_AREA= STAGE.SERVICE_AREA
   ,TGT.INVOICE_TYPE= STAGE.INVOICE_TYPE
   ,TGT.NUMBER_OF_INVOICES= STAGE.NUMBER_OF_INVOICES
   ,TGT.INVOICE_NUMBER= STAGE.INVOICE_NUMBER
   ,TGT.CREDIT_TYPE= STAGE.CREDIT_TYPE
   ,TGT.CREDIT_AMOUNT= STAGE.CREDIT_AMOUNT
   ,TGT.PAYMENT_NUMBER= STAGE.PAYMENT_NUMBER
   ,TGT.PAYMENT_NOTES= STAGE.PAYMENT_NOTES
   ,TGT.CHECK_NUMBER= STAGE.CHECK_NUMBER
   ,TGT.AUDIT_NUMBER= STAGE.AUDIT_NUMBER
   ,TGT.WRITEOFF_REASON_CODE= STAGE.WRITEOFF_REASON_CODE
   ,TGT.WRITEOFF_REASON_DESCRIPTION= STAGE.WRITEOFF_REASON_DESCRIPTION
   ,TGT.ETL_TASK_KEY= STAGE.ETL_TASK_KEY
   ,TGT.ETL_LAST_UPDATED_DATE= STAGE.ETL_LAST_UPDATED_DATE
   ,TGT.ETL_LAST_UPDATED_BY= STAGE.ETL_LAST_UPDATED_BY
   ,TGT.ETL_DELETED_FLAG= STAGE.ETL_DELETED_FLAG
WHEN NOT MATCHED THEN 
INSERT ( 
    CREDIT_KEY
   ,REPORT_DATE
   ,BRANCH_KEY
   ,CLIENT_KEY
   ,CONTRACT_KEY
   ,INVOICE_KEY
   ,SOURCE_SYSTEM_ID
   ,SYSTEM_CODE
   ,PERIOD
   ,PERIOD_DATE
   ,PAYMENT_DATE
   ,BRANCH_NAME
   ,CLIENT_NUMBER
   ,CONTRACT_CODE
   ,SERVICE_AREA
   ,INVOICE_TYPE
   ,NUMBER_OF_INVOICES
   ,INVOICE_NUMBER
   ,CREDIT_TYPE
   ,CREDIT_AMOUNT
   ,PAYMENT_NUMBER
   ,PAYMENT_NOTES
   ,CHECK_NUMBER
   ,AUDIT_NUMBER
   ,WRITEOFF_REASON_CODE
   ,WRITEOFF_REASON_DESCRIPTION
   ,ETL_TASK_KEY
   ,ETL_INSERTED_TASK_KEY
   ,ETL_INSERTED_DATE
   ,ETL_INSERTED_BY
   ,ETL_LAST_UPDATED_DATE
   ,ETL_LAST_UPDATED_BY
   ,ETL_DELETED_FLAG
) 
VALUES (
    STAGE.CREDIT_KEY
   ,STAGE.REPORT_DATE
   ,STAGE.BRANCH_KEY
   ,STAGE.CLIENT_KEY
   ,STAGE.CONTRACT_KEY
   ,STAGE.INVOICE_KEY
   ,STAGE.SOURCE_SYSTEM_ID
   ,STAGE.SYSTEM_CODE
   ,STAGE.PERIOD
   ,STAGE.PERIOD_DATE
   ,STAGE.PAYMENT_DATE
   ,STAGE.BRANCH_NAME
   ,STAGE.CLIENT_NUMBER
   ,STAGE.CONTRACT_CODE
   ,STAGE.SERVICE_AREA
   ,STAGE.INVOICE_TYPE
   ,STAGE.NUMBER_OF_INVOICES
   ,STAGE.INVOICE_NUMBER
   ,STAGE.CREDIT_TYPE
   ,STAGE.CREDIT_AMOUNT
   ,STAGE.PAYMENT_NUMBER
   ,STAGE.PAYMENT_NOTES
   ,STAGE.CHECK_NUMBER
   ,STAGE.AUDIT_NUMBER
   ,STAGE.WRITEOFF_REASON_CODE
   ,STAGE.WRITEOFF_REASON_DESCRIPTION
   ,STAGE.ETL_TASK_KEY
   ,STAGE.ETL_INSERTED_TASK_KEY
   ,STAGE.ETL_INSERTED_DATE
   ,STAGE.ETL_INSERTED_BY
   ,STAGE.ETL_LAST_UPDATED_DATE
   ,STAGE.ETL_LAST_UPDATED_BY
   ,STAGE.ETL_DELETED_FLAG
);
SELECT CONCAT(''Message : '',"number of rows inserted", '' Rows Insrted & '' ,"number of rows updated",'' Rows Updated.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;
    ';