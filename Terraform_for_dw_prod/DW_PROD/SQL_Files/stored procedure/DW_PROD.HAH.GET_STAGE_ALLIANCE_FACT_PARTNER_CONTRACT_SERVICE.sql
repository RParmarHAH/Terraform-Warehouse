CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_ALLIANCE_FACT_PARTNER_CONTRACT_SERVICE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN

--*****************************************************************************************************************************
-- NAME:  ALLIANCE FACT PARTNER CONTRACT SERVICE
--
-- PURPOSE: Populates Stage ALLIANCE FACT FACT PARTNER CONTRACT SERVICE
--
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 11/07/23    Shraddha Sejpal        Initial version
-- 12/25/23	   Shraddha Sejpal		  Added State											 
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.ALLIANCE_FACT_PARTNER_CONTRACT_SERVICE
WITH DATA AS (
	SELECT
		CASE WHEN (CONTAINS(UPPER(P.BADDRESS1), C.FIRSTNAME) AND CONTAINS(UPPER(P.BADDRESS1), C.LASTNAME)) 
							OR (
									CONTAINS(UPPER(C.LASTNAME), REGEXP_SUBSTR(UPPER(P.BADDRESS1), ''\\\\\\\\S+$''))
									OR CONTAINS(REGEXP_SUBSTR(UPPER(P.BADDRESS1), ''\\\\\\\\S+$''), UPPER(C.LASTNAME)
									)
							) OR CT.NAME = ''Private Pay''
							  OR P.PAYORID IS NULL THEN TRUE ELSE FALSE END IS_PRIVATE_PAY
				, MD5(''ALLIANCE'' 
							||  ''-'' || NVL(P.PAYORID, ''-1'')
							|| ''-'' || SR.SERVICECODE 
							|| ''-'' || IFF(IS_PRIVATE_PAY, ''PRIVATEPAY'', '''')
							|| ''-'' || ''GENERATIONS''
						) AS PARTNER_CONTRACT_SERVICE_KEY
		, 19 AS SOURCE_SYSTEM_ID
		, ''ALLIANCE'' AS SYSTEM_CODE
		,''MI'' AS STATE		  
        ,MD5(''ALLIANCE'' 
							||  ''-'' || NVL(P.PAYORID, ''-1'')
							|| ''-'' || SR.SERVICECODE 
							|| ''-'' || IFF(IS_PRIVATE_PAY, ''PRIVATEPAY'', '''')
							|| ''-'' || ''GENERATIONS''
						) AS PARTNER_CONTRACT_KEY
		, NVL(P.PAYORID, ''-1'') AS PARTNER_CODE
		, IFF(IS_PRIVATE_PAY AND P.BADDRESS1 IS NULL, ''Private Pay'', P.BADDRESS1) AS PARTNER_NAME 
		, CONCAT(NVL(P.PAYORID, ''-1''),''-'',SR.SERVICECODE) AS CONTRACT_CODE
		,TRIM(CONCAT(NVL(P.BADDRESS1,''''), IFF(IS_PRIVATE_PAY, '' (Private Pay)'',''''), '' - '', TRIM(SR.DESCRIPTION)))  AS CONTRACT_NAME
        ,MD5(''ALLIANCE'' || ''-'' || SR.SERVICECODE ||  ''-'' || ''ALLIANCE'') AS SERVICE_KEY
		,SR.SERVICECODE AS SERVICE_CODE
        ,SR.DESCRIPTION AS SERVICENAME
		,NULL AS BILLING_KEY
		,NULL AS BILLING_CODE
		,NULL AS BILL_NAME
		,IFF(SR.DESCRIPTION ILIKE ''%NON%BILL%'' OR NVL(SR.COST, 0) = 0, FALSE, TRUE) AS BILLABLE_FLAG
		,CASE WHEN SR.FLATRATE =TRUE THEN ''Visit'' WHEN SR.FLATRATE= FALSE THEN ''Hourly'' ELSE NULL END AS BILL_TYPE
		,NULL AS BILL_UOM
		,CASE WHEN SR.FLATRATE =TRUE THEN ''Visit'' WHEN SR.FLATRATE= FALSE THEN ''Hourly'' ELSE NULL END AS SCHEDULE_TYPE
		,NULL AS SCHEDULE_UOM
		,TRUE AS AUTHORIZATION_REQUIRED_FLAG
		,TRUE AS PAYABLE_FLAG                      
		,FALSE AS EXPENSE_FLAG                  
		,NULL AS MILEAGE_FLAG                     
FROM DISC_PROD.GENERATIONSALLIANCE.SCHEDULES SCH
	INNER JOIN DISC_PROD.GENERATIONSALLIANCE.SERVICES SR
	    ON SR.SERVICECODE  = SCH.SERVICECODE
   	LEFT JOIN  DISC_PROD.GENERATIONSALLIANCE.CLIENT C 
	    ON C.CLIENTID = SCH.CLIENTID 
	LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.CLIENTPAYORS CPY
	    ON SCH.CLIENTID = CPY.CLIENTID
	LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.PAYOR P
	    ON P.PAYORID = CPY.PAYORID
	LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.CLIENTTYPE CT 
	    ON CT.CLIENTTYPEID = C.CLIENTTYPEID
	WHERE C.CLIENTID NOT IN (SELECT CLIENT_NUMBER FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_CLIENT_NUMBER WHERE SOURCE_SYSTEM_ID = 19 AND SYSTEM_CODE = ''GENERATIONS'')
			AND SCH."DATE"::DATE <= ''2022-09-30''::DATE
	UNION 
	SELECT
		CASE WHEN (CONTAINS(UPPER(P.BADDRESS1), C.FIRSTNAME) AND CONTAINS(UPPER(P.BADDRESS1), C.LASTNAME)) 
							OR (
									CONTAINS(UPPER(C.LASTNAME), REGEXP_SUBSTR(UPPER(P.BADDRESS1), ''\\\\\\\\S+$''))
									OR CONTAINS(REGEXP_SUBSTR(UPPER(P.BADDRESS1), ''\\\\\\\\S+$''), UPPER(C.LASTNAME)
									)
							) OR CT.NAME = ''Private Pay''
							  OR P.PAYORID IS NULL THEN TRUE ELSE FALSE END IS_PRIVATE_PAY
				, MD5(''ALLIANCE'' 
							||  ''-'' || NVL(P.PAYORID, ''-1'')
							|| ''-'' || SR.SERVICECODE 
							|| ''-'' || IFF(IS_PRIVATE_PAY, ''PRIVATEPAY'', '''')
							|| ''-'' || ''GENERATIONS''
						) AS PARTNER_CONTRACT_SERVICE_KEY
		, 19 AS SOURCE_SYSTEM_ID
		, ''ALLIANCE'' AS SYSTEM_CODE
		,''MI'' AS STATE		  
        ,MD5(''ALLIANCE'' 
							||  ''-'' || NVL(P.PAYORID, ''-1'')
							|| ''-'' || SR.SERVICECODE 
							|| ''-'' || IFF(IS_PRIVATE_PAY, ''PRIVATEPAY'', '''')
							|| ''-'' || ''GENERATIONS''
						) AS PARTNER_CONTRACT_KEY
		, NVL(P.PAYORID, ''-1'') AS PARTNER_CODE
		, IFF(IS_PRIVATE_PAY AND P.BADDRESS1 IS NULL, ''Private Pay'', P.BADDRESS1) AS PARTNER_NAME 
		, CONCAT(NVL(P.PAYORID, ''-1''),''-'',SR.SERVICECODE) AS CONTRACT_CODE
		,TRIM(CONCAT(NVL(P.BADDRESS1,''''), IFF(IS_PRIVATE_PAY, '' (Private Pay)'',''''), '' - '', TRIM(SR.DESCRIPTION)))  AS CONTRACT_NAME
        ,MD5(''ALLIANCE'' || ''-'' || SR.SERVICECODE ||  ''-'' || ''ALLIANCE'') AS SERVICE_KEY
		,SR.SERVICECODE AS SERVICE_CODE
        ,SR.DESCRIPTION AS SERVICENAME
		,NULL AS BILLING_KEY
		,NULL AS BILLING_CODE
		,NULL AS BILL_NAME
		,IFF(SR.DESCRIPTION ILIKE ''%NON%BILL%'' OR NVL(SR.COST, 0) = 0, FALSE, TRUE) AS BILLABLE_FLAG
		,CASE WHEN SR.FLATRATE =TRUE THEN ''Visit'' WHEN SR.FLATRATE= FALSE THEN ''Hourly'' ELSE NULL END AS BILL_TYPE
		,NULL AS BILL_UOM
		,CASE WHEN SR.FLATRATE =TRUE THEN ''Visit'' WHEN SR.FLATRATE= FALSE THEN ''Hourly'' ELSE NULL END AS SCHEDULE_TYPE
		,NULL AS SCHEDULE_UOM
		,TRUE AS AUTHORIZATION_REQUIRED_FLAG
		,TRUE AS PAYABLE_FLAG             
		,FALSE AS EXPENSE_FLAG                
		,NULL AS MILEAGE_FLAG
		FROM DISC_PROD.GENERATIONSALLIANCE.SERVICEREQUEST SRE
	INNER JOIN DISC_PROD.GENERATIONSALLIANCE.SERVICES SR
	    ON SR.SERVICECODE  = SRE.SERVICECODE
	INNER JOIN  DISC_PROD.GENERATIONSALLIANCE.CLIENT C 
	    ON C.CLIENTID = SRE.CLIENTID 
	LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.CLIENTPAYORS CPY
		ON CPY.CLIENTID = SRE.CLIENTID
	LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.PAYOR P
	    ON P.PAYORID = CPY.PAYORID
	LEFT JOIN DISC_PROD.GENERATIONSALLIANCE.CLIENTTYPE CT 
	    ON CT.CLIENTTYPEID = C.CLIENTTYPEID
	WHERE C.CLIENTID NOT IN (SELECT CLIENT_NUMBER FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_CLIENT_NUMBER WHERE SOURCE_SYSTEM_ID = 19 AND SYSTEM_CODE = ''GENERATIONS'')
	QUALIFY DENSE_RANK() OVER(PARTITION BY SRE.SERVICEREQUESTID, CPY.CLIENTID 
					  	 ORDER BY IFF(NVL(SRE.PAYORID, 0) = CPY.PAYORID, 2, NVL(CPY.ISPRIMARY, 0)::INT) DESC
						  		, IFF(NVL(SRE.PAYORID, 0) = CPY.PAYORID, 2, NVL(CPY.CURRENTPAYOR, 0)::INT) DESC) = 1)
SELECT * EXCLUDE(IS_PRIVATE_PAY),:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
		:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP) :: timestamp_ntz as ETL_INSERTED_DATE,
		CURRENT_USER as ETL_INSERTED_BY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP) :: timestamp_ntz as ETL_UPDATED_DATE,
		CURRENT_USER as ETL_LAST_UPDATED_BY,
		0 as ETL_DELETED_FLAG FROM DATA;
RETURN ''SUCCESS'';
end;
';