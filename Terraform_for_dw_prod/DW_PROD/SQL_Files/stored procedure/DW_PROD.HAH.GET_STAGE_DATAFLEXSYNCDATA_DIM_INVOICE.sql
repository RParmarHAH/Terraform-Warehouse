CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_DATAFLEXSYNCDATA_DIM_INVOICE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN
    --*****************************************************************************************************************************
-- NAME:  DataFlexSyncData_DIM_INVOICE
--
-- PURPOSE: Creates one row per INVOICE according to DataFlexSyncData
--
-- NOTE: Payment Date is not available yet
--      Still missing Bill Supervior, Bill Manager, and Payor Name
--      DataFlex has Invoice Credit which is not included at this time
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------        
-- 02/05/20    Mohd Kamaludin        Initial Development
-- 02/10/20    Mohd Kamaludin        Moved Bill_Code from DIM Invoice to Fact Revenue due to invoice may have multiple Bill Code
--                                      Added Bill Rep.
-- 02/11/20	   Mohd Kamaludin		 Updated per changes on DIM INVOICE sqldbm model 
-- 02/04/21		Mir Ali				Added Aging invoices (from DfArInvoices)
-- 02/28/22     Deven Kapasi         Leveraged dataflex dedupe tables
-- 08/26/22     Jashvant Patel		 Leveraged History table to display old data
-- 21/04/2023 	PINKAL PANCHAL 		ADDED INVOICE_STATUS_MAPPING FOR RCM
-- 15/06/23		PINKAL PANCHAL		Add PAYMENTMETHOD condition to RCM Aging invoices
-- 09/08/23     Mirisha             Dedupe change for Client_key(MASTER_CLIENT_NUMBER)
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO STAGE.DATAFLEXSYNCDATA_DIM_INVOICE
WITH CHANGED_DATA_ARINVOICES AS (
	SELECT DISTINCT INV.DBNAME, INV.INVOICENUMBER, INV.OFFICE, INV.PERIOD, INV.CONTRACTCODE, 
		COALESCE(BRANCH.BRANCH_KEY, MD5(INV.DBNAME || ''-'' || INV.OFFICE || ''-'' || ''DATAFLEXSYNCDATA'')) AS BRANCH_KEY,
		TRY_CAST(CONCAT(-100, INV.OFFICE) AS INTEGER) AS DUMMY_CLIENT_NUMBER,
		MD5(INV.DBNAME || ''-'' || DUMMY_CLIENT_NUMBER || ''-'' || ''DATAFLEXSYNCDATA-DUMMY'') AS DUMMY_CLIENT_KEY
	FROM DISC_PROD.DATAFLEXSYNCDATA.DFARINVOICES INV
	LEFT JOIN HAH.DIM_BRANCH AS BRANCH
		ON BRANCH.SOURCE_SYSTEM_ID = 3 AND BRANCH.SYSTEM_CODE = INV.DBNAME AND BRANCH.OFFICE_CODE = INV.OFFICE::STRING
	WHERE INV.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz
),DEDUPE_CLIENT as
(
select md5(F.DBNAME || ''-'' || substring(F.MASTER_ID,3) || ''-'' || ''DATAFLEXSYNCDATA'') CLIENT_KEY
,substring(F.MASTER_ID,3) AS CLIENT_NUMBER
,regexp_replace(F.MASTER_ID,F.DBNAME)::number AS MASTER_CLIENT_NUMBER
,F.DBNAME AS SYSTEM_CODE
from DISC_DEDUPE_PROD.DATAFLEXSYNCDATA.CLIENT_MASTER_LIST F
UNION
select md5(M.DBNAME || ''-'' || UPPER(NVL(TRIM(substring(M.MASTER_ID,3)), '''')) || ''-'' || ''DATAFLEXSYNCDATA'') CLIENT_KEY
,M.NUMBER AS CLIENT_NUMBER
,regexp_replace(M.MASTER_ID,M.DBNAME)::number MASTER_CLIENT_NUMBER
,M.DBNAME AS SYSTEM_CODE
from DISC_DEDUPE_PROD.DATAFLEXSYNCDATA.CLIENT_MATCH_LIST M
WHERE M.ID<>M.MASTER_ID
UNION
select F.CLIENT_KEY
,F.CLIENT_NUMBER
,F.CLIENT_NUMBER MASTER_CLIENT_NUMBER
,F.SYSTEM_CODE
from HAH.DIM_CLIENT F
WHERE F.SOURCE_SYSTEM_ID=3
AND CLIENT_LAST_NAME=''BULK BILLING DUMMY CLIENT''
and F.CLIENT_NUMBER<0
),
INVOICE_STATUS_MAPPING AS 
(
SELECT	
	INV.INVOICENO::STRING AS INVOICENO,
    3 AS SOURCE_SYSTEM_ID ,
	inv.DBNAME AS SYSTEM_CODE ,
	inv.OFFICE, inv.PERIOD,inv.CONTRACTCODE,
    CASE WHEN inv.OUTSANDINGAMOUNT <= 0 THEN ''PAID''
        WHEN inv.OUTSANDINGAMOUNT > 0 AND max(inv.PAYMENTRECEIVED) > 0 THEN ''PARTIAL PAY''
        ELSE ''BILLED'' END AS DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY    
FROM DISC_PROD.DATAFLEXSYNCDATA.DFINVOICES inv
GROUP by inv.DBNAME,INV.INVOICENO,inv.OUTSANDINGAMOUNT,inv.OFFICE, inv.PERIOD,inv.CONTRACTCODE
UNION 
SELECT DISTINCT 
	ARINV.INVOICENUMBER AS INVOICENO,
	3 AS SOURCE_SYSTEM_ID,
	ARINV.DBNAME AS SYSTEM_CODE,
	ARINV.OFFICE, ARINV.PERIOD,ARINV.CONTRACTCODE,
	iff(count(DISTINCT ARINV.OFFICE)=1,office1.INVOICE_STATUS,office2.INVOICE_STATUS) DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY 
FROM DISC_PROD.DATAFLEXSYNCDATA.DFARINVOICES ARINV
LEFT JOIN 
(
SELECT
	ARINV.INVOICENUMBER,ARINV.DBNAME,ARINV.OFFICE, ARINV.PERIOD,ARINV.CONTRACTCODE,
	CASE WHEN sum(ARINV.OUTSTANDING) <= 0 THEN ''PAID''
		WHEN sum(ARINV.OUTSTANDING) > 0 AND sum(ARINV.GROSSPAID) > 0 THEN ''PARTIAL PAY''
	ELSE ''BILLED'' END AS INVOICE_STATUS
FROM DISC_PROD.DATAFLEXSYNCDATA.DFARINVOICES ARINV
GROUP BY ARINV.DBNAME,ARINV.INVOICENUMBER,
ARINV.OFFICE, ARINV.PERIOD,ARINV.CONTRACTCODE
) office1 ON office1.INVOICENUMBER=ARINV.INVOICENUMBER AND office1.DBNAME=ARINV.DBNAME AND office1.OFFICE=ARINV.OFFICE 
AND office1.PERIOD=ARINV.PERIOD AND office1.CONTRACTCODE=ARINV.CONTRACTCODE
LEFT JOIN 
(
SELECT 
	ARINV.INVOICENUMBER,ARINV.DBNAME,ARINV.OUTSTANDING,ARINV.GROSSPAID,ARINV.OFFICE, ARINV.PERIOD,ARINV.CONTRACTCODE,
	CASE WHEN ARINV.OUTSTANDING <= 0 THEN ''PAID''
		WHEN ARINV.OUTSTANDING > 0 AND ARINV.GROSSPAID > 0 THEN ''PARTIAL PAY''
	ELSE ''BILLED'' END AS INVOICE_STATUS
FROM DISC_PROD.DATAFLEXSYNCDATA.DFARINVOICES ARINV
GROUP BY ARINV.DBNAME,ARINV.INVOICENUMBER,ARINV.OUTSTANDING,ARINV.GROSSPAID,
ARINV.OFFICE, ARINV.PERIOD,ARINV.CONTRACTCODE
) office2 ON office2.INVOICENUMBER=ARINV.INVOICENUMBER AND office2.DBNAME=ARINV.DBNAME AND office2.OFFICE=ARINV.OFFICE 
AND office2.PERIOD=ARINV.PERIOD AND office2.CONTRACTCODE=ARINV.CONTRACTCODE
GROUP BY ARINV.DBNAME,ARINV.INVOICENUMBER,--ARINV.OUTSTANDING,ARINV.GROSSPAID,
ARINV.OFFICE, ARINV.PERIOD,ARINV.CONTRACTCODE,office1.INVOICE_STATUS,office2.INVOICE_STATUS
)
SELECT
      md5(inv.DBNAME ||''-''|| inv.invoiceno ||''-''|| ''DATAFLEXSYNCDATA'') AS INVOICE_KEY --PK
--    , MD5(inv.DBNAME || ''-'' || inv.CLIENTNUMBER || ''-'' || ''DATAFLEXSYNCDATA'') AS CLIENT_KEY
    , MD5(inv.DBNAME || ''-'' || NVL(DC.MASTER_CLIENT_NUMBER::INT,inv.CLIENTNUMBER) || ''-'' || ''DATAFLEXSYNCDATA'') AS CLIENT_KEY
    , inv.invoiceno::STRING AS INVOICE_NUMBER --BK
    , inv.PERIOD
    , ''Regular'' AS INVOICE_TYPE
    , 1 AS NUMBER_OF_CLIENTS
    , inv.DBNAME AS SYSTEM_CODE --BK
    , 3 AS SOURCE_SYSTEM_ID --BK
    , MD5(inv.DBNAME || ''-'' || inv.OFFICE || ''-'' || ''DATAFLEXSYNCDATA'') AS BRANCH_KEY
    , con.PAYORCODE AS PAYOR_CODE
    , con.CONTRACTNAME AS PAYOR_NAME
    , IFF(max(inv.OUTSANDINGAMOUNT) > 0, True, False) AS INVOICE_OPEN_FLAG
    , min(inv.INVOICECREATEDDATE) AS FIRST_INVOICE_DATE
    , IFF(inv.OUTSANDINGAMOUNT = 0, max(inv.LASTPAYDATE), NULL) AS FINAL_PAYMENT_DATE
    , inv.INVOICENO::STRING AS FIRST_INVOICE_NUMBER
    , 1 AS BILL_ITERATION
    , bp.NAME AS BILL_REPRESENTATIVE
    , NULL AS BILL_SUPERVISOR
    , NULL AS BILL_MANAGER
--    , CASE WHEN inv.OUTSANDINGAMOUNT = 0 THEN ''Fully Paid''
--        WHEN inv.OUTSANDINGAMOUNT > 0 AND max(inv.PAYMENTRECEIVED) > 0 THEN ''Partially Paid''
--        ELSE ''Billable'' END AS INVOICE_STATUS
--	CHANGES MADE ON 21/04/23 FOR INVOICE_STATUS_MAPPING BY PINKAL
	, DISM.DERIVED_INVOICE_STATUS AS INVOICE_STATUS
    , 0 AS WRITEOFF_FLAG
    , NULL AS WRITEOFF_REASON
    , max(inv.AMOUNTBILLED) AS AMOUNT_BILLED
    , max(inv.PAYMENTRECEIVED) AS AMOUNT_COLLECTED
    , inv.OUTSANDINGAMOUNT AS AMOUNT_OUTSTANDING
    , NVL(min(det.datefrom),''1900-01-01'') AS EFFECTIVE_FROM_DATE
    , NVL(max(det.dateto),''9999-12-31'') AS EFFECTIVE_TO_DATE
    ,
    -- ETL Fields
     :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
     :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,   
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG,
    0 AS ETL_INFERRED_MEMBER_FLAG
FROM DISC_PROD.DATAFLEXSYNCDATA.DFINVOICES inv
LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.ALL_DFINVOICEDETAILS det
    ON inv.DBNAME = det.DBNAME
           AND inv.INVOICENO = det.INVOICENO
LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.DFCONTRACTS con
    ON inv.CONTRACTCODE = con.CONTRACTCODE
           AND inv.DBNAME = con.DBNAME
LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.DFBILLPERSONS bp
        ON con.DBNAME = bp.DBNAME
               AND con.BILLPERSONCODE = bp.CODE
LEFT JOIN DEDUPE_CLIENT DC
        on inv.CLIENTNUMBER=DC.CLIENT_NUMBER
		   and inv.DBNAME=DC.SYSTEM_CODE
LEFT JOIN INVOICE_STATUS_MAPPING ISM ON ISM.invoiceno = inv.invoiceno::STRING AND ISM.SYSTEM_CODE = INV.DBNAME
LEFT JOIN HAH.DIM_INVOICE_STATUS_MAPPING DISM ON DISM.INVOICE_STATUS_KEY = ISM.INVOICE_STATUS_KEY
WHERE con.PAYMENTMETHOD!=''3'' and 		--Added on 15/06/23 for RCM by Pinkal 
(inv.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz
	OR det.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz)
GROUP BY inv.DBNAME, inv.INVOICENO, NVL(MASTER_CLIENT_NUMBER::INT,inv.CLIENTNUMBER), inv.OFFICE, inv.PERIOD, con.PAYORCODE, con.CONTRACTNAME, bp.NAME, inv.STATUS,
inv.OUTSANDINGAMOUNT,DISM.DERIVED_INVOICE_STATUS
-- Bulk billing invoices (from DfArInvoices -- unique key for details is INV.DBNAME, INV.INVOICENUMBER, INV.OFFICE, INV.PERIOD, INV.CONTRACTCODE, INV.SERVICEAREA, INV.SUPPLEMENTNO)
UNION ALL
SELECT MD5(CHANGED_DATA.DBNAME || ''-'' || CHANGED_DATA.INVOICENUMBER || ''-'' || 
		CHANGED_DATA.OFFICE || ''-'' || CHANGED_DATA.PERIOD || ''-'' || CHANGED_DATA.CONTRACTCODE || ''-'' || ''DATAFLEXSYNCDATA-DFARINVOICES'') AS INVOICE_KEY,
	CHANGED_DATA.DUMMY_CLIENT_KEY AS CLIENT_KEY,
	CHANGED_DATA.INVOICENUMBER::STRING AS INVOICE_NUMBER,
	CHANGED_DATA.PERIOD,
	''Lump Sum'' AS INVOICE_TYPE,
	SUM(INV.CLIENTBILLED) AS NUMBER_OF_CLIENTS,
	CHANGED_DATA.DBNAME AS SYSTEM_CODE,
	3 AS SOURCE_SYSTEM_ID,
	CHANGED_DATA.BRANCH_KEY,
	CON.PAYORCODE AS PAYOR_CODE,
	CON.CONTRACTNAME AS PAYOR_NAME,
	IFF(SUM(INV.OUTSTANDING) > 0, TRUE, FALSE) AS INVOICE_OPEN_FLAG,
	MIN(INV.DATECREATED) AS FIRST_INVOICE_DATE,
	IFF(SUM(INV.OUTSTANDING) <= 0, MAX(INV.LASTPAYDATE), NULL) AS FINAL_PAYMENT_DATE,
	CHANGED_DATA.INVOICENUMBER::STRING AS FIRST_INVOICE_NUMBER,
	1 AS BILL_ITERATION,
	BP.NAME AS BILL_REPRESENTATIVE,
	NULL AS BILL_SUPERVISOR,
	NULL AS BILL_MANAGER,
--	CASE WHEN SUM(INV.OUTSTANDING) <= 0 THEN ''Fully paid''
--		WHEN SUM(INV.OUTSTANDING) > 0 AND SUM(INV.GROSSPAID) > 0 THEN ''Partially Paid''
--		ELSE ''Billable'' END AS INVOICE_STATUS,
--	CHANGES MADE ON 21/04/23 FOR INVOICE_STATUS_MAPPING BY PINKAL
	DISM.DERIVED_INVOICE_STATUS AS INVOICE_STATUS,
	0 AS WRITEOFF_FLAG,
	NULL AS WRITEOFF_REASON,
	SUM(INV.AMOUNTBILLED) AS AMOUNT_BILLED,
	SUM(INV.GROSSPAID) AS AMOUNT_COLLECTED,
	SUM(INV.OUTSTANDING) AS AMOUNT_OUTSTANDING,
	''1/1/1900''::DATE AS EFFECTIVE_FROM_DATE,
	''12/31/9999''::DATE AS EFFECTIVE_TO_DATE,
    -- ETL Fields
       :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
       :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,  
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG,
    0 AS ETL_INFERRED_MEMBER_FLAG
FROM CHANGED_DATA_ARINVOICES AS CHANGED_DATA 
JOIN DISC_PROD.DATAFLEXSYNCDATA.DFARINVOICES INV
	ON INV.DBNAME = CHANGED_DATA.DBNAME AND INV.INVOICENUMBER = CHANGED_DATA.INVOICENUMBER
		AND INV.OFFICE = CHANGED_DATA.OFFICE AND INV.PERIOD = CHANGED_DATA.PERIOD AND INV.CONTRACTCODE = CHANGED_DATA.CONTRACTCODE
LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.DFCONTRACTS con
    ON inv.CONTRACTCODE = con.CONTRACTCODE
           AND inv.DBNAME = con.DBNAME
LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.DFBILLPERSONS bp
        ON con.DBNAME = bp.DBNAME
               AND con.BILLPERSONCODE = bp.CODE
LEFT JOIN INVOICE_STATUS_MAPPING ISM ON ISM.SYSTEM_CODE = CHANGED_DATA.DBNAME AND ISM.INVOICENO = CHANGED_DATA.INVOICENUMBER
		AND ISM.OFFICE = CHANGED_DATA.OFFICE AND ISM.PERIOD = CHANGED_DATA.PERIOD AND ISM.CONTRACTCODE = CHANGED_DATA.CONTRACTCODE
LEFT JOIN HAH.DIM_INVOICE_STATUS_MAPPING DISM ON DISM.INVOICE_STATUS_KEY = ISM.INVOICE_STATUS_KEY
where con.PAYMENTMETHOD=''3''	--Added on 15/06/23 for RCM by Pinkal
GROUP BY CHANGED_DATA.DBNAME, CHANGED_DATA.INVOICENUMBER, 
	CHANGED_DATA.OFFICE, CHANGED_DATA.PERIOD, CHANGED_DATA.CONTRACTCODE, 
	CHANGED_DATA.DUMMY_CLIENT_KEY, CHANGED_DATA.BRANCH_KEY,
	CON.PAYORCODE, CON.CONTRACTNAME, BP.NAME,DISM.DERIVED_INVOICE_STATUS
;
    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
    return return_result;
END;
      ';