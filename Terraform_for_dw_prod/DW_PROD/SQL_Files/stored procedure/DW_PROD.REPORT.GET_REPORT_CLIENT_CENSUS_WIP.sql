CREATE OR REPLACE PROCEDURE DW_PROD.REPORT.GET_REPORT_CLIENT_CENSUS_WIP("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN
    INSERT OVERWRITE INTO DW_PROD.REPORT.CLIENT_CENSUS_WIP

WITH VISIT_DATA AS (
SELECT DISTINCT
V.CLIENT_KEY,
FIRST_VALUE(V.ORIGINAL_CLIENT_KEY) OVER(PARTITION BY V.CLIENT_KEY ORDER BY CASE WHEN V.CLIENT_KEY = V.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END, MIN(V.SERVICE_DATE)) AS ORIGINAL_CLIENT_KEY,
V.SOURCE_SYSTEM_ID ,
FIRST_VALUE(V.ORIGINAL_SOURCE_SYSTEM_ID) OVER(PARTITION BY V.CLIENT_KEY ORDER BY CASE WHEN V.CLIENT_KEY = V.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END, MIN(V.SERVICE_DATE)) AS ORIGINAL_SOURCE_SYSTEM_ID ,
V.BRANCH_KEY,
FIRST_VALUE(V.ORIGINAL_BRANCH_KEY) OVER(PARTITION BY V.CLIENT_KEY ORDER BY CASE WHEN V.CLIENT_KEY = V.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END, MIN(V.SERVICE_DATE)) AS ORIGINAL_BRANCH_KEY,
V.SUPERVISOR_KEY,
C.REVENUE_CATEGORY,
C.REVENUE_SUBCATEGORY_CODE,
V.SERVICE_DATE,
NULLIF(LEAST(COALESCE(MIN(MIN(CT.REFERRAL_DATE)) OVER(PARTITION BY V.CLIENT_KEY), ''12/31/9999''), COALESCE(MIN(MIN(CT2.REFERRAL_DATE)) OVER(PARTITION BY V.CLIENT_KEY), ''12/31/9999'')), ''12/31/9999'') AS REFERRAL_DATE,
min(min(CT.admission_date)) over (PARTITION BY V.CLIENT_KEY) as admission_date,
DATE_TRUNC(''MONTH'',V.SERVICE_DATE) AS SERVICE_MONTH,
C.INCLUDE_FOR_EXEC_OPS_CLIENTS,
C.INCLUDE_FOR_OPS_PERF_CLIENTS
,NULL AS SCHEDULE_TYPE
FROM INTEGRATION.FACT_VISIT_MERGED  V
JOIN REPORT.VW_DASHBOARD_CONTRACTS C ON V.CONTRACT_KEY=C.CONTRACT_KEY
JOIN INTEGRATION.DIM_CLIENT_MERGED CT ON V.CLIENT_KEY=CT.CLIENT_KEY
JOIN INTEGRATION.DIM_CLIENT_MERGED CT2 ON V.ORIGINAL_CLIENT_KEY=CT2.ORIGINAL_CLIENT_KEY
WHERE V.CONFIRMED_FLAG = ''YES'' 
AND V.ORIGINAL_SOURCE_SYSTEM_ID NOT IN (4,7,17,13,9,3,8,16,19,1,2)
GROUP BY V.CLIENT_KEY,V.ORIGINAL_CLIENT_KEY,V.SOURCE_SYSTEM_ID , V.ORIGINAL_SOURCE_SYSTEM_ID ,V.BRANCH_KEY,V.ORIGINAL_BRANCH_KEY,C.REVENUE_CATEGORY,C.REVENUE_SUBCATEGORY_CODE,DATE_TRUNC(''MONTH'',V.SERVICE_DATE),V.SUPERVISOR_KEY,
    C.INCLUDE_FOR_EXEC_OPS_CLIENTS,C.INCLUDE_FOR_OPS_PERF_CLIENTS,V.SERVICE_DATE
 )--old_structure
,VISIT_DATA_DW_0 AS (
SELECT DISTINCT
V.CLIENT_KEY,
FIRST_VALUE(V.ORIGINAL_CLIENT_KEY) OVER(PARTITION BY V.CLIENT_KEY ORDER BY CASE WHEN V.CLIENT_KEY = V.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END, MIN(V.SERVICE_DATE)) AS ORIGINAL_CLIENT_KEY,
V.SOURCE_SYSTEM_ID ,
FIRST_VALUE(V.ORIGINAL_SOURCE_SYSTEM_ID) OVER(PARTITION BY V.CLIENT_KEY ORDER BY CASE WHEN V.CLIENT_KEY = V.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END, MIN(V.SERVICE_DATE)) AS ORIGINAL_SOURCE_SYSTEM_ID ,
V.BRANCH_KEY,
FIRST_VALUE(V.ORIGINAL_BRANCH_KEY) OVER(PARTITION BY V.CLIENT_KEY ORDER BY CASE WHEN V.CLIENT_KEY = V.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END, MIN(V.SERVICE_DATE)) AS ORIGINAL_BRANCH_KEY,
V.SUPERVISOR_KEY,
DS.REVENUE_CATEGORY,
DS.REVENUE_SUBCATEGORY_CODE,
V.SERVICE_DATE,
NULLIF(LEAST(COALESCE(MIN(MIN(CT.REFERRAL_DATE)) OVER(PARTITION BY V.CLIENT_KEY), ''12/31/9999''), COALESCE(MIN(MIN(CT2.REFERRAL_DATE)) OVER(PARTITION BY V.CLIENT_KEY), ''12/31/9999'')), ''12/31/9999'') AS REFERRAL_DATE,
min(min(CT.admission_date)) over (PARTITION BY V.CLIENT_KEY) as admission_date,
DATE_TRUNC(''MONTH'',V.SERVICE_DATE) AS SERVICE_MONTH
,NULL AS INCLUDE_FOR_EXEC_OPS_CLIENTS
,NULL AS INCLUDE_FOR_OPS_PERF_CLIENTS
,CS.SCHEDULE_TYPE AS SCHEDULE_TYPE
FROM INTEGRATION.FACT_VISIT_MERGED  V
--JOIN REPORT.VW_DASHBOARD_CONTRACTS C ON V.CONTRACT_KEY=C.CONTRACT_KEY
JOIN DW_PROD.HAH.FACT_PARTNER_CONTRACT_SERVICE CS ON V.PARTNER_CONTRACT_SERVICE_KEY = CS.PARTNER_CONTRACT_SERVICE_KEY
JOIN DW_PROD.HAH.DIM_SERVICES DS ON DS.SERVICE_KEY = CS.SERVICE_KEY
JOIN INTEGRATION.DIM_CLIENT_MERGED CT ON V.CLIENT_KEY=CT.CLIENT_KEY
JOIN INTEGRATION.DIM_CLIENT_MERGED CT2 ON V.ORIGINAL_CLIENT_KEY=CT2.ORIGINAL_CLIENT_KEY
WHERE V.CONFIRMED_FLAG = ''YES'' 
AND DS.REVENUE_CATEGORY NOT IN (''CLS'', ''NA'')
--AND CS.BILLABLE_FLAG = ''TRUE''
AND V.ORIGINAL_SOURCE_SYSTEM_ID IN (4,7,17,13,9,3,8,16,19,1,2)
GROUP BY V.CLIENT_KEY,V.ORIGINAL_CLIENT_KEY,V.SOURCE_SYSTEM_ID , V.ORIGINAL_SOURCE_SYSTEM_ID ,V.BRANCH_KEY,V.ORIGINAL_BRANCH_KEY,DS.REVENUE_CATEGORY,DS.REVENUE_SUBCATEGORY_CODE,DATE_TRUNC(''MONTH'',V.SERVICE_DATE),V.SUPERVISOR_KEY
    ,CS.SCHEDULE_TYPE,V.SERVICE_DATE
 )--new_structure
,FINAL_VISIT_DATA AS (
SELECT * FROM VISIT_DATA
GROUP BY ALL
UNION ALL
SELECT * FROM VISIT_DATA_DW_0
GROUP BY ALL
)--union of new and old structure
,FINAL_VISIT_DATA_UPDATED AS(
SELECT DISTINCT 
CLIENT_KEY,
FIRST_VALUE(V.ORIGINAL_CLIENT_KEY) 
OVER(PARTITION BY V.CLIENT_KEY ORDER BY CASE WHEN V.CLIENT_KEY = V.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END, MIN(V.SERVICE_DATE)) AS ORIGINAL_CLIENT_KEY,
V.SOURCE_SYSTEM_ID ,
FIRST_VALUE(V.ORIGINAL_SOURCE_SYSTEM_ID) OVER(PARTITION BY V.CLIENT_KEY ORDER BY 
        CASE WHEN V.CLIENT_KEY = V.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END, MIN(V.SERVICE_DATE)) AS ORIGINAL_SOURCE_SYSTEM_ID ,
        
V.BRANCH_KEY,
FIRST_VALUE(V.ORIGINAL_BRANCH_KEY) OVER(PARTITION BY V.CLIENT_KEY ORDER BY CASE WHEN V.CLIENT_KEY = V.ORIGINAL_CLIENT_KEY 
    THEN 1 ELSE 0 END, MIN(V.SERVICE_DATE)) AS ORIGINAL_BRANCH_KEY ,
V.SUPERVISOR_KEY,
V.REVENUE_CATEGORY,
V.REVENUE_SUBCATEGORY_CODE ,
V.REFERRAL_DATE,
V.admission_date,
V.SERVICE_MONTH ,
V.INCLUDE_FOR_EXEC_OPS_CLIENTS,
V.INCLUDE_FOR_OPS_PERF_CLIENTS 
,V.SCHEDULE_TYPE
FROM 
FINAL_VISIT_DATA V
GROUP BY V.CLIENT_KEY,V.ORIGINAL_CLIENT_KEY,V.SOURCE_SYSTEM_ID , V.ORIGINAL_SOURCE_SYSTEM_ID ,
V.BRANCH_KEY,V.ORIGINAL_BRANCH_KEY,V.REVENUE_CATEGORY,V.REVENUE_SUBCATEGORY_CODE,V.SUPERVISOR_KEY,
V.REFERRAL_DATE,V.admission_date,V.SERVICE_MONTH,V.INCLUDE_FOR_EXEC_OPS_CLIENTS,V.INCLUDE_FOR_OPS_PERF_CLIENTS
,V.SCHEDULE_TYPE
)--final_data including SCHEDULE_TYPE column
, DATA AS (
SELECT 
COALESCE(VISIT.CLIENT_KEY,A.CLIENT_KEY) AS CLIENT_KEY,
COALESCE(VISIT.ORIGINAL_CLIENT_KEY,A.ORIGINAL_CLIENT_KEY) AS ORIGINAL_CLIENT_KEY,
COALESCE (VISIT.SOURCE_SYSTEM_ID, A.SOURCE_SYSTEM_ID) AS SOURCE_SYSTEM_ID ,
COALESCE (VISIT.ORIGINAL_SOURCE_SYSTEM_ID, A.ORIGINAL_SOURCE_SYSTEM_ID) AS ORIGINAL_SOURCE_SYSTEM_ID ,
COALESCE(VISIT.BRANCH_KEY,A.BRANCH_KEY) AS BRANCH_KEY,
COALESCE(VISIT.ORIGINAL_BRANCH_KEY,A.ORIGINAL_BRANCH_KEY) AS ORIGINAL_BRANCH_KEY,
COALESCE(VISIT.SUPERVISOR_KEY,A.SUPERVISOR_KEY) AS SUPERVISOR_KEY,
COALESCE(VISIT.REVENUE_CATEGORY,A.REVENUE_CATEGORY) AS REVENUE_CATEGORY,
COALESCE(VISIT.REVENUE_SUBCATEGORY_CODE,A.REVENUE_SUBCATEGORY_CODE) AS REVENUE_SUBCATEGORY_CODE,
COALESCE(DATEADD(''MONTH'',1,A.SERVICE_MONTH),VISIT.SERVICE_MONTH) AS SERVICE_MONTH,
--CASE WHEN VISIT.CLIENT_KEY IS NULL THEN 1 ELSE 0 END AS TERMINATED_FLAG,
COALESCE(VISIT.REFERRAL_DATE,A.REFERRAL_DATE) AS REFERRAL_DATE,
FIRST_VALUE(COALESCE(DATEADD(''MONTH'',1,A.SERVICE_MONTH),VISIT.SERVICE_MONTH)) OVER (PARTITION BY VISIT.CLIENT_KEY,VISIT.REVENUE_CATEGORY,VISIT.REVENUE_SUBCATEGORY_CODE 
    ORDER BY COALESCE(DATEADD(''MONTH'',1,A.SERVICE_MONTH),VISIT.SERVICE_MONTH)) AS FIRST_SERVICE_DATE,
LAST_VALUE(COALESCE(DATEADD(''MONTH'',1,A.SERVICE_MONTH),VISIT.SERVICE_MONTH)) OVER (PARTITION BY VISIT.CLIENT_KEY,VISIT.REVENUE_CATEGORY,VISIT.REVENUE_SUBCATEGORY_CODE 
    ORDER BY COALESCE(DATEADD(''MONTH'',1,A.SERVICE_MONTH),VISIT.SERVICE_MONTH)) AS LAST_SERVICE_DATE,
CASE WHEN A.CLIENT_KEY IS NULL AND VISIT.CLIENT_KEY IS NOT NULL
    AND COALESCE(DATEADD(''MONTH'',1,A.SERVICE_MONTH),VISIT.SERVICE_MONTH) <> DATE_TRUNC(''MONTH'',FIRST_SERVICE_DATE) THEN 1 ELSE 0 END AS REACTIVATED_FLAG,
CASE WHEN COALESCE(DATEADD(''MONTH'',1,A.SERVICE_MONTH),VISIT.SERVICE_MONTH)=DATE_TRUNC(''MONTH'',FIRST_SERVICE_DATE) THEN 1 ELSE 0 END AS NEW_FLAG,
COALESCE(VISIT.INCLUDE_FOR_OPS_PERF_CLIENTS,A.INCLUDE_FOR_OPS_PERF_CLIENTS) AS INCLUDE_FOR_OPS_PERF_CLIENTS,
COALESCE(VISIT.INCLUDE_FOR_EXEC_OPS_CLIENTS,A.INCLUDE_FOR_EXEC_OPS_CLIENTS) AS INCLUDE_FOR_EXEC_OPS_CLIENTS,
COALESCE(VISIT.admission_date,A.admission_date) AS admission_date,
VISIT.SCHEDULE_TYPE
FROM FINAL_VISIT_DATA_UPDATED VISIT
FULL OUTER JOIN FINAL_VISIT_DATA_UPDATED A ON VISIT.CLIENT_KEY=A.CLIENT_KEY AND DATEADD(''MONTH'',-1,VISIT.SERVICE_MONTH)=A.SERVICE_MONTH
    AND VISIT.REVENUE_CATEGORY=A.REVENUE_CATEGORY AND VISIT.REVENUE_SUBCATEGORY_CODE=A.REVENUE_SUBCATEGORY_CODE
)
SELECT DISTINCT 
A.CLIENT_KEY,
A.ORIGINAL_CLIENT_KEY,
A.SOURCE_SYSTEM_ID,
A.ORIGINAL_SOURCE_SYSTEM_ID,
A.BRANCH_KEY,
A.ORIGINAL_BRANCH_KEY,
A.SUPERVISOR_KEY,
A.REVENUE_CATEGORY,
A.REVENUE_SUBCATEGORY_CODE,
A.SERVICE_MONTH,
CASE WHEN B.CLIENT_KEY IS NULL THEN 1 ELSE 0 END AS TERMINATED_FLAG,
A.REFERRAL_DATE,
A.FIRST_SERVICE_DATE,
A.LAST_SERVICE_DATE,
A.REACTIVATED_FLAG,
A.NEW_FLAG,
A.INCLUDE_FOR_OPS_PERF_CLIENTS,
A.INCLUDE_FOR_EXEC_OPS_CLIENTS,
A.ADMISSION_DATE
,A.SCHEDULE_TYPE
FROM DATA A 
LEFT JOIN FINAL_VISIT_DATA_UPDATED B ON A.CLIENT_KEY = B.CLIENT_KEY AND A.SERVICE_MONTH = B.SERVICE_MONTH
;
SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result
FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;
';