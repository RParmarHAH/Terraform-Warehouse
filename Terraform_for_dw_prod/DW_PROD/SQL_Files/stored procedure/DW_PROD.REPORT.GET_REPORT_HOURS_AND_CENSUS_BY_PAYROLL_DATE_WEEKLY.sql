CREATE OR REPLACE PROCEDURE DW_PROD.REPORT.GET_REPORT_HOURS_AND_CENSUS_BY_PAYROLL_DATE_WEEKLY("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN
    -- *****************************************************************************************************************************
 -- NAME: HOURS_AND_CENSUS_BY_PAYROLL_DATE_WEEKLY

 -- 08/16/22			DEEPEN GAJJAR 		CONVERTED DAILY HOURS AND SENSUS STRUCTURE INTO WEEKLY ADDING VISITS_CLEAN_SHIFTS AND VISITS_NEED_MAINTENANCE FIELDS 
 -- 08/25/22			DEEPEN GAJJAR 		ADDED PROSPERCARE ACQUISITION FLAG
 -- 10/05/22			SAM HUFF     		ADDED CLEARCARE ACQUISITION FLAG
 -- 11/10/22			RAJAT SAPKAL		UPDATED CONTRACT LOGIC AND REPLACED STATUS CODE WITH CONFIRMED FLAG IN FACT VISIT FILTER LOGIC
 -- 12/01/22         	DEEPEN GAJJAR       MODIFIED ACQUISITION FLAG LOGIC 
 -- 12/20/22			RAJAT SAPKAL		REWORKED LOGIC TO INCLUDE NON-CONFIRMED VISITS AS WELL AND ADDED FIELDS FOR NEW SCHEDULED METRICS
 -- 02/10/22            DEEPEN GAJJAR       ADDED ACQUISITION FLAGS FROM OPENSYSTEMS AND OSHAH
 -- 02/28/22            DEEPEN GAJJAR       MODIFIED ACQUISITION FLAGS FROM OPENSYSTEMS AND OSHAH
 -- 03/17/23            DEEPEN GAJJAR       ADDED ACQUISITION FLAGS for AXXESS AND ALLAINCE
 --	04/28/23            Deepen Gajjar       Added Acquisition flag for All generations
 --	10/09/23            Divesh Aneja	    Added mycare code
 --	10/10/23			Jashvant Patel		Added BERKSHIRE DATA
 --	10/13/23			Saurav Purohit		Removed PAYROLL_DATE, PAY_PERIOD_START_DATE, PAY_PERIOD_END_DATE fields (not being used in any dashboards)
 -- 10/20/23 			Shikhar Saxena	    Added ROMEO Acquisition code
-- *****************************************************************************************************************************
--NOTE:			If Manual Refresh is required then SCHEDULE_METRICS_WEEKLY should be refreshed first before running this object
-- *****************************************************************************************************************************

INSERT OVERWRITE INTO REPORT.HOURS_AND_CENSUS_BY_PAYROLL_DATE_WEEKLY
WITH  CONTRACTS_CLIENTS AS (
		SELECT C.CONTRACT_KEY,
			C.CONTRACT_CODE, 
			C.CONTRACT_NAME, 
			C.REVENUE_CATEGORY,
			INCLUDE_FOR_EXEC_OPS_CLIENTS AS INCLUDE_FOR_CLIENTS,
			--INCLUDE_FOR_EXEC_OPS_HOURS AS INCLUDE_FOR_HOURS,
			INCLUDE_FOR_OPS_PERF_HOURS
		FROM REPORT.VW_DASHBOARD_CONTRACTS C 
		WHERE INCLUDE_FOR_EXEC_OPS_CLIENTS = TRUE --OR INCLUDE_FOR_EXEC_OPS_HOURS = TRUE 
		),
		CONTRACTS AS (
		SELECT DISTINCT C.CONTRACT_KEY,
			C.CONTRACT_CODE, 
			C.CONTRACT_NAME, 
			C.REVENUE_CATEGORY,
			--INCLUDE_FOR_EXEC_OPS_CLIENTS AS INCLUDE_FOR_CLIENTS,
			INCLUDE_FOR_EXEC_OPS_HOURS AS INCLUDE_FOR_HOURS,
			INCLUDE_FOR_OPS_PERF_HOURS
		FROM REPORT.VW_DASHBOARD_CONTRACTS C
		LEFT JOIN (SELECT DISTINCT CONTRACT_KEY ,BILL_UNIT_TYPE FROM HAH.FACT_VISIT) V ON C.CONTRACT_KEY = V.CONTRACT_KEY
		WHERE nvl(V.BILL_UNIT_TYPE,''Hourly'') =''Hourly'' AND --(INCLUDE_FOR_EXEC_OPS_CLIENTS = TRUE OR
		INCLUDE_FOR_EXEC_OPS_HOURS = TRUE 
	),
 VISIT_DATA AS
    (
        SELECT DISTINCT
       /* COALESCE(P.CHECK_DATE,PAYROLL_NEXTCHECKDATE.CHECK_DATE) AS PAYROLL_DATE,
        COALESCE(P.PERIOD_START_DATE,PAYROLL_NEXTCHECKDATE.PERIOD_START_DATE) AS PAY_PERIOD_START_DATE,
        COALESCE(P.PERIOD_END_DATE,PAYROLL_NEXTCHECKDATE.PERIOD_END_DATE) AS PAY_PERIOD_END_DATE,*/
--        VISIT.SERVICE_DATE,
        DD.HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK,
        VISIT.CLIENT_KEY,
        VISIT.CONTRACT_KEY,
        VISIT.ORIGINAL_SOURCE_SYSTEM_ID,
        VISIT.SOURCE_SYSTEM_ID,
		VISIT.BRANCH_KEY,
		VISIT.SUPERVISOR_KEY,
		SUM(iff(CONFIRMED_FLAG = ''YES'',VISIT.HOURS_SERVED,0)) AS HOURS_SERVED,
      	SUM(COUNT(IFF(VISIT.CLEAN_SHIFT_FLAG = 1 AND CONFIRMED_FLAG = ''YES'', VISIT.VISIT_KEY, NULL))) OVER(PARTITION BY DD.HAH_CURRENT_WEEK_FIRST_DAY, VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY) 
      		AS VISITS_CLEAN_SHIFTS,
		SUM(COUNT(IFF(VISIT.CLEAN_SHIFT_FLAG = 0 AND CONFIRMED_FLAG = ''YES'', VISIT.VISIT_KEY, NULL))) OVER(PARTITION BY DD.HAH_CURRENT_WEEK_FIRST_DAY, VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY) 
			AS VISITS_NEED_MAINTENANCE					 
   FROM INTEGRATION.FACT_VISIT_MERGED VISIT
   JOIN HAH.DIM_DATE DD ON DD.CALENDAR_DATE = VISIT.SERVICE_DATE 
   /*Left JOIN INTEGRATION.FACT_BRANCH_PAYROLL_PERIODS_MERGED  P ON VISIT.PAYROLL_DATE = P.CHECK_DATE
        AND P.ORIGINAL_BRANCH_KEY =VISIT.ORIGINAL_BRANCH_KEY 
   LEFT JOIN (SELECT BRANCH_KEY,PERIOD_START_DATE,PERIOD_END_DATE,CHECK_DATE,ORIGINAL_BRANCH_KEY,
        lag(check_date) over (partition by BRANCH_KEY ORDER BY CHECK_DATE ASC) AS PreviousCheckDate
        FROM INTEGRATION.FACT_BRANCH_PAYROLL_PERIODS_MERGED) PAYROLL_NEXTCHECKDATE ON VISIT.PAYROLL_DATE < PAYROLL_NEXTCHECKDATE.CHECK_DATE
        AND VISIT.PAYROLL_DATE >= PAYROLL_NEXTCHECKDATE.PreviousCheckDate AND PAYROLL_NEXTCHECKDATE.ORIGINAL_BRANCH_KEY =VISIT.ORIGINAL_BRANCH_KEY */
   WHERE NVL(VISIT.BILL_UNIT_TYPE, ''Hourly'') = ''Hourly'' -- VISIT.CONFIRMED_FLAG = ''YES'' 	-- Only confirmed visits	-- Need all visits now									  
   GROUP BY
        DD.HAH_CURRENT_WEEK_FIRST_DAY ,
		VISIT.CLIENT_KEY,
		VISIT.CONTRACT_KEY,
		VISIT.ORIGINAL_SOURCE_SYSTEM_ID,
		VISIT.SOURCE_SYSTEM_ID,
		VISIT.BRANCH_KEY,
		VISIT.SUPERVISOR_KEY
        /*COALESCE(P.CHECK_DATE,PAYROLL_NEXTCHECKDATE.CHECK_DATE),
        COALESCE(P.PERIOD_START_DATE,PAYROLL_NEXTCHECKDATE.PERIOD_START_DATE),
        COALESCE(P.PERIOD_END_DATE,PAYROLL_NEXTCHECKDATE.PERIOD_END_DATE)*/
	),   
NEW_METRICS AS
	(	
		SELECT 
			/*PAYROLL_DATE,
			PAY_PERIOD_START_DATE, 
			PAY_PERIOD_END_DATE,*/
			SERVICE_WEEK,
			CLIENT_KEY,
			BRANCH_KEY,
			CONTRACT_KEY,
			SUPERVISOR_KEY,
			sum(HOURS_IN_REVIEW) AS HOURS_IN_REVIEW,
			sum(FUTURE_HOURS) AS FUTURE_HOURS,
			sum(FUTURE_CANCELLED_HOURS) AS FUTURE_CANCELLED_HOURS,
			sum(FUTURE_HOLD_HOURS) AS FUTURE_HOLD_HOURS,
			sum(HOURS_MISSED) AS HOURS_MISSED,
			sum(HOURS_CANCELLED) AS HOURS_CANCELLED,
			sum(HOURS_RESCHEDULED) AS HOURS_RESCHEDULED,
			sum(HOURS_SCHEDULED) AS HOURS_SCHEDULED,
			sum(VISITS_IN_REVIEW) AS VISITS_IN_REVIEW,
			sum(FUTURE_VISITS) AS FUTURE_VISITS,
			sum(FUTURE_CANCELLED_VISITS) AS FUTURE_CANCELLED_VISITS,
			sum(FUTURE_HOLD_VISITS) AS FUTURE_HOLD_VISITS,
			sum(VISITS_MISSED) AS VISITS_MISSED,
			sum(VISITS_COMPLETED) AS VISITS_COMPLETED,
			sum(VISITS_CANCELLED) AS VISITS_CANCELLED,
			sum(VISITS_RESCHEDULED) AS VISITS_RESCHEDULED,
			sum(VISITS_SCHEDULED) AS VISITS_SCHEDULED
		FROM REPORT.SCHEDULE_METRICS_WEEKLY
		GROUP BY 
			/*PAYROLL_DATE,
			PAY_PERIOD_START_DATE, 
			PAY_PERIOD_END_DATE,*/
			SERVICE_WEEK,
			CLIENT_KEY,
			BRANCH_KEY,
			CONTRACT_KEY,
			SUPERVISOR_KEY   	 
    )
      SELECT DISTINCT 
            /*DATA.PAYROLL_DATE,
            DATA.PAY_PERIOD_START_DATE,
            DATA.PAY_PERIOD_END_DATE,*/
            DATA.SERVICE_WEEK,
--            LAST_DAY(DATA.SERVICE_WEEK,"WEEK") AS SERVICE_END_OF_WEEK,
            DD.HAH_CURRENT_WEEK_LAST_DAY  AS SERVICE_END_OF_WEEK ,
			DATA.BRANCH_KEY,
			DATA.SUPERVISOR_KEY,
			DATA.CLIENT_KEY AS CLIENT_KEY_DATA,
			DATA.CONTRACT_KEY,
			DATA.ORIGINAL_SOURCE_SYSTEM_ID,
        	DATA.SOURCE_SYSTEM_ID,
			CASE WHEN CC.INCLUDE_FOR_CLIENTS = 1 THEN DATA.CLIENT_KEY END CLIENT_KEY,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN NM.HOURS_SCHEDULED END, 0) HOURS_SCHEDULED,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN DATA.HOURS_SERVED END, 0) HOURS_SERVED_ALL,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN NM.HOURS_CANCELLED END, 0) HOURS_CANCELLED,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN NM.HOURS_IN_REVIEW END, 0) HOURS_IN_REVIEW,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN NM.HOURS_MISSED END, 0) HOURS_MISSED,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN NM.FUTURE_HOURS END, 0) FUTURE_HOURS,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN NM.FUTURE_CANCELLED_HOURS END, 0) FUTURE_CANCELLED_HOURS,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN NM.FUTURE_HOLD_HOURS END, 0) FUTURE_HOLD_HOURS,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN NM.HOURS_RESCHEDULED END, 0) HOURS_RESCHEDULED,
			NVL(NM.VISITS_SCHEDULED, 0) VISITS_SCHEDULED,
			NVL(NM.VISITS_COMPLETED, 0) VISITS_COMPLETED,
			NVL(NM.VISITS_CANCELLED, 0) VISITS_CANCELLED,
			NVL(NM.VISITS_IN_REVIEW, 0) VISITS_IN_REVIEW,
			NVL(NM.VISITS_MISSED, 0) VISITS_MISSED,
			NVL(NM.FUTURE_VISITS, 0) FUTURE_VISITS,
			NVL(NM.FUTURE_CANCELLED_VISITS, 0) FUTURE_CANCELLED_VISITS,
			NVL(NM.FUTURE_HOLD_VISITS, 0) FUTURE_HOLD_VISITS,
			NVL(NM.VISITS_RESCHEDULED, 0) VISITS_RESCHEDULED,
            DATA.VISITS_CLEAN_SHIFTS,
            DATA.VISITS_NEED_MAINTENANCE,
			IFF(VISITS_COMPLETED = 0, FALSE, TRUE) AS CLIENT_SERVED_FLAG,
			:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
	        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
        	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
			CURRENT_USER as ETL_INSERTED_BY ,
			convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
			CURRENT_USER as ETL_LAST_UPDATED_BY,
			0 as ETL_DELETED_FLAG,
			0 AS ETL_INFERRED_MEMBER_FLAG,
				 IFF(COALESCE(CCSI_BRANCH.CLIENT_KEY,CCSI_ACQUIRED_CLIENT.CLIENT_KEY,MATRIXCARE_CLIENT.CLIENT_KEY,ALAYACARE_CLIENT.CLIENT_KEY,PRAETORIAN_ACQUIRED_CLIENT.CLIENT_KEY,PREFERRED_CLIENT.CLIENT_KEY,EDISON_CLIENT.CLIENT_KEY,MERIDIUS_ACQUIRED_CLIENT.CLIENT_KEY,LONGEVITY_ACQUIRED_CLIENT.CLIENT_KEY,ASR_CLIENT.CLIENT_KEY,CLEARCARE_CLIENT.CLIENT_KEY,BERKSHIRE_CLIENT.CLIENT_KEY,OPENSYSTEMS_CLIENT.CLIENT_KEY,AXXESS_CLIENT.CLIENT_KEY,ALLIANCE_CLIENT.CLIENT_KEY,MYCARE_CLIENT.CLIENT_KEY,ALL_GEN_CLIENT.CLIENT_KEY,RECCO_CLIENT.CLIENT_KEY) IS NULL, FALSE, TRUE) AS CLIENT_ACQUIRED_FLAG,
      --IFF(COALESCE(CCSI_BRANCH.BRANCH_KEY,CCSI_ACQUIRED_CLIENT.CLIENT_KEY) IS NULL, FALSE, TRUE) AS CLIENT_ACQUIRED_FLAG,
        CASE WHEN COALESCE(CCSI_BRANCH.CLIENT_KEY,CCSI_ACQUIRED_CLIENT.CLIENT_KEY) IS NOT NULL THEN ''CCSI'' 
        WHEN MATRIXCARE_CLIENT.CLIENT_KEY IS NOT NULL THEN ''ADAPTIVE'' 
        WHEN ALAYACARE_CLIENT.CLIENT_KEY IS NOT NULL THEN UPPER(ALAYACARE_CLIENT.AQUISITION_NAME)
        WHEN PRAETORIAN_ACQUIRED_CLIENT.CLIENT_KEY IS NOT NULL THEN ''PRAETORIAN''
        WHEN PREFERRED_CLIENT.CLIENT_KEY IS NOT NULL THEN ''PREFERRED''
        WHEN EDISON_CLIENT.CLIENT_KEY IS NOT NULL THEN ''EDISON''
        WHEN MERIDIUS_ACQUIRED_CLIENT.CLIENT_KEY IS NOT NULL THEN ''MERIDIUS''
        WHEN LONGEVITY_ACQUIRED_CLIENT.CLIENT_KEY IS NOT NULL THEN ''LONGEVITY''
        WHEN ASR_CLIENT.CLIENT_KEY IS NOT NULL THEN ''ASR''
		WHEN CLEARCARE_CLIENT.CLIENT_KEY IS NOT NULL THEN ''CLEARCARE''
		WHEN BERKSHIRE_CLIENT.CLIENT_KEY IS NOT NULL THEN ''BERKSHIRE''
		WHEN OPENSYSTEMS_CLIENT.CLIENT_KEY IS NOT NULL THEN ''OPENSYSTEMS''
		WHEN AXXESS_CLIENT.CLIENT_KEY IS NOT NULL THEN ''AXXESS''
		WHEN ALLIANCE_CLIENT.CLIENT_KEY IS NOT NULL THEN ''ALLIANCE''
		WHEN MYCARE_CLIENT.CLIENT_KEY IS NOT NULL THEN ''MYCARE''
        WHEN ALL_GEN_CLIENT.CLIENT_KEY IS NOT NULL THEN ''ALL GENERATIONS''
		WHEN RECCO_CLIENT.CLIENT_KEY IS NOT NULL THEN ''RECCO''
        ELSE NULL END AS CLIENT_ACQUISITION_NAME
            FROM VISIT_DATA AS DATA
            JOIN HAH.DIM_DATE DD ON DD.HAH_CURRENT_WEEK_FIRST_DAY = DATA.SERVICE_WEEK
	JOIN CONTRACTS_CLIENTS CC
	ON CC.CONTRACT_KEY = DATA.CONTRACT_KEY    
	LEFT JOIN CONTRACTS CONTRACT
			ON CONTRACT.CONTRACT_KEY = DATA.CONTRACT_KEY  
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY CCSI_BRANCH ON
    	  CCSI_BRANCH.BRANCH_KEY = DATA.BRANCH_KEY 
		  AND CCSI_BRANCH.CLIENT_KEY = DATA.CLIENT_KEY 
		  AND CCSI_BRANCH.CONTRACT_KEY = DATA.CONTRACT_KEY 
		  AND CCSI_BRANCH.AQUISITION_NAME =''CCSI''
          AND CCSI_BRANCH.SERVICE_WEEK =	DATA.SERVICE_WEEK
LEFT OUTER JOIN (SELECT CLIENT_KEY FROM HAH.FACT_CLIENT_ACQUIRED_WEEKLY WHERE AQUISITION_NAME = ''CCSI'' ) CCSI_ACQUIRED_CLIENT
          ON CCSI_ACQUIRED_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND DATA.SERVICE_WEEK >= ''2021-07-01''
--LEFT OUTER JOIN (SELECT DISTINCT CLIENT_KEY FROM HAH.FACT_CLIENT_ACQUIRED_WEEKLY_MERGED WHERE NOTES = ''Altamaha'') ALAYACARE_CLIENT
--          ON ALAYACARE_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY  ALAYACARE_CLIENT
ON ALAYACARE_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY
	AND ALAYACARE_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY
	AND ALAYACARE_CLIENT.SOURCE_SYSTEM_ID  = 9
    AND ALAYACARE_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY
    AND ALAYACARE_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK
--LEFT OUTER JOIN (SELECT DISTINCT CLIENT_KEY FROM HAH.FACT_CLIENT_ACQUIRED_WEEKLY_MERGED WHERE NOTES = ''Praetorian'') PRAETORIAN_ACQUIRED_CLIENT
--          ON PRAETORIAN_ACQUIRED_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND DATA.SERVICE_WEEK >= ''2022-01-01''
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY PRAETORIAN_ACQUIRED_CLIENT ON 
	      PRAETORIAN_ACQUIRED_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      PRAETORIAN_ACQUIRED_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      PRAETORIAN_ACQUIRED_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
	      PRAETORIAN_ACQUIRED_CLIENT.AQUISITION_NAME =''Praetorian'' AND
		  PRAETORIAN_ACQUIRED_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK AND		  
	      DATA.SERVICE_WEEK >= ''2022-01-01''
--LEFT OUTER JOIN (SELECT BRANCH_KEY FROM HAH.DIM_BRANCH WHERE BRANCH_NAME like ''A__%'' and SYSTEM_CODE = ''MATRIXCARE'') MATRIXCARE_BRANCH
--                      ON MATRIXCARE_BRANCH.BRANCH_KEY = DATA.BRANCH_KEY
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY MATRIXCARE_CLIENT
		  ON MATRIXCARE_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY 
		  AND MATRIXCARE_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY 
		  AND MATRIXCARE_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY 
		  AND MATRIXCARE_CLIENT.AQUISITION_NAME =''ADAPTIVE''
		  AND MATRIXCARE_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK		  
--LEFT OUTER JOIN (SELECT DISTINCT CLIENT_KEY FROM HAH.FACT_CLIENT_ACQUIRED_WEEKLY_MERGED WHERE NOTES = ''Preferred'') PREFERRED_CLIENT
--         ON PREFERRED_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY PREFERRED_CLIENT
		  ON PREFERRED_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY 
		  AND PREFERRED_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY 
		  AND PREFERRED_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY 
		  AND PREFERRED_CLIENT.AQUISITION_NAME =''PREFERRED''
		  AND PREFERRED_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK		  
--LEFT OUTER JOIN (SELECT DISTINCT CLIENT_KEY FROM HAH.FACT_CLIENT_ACQUIRED_WEEKLY_MERGED WHERE NOTES = ''Edison'') EDISON_CLIENT
--         ON EDISON_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY   
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY EDISON_CLIENT
		  ON EDISON_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY 
		  AND EDISON_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY 
		  AND EDISON_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY 
		  AND EDISON_CLIENT.AQUISITION_NAME =''EDISON''
		  AND EDISON_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK		  
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY MERIDIUS_ACQUIRED_CLIENT ON 
	      MERIDIUS_ACQUIRED_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      MERIDIUS_ACQUIRED_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      MERIDIUS_ACQUIRED_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
          MERIDIUS_ACQUIRED_CLIENT.AQUISITION_NAME =''Meridius'' AND
		  MERIDIUS_ACQUIRED_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK		  
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY LONGEVITY_ACQUIRED_CLIENT ON 
	      LONGEVITY_ACQUIRED_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      LONGEVITY_ACQUIRED_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      LONGEVITY_ACQUIRED_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
	      LONGEVITY_ACQUIRED_CLIENT.AQUISITION_NAME =''Longevity'' AND
		  LONGEVITY_ACQUIRED_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK		  
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY ASR_CLIENT ON 
	      ASR_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      ASR_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      ASR_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
	      ASR_CLIENT.AQUISITION_NAME =''ASR'' AND
		  ASR_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK		  
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY CLEARCARE_CLIENT ON 
	      CLEARCARE_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      CLEARCARE_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      CLEARCARE_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
	      CLEARCARE_CLIENT.AQUISITION_NAME =''CLEARCARE'' AND
		  CLEARCARE_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY BERKSHIRE_CLIENT ON 
	      BERKSHIRE_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      BERKSHIRE_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      BERKSHIRE_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
	      BERKSHIRE_CLIENT.AQUISITION_NAME =''BERKSHIRE'' AND
		  BERKSHIRE_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK	
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY OPENSYSTEMS_CLIENT ON 
	      OPENSYSTEMS_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      OPENSYSTEMS_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      OPENSYSTEMS_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
	      OPENSYSTEMS_CLIENT.AQUISITION_NAME =''OPENSYSTEMS'' AND
		  OPENSYSTEMS_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY AXXESS_CLIENT ON 
	      AXXESS_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      AXXESS_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      AXXESS_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
	      AXXESS_CLIENT.AQUISITION_NAME =''AXXESS'' AND
		  AXXESS_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY ALLIANCE_CLIENT ON 
	      ALLIANCE_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      ALLIANCE_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      ALLIANCE_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
	      ALLIANCE_CLIENT.AQUISITION_NAME =''ALLIANCE'' AND
		  ALLIANCE_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY MYCARE_CLIENT ON 
	      MYCARE_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      MYCARE_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      MYCARE_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
	      MYCARE_CLIENT.AQUISITION_NAME =''MYCARE'' AND
		  MYCARE_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK		  
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY ALL_GEN_CLIENT ON 
	      ALL_GEN_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      ALL_GEN_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      ALL_GEN_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
	      ALL_GEN_CLIENT.AQUISITION_NAME =''All Generations'' AND
		  ALL_GEN_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK
LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED_WEEKLY RECCO_CLIENT ON 
	      RECCO_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND
	      RECCO_CLIENT.CONTRACT_KEY = DATA.CONTRACT_KEY AND
	      RECCO_CLIENT.BRANCH_KEY = DATA.BRANCH_KEY AND
	      RECCO_CLIENT.AQUISITION_NAME =''RECCO'' AND
		  RECCO_CLIENT.SERVICE_WEEK =	DATA.SERVICE_WEEK
LEFT OUTER JOIN NEW_METRICS AS NM ON DATA.SERVICE_WEEK=NM.SERVICE_WEEK 
			AND DATA.CLIENT_KEY = NM.CLIENT_KEY AND DATA.BRANCH_KEY = NM.BRANCH_KEY 
			AND DATA.CONTRACT_KEY=NM.CONTRACT_KEY AND DATA.SUPERVISOR_KEY=NM.SUPERVISOR_KEY
			/*AND NVL(DATA.PAYROLL_DATE,''0'')= NVL(NM.PAYROLL_DATE,''0'')
			AND NVL(DATA.PAY_PERIOD_START_DATE,''0'')= NVL(NM.PAY_PERIOD_START_DATE,''0'')
			AND NVL(DATA.PAY_PERIOD_END_DATE,''0'')= NVL(NM.PAY_PERIOD_END_DATE,''0'')*/
WHERE IFF(CLIENT_SERVED_FLAG = TRUE, NVL(DATA.HOURS_SERVED, 0), 1) > 0
	--AND NVL(DATA.HOURS_SERVED, 0) > 0
    --AND DATA.SERVICE_WEEK <= LAST_DAY(CURRENT_DATE,"WEEK")			-- Need all data in structure and upto 4 weeks into the future - in views
;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

return return_result;
END;
';