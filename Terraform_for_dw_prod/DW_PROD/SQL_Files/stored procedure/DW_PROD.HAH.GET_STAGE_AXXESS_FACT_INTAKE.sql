CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_AXXESS_FACT_INTAKE("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
--*****************************************************************************************************************************
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   ------------------------------------------------------------------------------------------
-- 01/06/22    Parag Gajjar        Initial Development
-- 04/25/22    Parag Gajjar          Logic Change
-- 05/04/22    Parag Gajjar          Dedup Leverage
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.AXXESS_FACT_INTAKE
WITH DEDUP_LEVERAGE AS (
        SELECT * FROM 
    (
        SELECT MASTER_ID,PATIENT_ID,CONCAT(CASE_MANAGER_FIRST_NAME, '' ,'',CASE_MANAGER_LAST_NAME) AS CASE_MANAGER_NAME
        FROM DISC_DEDUPE_PROD.AXXESS.CLIENT_MASTER_LIST--DISC_DEDUPE_PROD.ASR.CLIENT_MASTER_LIST 
    )
    UNION
    SELECT * FROM 
    (
        SELECT MASTER_ID, PATIENT_ID, CONCAT(CASE_MANAGER_FIRST_NAME, '' ,'',CASE_MANAGER_LAST_NAME) CASE_MANAGER_NAME
        FROM DISC_DEDUPE_PROD.AXXESS.CLIENT_MATCH_LIST  --DISC_DEDUPE_PROD.ASR.CLIENT_MATCH_LIST 
        WHERE PATIENT_ID NOT IN (SELECT PATIENT_ID FROM DISC_DEDUPE_PROD.AXXESS.CLIENT_MASTER_LIST)    
    )
),
CLEANED_CLI AS (
    SELECT *,
        CASE
            WHEN UPPER(CASE_MANAGER_NAME) LIKE ''%THERAPY, TOTAL CARE%'' OR UPPER(CASE_MANAGER_NAME) LIKE ''%CARE THERAPY, TOTAL%'' OR UPPER(CASE_MANAGER_NAME) LIKE ''%THERAPY CARE, TOTAL%''
             THEN ''Care Therapy, Total''
             ELSE CASE_MANAGER_NAME 
         END AS REFINED_CASE_MANAGER_NAME
    FROM DEDUP_LEVERAGE --DISC_PROD.AXXESS.AXXESS_EPISODESNAPSHOTS 
),
SERVICE_MONTHS AS		-- Added on 29/09/22
(
SELECT 
			CALENDAR_DATE ServiceMonthBeginDate
			,MONTH ServiceMonth 
			,YEAR SERVICEYEAR 
			,LAST_DAY_OF_MONTH  SERVICEMONTHENDDATE
			,DATEDIFF(''day'', CAL.CALENDAR_DATE, LAST_DAY(CAL.CALENDAR_DATE))+1 AS TotalDays_InServiceMonth 
		FROM HAH.DIM_DATE  cal
		WHERE DAY_OF_MONTH = 1
),
INTAKE_BYMONTH AS 
(
SELECT  MNTH.ServiceMonthBeginDate,FINAL.*,  (NVL(AUTH.AUTHORIZATION_NUMBER,'''')|| '' - ''  || NVL(AUTH.DISCIPLINE,'''')) AS AUTHORIZATION_NUMBER
FROM 
(
SELECT  -- LATEST_AUTH.*,LATEST_AUTH_END.END_DATE AS LATEST_AUTH_END_DATE ,LATEST_AUTH_END.AUTHORIZATION_NUMBER  FROM 
MAX(LATEST_AUTH_END.AUTHORIZATION_ID) AS AUTHORIZATION_ID,
LATEST_AUTH.PATIENT_ID, LATEST_AUTH.BRANCH_ID, LATEST_AUTH.BRANCH, LATEST_AUTH.INSURANCE
,LATEST_AUTH.LATEST_AUTH_BEGIN_DATE,LATEST_AUTH_END.END_DATE AS LATEST_AUTH_END_DATE
,LATEST_AUTH.DISCIPLINE
--,MAX(CAST( LATEST_AUTH_END.AUTHORIZATION_NUMBER AS INTEGER)) AS AUTHORIZATION_NUMBER
--,LATEST_AUTH_END.AUTHORIZATION_NUMBER AS AUTHORIZATION_NUMBER
,LATEST_AUTH.HOURS_AUTHORIZED AS HOURS_AUTHORIZED
,LATEST_AUTH.HOURS_AUTHORIZED_NON_ADJUSTED AS HOURS_AUTHORIZED_NON_ADJUSTED
,LATEST_AUTH.VISITS_AUTHORIZED AS VISITS_AUTHORIZED
,LATEST_AUTH.VISITS_AUTHORIZED_NON_ADJUSTED AS VISITS_AUTHORIZED_NON_ADJUSTED
,MIN_START
,MAX_END
FROM
(
SELECT MIN(IFNULL(INTAKE.START_DATE, TO_DATE(''1900-01-01'', ''YYYY-MM-DD''))) AS MIN_START,
       MAX(IFNULL(INTAKE.END_DATE, TO_DATE(''1900-01-01'', ''YYYY-MM-DD''))) AS MAX_END,
		INTAKE.PATIENT_ID, INTAKE.BRANCH_ID, INTAKE.BRANCH, INTAKE.INSURANCE,
       MAX(IFNULL(INTAKE.START_DATE, TO_DATE(''1900-01-01'', ''YYYY-MM-DD''))) AS LATEST_AUTH_BEGIN_DATE,
       INTAKE.DISCIPLINE,
       SUM(CASE WHEN UNIT = ''Hours'' THEN AUTHORIZED_UNITS END) AS HOURS_AUTHORIZED,
       SUM(CASE WHEN UNIT = ''Hours'' THEN UN_USED END) AS HOURS_AUTHORIZED_NON_ADJUSTED,
       SUM(CASE WHEN UNIT = ''Visits'' THEN AUTHORIZED_UNITS END) AS VISITS_AUTHORIZED,
       SUM(CASE WHEN UNIT = ''Visits'' THEN UN_USED  END) AS VISITS_AUTHORIZED_NON_ADJUSTED
    FROM DISC_PROD.AXXESS.AXXESS_AUTHORIZATIONS INTAKE
	WHERE INTAKE.UNIT  IN (''Hours'')
    GROUP BY INTAKE.PATIENT_ID, INTAKE.BRANCH_ID, INTAKE.BRANCH, INTAKE.INSURANCE,INTAKE.DISCIPLINE
    --INTAKE.AUTHORIZED_UNITS, INTAKE.UN_USED, INTAKE.UNIT
) LATEST_AUTH 
LEFT JOIN  DISC_PROD.AXXESS.AXXESS_AUTHORIZATIONS LATEST_AUTH_END
 ON LATEST_AUTH.LATEST_AUTH_BEGIN_DATE=LATEST_AUTH_END.START_DATE 
        AND  LATEST_AUTH.PATIENT_ID= LATEST_AUTH_END.PATIENT_ID 
        AND  LATEST_AUTH.BRANCH_ID=LATEST_AUTH_END.BRANCH_ID 
        AND  LATEST_AUTH.INSURANCE=LATEST_AUTH_END.INSURANCE
        AND LATEST_AUTH.DISCIPLINE=LATEST_AUTH_END.DISCIPLINE
GROUP BY LATEST_AUTH.PATIENT_ID, LATEST_AUTH.BRANCH_ID, LATEST_AUTH.BRANCH, LATEST_AUTH.INSURANCE
,LATEST_AUTH.LATEST_AUTH_BEGIN_DATE,LATEST_AUTH_END.END_DATE , LATEST_AUTH.HOURS_AUTHORIZED
, LATEST_AUTH.HOURS_AUTHORIZED_NON_ADJUSTED, LATEST_AUTH.VISITS_AUTHORIZED, LATEST_AUTH.VISITS_AUTHORIZED_NON_ADJUSTED
,LATEST_AUTH.DISCIPLINE,MIN_START,MAX_END
-- ,LATEST_AUTH_END.AUTHORIZATION_NUMBER  
)FINAL 
LEFT JOIN  DISC_PROD.AXXESS.AXXESS_AUTHORIZATIONS AUTH
 ON FINAL.LATEST_AUTH_BEGIN_DATE=AUTH.START_DATE 
        AND  FINAL.PATIENT_ID= AUTH.PATIENT_ID 
        AND  FINAL.BRANCH_ID=AUTH.BRANCH_ID 
        AND  FINAL.INSURANCE=AUTH.INSURANCE 
        AND  FINAL.AUTHORIZATION_ID=AUTH.AUTHORIZATION_ID 
LEFT JOIN SERVICE_MONTHS MNTH ON MNTH.ServiceMonthBeginDate BETWEEN FINAL.MIN_START AND FINAL.MAX_END
),
BEGIN_END_SERVICE_DATE AS 
(
SELECT PATIENT_ID,EPISODE_PRIMARY_INSURANCE, MIN(EPISODE_START_DATE) AS EPISODE_START_DATE,MAX(EPISODE_END_DATE) AS EPISODE_END_DATE
FROM DISC_PROD.AXXESS.AXXESS_PATIENTVISITS
GROUP BY PATIENT_ID,EPISODE_PRIMARY_INSURANCE
--ORDER BY PATIENT_ID
)
SELECT 

INTAKE_KEY                      
,REPORT_DATE
,BRANCH_KEY                      
,CLIENT_KEY                      
,CONTRACT_KEY                    
--ROW_CNT
--ROWNUM
--MONTHLY_HRS
--MODULO_HRS
,SOURCE_SYSTEM_ID
,PRE_AUTH_NUMBER      
,BEGIN_SERVICE_DATE
,END_SERVICE_DATE
,LATEST_AUTH_BEGIN_DATE
,LATEST_AUTH_END_DATE
,REAUTHORIZED_DATE
,BRANCH_NAME                        
,CLIENT_NUMBER
,CONTRACT_CODE                   
,BILL_RATE
,SYSTEM_CODE
,CASE_MANAGER   
,FINAL_HOURS_AUHTORIZED AS HOURS_AUTHORIZED
,FINAL_HOURS_AUHTORIZED AS HOURS_AUTHORIZED_NON_ADJUSTED -- need to check
,ETL_TASK_KEY
,ETL_INSERTED_TASK_KEY
,ETL_INSERTED_DATE      
,ETL_INSERTED_BY
,ETL_LAST_UPDATED_DATE  
,ETL_LAST_UPDATED_BY
,ETL_DELETED_FLAG

FROM 
(

 SELECT 	DISTINCT
		    --MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(INTAKE.AUTHORIZATION_ID)), ''UNKNOWN'') || ''-'' || ''AXXESS'') AS INTAKE_KEY,  --Pankti M.
            MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(INTAKE.AUTHORIZATION_ID ||''-''||
            COALESCE(INTAKE.ServiceMonthBeginDate, ''1999-12-31''))), ''UNKNOWN'') || ''-'' || ''AXXESS'')
            AS INTAKE_KEY,  --Pankti M.
			COALESCE(INTAKE.ServiceMonthBeginDate, ''1999-12-31'') AS REPORT_DATE,		--Added by Pinkal on 29/09/22
			MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(INTAKE.BRANCH_ID)), ''UNKNOWN'') || ''-'' || ''AXXESS'') AS BRANCH_KEY,	--Added by Pinkal on 24/08/22
		    MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(ES.MASTER_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS CLIENT_KEY,	--Added by Pinkal on 24/08/22
			MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(INTAKE.INSURANCE)), ''UNKNOWN'') || ''-'' || ''AXXESS'') AS CONTRACT_KEY,		--Added by Pinkal on 24/08/22
			COUNT(1) OVER (PARTITION  BY CLIENT_KEY,CONTRACT_KEY) ROW_CNT,
			ROW_NUMBER () OVER(PARTITION  BY CLIENT_KEY,CONTRACT_KEY ORDER BY   REPORT_DATE ) AS ROWNUM,
			ROUND((HOURS_AUTHORIZED /COUNT(1) OVER (PARTITION  BY CLIENT_KEY,CONTRACT_KEY) ),0) AS MONTHLY_HRS,
			MOD(HOURS_AUTHORIZED ,COUNT(1) OVER (PARTITION  BY CLIENT_KEY,CONTRACT_KEY) ) AS MODULO_HRS,
			CASE WHEN ROW_CNT=ROWNUM THEN MODULO_HRS ELSE MONTHLY_HRS END AS FINAL_HOURS_AUHTORIZED,
		    14 AS SOURCE_SYSTEM_ID,
		    AUTHORIZATION_NUMBER AS PRE_AUTH_NUMBER,  --ADDED BY PJSHAH ON 07/14
		    NULL AS BEGIN_SERVICE_DATE,  --CONTRACT  EPISODE_START_DATE = BEGIN_SERVICE_DATE AND EPISODE_END_DATE = END_SERVICE_DATE from PATIENTVISIT table
		    NULL AS END_SERVICE_DATE,
		    INTAKE.LATEST_AUTH_BEGIN_DATE AS LATEST_AUTH_BEGIN_DATE,
		    INTAKE.LATEST_AUTH_END_DATE AS LATEST_AUTH_END_DATE,
		 	COALESCE(INTAKE.LATEST_AUTH_BEGIN_DATE, ''1999-12-31'')  AS REAUTHORIZED_DATE, -- need to confirm
		    INTAKE.BRANCH AS BRANCH_NAME,
		    --14 AS CLIENT_NUMBER,  -- HARD CODED Because of Alphanumeric data from AXXESS
			INTAKE.PATIENT_ID AS CLIENT_NUMBER,
		    MD5(''PRIME'' || ''-'' || INTAKE.INSURANCE || ''-'' || ''AXXESS'') AS CONTRACT_CODE,
		    NULL AS BILL_RATE,
		    ''PRIME'' AS SYSTEM_CODE,
		    UPPER(ES.REFINED_CASE_MANAGER_NAME) AS CASE_MANAGER,
		    HOURS_AUTHORIZED,
		    HOURS_AUTHORIZED_NON_ADJUSTED,
			:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
   			:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
		    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
		    CURRENT_USER AS ETL_INSERTED_BY ,
		    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
		    CURRENT_USER AS ETL_LAST_UPDATED_BY,
		    0 AS ETL_DELETED_FLAG
FROM --DISC_PROD.AXXESS.AXXESS_AUTHORIZATIONS INTAKE
INTAKE_BYMONTH INTAKE 
LEFT JOIN CLEANED_CLI ES ON INTAKE.PATIENT_ID=ES.PATIENT_ID
GROUP BY
    INTAKE_KEY,
    REPORT_DATE,
    BRANCH_KEY,
    CLIENT_KEY,
    CONTRACT_KEY,
    SOURCE_SYSTEM_ID,
    --REAUTHORIZED_DATE,
    PRE_AUTH_NUMBER,
    --BEGIN_SERVICE_DATE,
    --END_SERVICE_DATE,
    LATEST_AUTH_BEGIN_DATE,
   	LATEST_AUTH_END_DATE,
    BRANCH_NAME,
    CLIENT_NUMBER,
    CONTRACT_CODE,
    BILL_RATE,
    SYSTEM_CODE,
    CASE_MANAGER,
    HOURS_AUTHORIZED,
    HOURS_AUTHORIZED_NON_ADJUSTED,
	ETL_TASK_KEY,
	ETL_INSERTED_TASK_KEY,
    ETL_INSERTED_DATE,
    ETL_INSERTED_BY,
    ETL_LAST_UPDATED_DATE,
    ETL_LAST_UPDATED_BY,
    ETL_DELETED_FLAG,
    ServiceMonthBeginDate
) T


--BELOW IS THE HOME CARE DATA
--UNION ALL
--
--WITH VISITFINANCIAL AS (
--SELECT
--    INTAKE_KEY,
--    REPORT_DATE,
--    BRANCH_KEY,
--    CLIENT_KEY,
--    CONTRACT_KEY,
--    SOURCE_SYSTEM_ID,
--    PRE_AUTH_NUMBER,
--    MAX(BEGIN_SERVICE_DATE) AS BEGIN_SERVICE_DATE,
--    MAX(END_SERVICE_DATE) AS END_SERVICE_DATE,
--    LATEST_AUTH_BEGIN_DATE,
--   	LATEST_AUTH_END_DATE,
-- 	MAX(REAUTHORIZED_DATE) AS REAUTHORIZED_DATE,     
--    BRANCH_NAME,
--    CLIENT_NUMBER,
--    CONTRACT_CODE,
--    BILL_RATE,
--    SYSTEM_CODE,
--    CASE_MANAGER,
--    HOURS_AUTHORIZED,
--    HOURS_AUTHORIZED_NON_ADJUSTED,
--    ETL_TASK_KEY,
--    ETL_INSERTED_TASK_KEY,
--    ETL_INSERTED_DATE,
--    ETL_INSERTED_BY,
--    ETL_LAST_UPDATED_DATE,
--    ETL_LAST_UPDATED_BY,
--    ETL_DELETED_FLAG
--FROM
--    (
--    SELECT DISTINCT
--        MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(VF.AUTHORIZATION_ID)), ''UNKNOWN'') || ''-'' || ''AXXESS'') AS INTAKE_KEY,
--        COALESCE(DATE_TRUNC(''MONTH'',TRY_TO_DATE(VF.AUTHORIZATION_START,''YYYY-MM-DD'')),''1999-12-31'') AS REPORT_DATE,
--        MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(VF.BRANCH_ID)), ''UNKNOWN'') || ''-'' || ''AXXESS'') AS BRANCH_KEY,
--        MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(VF.CLIENT_ID)), ''UNKNOWN'') || ''-'' || ''AXXESS'') AS CLIENT_KEY,
--        MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(VF.PRIMARY_INSURANCE_ID)), ''UNKNOWN'') || ''-'' || ''AXXESS'') AS CONTRACT_KEY,
--        14 AS SOURCE_SYSTEM_ID,
--     	VF.AUTHORIZATION_NUMBER AS PRE_AUTH_NUMBER,
--		try_to_date(VF.CAREPERIOD_START::varchar,''YYYY-MM-DD'') AS BEGIN_SERVICE_DATE,
--		try_to_date(VF.CAREPERIOD_END::varchar,''YYYY-MM-DD'') AS END_SERVICE_DATE,
--		NULL AS LATEST_AUTH_BEGIN_DATE,
--        NULL AS LATEST_AUTH_END_DATE,
--   		COALESCE(try_to_date(VF.AUTHORIZATION_START::varchar,''YYYY-MM-DD''),''1999-12-31'') AS REAUTHORIZED_DATE,
--   		VF.BRANCH_NAME AS BRANCH_NAME,
--        -1 AS CLIENT_NUMBER,
--        MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(VF.PRIMARY_INSURANCE_ID)), ''UNKNOWN'') || ''-'' || ''AXXESS'') AS CONTRACT_CODE, 
--        NULL AS BILL_RATE,
--        ''PRIME'' AS SYSTEM_CODE,
--        NULL AS CASE_MANAGER,
--        VF.AUTHORIZED_UNITS AS HOURS_AUTHORIZED,
--        NULL AS HOURS_AUTHORIZED_NON_ADJUSTED,
--        CONVERT_TIMEZONE(''UTC'',CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
--        CURRENT_USER AS ETL_INSERTED_BY,
--        CONVERT_TIMEZONE(''UTC'',CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
--        CURRENT_USER AS ETL_LAST_UPDATED_BY,
--        0 AS ETL_DELETED_FLAG
--    FROM
--    (
--    SELECT
--    DISTINCT AUTHORIZATION_ID,
--    BRANCH_ID,
--    CLIENT_ID,
--    Authorization_Number,
--    CAREPERIOD_START ,
--    CAREPERIOD_END ,
--    Authorization_Start,
--    Authorization_End,
--    AUTHORIZED_UNITS,
--    BRANCH_NAME,
--    PRIMARY_INSURANCE_ID
--FROM
--    DISC_PROD.AXXESS.VW_AXXESS_HC_VISITS_UPPER
--WHERE
--    AUTHORIZATION_ID IS NOT NULL
--) VF)
--GROUP BY
--    INTAKE_KEY,
--    REPORT_DATE,
--    BRANCH_KEY,
--    CLIENT_KEY,
--    CONTRACT_KEY,
--    SOURCE_SYSTEM_ID,
--    REAUTHORIZED_DATE,
--    PRE_AUTH_NUMBER,
--    BEGIN_SERVICE_DATE,
--    END_SERVICE_DATE,
--    LATEST_AUTH_BEGIN_DATE,
--   	LATEST_AUTH_END_DATE,
--    BRANCH_NAME,
--    CLIENT_NUMBER,
--    CONTRACT_CODE,
--    BILL_RATE,
--    SYSTEM_CODE,
--    CASE_MANAGER,
--    HOURS_AUTHORIZED,
--    HOURS_AUTHORIZED_NON_ADJUSTED,
--    ETL_TASK_KEY,
--    ETL_INSERTED_TASK_KEY,
--    ETL_INSERTED_DATE,
--    ETL_INSERTED_BY,
--    ETL_LAST_UPDATED_DATE,
--    ETL_LAST_UPDATED_BY,
--    ETL_DELETED_FLAG
 ;
RETURN ''SUCCESS'';
end;                        
';