CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_COSTALSYNCDATA_FACT_VISIT("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN
    --*****************************************************************************************************************************
-- NAME:  CostalSyncData_FACT_VISIT
--
-- PURPOSE: Creates one row per visit according to CoastalSnyc (combination of SHC_ALTRUS and SHC_SAVANNAH)
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR               NOTES:
-- --------    -------------------  -----------------------------------------------------------------------------------------------
-- 01/06/20   	Greg Marsh         	Initial development
-- 04/01/20		Mohd Kamaludin		Added CDC
-- 04/02/20		Mohd Kamaludin		Fixed Duplicate Visit Key
-- 04/02/20     Mohd Kamaludin      Added Status Code and Status Description placeholder
-- 05/20/20		Mir Ali				Updated Report_Date to be first day of the month, not last
-- 06/08/20		Arif				Change logic to get detail level visit details.
-- 06/10/20		Mir Ali				Updated Visits CTE (join to Hour_Unit_Mapping)
-- 06/12/20		Arif				mapping of status code
-- 09/29/20		Mir Ali				Changed Join Condition for Dim_Branch System_Code (from "A"/"C" to "SHC_ALTRUS"/"SHC_SAVANNAH")
--									Changed Hashed Branch_Key to match Dim_Branch POC
--									Removed silly logic to select random matching office/client, instead of creating custom specific hash
-- 01/21/21		Shraddha Sejpal		Added Bill_Rate CTE to get Bill_Rate
-- 01/21/21		Mir Ali				Fixed Employee_Key logic and join to Dim_Employee
-- 02/17/22     Prateek Bhatt		Leveraged client and emp dedupe
-- 03/09/22		Mir Ali				Added cutover dates for transitioning from Coastal to Alayacare (Georgia)
-- 01/17/23		Shraddha Sejpal		Added schedule/visit/invoice/payroll status information and schedule/actual/adjusted timing information,scheduled employee,
--									Confirmed_Flag, Bill_unit_type & Bill_Unit_Served.
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.CostalSyncData_FACT_VISIT
WITH HOUR_UNIT_MAPPING AS (
	SELECT DB, PLAN_CODE, 
		MIN(TIME_TRANSLATION_CODE) AS TIME_TRANSLATION_CODE, 
		CASE LEFT(MIN(TIME_TRANSLATION_CODE), 2) WHEN ''15'' THEN 4 WHEN ''30'' THEN 2 ELSE 1 END MATH_FACTOR
	FROM DISC_PROD.COSTALSYNCDATA.CV_PLANTIMETRANSLATION
	WHERE TRIM(TIME_TRANSLATION_CODE) LIKE ''%MIN''
	GROUP BY DB, PLAN_CODE 
)
,BILL_RATE
AS
(
 SELECT * FROM(select s.DB,s.Patient_number,s.plan_code,s.proccode,s.schedule_number,c.unit_amount AS AMOUNT,
					row_number() over (partition by s.db,s.schedule_number order by try_cast(c.bill_number as int) desc) as rn 
					FROM DISC_PROD.COSTALSYNCDATA.CV_SCHEDULES S 
					JOIN DISC_PROD.COSTALSYNCDATA.CV_CHARGES C ON S.SCHEDULE_NUMBER = C.SCHEDULE_NUMBER and s.db=c.db
					where TRIM(SCHEDULE_status_code) in (''B'',''BP'',''C'',''V'',''VB'',''VP'',''P'')
					)WHERE RN=1
                    UNION ALL	
					select s.DB,s.Patient_number,s.plan_code,s.proccode,s.schedule_number,p.CHARGE_AMOUNT82 AS AMOUNT, null as rn from DISC_PROD.COSTALSYNCDATA.CV_SCHEDULES S
					left join (select distinct db,schedule_number from DISC_PROD.COSTALSYNCDATA.CV_CHARGES) C on S.SCHEDULE_NUMBER= C.SCHEDULE_NUMBER and s.db=c.db
					join DISC_PROD.COSTALSYNCDATA.CV_PATIENTPLANRATEDETAILS p on s.db=p.db and s.Patient_number= p.patient_number and s.Plan_code = p.plan_code and s.proccode = p.proccode
					where C.Schedule_number is NULL AND TRIM(s.SCHEDULE_status_code) in (''B'',''BP'',''C'',''V'',''VB'',''VP'',''P'')
                    UNION ALL
					select s.DB,s.Patient_number,s.plan_code,s.proccode,s.schedule_number,R.CHARGE_AMOUNT AS AMOUNT, null as rn from DISC_PROD.COSTALSYNCDATA.CV_SCHEDULES S
					left join (select distinct db,schedule_number from DISC_PROD.COSTALSYNCDATA.CV_CHARGES) C on S.SCHEDULE_NUMBER= C.SCHEDULE_NUMBER and s.db=c.db
					LEFT join DISC_PROD.COSTALSYNCDATA.CV_PATIENTPLANRATEDETAILS p on s.Patient_number= p.patient_number and s.Plan_code = p.plan_code and s.proccode = p.proccode
					and s.db=p.db
		    		JOIN DISC_PROD.COSTALSYNCDATA.CV_PLANRATEDETAILS R ON s.Plan_code = R.plan_code and s.proccode = R.proccode and s.db= r.db
					where C.Schedule_number is NULL AND (P.PATIENT_NUMBER IS NULL OR P.PLAN_CODE IS NULL OR P.PROCCODE IS NULL)
					AND TRIM(s.SCHEDULE_status_code) in (''B'',''BP'',''C'',''V'',''VB'',''VP'',''P'')
)
, VISITS
AS
(
	SELECT 
		s.Db
		,TRIM(s.Patient_Number) AS Patient_Number
		,s.ADMISSION_NUMBER
		,TRIM(s.Plan_Code) AS Plan_Code
		,TRIM(s.ProcCode) AS ProcCode
		,s.Schedule_Number
		,s.Schedule_Date
		,TRIM(s.Nurse_ID) AS Nurse_ID
		,TRIM(s.Location_Code) AS Location_Code
		,TRIM(s.Location_Name) AS Location_Name
		,s.STATE_CODE
		,TRIM(s.Department__Code) AS Department__Code
		,TRIM(s.Department_Name) AS Department_Name
		,TRIM(s.Schedule_Status_Code) AS Schedule_Status_Code
		,TRIM(s.Schedule_Status_Desc) AS Schedule_Status_Desc
		,try_cast(LEFT(trim(s.Confirmed_Duration ),2) AS INTEGER) +try_cast(RIGHT(trim(s.Confirmed_Duration),2) AS INTEGER)/60 AS DurationInHours
		,try_cast(LEFT(trim(s.Duration ),2) AS INTEGER) +try_cast(RIGHT(trim(s.Duration),2) AS INTEGER)/60 AS sch_DurationInHours
		,um.TIME_TRANSLATION_CODE
		,COALESCE(um.MATH_FACTOR, 1) AS MATH_FACTOR
		,s.SCHEDULE_TIME 
		,s.CONFIRMED_TIME 
		,s.ETL_LAST_UPDATED_DATE 
		,CASE WHEN SCHEDULE_DATE <CURRENT_DATE() THEN ''Past'' ELSE ''Future'' END AS VISITTIME
	FROM DISC_PROD.COSTALSYNCDATA.CV_Schedules s 
	LEFT JOIN HOUR_UNIT_MAPPING um
	ON um.Plan_Code = s.Plan_Code
	AND um.Db = s.Db
)
,CHANGED_DATA AS (
SELECT DB, ADMISSION_NUMBER 
FROM DISC_PROD.COSTALSYNCDATA.CV_ADMISSIONS T
WHERE T.ETL_LAST_UPDATED_DATE >=:STR_CDC_START::timestamp_ntz
UNION
	SELECT DB, ADMISSION_NUMBER 
	FROM DISC_PROD.COSTALSYNCDATA.CV_DISCIPLINES T
	WHERE T.ETL_LAST_UPDATED_DATE >=:STR_CDC_START::timestamp_ntz
UNION
	SELECT DB, ADMISSION_NUMBER 
	FROM DISC_PROD.COSTALSYNCDATA.CV_DISCIPLINEFREQUENCIES T
	WHERE T.ETL_LAST_UPDATED_DATE >=:STR_CDC_START::timestamp_ntz
	)
,ADMISSIONS
AS 
(
SELECT 
	ADMISSIONS.DB
	,ADMISSIONS.PATIENT_NUMBER
	,ADMISSIONS.ADMISSION_NUMBER
	,ADMISSIONS.LOCATION_CODE
	,ADMISSIONS.CURRENT_PLAN_CODE AS PLAN_CODE
	,ADMISSIONS.ADMIT_DATE
	,CASE 
		WHEN ADMISSIONS.DISCHARGE_DATE  = ''1900-01-01 00:00:00'' THEN CAST(GETDATE() AS DATE) 
		ELSE ADMISSIONS.DISCHARGE_DATE 
	END AS DISCHARGE_DATE 
	--,ADMISSIONS.ADMIT_DATE AS BEGIN_SERVICE_DATE -- Added by PJShah on 19042022
	--,ADMISSIONS.DISCHARGE_DATE AS END_SERVICE_DATE -- Added by PJShah on 19042022
	,MAX(ADMISSIONS.ADMIT_DATE) OVER (PARTITION BY TRIM(ADMISSIONS.PATIENT_NUMBER), TRIM(NVL(ADMISSIONS.CURRENT_PLAN_CODE, ''''))) AS BEGIN_SERVICE_DATE -- Added by PJShah on 19042022
	,MAX(ADMISSIONS.DISCHARGE_DATE) OVER (PARTITION BY TRIM(ADMISSIONS.PATIENT_NUMBER), TRIM(NVL(ADMISSIONS.CURRENT_PLAN_CODE, ''''))) AS END_SERVICE_DATE -- Added by PJShah on 19042022
FROM DISC_PROD.COSTALSYNCDATA.CV_ADMISSIONS ADMISSIONS
JOIN CHANGED_DATA CHANGES
	ON CHANGES.DB = ADMISSIONS.DB AND CHANGES.ADMISSION_NUMBER = ADMISSIONS.ADMISSION_NUMBER 
WHERE TRIM(NVL(ADMISSIONS.CURRENT_PLAN_CODE, '''')) <> ''''
) 
, AUTHORIZATION_BY_DAY AS (
	SELECT DATA.DB, DATA.ADMISSION_NUMBER, DATA.CALENDAR_DATE, DATA.PATIENT_NUMBER ,
	DISCIPLINE_CODE,DDL_UNITS_FREQ_TYPE,FREQUENCY_UNITS_ARR2_2,
		CASE DATA.DDL_UNITS_FREQ_TYPE -- Frequency: x hours every day vs every week, etc.
			WHEN 1 THEN DATA.FREQUENCY_UNITS_ARR2_2 -- Frequency_Units_Arr2_2 hours EVERY DAY for LengthValue days/weeks
			WHEN 2 THEN DATA.FREQUENCY_UNITS_ARR2_2 / 7.0 -- Frequency_Units_Arr2_2 hours EVERY WEEK for LengthValue days/weeks
			WHEN 3 THEN DATA.FREQUENCY_UNITS_ARR2_2 / DATA.NUMBER_OF_DAYS_IN_MONTH -- Frequency_Units_Arr2_2 hours EVERY MONTH for LengthValue days/weeks
			WHEN 4 THEN COALESCE(
				NULLIF(DATA.AGREEMENT_LENGTH_CALCULATED, 0), 
				DATA.FREQUENCY_UNITS_ARR2_2 / DATA.AGREEMENT_LENGTH_CALCULATED) -- Frequency_Units_Arr2_2 hours EVERY PRN for LengthValue days/weeks
			WHEN 5 THEN NULL -- Frequency_Units_Arr2_2 hours EVERY NONE for LengthValue days/weeks				
			ELSE NULL END AS AUTH_LIMIT_PER_DAY,
		DATA.REAUTH_DATE
	FROM (
		SELECT DISTINCT CHANGES.DB, CHANGES.ADMISSION_NUMBER,  DISCIPLINES.PATIENT_NUMBER ,
			DATE.CALENDAR_DATE,
			DAY(DATE.LAST_DAY_OF_MONTH) AS NUMBER_OF_DAYS_IN_MONTH,
			DISCIPLINES.DISCIPLINE_CODE,
			FIRST_VALUE(FREQUENCIES.DDL_VISITS_DURATION_TYPE) OVER (PARTITION BY CHANGES.DB, CHANGES.ADMISSION_NUMBER, DATE.CALENDAR_DATE,DISCIPLINES.DISCIPLINE_CODE  ORDER BY DISCIPLINES.CERT_TRAN_NUMBER DESC, FREQUENCIES.DISCIPLINE_ORDER_NUMBER DESC) AS DDL_VISITS_DURATION_TYPE,
			FIRST_VALUE(FREQUENCIES.FREQUENCY_UNITS_ARR2_2) OVER (PARTITION BY CHANGES.DB, CHANGES.ADMISSION_NUMBER, DATE.CALENDAR_DATE, DISCIPLINES.DISCIPLINE_CODE ORDER BY DISCIPLINES.CERT_TRAN_NUMBER DESC, FREQUENCIES.DISCIPLINE_ORDER_NUMBER DESC) AS FREQUENCY_UNITS_ARR2_2,
			FIRST_VALUE(FREQUENCIES.DDL_UNITS_FREQ_TYPE) OVER (PARTITION BY CHANGES.DB, CHANGES.ADMISSION_NUMBER, DATE.CALENDAR_DATE,DISCIPLINES.DISCIPLINE_CODE ORDER BY DISCIPLINES.CERT_TRAN_NUMBER DESC, FREQUENCIES.DISCIPLINE_ORDER_NUMBER DESC) AS DDL_UNITS_FREQ_TYPE,
			FIRST_VALUE(DATEDIFF(DAY, DISCIPLINES.STATRT_DATE, DISCIPLINES.END__DATE) + 1) OVER (PARTITION BY CHANGES.DB, CHANGES.ADMISSION_NUMBER, DATE.CALENDAR_DATE,DISCIPLINES.DISCIPLINE_CODE ORDER BY DISCIPLINES.CERT_TRAN_NUMBER DESC, FREQUENCIES.DISCIPLINE_ORDER_NUMBER DESC) AS AGREEMENT_LENGTH_CALCULATED,
			MAX(DISCIPLINES.STATRT_DATE) OVER(PARTITION BY CHANGES.DB, CHANGES.ADMISSION_NUMBER, DATE.FIRST_DAY_OF_MONTH) AS REAUTH_DATE
		FROM CHANGED_DATA CHANGES
		JOIN DISC_PROD.COSTALSYNCDATA.CV_DISCIPLINES DISCIPLINES
			ON DISCIPLINES.DB = CHANGES.DB AND DISCIPLINES.ADMISSION_NUMBER = CHANGES.ADMISSION_NUMBER
		JOIN HAH.DIM_DATE AS DATE ON DATE.CALENDAR_DATE BETWEEN DISCIPLINES.STATRT_DATE AND DISCIPLINES.END__DATE 
		JOIN DISC_PROD.COSTALSYNCDATA.CV_DISCIPLINEFREQUENCIES FREQUENCIES
			ON FREQUENCIES.DB = DISCIPLINES.DB AND FREQUENCIES.ADMISSION_NUMBER = DISCIPLINES.ADMISSION_NUMBER 
				AND FREQUENCIES.CERT_TRAN_NUMBER = DISCIPLINES.CERT_TRAN_NUMBER 
				AND FREQUENCIES.SEQUENCE_NUMBER = DISCIPLINES.SEQUENCE_NUMBER 
				AND FREQUENCIES.DISCIPLINE_SEQUENCE  = DISCIPLINES.DISCIPLINE_SEQUENCE
				AND FREQUENCIES.DISCIPLINE_ORDER_NUMBER = DISCIPLINES.DISCIPLINE_ORDER_NUMBER
		WHERE NULLIF(DISCIPLINES.STATRT_DATE, ''1900-01-01'') IS NOT NULL AND NULLIF(DISCIPLINES.END__DATE, ''1900-01-01'') IS NOT NULL
			AND DISCIPLINES.DDL_DISCIPLINE_TYPE = 2 -- Only select authorizations that limit by number of hours, not visits
			AND NVL(FREQUENCIES.FREQUENCY_UNITS_ARR2_2, 0) > 0
	) DATA
)
, ADMISSION_AUTHORIZATION_DATES AS ( -- Used to determine applicable authorization date from CTE AUTHORIZATION_BY_DAY (for possible missing authorization dates between Admissions.Admit_Date and Admissions.Discharge_Date
	SELECT DISTINCT CASE ADMISSIONS.DB WHEN ''SHC_ALTRUS'' THEN 1 WHEN ''SHC_SAVANNAH'' THEN 2 END AS SOURCE_SYSTEM_ID,
		ADMISSIONS.DB,
		ADMISSIONS.PATIENT_NUMBER,
		ADMISSIONS.ADMISSION_NUMBER,
		ADMISSIONS.PLAN_CODE,
		ADMISSIONS.LOCATION_CODE,
		ADMISSIONS.ADMIT_DATE,
		ADMISSIONS.DISCHARGE_DATE,
		ADMISSION_DATES.FIRST_DAY_OF_MONTH AS REPORT_DATE,--date?
		ADMISSION_DATES."YEAR" AS SERVICE_YEAR,
		ADMISSION_DATES."MONTH" AS SERVICE_MONTH,
		ADMISSION_DATES.CALENDAR_DATE AS ADMISSION_CALENDAR_DATE,
		AUTHORIZATION_DATES.CALENDAR_DATE AS AUTHORIZATION_CALENDAR_DATE,
		MAX(AUTHORIZATION_DATES.CALENDAR_DATE) 
			OVER(PARTITION BY ADMISSIONS.DB, ADMISSIONS.ADMISSION_NUMBER--, ADMISSION_DATES.FIRST_DAY_OF_MONTH 
				ORDER BY ADMISSION_DATES.CALENDAR_DATE
				ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS PAST_AUTHORIZATION_DATE, 
		MIN(AUTHORIZATION_DATES.CALENDAR_DATE) 
			OVER(PARTITION BY ADMISSIONS.DB, ADMISSIONS.ADMISSION_NUMBER--, ADMISSION_DATES.FIRST_DAY_OF_MONTH 
				ORDER BY ADMISSION_DATES.CALENDAR_DATE
				ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS FUTURE_AUTHORIZATION_DATE, 
		MAX(AUTHORIZATION_DATES.REAUTH_DATE) OVER(PARTITION BY ADMISSIONS.DB
		,ADMISSIONS.ADMISSION_NUMBER ORDER BY ADMISSION_DATES.FIRST_DAY_OF_MONTH RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS REAUTH_DATE
		,ADMISSIONS.BEGIN_SERVICE_DATE -- Added By PJShah on 19042022
		,ADMISSIONS.END_SERVICE_DATE -- Added By PJShah on 19042022
FROM ADMISSIONS AS ADMISSIONS
	JOIN HAH.DIM_DATE AS ADMISSION_DATES 
		ON ADMISSION_DATES.CALENDAR_DATE BETWEEN ADMISSIONS.ADMIT_DATE AND ADMISSIONS.DISCHARGE_DATE
	LEFT JOIN AUTHORIZATION_BY_DAY AS AUTHORIZATION_DATES 
		ON AUTHORIZATION_DATES.DB = ADMISSIONS.DB AND AUTHORIZATION_DATES.ADMISSION_NUMBER = ADMISSIONS.ADMISSION_NUMBER
			AND AUTHORIZATION_DATES.CALENDAR_DATE = ADMISSION_DATES.CALENDAR_DATE
)
, AUTHORIZATIONS_BY_ADMISSIONS AS (
	SELECT AUTHORIZATION_DATES.SOURCE_SYSTEM_ID,
		AUTHORIZATION_DATES.DB,
		AUTHORIZATION_DATES.ADMISSION_CALENDAR_DATE,
		AUTHORIZATION_DATES.REPORT_DATE,
		AUTHORIZATION_DATES.SERVICE_YEAR,
		AUTHORIZATION_DATES.SERVICE_MONTH,
		AUTHORIZATION_DATES.PATIENT_NUMBER, 
		AUTHORIZATION_DATES.ADMISSION_NUMBER,AUTHORIZATION_DATES.ADMIT_DATE,AUTHORIZATION_DATES.DISCHARGE_DATE,
		AUTHORIZATION_BY_DAY.DDL_UNITS_FREQ_TYPE,AUTHORIZATION_BY_DAY.FREQUENCY_UNITS_ARR2_2,
		AUTHORIZATION_DATES.PLAN_CODE, 
		AUTHORIZATION_DATES.LOCATION_CODE,
		COALESCE(AUTHORIZATION_DATES.REAUTH_DATE, AUTHORIZATION_DATES.REPORT_DATE) AS REAUTH_DATE,
		AUTHORIZATION_BY_DAY.AUTH_LIMIT_PER_DAY
		,AUTHORIZATION_DATES.BEGIN_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
		,AUTHORIZATION_DATES.END_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
	FROM ADMISSION_AUTHORIZATION_DATES AUTHORIZATION_DATES
	LEFT JOIN AUTHORIZATION_BY_DAY AUTHORIZATION_BY_DAY
		ON AUTHORIZATION_BY_DAY.DB = AUTHORIZATION_DATES.DB AND AUTHORIZATION_BY_DAY.ADMISSION_NUMBER = AUTHORIZATION_DATES.ADMISSION_NUMBER
			AND AUTHORIZATION_BY_DAY.CALENDAR_DATE = COALESCE(AUTHORIZATION_DATES.PAST_AUTHORIZATION_DATE, AUTHORIZATION_DATES.FUTURE_AUTHORIZATION_DATE)
)
, AUTH_CLIENT_DATA AS
(
	SELECT * FROM
	(		
		SELECT TRIM(DB) AS MASTER_DB, TRIM(PATIENT_NUMBER) AS MASTER_PATIENT_NUMBER, TRIM(DB) AS DB, TRIM(PATIENT_NUMBER) AS PATIENT_NUMBER
        ,MASTER_ID		
FROM DISC_DEDUPE_PROD.COSTALSYNCDATA.CLIENT_MASTER_LIST
	)
	UNION
	SELECT * FROM
	(
		    SELECT DISTINCT TRIM(MASTER.DB) AS MASTER_DB,TRIM(MASTER.PATIENT_NUMBER) AS MASTER_PATIENT_NUMBER,  TRIM(MATCH.DB) AS DB, TRIM(MATCH.PATIENT_NUMBER) AS PATIENT_NUMBER
		    ,MATCH.MASTER_ID
FROM DISC_DEDUPE_PROD.COSTALSYNCDATA.CLIENT_MATCH_LIST AS MATCH
        JOIN DISC_DEDUPE_PROD.COSTALSYNCDATA.CLIENT_MASTER_LIST AS MASTER 
        ON MASTER.MASTER_ID = MATCH.MASTER_ID
       	WHERE MATCH.ID <> MATCH.MASTER_ID      	
	)
) 
-- ADDED BY PJSHAH ON 19042022 AUTH_DATES CTE
, AUTH_DATES AS
(
		SELECT distinct  PP.PATIENT_NUMBER ,PP.PLAN_CODE ,PP.SEQUENCE_NUMBER ,PP.EFFECTIVE_DATE ,PP.EXPIRATION_DATE ,PP.PRE_AUTHORIZATION_NUMBER  
		,PP.DB -- ADDED BY PJSHAH ON 16052022 ( 21 RECORDS ARE DISTINCT ONLY AD DB LEVEL)
		FROM DISC_PROD.COSTALSYNCDATA.CV_PATIENTPLANS PP
		JOIN 
		(
				SELECT PATIENT_NUMBER , PLAN_CODE ,MAX(EFFECTIVE_DATE) MAX_EFF
				,MAX(SEQUENCE_NUMBER) MAX_SEQ_NO -- There are 406 records with same auth dates but diff preauth nos. Added by PJShah on 16052022
				FROM DISC_PROD.COSTALSYNCDATA.CV_PATIENTPLANS
				-- WHERE TRIM(patient_number)=''3037'' AND TRIM(PLAN_CODE) =''MRCMP''
				GROUP BY PATIENT_NUMBER , PLAN_CODE 
				--ORDER BY SEQUENCE_NUMBER
		)MAX_DT 
		ON PP.PATIENT_NUMBER =MAX_DT.PATIENT_NUMBER
		AND PP.PLAN_CODE =MAX_DT.PLAN_CODE
		AND PP.SEQUENCE_NUMBER =MAX_DT.MAX_SEQ_NO
		AND PP.EFFECTIVE_DATE =MAX_DT.MAX_EFF
)
, AUTHORIZATIONS AS (
	SELECT AUTHORIZATION_DATES.SOURCE_SYSTEM_ID,
		TRIM(AUTHORIZATION_DATES.DB) AS SYSTEM_CODE,
		AUTHORIZATION_DATES.REPORT_DATE,
		AUTHORIZATION_DATES.SERVICE_YEAR,
		AUTHORIZATION_DATES.SERVICE_MONTH,
				AUTHORIZATION_DATES.ADMISSION_NUMBER,--AUTHORIZATION_DATES.ADMIT_DATE,AUTHORIZATION_DATES.DISCHARGE_DATE,
		AUTHORIZATION_DATES.DDL_UNITS_FREQ_TYPE,AUTHORIZATION_DATES.FREQUENCY_UNITS_ARR2_2,
		coalesce(TRIM(CLIENTS.MASTER_PATIENT_NUMBER),NVL(TRY_CAST(AUTHORIZATION_DATES.PATIENT_NUMBER AS INTEGER), -1)::STRING) AS CLIENT_NUMBER,  
		coalesce(md5(CLIENTS.MASTER_DB || ''-'' ||(TRIM(regexp_replace(CLIENTS.MASTER_ID,CLIENTS.MASTER_DB))) || ''-''  ||  ''COSTALSYNCDATA''), md5(AUTHORIZATION_DATES.DB || ''-'' || NVL(TRY_CAST(AUTHORIZATION_DATES.PATIENT_NUMBER AS INTEGER), -1)::STRING || ''-'' || ''COSTALSYNCDATA'')) AS CLIENT_KEY,
		TRIM(AUTHORIZATION_DATES.PLAN_CODE) AS CONTRACT_CODE, 
		--COALESCE(CONTRACTS.CONTRACT_KEY, MD5(TRIM(AUTHORIZATION_DATES.DB) || ''-'' || TRIM(AUTHORIZATION_DATES.PLAN_CODE) || ''-'' || ''COSTALSYNCDATA'')) AS CONTRACT_KEY,
		TRIM(AUTHORIZATION_DATES.LOCATION_CODE) AS LOCATION_CODE,
		COALESCE(BRANCHES.BRANCH_NAME, TRIM(UPPER(LOCATIONS.LOCATION_NAME)), ''Unknown'') AS BRANCH_NAME,
		COALESCE(BRANCHES.BRANCH_KEY, MD5(TRIM(AUTHORIZATION_DATES.DB) || ''-'' || AUTHORIZATION_DATES.LOCATION_CODE || ''-'' || ''COSTALSYNCDATA'')) AS BRANCH_KEY,
		MAX(COALESCE(AUTHORIZATION_DATES.REAUTH_DATE, AUTHORIZATION_DATES.REPORT_DATE)) AS REAUTH_DATE,
		SUM(AUTHORIZATION_DATES.AUTH_LIMIT_PER_DAY) AS HOURS_AUTHORIZED
		,AUTHORIZATION_DATES.BEGIN_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
		,AUTHORIZATION_DATES.END_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
	FROM AUTHORIZATIONS_BY_ADMISSIONS AS AUTHORIZATION_DATES
	LEFT JOIN AUTH_CLIENT_DATA AS CLIENTS
		ON TRIM(CLIENTS.DB) = TRIM(AUTHORIZATION_DATES.DB) AND CLIENTS.PATIENT_NUMBER::STRING = TRIM(AUTHORIZATION_DATES.PATIENT_NUMBER)
--	LEFT JOIN HAH.DIM_CONTRACT AS CONTRACTS
--		ON CONTRACTS.SOURCE_SYSTEM_ID = AUTHORIZATION_DATES.SOURCE_SYSTEM_ID AND CONTRACTS.CONTRACT_CODE = TRIM(AUTHORIZATION_DATES.PLAN_CODE)
	LEFT JOIN (
		SELECT DISTINCT SOURCE_SYSTEM_ID, DB, PATIENT_NUMBER, PLAN_CODE, REPORT_DATE, FIRST_VALUE(LOCATION_CODE) OVER(PARTITION BY SOURCE_SYSTEM_ID, DB, PATIENT_NUMBER, PLAN_CODE, REPORT_DATE ORDER BY SUM(AUTH_LIMIT_PER_DAY) DESC, MAX(REAUTH_DATE) DESC) AS LOCATION_CODE
		FROM AUTHORIZATIONS_BY_ADMISSIONS
		GROUP BY SOURCE_SYSTEM_ID, DB, PATIENT_NUMBER, PLAN_CODE, REPORT_DATE, LOCATION_CODE
	) ADMISSION_LOCATIONS
		ON ADMISSION_LOCATIONS.DB = AUTHORIZATION_DATES.DB AND ADMISSION_LOCATIONS.PATIENT_NUMBER = AUTHORIZATION_DATES.PATIENT_NUMBER AND ADMISSION_LOCATIONS.PLAN_CODE = AUTHORIZATION_DATES.PLAN_CODE AND ADMISSION_LOCATIONS.REPORT_DATE = AUTHORIZATION_DATES.REPORT_DATE
	LEFT JOIN HAH.DIM_BRANCH AS BRANCHES
		ON BRANCHES.SOURCE_SYSTEM_ID = ADMISSION_LOCATIONS.SOURCE_SYSTEM_ID AND BRANCHES.OFFICE_CODE = TRIM(ADMISSION_LOCATIONS.LOCATION_CODE)
	LEFT JOIN DISC_PROD.COSTALSYNCDATA.CV_LOCATIONS AS LOCATIONS
		ON LOCATIONS.DB = ADMISSION_LOCATIONS.DB AND LOCATIONS.LOCATION_CODE = ADMISSION_LOCATIONS.LOCATION_CODE
	GROUP BY AUTHORIZATION_DATES.SOURCE_SYSTEM_ID,
		TRIM(AUTHORIZATION_DATES.DB),
		AUTHORIZATION_DATES.REPORT_DATE,
		AUTHORIZATION_DATES.SERVICE_YEAR,
		AUTHORIZATION_DATES.SERVICE_MONTH,
			AUTHORIZATION_DATES.ADMISSION_NUMBER,--AUTHORIZATION_DATES.ADMIT_DATE,AUTHORIZATION_DATES.DISCHARGE_DATE,
			AUTHORIZATION_DATES.DDL_UNITS_FREQ_TYPE,AUTHORIZATION_DATES.FREQUENCY_UNITS_ARR2_2,
		coalesce(TRIM(CLIENTS.MASTER_PATIENT_NUMBER),NVL(TRY_CAST(AUTHORIZATION_DATES.PATIENT_NUMBER AS INTEGER), -1)::STRING), 
		coalesce(md5(CLIENTS.MASTER_DB || ''-'' || CLIENTS.MASTER_PATIENT_NUMBER || ''-''  ||  ''COSTALSYNCDATA''), md5(AUTHORIZATION_DATES.DB || ''-'' || NVL(TRY_CAST(AUTHORIZATION_DATES.PATIENT_NUMBER AS INTEGER), -1)::STRING || ''-'' || ''COSTALSYNCDATA'')),
		TRIM(AUTHORIZATION_DATES.PLAN_CODE), 
		--COALESCE(CONTRACTS.CONTRACT_KEY, MD5(TRIM(AUTHORIZATION_DATES.DB) || ''-'' || TRIM(AUTHORIZATION_DATES.PLAN_CODE) || ''-'' || ''COSTALSYNCDATA'')),
		TRIM(AUTHORIZATION_DATES.LOCATION_CODE),
		COALESCE(BRANCHES.BRANCH_NAME, TRIM(UPPER(LOCATIONS.LOCATION_NAME)), ''Unknown''),
		COALESCE(BRANCHES.BRANCH_KEY, MD5(TRIM(AUTHORIZATION_DATES.DB) || ''-'' || AUTHORIZATION_DATES.LOCATION_CODE || ''-'' || ''COSTALSYNCDATA''))
		,AUTHORIZATION_DATES.BEGIN_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
		,AUTHORIZATION_DATES.END_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
         ,MASTER_DB
		,MASTER_ID
		,AUTHORIZATION_DATES.DB
		,AUTHORIZATION_DATES.PATIENT_NUMBER 
),
Visit_Agg
AS
(
	SELECT 	
		db							AS db
		,PATIENT_NUMBER				AS CLIENT_NUMBER
		,ADMISSION_NUMBER
		,SCHEDULE_DATE				AS REPORT_DATE
		,SCHEDULE_DATE				AS SERVICE_DATE
		,Schedule_Number
		,LOCATION_CODE				AS OFFICECODE
		,LOCATION_NAME				AS OFFICENAME
		,NURSE_ID					AS EMPLOYEEID
		,DEPARTMENT__CODE			AS SUPERVISORCODE
		,DEPARTMENT_NAME			AS SUPERVISORNAME
		,TRIM(PLAN_CODE)					AS CONTRACT_CODE
		,SCHEDULE_STATUS_CODE 		AS STATUS_CODE
		,TRIM(ProcCode)                   AS PROCCODE 
		,CASE WHEN SCHEDULE_STATUS_CODE IN (''C'',''CC'',''S'',''ER'',''PR'') THEN Trim(NURSE_ID) ELSE NULL END AS SCHEDULED_EMPLOYEE_ID
        ,MATH_FACTOR
        ,SCHEDULE_TIME
        ,CONFIRMED_TIME
		,ETL_LAST_UPDATED_DATE
		,COALESCE (DURATIONINHOURS,0) AS HOURS_SERVED
		,COALESCE (sch_DurationInHours,0) AS sch_HOURS_SERVED
		,CASE WHEN STATUS_CODE IN (''T'') AND VISITTIME = ''Past'' THEN ''TentativePast'' 
	 WHEN STATUS_CODE IN (''S'') AND VISITTIME = ''Past'' THEN ''ScheduledPast'' 
	 WHEN STATUS_CODE IN (''O'') AND VISITTIME = ''Past'' THEN ''OpenPast'' ELSE STATUS_CODE 
	 END AS DERIVED_DISC_STATUS
	 ,CASE DB WHEN ''SHC_ALTRUS'' THEN 1 WHEN ''SHC_SAVANNAH'' THEN 2 ELSE -1 END AS SOURCE_SYSTEM_ID
	FROM VISITS
)

, CLIENT_DATA AS
(
--	SELECT * FROM DISC_DEDUPE_PROD.COSTALSYNCDATA.CLIENT_MASTER_LIST
SELECT * FROM
	(
		SELECT TRIM(DB) AS MASTER_DB, UPPER(TRIM(regexp_replace(MASTER.MASTER_ID,MASTER.DB))) AS MASTER_ID, TRIM(DB) AS DB, TRIM(PATIENT_NUMBER) AS PATIENT_NUMBER
		FROM DISC_DEDUPE_PROD.COSTALSYNCDATA.CLIENT_MASTER_LIST MASTER
	)
	UNION
	SELECT * FROM
	(
		SELECT TRIM(MASTER.DB) AS MASTER_DB, UPPER(TRIM(regexp_replace(MASTER.MASTER_ID,MASTER.DB))) AS MASTER_ID, TRIM(MATCH.DB) AS DB, TRIM(MATCH.PATIENT_NUMBER) AS PATIENT_NUMBER
		FROM DISC_DEDUPE_PROD.COSTALSYNCDATA.CLIENT_MATCH_LIST AS MATCH
        JOIN DISC_DEDUPE_PROD.COSTALSYNCDATA.CLIENT_MASTER_LIST AS MASTER 
            ON MASTER.MASTER_ID = MATCH.MASTER_ID
        WHERE MATCH.ID <> MATCH.MASTER_ID
	)
) 
, EMPLOYEES AS 
(
SELECT *,TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE, TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE 
		FROM DISC_DEDUPE_PROD.COSTALSYNCDATA.EMPLOYEE_MASTER_LIST
)
, DATA AS (
	SELECT 
		 MD5(v.Schedule_Number|| ''-'' || v.db  || ''-''  || ''COSTALSYNCDATA'') AS VISIT_KEY
		,V.REPORT_DATE AS REPORT_DATE
		,coalesce(b.BRANCH_KEY,md5(NVL(v.DB, '''') || ''-'' || coalesce(v.OFFICECODE,'''') || ''-''  || ''COSTALSYNCDATA''))  AS BRANCH_KEY
         ,coalesce(md5(C.MASTER_DB || ''-'' ||UPPER(TRIM(regexp_replace(C.MASTER_ID,C.MASTER_DB)))  || ''-''  ||  ''COSTALSYNCDATA''), md5(v.DB || ''-'' || NVL(TRY_CAST(TRIM(v.CLIENT_NUMBER) AS INTEGER), -1)::STRING || ''-'' || ''COSTALSYNCDATA'')) AS CLIENT_KEY
		,nvl(n.CONTRACT_KEY,md5(v.DB || ''-'' || v.CONTRACT_CODE || ''-'' || ''COSTALSYNCDATA'')) AS CONTRACT_KEY
		--,TRIM( SE.DB) || ''-'' || UPPER( TRIM( SE.MASTER_NURSE_ID)) || ''-'' || ''COSTALSYNCDATA'' AS SCHEDULED_EMPLOYEE
        ,NVL(MD5( TRIM (se.DB) || ''-'' ||UPPER((TRIM(regexp_replace(se.MASTER_ID,se.DB)))) || ''-'' || ''COSTALSYNCDATA''),md5(NVL(v.DB, '''') || ''-'' || upper(v.scheduled_employee_id) || ''-'' || ''COSTALSYNCDATA'')) AS SCHEDULED_EMPLOYEE_KEY
		,nvl(MD5( TRIM (e.DB) || ''-'' ||UPPER((TRIM(regexp_replace(e.MASTER_ID,e.DB)))) || ''-'' || ''COSTALSYNCDATA''),md5(NVL(TRIM(v.DB), '''') || ''-'' || TRIM(upper(coalesce(v.employeeid, ''-1''))) || ''-'' || ''COSTALSYNCDATA'')) AS EMPLOYEE_KEY
		,CASE v.DB WHEN ''SHC_ALTRUS'' THEN 1 WHEN ''SHC_SAVANNAH'' THEN 2 ELSE -1 END AS SOURCE_SYSTEM_ID
		,nvl(s.SUPERVISOR_KEY,md5(v.DB || ''-'' || coalesce(v.SUPERVISORCODE,''Unknown'') || ''-'' || ''COSTALSYNCDATA'')) AS SUPERVISOR_KEY
		,NULL AS INVOICE_KEY
		,NULL AS PAYROLL_KEY
		,MD5(AUTHORIZATIONS.SERVICE_YEAR || ''-'' || 
			AUTHORIZATIONS.SERVICE_MONTH || ''-'' || 
			AUTHORIZATIONS.CLIENT_NUMBER || ''-'' ||
			AUTHORIZATIONS.ADMISSION_NUMBER || ''-'' ||
			AUTHORIZATIONS.CONTRACT_CODE || ''-'' || 
			AUTHORIZATIONS.SYSTEM_CODE || ''-'' || AUTHORIZATIONS.LOCATION_CODE || ''-'' || ''COSTALSYNCDATA'') AS CLIENT_SERVICE_KEY
		,MD5(v.DB || ''-'' || COALESCE(B.OFFICE_STATE_CODE,''GA'') || ''-''|| COALESCE(PCM.PAYOR_ID,''-1'') || ''-'' || COALESCE(TRIM(v.CONTRACT_CODE),''UNKNOWN'') || ''-'' || ''COSTALSYNCDATA'') AS PARTNER_CONTRACT_SERVICE_KEY
        ,NULL AS BILLING_KEY											   
		,v.SERVICE_DATE AS SERVICE_DATE
		,NULL AS PAYROLL_DATE
		,v.OFFICENAME  AS BRANCH_NAME
        ,coalesce(TRY_CAST(TRIM(c.PATIENT_NUMBER) AS INTEGER),TRY_CAST(v.CLIENT_NUMBER AS INTEGER)) AS CLIENT_NUMBER
		,v.CONTRACT_CODE AS CONTRACT_CODE
		,coalesce(UPPER((TRIM(regexp_replace(se.MASTER_ID,se.DB)))),v.SCHEDULED_EMPLOYEE_ID) AS SCHEDULED_EMPLOYEE_ID
		,coalesce(UPPER((TRIM(regexp_replace(se.MASTER_ID,se.DB)))),v.employeeid) AS EMPLOYEE_ID
		,v.Db AS SYSTEM_CODE
		,v.SUPERVISORCODE AS SUPERVISOR_CODE
		,NULL AS INVOICE_ID
		,NULL AS CHEQUE_NUMBER
		,1 AS CLEAN_SHIFT_FLAG
		,STATUS.SCHEDULE_STATUS_CODE AS SCHEDULE_STATUS_CODE
		,STATUS.SCHEDULE_STATUS_NAME AS SCHEDULE_STATUS_NAME
		,STATUS.SCHEDULE_STATUS_DESCRIPTION AS SCHEDULE_STATUS_DESCRIPTION
		,STATUS.VISIT_STATUS_CODE AS VISIT_STATUS_CODE
		,STATUS.VISIT_STATUS_NAME AS VISIT_STATUS_NAME
		,STATUS.VISIT_STATUS_DESCRIPTION AS VISIT_STATUS_DESCRIPTION
		,STATUS.INVOICE_STATUS_CODE AS INVOICE_STATUS_CODE
		,STATUS.INVOICE_STATUS_NAME AS INVOICE_STATUS_NAME
		,STATUS.INVOICE_STATUS_DESCRIPTION AS INVOICE_STATUS_DESCRIPTION
		,STATUS.PAYROLL_STATUS_CODE AS PAYROLL_STATUS_CODE
		,STATUS.PAYROLL_STATUS_NAME AS PAYROLL_STATUS_NAME
		,STATUS.PAYROLL_STATUS_DESCRIPTION AS PAYROLL_STATUS_DESCRIPTION
	    ,NULL AS CANCEL_REASON_CODE
	    ,NULL AS CANCEL_REASON_DESCRIPTION
	    ,NULL AS CANCEL_REASON_NOTES
		,FALSE AS EXCEPTION_REASON_INDICATOR
		,NULL AS RESOLUTION_CODE
		,NULL AS RESOLUTION_DESCRIPTION
	    ,NULL AS REJECTION_CODE
	    ,NULL AS REJECTION_DESCRIPTION
	    ,NULL AS BILL_CODE
	    ,CASE WHEN v.STATUS_CODE IN (''B'',''BP'',''C'',''V'',''VB'',''VP'',''P'') THEN (r.AMOUNT * v.MATH_FACTOR ) ELSE 0 END AS BILL_RATE
	    -- ,r.AMOUNT * v.MATH_FACTOR AS BILL_RATE_NEW
		,NULL AS BILL_UNITS_SERVED     -----?
		,NULL AS BILL_UNIT_TYPE        -----?
	    ,NULL AS OVERHEAD_RATE 
	    --,TO_TIME(v.SCHEDULE_TIME) AS SCHEDULE_TIMEIN
		,v.SCHEDULE_TIME AS SCHEDULE_TIMEIN
		--,CASE WHEN v.SCH_HOURS_SERVED LIKE ''%.%'' THEN dateadd(MINUTE,((v.SCH_HOURS_SERVED - floor(v.SCH_HOURS_SERVED,0)) * 60),DATEADD(HOUR ,floor(v.SCH_HOURS_SERVED,0) ,TO_TIME(v.SCHEDULE_TIME)))ELSE DATEADD(HOUR ,v.SCH_HOURS_SERVED ,TO_TIME(v.SCHEDULE_TIME)) END AS SCHEDULE_TIMEOUT
		,CASE WHEN v.SCH_HOURS_SERVED LIKE ''%.%'' THEN dateadd(MINUTE,((v.SCH_HOURS_SERVED - floor(v.SCH_HOURS_SERVED,0)) * 60),DATEADD(HOUR ,floor(v.SCH_HOURS_SERVED,0) ,v.SCHEDULE_TIME))ELSE DATEADD(HOUR ,v.SCH_HOURS_SERVED ,v.SCHEDULE_TIME) END AS SCHEDULE_TIMEOUT
		,v.sch_HOURS_SERVED AS SCHEDULE_DURATION
		--,TO_TIME(v.CONFIRMED_TIME) AS ACTUAL_TIMEIN
		,v.CONFIRMED_TIME AS ACTUAL_TIMEIN
		--,CASE WHEN v.HOURS_SERVED LIKE ''%.%'' THEN dateadd(MINUTE,((v.HOURS_SERVED - floor(v.HOURS_SERVED,0)) * 60),DATEADD(HOUR ,floor(v.HOURS_SERVED,0) ,TO_TIME(v.CONFIRMED_TIME)))ELSE DATEADD(HOUR ,v.HOURS_SERVED ,TO_TIME(v.CONFIRMED_TIME)) END AS ACTUAL_TIMEOUT
		,CASE WHEN v.HOURS_SERVED LIKE ''%.%'' THEN dateadd(MINUTE,((v.HOURS_SERVED - floor(v.HOURS_SERVED,0)) * 60),DATEADD(HOUR ,floor(v.HOURS_SERVED,0) ,v.CONFIRMED_TIME))ELSE DATEADD(HOUR ,v.HOURS_SERVED ,v.CONFIRMED_TIME) END AS ACTUAL_TIMEOUT
		,v.HOURS_SERVED AS ACTUAL_DURATION
		--,TO_TIME(v.CONFIRMED_TIME) AS ADJUSTED_TIMEIN
		,v.CONFIRMED_TIME AS ADJUSTED_TIMEIN
		--,CASE WHEN v.HOURS_SERVED LIKE ''%.%'' THEN dateadd(MINUTE,((v.HOURS_SERVED - floor(v.HOURS_SERVED,0)) * 60),DATEADD(HOUR ,floor(v.HOURS_SERVED,0) ,TO_TIME(v.CONFIRMED_TIME)))ELSE DATEADD(HOUR ,v.HOURS_SERVED ,TO_TIME(v.CONFIRMED_TIME)) END AS ADJUSTED_TIMEOUT
		,CASE WHEN v.HOURS_SERVED LIKE ''%.%'' THEN dateadd(MINUTE,((v.HOURS_SERVED - floor(v.HOURS_SERVED,0)) * 60),DATEADD(HOUR ,floor(v.HOURS_SERVED,0) ,v.CONFIRMED_TIME))ELSE DATEADD(HOUR ,v.HOURS_SERVED ,v.CONFIRMED_TIME) END AS ADJUSTED_TIMEOUT
		,v.HOURS_SERVED AS ADJUSTED_DURATION
		,v.HOURS_SERVED 
	    ,NULL AS COMMENTS
	    ,NULL AS IS_EVV_FLAG
	    ,NULL AS TIMESHEET_TYPE
	    ,NULL AS TRACKING_ID
	    ,STATUS.CONFIRMED_FLAG
	FROM Visit_Agg v
LEFT JOIN DISC_PROD.PAYOR_CONTRACT_UI.PAYOR_CONTRACT_MAPPING PCM ON v.DB=PCM.ORIGINAL_SYSTEM_CODE
AND trim(v.CONTRACT_CODE)=trim(PCM.CONTRACT_CODE)
LEFT JOIN AUTHORIZATIONS AUTHORIZATIONS ON v.db=AUTHORIZATIONS.SYSTEM_CODE AND TRIM(v.CLIENT_NUMBER) =TRIM(AUTHORIZATIONS.CLIENT_NUMBER) 
AND TRIM(v.ADMISSION_NUMBER) =TRIM(AUTHORIZATIONS.ADMISSION_NUMBER) AND TRIM(v.CONTRACT_CODE)=TRIM(AUTHORIZATIONS.CONTRACT_CODE) 
AND TRIM(v.OFFICECODE)=TRIM(AUTHORIZATIONS.LOCATION_CODE) 
AND to_date(v.REPORT_DATE) BETWEEN AUTHORIZATIONS.REPORT_DATE AND LAST_DAY(AUTHORIZATIONS.REPORT_DATE)
																							
	LEFT JOIN BILL_RATE r
	    ON r.DB = V.DB
	    AND r.SCHEDULE_NUMBER = V.SCHEDULE_NUMBER
	LEFT JOIN HAH.DIM_BRANCH b
		ON b.OFFICE_CODE = TRIM(V.OFFICECODE)
		AND b.SYSTEM_CODE = TRIM(v.DB)
	LEFT JOIN CLIENT_DATA c
		ON TRY_CAST (c.PATIENT_NUMBER AS INTEGER) = TRY_CAST(v.CLIENT_NUMBER AS INTEGER)
	    AND TRIM(c.DB) = TRIM(v.DB)
	LEFT JOIN HAH.DIM_CONTRACT n
		ON n.CONTRACT_CODE = v.CONTRACT_CODE
	    AND n.SYSTEM_CODE = v.DB
	LEFT JOIN EMPLOYEES e
		ON coalesce(v.employeeid,''-1'') = e.NURSE_ID
		AND TRIM(v.DB) = TRIM(e.DB)
	    AND v.SERVICE_DATE >= e.EFFECTIVE_FROM_DATE
	    AND v.SERVICE_DATE < e.EFFECTIVE_TO_DATE
	LEFT JOIN EMPLOYEES se
		ON coalesce(v.SCHEDULED_EMPLOYEE_ID,''-1'') = se.NURSE_ID
		AND TRIM(v.DB) = TRIM(se.DB)
	    AND v.SERVICE_DATE >= se.EFFECTIVE_FROM_DATE
	    AND v.SERVICE_DATE < se.EFFECTIVE_TO_DATE
	LEFT JOIN HAH.DIM_SUPERVISOR s
		ON TRIM(s.SUPERVISOR_CODE) = coalesce(v.SUPERVISORCODE,''Unknown'')
	    AND s.SYSTEM_CODE = v.DB
	--LEFT JOIN DERIVED_STATUS DS ON V.DB = DS.DB AND V.SCHEDULE_NUMBER= DS.SCHEDULE_NUMBER
	LEFT JOIN HAH.DIM_VISIT_STATUS_MAPPING STATUS--HAH.DIM_VISIT_STATUS_MAPPING STATUS 
	ON MD5(V.DB ||''-''|| V.DERIVED_DISC_STATUS)= TRIM(STATUS.VISIT_STATUS_KEY)
		AND STATUS.SOURCE_SYSTEM_ID IN (1,2)
		--AND v.DB = STATUS.SYSTEM_CODE
	WHERE COALESCE(v.HOURS_SERVED,0) <> 0 AND 
	v.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz
)
	SELECT DATA.VISIT_KEY,DATA.REPORT_DATE, DATA.BRANCH_KEY, DATA.CLIENT_KEY,DATA.CONTRACT_KEY, 
		DATA.SCHEDULED_EMPLOYEE_KEY, DATA.EMPLOYEE_KEY, DATA.SOURCE_SYSTEM_ID, DATA.SUPERVISOR_KEY,
		DATA.INVOICE_KEY, DATA.PAYROLL_KEY,DATA.CLIENT_SERVICE_KEY,
		DATA.PARTNER_CONTRACT_SERVICE_KEY,DATA.BILLING_KEY, DATA.SERVICE_DATE, DATA.PAYROLL_DATE, DATA.BRANCH_NAME, DATA.CLIENT_NUMBER,
		DATA.CONTRACT_CODE, DATA.SCHEDULED_EMPLOYEE_ID, DATA.EMPLOYEE_ID, DATA.SYSTEM_CODE, DATA.SUPERVISOR_CODE,
		DATA.INVOICE_ID, DATA.CHEQUE_NUMBER, DATA.CLEAN_SHIFT_FLAG, 
		DATA.SCHEDULE_STATUS_CODE, DATA.SCHEDULE_STATUS_NAME, DATA.SCHEDULE_STATUS_DESCRIPTION, 
		DATA.VISIT_STATUS_CODE, DATA.VISIT_STATUS_NAME, DATA.VISIT_STATUS_DESCRIPTION, 
		DATA.INVOICE_STATUS_CODE, DATA.INVOICE_STATUS_NAME, DATA.INVOICE_STATUS_DESCRIPTION, 
		DATA.PAYROLL_STATUS_CODE, DATA.PAYROLL_STATUS_NAME, DATA.PAYROLL_STATUS_DESCRIPTION, DATA.CANCEL_REASON_CODE,
		DATA.CANCEL_REASON_DESCRIPTION, DATA.CANCEL_REASON_NOTES, DATA.EXCEPTION_REASON_INDICATOR, 
		DATA.RESOLUTION_CODE, DATA.RESOLUTION_DESCRIPTION, DATA.REJECTION_CODE,
		DATA.REJECTION_DESCRIPTION, DATA.BILL_CODE, DATA.BILL_RATE,--DATA.BILL_RATE_NEW,
	    DATA.BILL_UNITS_SERVED, DATA.BILL_UNIT_TYPE, DATA.OVERHEAD_RATE,
	    DATA.SCHEDULE_TIMEIN, DATA.SCHEDULE_TIMEOUT, DATA.SCHEDULE_DURATION, 
		DATA.ACTUAL_TIMEIN, DATA.ACTUAL_TIMEOUT,DATA.ACTUAL_DURATION, DATA.ADJUSTED_TIMEIN,DATA.ADJUSTED_TIMEOUT,
		DATA.ADJUSTED_DURATION, DATA.HOURS_SERVED,DATA.COMMENTS, DATA.IS_EVV_FLAG, DATA.TIMESHEET_TYPE, DATA.TRACKING_ID,
		-- ETL Fields
    	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	    CURRENT_USER as ETL_INSERTED_BY,
	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	    CURRENT_USER as ETL_LAST_UPDATED_BY,
	    0 as ETL_DELETED_FLAG,
	    CONFIRMED_FLAG
	FROM DATA AS DATA
		LEFT JOIN HAH.FACT_SYSTEM_CUTOVER_DATE_2_0 AS CUTOVER
		ON CUTOVER.SOURCE_SYSTEM_ID = DATA.SOURCE_SYSTEM_ID 
			AND CUTOVER.SYSTEM_CODE = DATA.SYSTEM_CODE
			AND NVL(CUTOVER.BRANCH_KEY, DATA.BRANCH_KEY) = DATA.BRANCH_KEY
			AND NVL(CUTOVER.PARTNER_CONTRACT_SERVICE_KEY, DATA.PARTNER_CONTRACT_SERVICE_KEY) = DATA.PARTNER_CONTRACT_SERVICE_KEY
	WHERE DATA.SERVICE_DATE BETWEEN NVL(CUTOVER.START_DATE, DATA.SERVICE_DATE) AND NVL(CUTOVER.END_DATE, DATA.SERVICE_DATE)
QUALIFY ROW_NUMBER() OVER (PARTITION BY VISIT_KEY,DATA.SYSTEM_CODE ORDER BY CLIENT_SERVICE_KEY) = 1;
;
    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
    return return_result;
END;
    ';