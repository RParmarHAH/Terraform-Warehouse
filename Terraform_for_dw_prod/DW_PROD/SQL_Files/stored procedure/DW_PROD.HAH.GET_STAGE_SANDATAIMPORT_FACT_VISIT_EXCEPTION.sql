CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_SANDATAIMPORT_FACT_VISIT_EXCEPTION("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '

BEGIN
--*****************************************************************************************************************************
-- NAME:  SANDATAIMPORT_FACT_VISIT_EXCEPTION
--
-- PURPOSE: Creates one row per visit per exception according to SANDATAIMPORT
--
-- PRODELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 12/1/2022	Abhishek Sunil			Initial PRODelopment
-- 30/6/2023	Naresha Bhat			Bitwise operator implimentation for EXCEPTION_CODE
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.SANDATAIMPORT_FACT_VISIT_EXCEPTION
WITH VISITS_WITH_EXCEPTIONS AS (
	SELECT
		VISITS.AGENCYID,
		VISITS.SCHEDULEID,
		VISITS.SCHEDULEDATE::TIMESTAMP_NTZ AS SCHEDULEDATE,
		TRIM(exc.value)::STRING AS EXCEPTION_CODE,
		NULLIF(TRIM(VISITS.REASONCODE),'''') AS REASON_CODE, 
		NULLIF(TRIM(VISITS.RESOLUTIONCODE),'''') AS RESOLUTION_CODE -- Bring Resolution description AFTER response FROM sandata
	FROM
		DISC_PROD.SANDATAIMPORT.SANDATA_SCHEDULES VISITS
	,LATERAL FLATTEN(input => SPLIT(VISITS.EXCEPTIONCODE, ''|'')) exc 
	WHERE 
		NULLIF(EXCEPTION_CODE,'''') IS NOT NULL AND TRIM(EXCEPTIONCODE) <> ''0'' AND TRIM(VISITS.AGENCYID) IN (''8485'')
	GROUP BY
		VISITS.AGENCYID, VISITS.SCHEDULEID, VISITS.SCHEDULEDATE, EXCEPTION_CODE, VISITS.REASONCODE, VISITS.RESOLUTIONCODE
	ORDER BY
		VISITS.SCHEDULEDATE
),
ALL_VISIT_EXCEPTIONS AS (
	SELECT 
		AGENCYID,
		SCHEDULEID,
		SCHEDULEDATE,
		EXC.value::STRING AS EXCEPTION_CODE,
		REASON_CODE,
		RESOLUTION_CODE
	FROM 
	(
	SELECT
		AGENCYID,
		SCHEDULEID,
		SCHEDULEDATE,
		REASON_CODE,
		RESOLUTION_CODE,
		CASE WHEN (BITAND(EXCEPTION_CODE, 1)) = 1 THEN (BITAND(EXCEPTION_CODE, 1))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 2)) = 2 THEN (BITAND(EXCEPTION_CODE, 2))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 4)) = 4 THEN (BITAND(EXCEPTION_CODE, 4))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 8)) = 8 THEN (BITAND(EXCEPTION_CODE, 8))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 16)) = 16 THEN (BITAND(EXCEPTION_CODE, 16))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 32)) = 32 THEN (BITAND(EXCEPTION_CODE, 32))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 64)) = 64 THEN (BITAND(EXCEPTION_CODE, 64))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 128)) = 128 THEN (BITAND(EXCEPTION_CODE, 128))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 256)) = 256 THEN (BITAND(EXCEPTION_CODE, 256))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 8192)) = 8192 THEN (BITAND(EXCEPTION_CODE, 8192))::VARCHAR ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 16384)) = 16384 THEN (BITAND(EXCEPTION_CODE, 16384))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 32768)) = 32768 THEN (BITAND(EXCEPTION_CODE, 32768))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 65536)) = 65536 THEN (BITAND(EXCEPTION_CODE, 65536))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 131072)) = 131072 THEN (BITAND(EXCEPTION_CODE, 131072))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 524288)) = 524288 THEN (BITAND(EXCEPTION_CODE, 524288))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 1048576)) = 1048576 THEN (BITAND(EXCEPTION_CODE, 1048576))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 2097152)) = 2097152 THEN (BITAND(EXCEPTION_CODE, 2097152))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 4194304)) = 4194304 THEN (BITAND(EXCEPTION_CODE, 4194304))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 8388608)) = 8388608 THEN (BITAND(EXCEPTION_CODE, 8388608))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 16777216)) = 16777216 THEN (BITAND(EXCEPTION_CODE, 16777216))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 33554432)) = 33554432 THEN (BITAND(EXCEPTION_CODE, 33554432))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 67108864)) = 67108864 THEN (BITAND(EXCEPTION_CODE, 67108864))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 134217728)) = 134217728 THEN (BITAND(EXCEPTION_CODE, 134217728))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 268435456)) = 268435456 THEN (BITAND(EXCEPTION_CODE, 268435456))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 536870912)) = 536870912 THEN (BITAND(EXCEPTION_CODE, 536870912))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 1073741824)) = 1073741824 THEN (BITAND(EXCEPTION_CODE, 1073741824))::VARCHAR || ''|'' ELSE '''' END AS CODES
	FROM
		VISITS_WITH_EXCEPTIONS
	) BREAKOUT
	,LATERAL FLATTEN(input => SPLIT(BREAKOUT.CODES, ''|'')) exc 
	WHERE NULLIF(EXCEPTION_CODE,'''') IS NOT NULL
),
EXCEPTIONS AS
(
	SELECT
		MD5(SV.AGENCYID || ''-'' || SV.SCHEDULEID || ''-'' || SCH.EXCEPTION_CODE || ''-'' || ''SANDATAIMPORT'') AS VISIT_EXCEPTION_KEY,
		MD5(SV.AGENCYID || ''-'' || SV.SCHEDULEID || ''-'' || ''SANDATAIMPORT'') AS VISIT_KEY,
		SV.SCHEDULEDATE AS SERVICE_DATE, 
		4 AS SOURCE_SYSTEM_ID,
		SV.AGENCYID AS SYSTEM_CODE,
		SCH.EXCEPTION_CODE AS EXCEPTION_CODE,
		CASE
			WHEN SCH.REASON_CODE IS NOT NULL OR SCH.RESOLUTION_CODE IS NOT NULL THEN TRUE
			WHEN SCH.REASON_CODE IS NULL AND SCH.RESOLUTION_CODE IS NULL THEN FALSE
		END AS ACKNOWLEDGED_FLAG,
		CASE 
			WHEN SCH.RESOLUTION_CODE IS NOT NULL THEN TRUE
			ELSE FALSE
		END AS RESOLVED_FLAG,
		SCH.REASON_CODE,
		TRIM(ERC.DESCRIPTION) AS REASON_NAME, 
		SCH.RESOLUTION_CODE AS RESOLUTION_CODE,
		MERC.DESCRIPTION AS RESOLUTION_NAME 
	FROM
		ALL_VISIT_EXCEPTIONS SCH
	INNER JOIN
		DISC_PROD.BI_REPOSITORY.SANDATAVISITS SV
		ON SV.AGENCYID = SCH.AGENCYID
			AND SV.SCHEDULEID = SCH.SCHEDULEID
	LEFT JOIN 
		DISC_PROD.SANDATAIMPORT.SANDATA_EXTERNALREASONCODES ERC 
		ON ERC.AGENCYID = SCH.AGENCYID
			AND ERC.CODE = SCH.REASON_CODE
	LEFT JOIN 
		DISC_PROD.SANDATAIMPORT.SANDATA_MANUAL_EXTERNALRESOLUTIONCODES MERC 
		ON MERC.AGENCYID = SCH.AGENCYID
			AND MERC.CODE = SCH.RESOLUTION_CODE
	WHERE SV.AGENCYID = ''8485'' AND 
		NVL(SV.STAFFAGENCYID,'''') <> '''' AND SV.CLIENTID IS NOT NULL
			AND NVL(SV.ADMISSIONTYPE, '''') <> '''' AND LEN(NVL(SV.STATUS,'''')) <= 2 -- Exclude (7) bad data records
		    AND SV.ETL_LAST_UPDATED_DATE >= (:STR_CDC_START)::timestamp_ntz
)
SELECT
	DATA.VISIT_EXCEPTION_KEY,
	DATA.VISIT_KEY,
	VE.EXCEPTION_KEY,
	DATA.SERVICE_DATE,
	DATA.SOURCE_SYSTEM_ID,
	DATA.SYSTEM_CODE,
	VE.EXCEPTION_CODE,
	DATA.ACKNOWLEDGED_FLAG,
	DATA.RESOLVED_FLAG,
	DATA.REASON_CODE,
	DATA.REASON_NAME,
	DATA.RESOLUTION_CODE,
	DATA.RESOLUTION_NAME,
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	FALSE AS ETL_DELETED_FLAG
FROM
	EXCEPTIONS DATA
LEFT JOIN 
	HAH.DIM_VISIT_EXCEPTION VE 
	ON VE.EXCEPTION_CODE = DATA.EXCEPTION_CODE 
	AND VE.SOURCE_SYSTEM_ID = DATA.SOURCE_SYSTEM_ID 
	AND VE.SYSTEM_CODE = DATA.SYSTEM_CODE
ORDER BY
	DATA.SERVICE_DATE ASC; -- 5,307,661


MERGE INTO STAGE.SANDATAIMPORT_FACT_VISIT_EXCEPTION AS TARGET USING (
WITH VISITS_WITH_EXCEPTIONS AS (
	SELECT
		VISITS.AGENCYID,
		VISITS.SCHEDULEID,
		VISITS.SCHEDULEDATE::TIMESTAMP_NTZ AS SCHEDULEDATE,
		TRIM(exc.value)::STRING AS EXCEPTION_CODE,
		NULLIF(TRIM(VISITS.REASONCODE),'''') AS REASON_CODE,
		NULLIF(TRIM(VISITS.RESOLUTIONCODE),'''') AS RESOLUTION_CODE, -- Bring Resolution description AFTER response FROM sandata
		VISITS.ETL_LAST_UPDATED_DATE
	FROM
		DISC_PROD.SANDATAIMPORT.SANDATA_SCHEDULES VISITS
	,LATERAL FLATTEN(input => SPLIT(VISITS.EXCEPTIONCODE, ''|'')) exc 
	WHERE 
		NULLIF(EXCEPTION_CODE,'''') IS NOT NULL AND TRIM(EXCEPTIONCODE) <> ''0'' AND TRIM(VISITS.AGENCYID) IN (''8485'')
	GROUP BY
		VISITS.AGENCYID, VISITS.SCHEDULEID, VISITS.SCHEDULEDATE, EXCEPTION_CODE, VISITS.REASONCODE, VISITS.RESOLUTIONCODE, VISITS.ETL_LAST_UPDATED_DATE
	ORDER BY
		VISITS.SCHEDULEDATE
),
 ALL_VISIT_EXCEPTIONS AS (
	SELECT 
		AGENCYID,
		SCHEDULEID,
		SCHEDULEDATE,
		EXC.value::STRING AS EXCEPTION_CODE,
		REASON_CODE,
		RESOLUTION_CODE,
		ETL_LAST_UPDATED_DATE
	FROM 
	(
	SELECT
		AGENCYID,
		SCHEDULEID,
		SCHEDULEDATE,
		REASON_CODE,
		RESOLUTION_CODE,
		CASE WHEN (BITAND(EXCEPTION_CODE, 1)) = 1 THEN (BITAND(EXCEPTION_CODE, 1))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 2)) = 2 THEN (BITAND(EXCEPTION_CODE, 2))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 4)) = 4 THEN (BITAND(EXCEPTION_CODE, 4))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 8)) = 8 THEN (BITAND(EXCEPTION_CODE, 8))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 16)) = 16 THEN (BITAND(EXCEPTION_CODE, 16))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 32)) = 32 THEN (BITAND(EXCEPTION_CODE, 32))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 64)) = 64 THEN (BITAND(EXCEPTION_CODE, 64))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 128)) = 128 THEN (BITAND(EXCEPTION_CODE, 128))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 256)) = 256 THEN (BITAND(EXCEPTION_CODE, 256))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 512)) = 512 THEN (BITAND(EXCEPTION_CODE, 512))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 8192)) = 8192 THEN (BITAND(EXCEPTION_CODE, 8192))::VARCHAR ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 16384)) = 16384 THEN (BITAND(EXCEPTION_CODE, 16384))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 32768)) = 32768 THEN (BITAND(EXCEPTION_CODE, 32768))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 65536)) = 65536 THEN (BITAND(EXCEPTION_CODE, 65536))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 131072)) = 131072 THEN (BITAND(EXCEPTION_CODE, 131072))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 524288)) = 524288 THEN (BITAND(EXCEPTION_CODE, 524288))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 1048576)) = 1048576 THEN (BITAND(EXCEPTION_CODE, 1048576))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 2097152)) = 2097152 THEN (BITAND(EXCEPTION_CODE, 2097152))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 4194304)) = 4194304 THEN (BITAND(EXCEPTION_CODE, 4194304))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 8388608)) = 8388608 THEN (BITAND(EXCEPTION_CODE, 8388608))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 16777216)) = 16777216 THEN (BITAND(EXCEPTION_CODE, 16777216))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 33554432)) = 33554432 THEN (BITAND(EXCEPTION_CODE, 33554432))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 67108864)) = 67108864 THEN (BITAND(EXCEPTION_CODE, 67108864))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 134217728)) = 134217728 THEN (BITAND(EXCEPTION_CODE, 134217728))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 268435456)) = 268435456 THEN (BITAND(EXCEPTION_CODE, 268435456))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 536870912)) = 536870912 THEN (BITAND(EXCEPTION_CODE, 536870912))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 1073741824)) = 1073741824 THEN (BITAND(EXCEPTION_CODE, 1073741824))::VARCHAR || ''|'' ELSE '''' END AS CODES,
		ETL_LAST_UPDATED_DATE
	FROM
		VISITS_WITH_EXCEPTIONS
	) BREAKOUT
	,LATERAL FLATTEN(input => SPLIT(BREAKOUT.CODES, ''|'')) exc 
	WHERE NULLIF(EXCEPTION_CODE,'''') IS NOT NULL 
), 
EXCEPTIONS AS
(
	SELECT
		MD5(SV.AGENCYID || ''-'' || SV.SCHEDULEID || ''-'' || SCH.EXCEPTION_CODE || ''-'' || ''SANDATAIMPORT'') AS VISIT_EXCEPTION_KEY,
		MD5(SV.AGENCYID || ''-'' || SV.SCHEDULEID || ''-'' || ''SANDATAIMPORT'') AS VISIT_KEY,
		SV."DATE" AS SERVICE_DATE, 
		4 AS SOURCE_SYSTEM_ID,
		SV.AGENCYID AS SYSTEM_CODE,
		SCH.EXCEPTION_CODE AS EXCEPTION_CODE,
		CASE
			WHEN SCH.REASON_CODE IS NOT NULL OR SCH.RESOLUTION_CODE IS NOT NULL THEN TRUE
			WHEN SCH.REASON_CODE IS NULL AND SCH.RESOLUTION_CODE IS NULL THEN FALSE
		END AS ACKNOWLEDGED_FLAG,
		CASE 
			WHEN SCH.RESOLUTION_CODE IS NOT NULL THEN TRUE
			ELSE FALSE
		END AS RESOLVED_FLAG,
		SCH.REASON_CODE,
		TRIM(ERC.DESCRIPTION) AS REASON_NAME, 
		SCH.RESOLUTION_CODE AS RESOLUTION_CODE,
		MERC.DESCRIPTION AS RESOLUTION_NAME
	FROM
		ALL_VISIT_EXCEPTIONS SCH
	INNER JOIN
		DISC_PROD.SANDATAIMPORT.SANDATA_VISITS SV
		ON SV.AGENCYID = SCH.AGENCYID
			AND SV.SCHEDULEID = SCH.SCHEDULEID
	LEFT JOIN 
		DISC_PROD.SANDATAIMPORT.SANDATA_EXTERNALREASONCODES ERC 
		ON ERC.AGENCYID = SCH.AGENCYID
			AND ERC.CODE = SCH.REASON_CODE
	LEFT JOIN 
		DISC_PROD.SANDATAIMPORT.SANDATA_MANUAL_EXTERNALRESOLUTIONCODES MERC 
		ON MERC.AGENCYID = SCH.AGENCYID
			AND MERC.CODE = SCH.RESOLUTION_CODE
	WHERE SV.AGENCYID = ''8485'' --AND SV.ADJUSTEDTIMEOUT IS NOT NULL
		AND (SV.ETL_LAST_UPDATED_DATE >= (:STR_CDC_START)::TIMESTAMP_NTZ
			OR SCH.ETL_LAST_UPDATED_DATE >= (:STR_CDC_START)::TIMESTAMP_NTZ
		AND SV.STAFFAGENCYID <> '''')
)
--select * from EXCEPTIONS;
SELECT
	DATA.VISIT_EXCEPTION_KEY,
	DATA.VISIT_KEY,
	VE.EXCEPTION_KEY,
	DATA.SERVICE_DATE,
	DATA.SOURCE_SYSTEM_ID,
	DATA.SYSTEM_CODE,
	VE.EXCEPTION_CODE,
	DATA.ACKNOWLEDGED_FLAG,
	DATA.RESOLVED_FLAG,
	DATA.REASON_CODE,
	DATA.REASON_NAME,
	DATA.RESOLUTION_CODE,
	DATA.RESOLUTION_NAME,
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	FALSE AS ETL_DELETED_FLAG
FROM
	EXCEPTIONS DATA
LEFT JOIN 
	HAH.DIM_VISIT_EXCEPTION VE 
	ON VE.EXCEPTION_CODE = DATA.EXCEPTION_CODE 
	AND VE.SOURCE_SYSTEM_ID = DATA.SOURCE_SYSTEM_ID 
	AND VE.SYSTEM_CODE = DATA.SYSTEM_CODE
ORDER BY
	DATA.SERVICE_DATE ASC
) AS SOURCE ON SOURCE.VISIT_KEY = TARGET.VISIT_KEY
WHEN NOT MATCHED THEN
	INSERT (
		VISIT_EXCEPTION_KEY,
		VISIT_KEY,
		EXCEPTION_KEY,
		SERVICE_DATE,
		SOURCE_SYSTEM_ID,
		SYSTEM_CODE,
		EXCEPTION_CODE,
		ACKNOWLEDGED_FLAG,
		RESOLVED_FLAG,
		REASON_CODE,
		REASON_NAME,
		RESOLUTION_CODE,
		RESOLUTION_NAME,
		ETL_TASK_KEY,
		ETL_INSERTED_TASK_KEY,
		ETL_INSERTED_DATE,
		ETL_INSERTED_BY,
		ETL_LAST_UPDATED_DATE,
		ETL_LAST_UPDATED_BY,
		ETL_DELETED_FLAG
	)
	VALUES (
		SOURCE.VISIT_EXCEPTION_KEY,
		SOURCE.VISIT_KEY,
		SOURCE.EXCEPTION_KEY,
		SOURCE.SERVICE_DATE,
		SOURCE.SOURCE_SYSTEM_ID,
		SOURCE.SYSTEM_CODE,
		SOURCE.EXCEPTION_CODE,
		SOURCE.ACKNOWLEDGED_FLAG,
		SOURCE.RESOLVED_FLAG,
		SOURCE.REASON_CODE,
		SOURCE.REASON_NAME,
		SOURCE.RESOLUTION_CODE,
		SOURCE.RESOLUTION_NAME,
		SOURCE.ETL_TASK_KEY,
		SOURCE.ETL_INSERTED_TASK_KEY,
		SOURCE.ETL_INSERTED_DATE,
		SOURCE.ETL_INSERTED_BY,
		SOURCE.ETL_LAST_UPDATED_DATE,
		SOURCE.ETL_LAST_UPDATED_BY,
		SOURCE.ETL_DELETED_FLAG
	); -- 5,302,126
	
RETURN ''SUCCESS'';
END;

';