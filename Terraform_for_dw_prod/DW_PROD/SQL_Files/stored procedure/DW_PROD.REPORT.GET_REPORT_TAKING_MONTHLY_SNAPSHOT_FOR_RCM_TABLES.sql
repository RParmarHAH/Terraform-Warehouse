CREATE OR REPLACE PROCEDURE DW_PROD.REPORT.GET_REPORT_TAKING_MONTHLY_SNAPSHOT_FOR_RCM_TABLES("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(100)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE 
	return_result DATE;
	LAST_INSERTED_DATE DATE DEFAULT (SELECT MAX(MONTH_DATE) FROM DW_PROD.REPORT.RPT_INVOICE_METRICS_MONTHLY);	--Added on 12/02/24
BEGIN

--********************************************************************************************
-- PURPOSE: Taking Monthly Snapshot of RCM Objects
-- DEVELOPMENT LOG:
-- DATE 		AUTHOR 			 				COMMENTS
-------------------------------------------------------------------------------------------------------------------------------
-- 07/06/23		Pinkal Panchal	 				INITIAL DEVELOPMENT
-- 26/06/23     Pinkal Panchal   				Changed snapshot date to 2nd business day as per the business request
-- 26/06/23     Pinkal Panchal/Ravi Suthar  	Added Task Schedule Logic
-- 29/06/23     Ravi Suthar  					Added Call Statement for Prod Procedure 
-- 24/01/24     Rajan Hansora                   Added query to take snapshot of Visit linkage table(DIM_INVOICE_VISIT_LINKAGE_MONTHLY) (ITXFN-317)
-- 05/02/24     Ravi Suthar  					Removed ''Alter Task Logic'' and Remove scheduled task
-- 05/02/23		Pinkal Panchal					Added Audit table for tracking backup history, 
--												Schedule procedure excution into pipeline instead of using task.
-- 12/02/24		Pinkal Panchal					Added LAST_INSERTED_DATE condition in where clause for Invoice Metrics.
--******************************************************************************************

--Added Audit Table on 05/02/24 by Pinkal
INSERT INTO DW_PROD.REPORT.TAKING_MONTHLY_SNAPSHOT_FOR_RCM_TABLES
SELECT * FROM (
SELECT ''DIM_INVOICE_MONTHLY'' AS TABLE_NAME, count(*) AS BEFORE_COUNT, NULL AS AFTER_COUNT, CURRENT_TIMESTAMP() as START_TIME, NULL AS END_TIME, CURRENT_USER AS INSERTED_BY
FROM DW_PROD.HAH.DIM_INVOICE_MONTHLY
UNION
SELECT ''FACT_REVENUE_MONTHLY'' AS TABLE_NAME, count(*) AS BEFORE_COUNT, NULL AS AFTER_COUNT, CURRENT_TIMESTAMP() as START_TIME, NULL AS END_TIME, CURRENT_USER AS INSERTED_BY
FROM DW_PROD.HAH.FACT_REVENUE_MONTHLY
UNION 
SELECT ''RPT_INVOICE_METRICS_MONTHLY'' AS TABLE_NAME, count(*) AS BEFORE_COUNT, NULL AS AFTER_COUNT, CURRENT_TIMESTAMP() as START_TIME, NULL AS END_TIME, CURRENT_USER AS INSERTED_BY
FROM DW_PROD.REPORT.RPT_INVOICE_METRICS_MONTHLY
UNION 
SELECT ''RPT_UNBILLED_METRICS_MONTHLY'' AS TABLE_NAME, count(*) AS BEFORE_COUNT, NULL AS AFTER_COUNT, CURRENT_TIMESTAMP() as START_TIME, NULL AS END_TIME, CURRENT_USER AS INSERTED_BY
FROM DW_PROD.REPORT.RPT_UNBILLED_METRICS_MONTHLY
UNION 
SELECT ''DIM_INVOICE_VISIT_LINKAGE_MONTHLY'' AS TABLE_NAME, count(*) AS BEFORE_COUNT, NULL AS AFTER_COUNT, CURRENT_TIMESTAMP() as START_TIME, NULL AS END_TIME, CURRENT_USER AS INSERTED_BY
FROM DW_PROD.HAH.DIM_INVOICE_VISIT_LINKAGE_MONTHLY
);

--Added on 26/06/23
With minimun_first AS
(
select Min(calendar_date) MIN_DATE,year,month
from DW_PROD.HAH.dim_date
where weekend_flag != ''TRUE'' and HAH_HOLIDAY_OBSERVED_FLAG != ''TRUE''
and year = year(getdate()) and month = month(getdate())
group by year,month
order by year,month
)
SELECT min(calendar_date)::DATE INTO return_result  --,d1.year,d1.month 
FROM DW_PROD.HAH.dim_date d1
left join minimun_first d2 on d2.year=d1.year and d2.month = d1.month
WHERE d1.calendar_date>d2.MIN_DATE 
and weekend_flag != ''TRUE'' and HAH_HOLIDAY_OBSERVED_FLAG != ''TRUE''
group by d1.year,d1.month 
order by d1.year,d1.month;

INSERT INTO DW_PROD.HAH.DIM_INVOICE_MONTHLY
SELECT *, current_timestamp::date AS MONTH_DATE
FROM DW_PROD.HAH.DIM_INVOICE
WHERE current_timestamp::date = :return_result;

INSERT INTO DW_PROD.HAH.FACT_REVENUE_MONTHLY
SELECT *, current_timestamp::date AS MONTH_DATE
FROM DW_PROD.HAH.FACT_REVENUE
WHERE current_timestamp::date = :return_result;

INSERT INTO DW_PROD.REPORT.RPT_INVOICE_METRICS_MONTHLY
SELECT INVOICE_KEY, REVENUE_KEY, INVOICE_NUMBER, ALTERNATE_INVOICE_NUMBER, INVOICE_TYPE, BILL_UNIT_TYPE,
INVOICE_DATE, REVENUE_DATE, REPORT_DATE, OFFICE_STATE_CODE, CONTRACT_KEY, CONTRACT_CODE, CONTRACT_NAME,
CONTRACT_CODE_AND_NAME, ORIGINAL_BRANCH_KEY, OFFICE_CODE, OFFICE_NAME, ORIGINAL_CLIENT_KEY, CLIENT_NAME,
CLIENT_NUMBER, CLIENT_ACQUISITION_NAME, CLIENT_ACQUIRED_FLAG, ACQUISITION_AS_OF_DATE,
INVOICE_AMOUNT, HOURS_BILLED, AMOUNT_PAID, PAYMENT_DATE, PAYMENT_RECEIVED, PAYOR_CODE,
CREDITED_AMOUNT, AMOUNT_OUTSTANDING, OUTSTANDING_DAYS, UNCOLLECTABLE_REVENUE, STATUS, INVOICE_STATUS,
START_OF_SERVICE, END_OF_SERVICE, PERIOD, TOTAL_PAID_AMOUNT, TOTAL_WRITE_OFF_AMOUNT, SOURCE_SYSTEM_ID,
ORIGINAL_SOURCE_SYSTEM_ID, current_timestamp AS MONTH_DATE, ETL_TASK_KEY, ETL_INSERTED_TASK_KEY,
ETL_INSERTED_DATE, ETL_INSERTED_BY, ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY 
FROM DW_PROD.REPORT.RPT_INVOICE_METRICS
WHERE current_timestamp::date = :return_result and MONTH_DATE::date != :LAST_INSERTED_DATE;

INSERT INTO DW_PROD.REPORT.RPT_UNBILLED_METRICS_MONTHLY
SELECT *, current_timestamp::date AS MONTH_DATE
FROM DW_PROD.REPORT.RPT_UNBILLED_METRICS
WHERE current_timestamp::date = :return_result;

INSERT INTO DW_PROD.HAH.DIM_INVOICE_VISIT_LINKAGE_MONTHLY
SELECT *, current_timestamp::date AS MONTH_DATE
FROM DW_PROD.HAH.DIM_INVOICE_VISIT_LINKAGE
WHERE current_timestamp::date = :return_result;

UPDATE DW_PROD.REPORT.TAKING_MONTHLY_SNAPSHOT_FOR_RCM_TABLES A
SET A.AFTER_COUNT = B.AFTER_COUNT, A.END_TIME=CURRENT_TIMESTAMP()
FROM 
(
SELECT ''DIM_INVOICE_MONTHLY'' AS TABLE_NAME, count(*) AS AFTER_COUNT, CURRENT_TIMESTAMP() as END_TIME
FROM DW_PROD.HAH.DIM_INVOICE_MONTHLY
UNION
SELECT ''FACT_REVENUE_MONTHLY'' AS TABLE_NAME, count(*) AS AFTER_COUNT, CURRENT_TIMESTAMP() as END_TIME
FROM DW_PROD.HAH.FACT_REVENUE_MONTHLY
UNION 
SELECT ''RPT_INVOICE_METRICS_MONTHLY'' AS TABLE_NAME, count(*) AS AFTER_COUNT, CURRENT_TIMESTAMP() as END_TIME
FROM DW_PROD.REPORT.RPT_INVOICE_METRICS_MONTHLY
UNION 
SELECT ''RPT_UNBILLED_METRICS_MONTHLY'' AS TABLE_NAME, count(*) AS AFTER_COUNT, CURRENT_TIMESTAMP() as END_TIME
FROM DW_PROD.REPORT.RPT_UNBILLED_METRICS_MONTHLY
UNION 
SELECT ''DIM_INVOICE_VISIT_LINKAGE_MONTHLY'' AS TABLE_NAME, count(*) AS AFTER_COUNT, CURRENT_TIMESTAMP() as END_TIME
FROM DW_PROD.HAH.DIM_INVOICE_VISIT_LINKAGE_MONTHLY
) B
WHERE A.TABLE_NAME=B.TABLE_NAME AND A.START_TIME::date=current_date();

return ''Monthly Snapshot Completed'';

END;
';