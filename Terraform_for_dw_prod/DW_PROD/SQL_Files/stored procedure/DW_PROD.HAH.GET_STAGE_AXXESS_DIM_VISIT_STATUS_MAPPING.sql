CREATE OR REPLACE PROCEDURE DW_PROD.HAH.GET_STAGE_AXXESS_DIM_VISIT_STATUS_MAPPING("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
    --*****************************************************************************************************************************
-- NAME:  AXXESS_DIM_VISIT_STATUS_MAPPING
--
-- PURPOSE: Creates one row per VISITKEY
--
-- PRODELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 01/11/2022	Pooja Shah			 Initial PRODelopment
-- 23/11/2023	Shikhar Saxena 		 Updated the VISIT_STATUS_CODE logic
-- 01/19/24	   Shubham Khunare	     schedule/visit Status name correction
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.AXXESS_DIM_VISIT_STATUS_MAPPING 

WITH VISITS AS 
(
SELECT DISTINCT MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(VISIT_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS VISIT_KEY, VISIT_NAME  ,VISIT_TYPE,
TRY_TO_DATE(COALESCE(VISIT_DATE,''1999-12-31''), ''YYYY-MM-DD'') AS VISIT_DATE ,CLINICIAN_ID ,SCHEDULE_DATE  ,UPPER(TRIM(VISIT_STATUS)) AS VISIT_STATUS,IS_MISSED_VISIT ,VISIT_TIME_IN ,VISIT_TIME_OUT ,''HH'' AS REVENUE_CATEGORY 
,HV.FACT_AR_ID , UPPER(TRIM(AR.FINAL_OR_MANAGEDCARE_STATUS)) AS INVOICE_STATUS
FROM DISC_PROD.AXXESS.VW_AXXESS_HH_VISITS_UPPER HV
LEFT JOIN DISC_PROD.AXXESS.AXXESS_ARS AR ON HV.FACT_AR_ID =AR.ID
UNION ALL 
SELECT   DISTINCT
         VISIT_KEY                     
        ,SCHEDULED_TASK_NAME   
        ,SCHEDULED_TASK_DISCIPLINE
        ,VISIT_START
        ,CLINICIAN_ID                        
        ,SCHEDULED_TASK_STARTDATE
        ,SCHEDULED_TASK_STATUS
        ,SCHEDULED_TASK_ISMISSEDVISIT
        ,VISIT_START_TIME        
        ,VISIT_END          
        ,REVENUE_CATEGORY
        ,CLAIM_ID                            
        ,FIRST_VALUE(INVOICE_STATUS) OVER(PARTITION BY VISIT_KEY ORDER BY PRECEDENCE)
        --,PRECEDENCE
FROM 
(
SELECT DISTINCT  MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(SCHEDULED_TASK_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS VISIT_KEY, SCHEDULED_TASK_NAME , SCHEDULED_TASK_DISCIPLINE,
CAST(COALESCE(VISIT_START,''1999-12-31'') AS DATE) AS VISIT_START,CLINICIAN_ID,SCHEDULED_TASK_STARTDATE ,UPPER(TRIM(SCHEDULED_TASK_STATUS)) AS SCHEDULED_TASK_STATUS,SCHEDULED_TASK_ISMISSEDVISIT,VISIT_START AS VISIT_START_TIME,
VISIT_END,''HC'' AS REVENUE_CATEGORY,TD.CLAIM_ID ,TRIM(UPPER(FT.CLAIM_STATUS)) AS INVOICE_STATUS,
CASE WHEN TRIM(UPPER(FT.CLAIM_STATUS))=''OVER PAID'' THEN 1
       WHEN TRIM(UPPER(FT.CLAIM_STATUS))=''PAID'' THEN 2
       WHEN TRIM(UPPER(FT.CLAIM_STATUS))=''PARTIALLY PAID'' THEN 3 
       WHEN TRIM(UPPER(FT.CLAIM_STATUS))=''SUBMITTED'' THEN 4 END AS PRECEDENCE
--SELECT DISTINCT TRIM(UPPER(FT.CLAIM_STATUS))
FROM DISC_PROD.AXXESS.VW_AXXESS_HC_TASKDETAILS  TD 
--LEFT JOIN (SELECT CLAIM_ID, MAX(TRANSACTION_DATE) TRANSACTION_DATE FROM  DISC_PROD.AXXESS.AXXESS_FINANCIALTRANSACTIONS GROUP BY CLAIM_ID) FIN  ON FIN.CLAIM_ID=TD.CLAIM_ID
LEFT JOIN DISC_PROD.AXXESS.AXXESS_FINANCIALTRANSACTIONS FT ON TD.CLAIM_ID =FT.CLAIM_ID --AND FT.TRANSACTION_DATE =FIN.TRANSACTION_DATE
)T
),
DERIVED_SCH AS
(
SELECT *,
		CASE WHEN 	SCHEDULE_DATE IS NOT NULL 
					 AND IS_MISSED_VISIT=''False'' 
					 AND (VISIT_TIME_IN IS NOT NULL OR  VISIT_TIME_OUT IS NOT NULL )
					 AND CLINICIAN_ID IS NOT NULL THEN ''Scheduled''
			 WHEN 	SCHEDULE_DATE IS NOT NULL AND
      			    (IS_MISSED_VISIT=''True'' ) -- ANd VISIT_TIME_IN IS  NULL
					 THEN ''Cancelled''
			 WHEN 	SCHEDULE_DATE IS NOT NULL 
					 AND IS_MISSED_VISIT=''False'' 
					 AND (CLINICIAN_ID IS NULL)  AND VISIT_STATUS IN (''NOT YET DUE'') THEN ''Scheduled-Open''
			WHEN SCHEDULE_DATE IS NOT NULL AND (IS_MISSED_VISIT=''True'' )  
				 AND (VISIT_TIME_IN IS NOT NULL OR  VISIT_TIME_OUT IS NOT NULL ) AND VISIT_STATUS NOT IN (''MISSED VISIT(COMPLETE)'',''MISSED VISIT(PENDING)'')
			THEN ''Rescheduled''
			WHEN SCHEDULE_DATE IS NOT NULL THEN ''Scheduled''
			END AS DERIVED_SCHEDULE_STATUS		 			 
FROM VISITS
)
--SELECT *  FROM DISC_SCH WHERE DISC_SCHEDULE_STATUS=''Rescheduled'' --IS NULL
,DERIVED_VISIT  AS
(
SELECT * 
,CASE
			--WHEN TRY_TO_DATE(TRIM(VISIT_DATE),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) THEN ''Future''
			WHEN VISIT_DATE > TO_DATE(GETDATE()) THEN ''Future''
--			WHEN IS_MISSED_VISIT=''True''  OR  VISIT_STATUS IN (''MISSED VISIT(COMPLETE)'',''MISSED VISIT(PENDING)'')  --AND  (VISIT_TIME_IN IS  NULL AND  VISIT_TIME_OUT IS NULL )   
--			THEN ''Did not happen''
			WHEN (IS_MISSED_VISIT=''True''  OR  VISIT_STATUS IN (''MISSED VISIT(COMPLETE)'',''MISSED VISIT(PENDING)'') ) --AND  (VISIT_TIME_IN IS  NULL AND  VISIT_TIME_OUT IS NULL )   
            OR (VISIT_STATUS IN (''NOT YET DUE'',''RETURNED W/ PHYSICIAN SIGNATURE'',''COMPLETED'',''MISSED VISIT(COMPLETE)'') AND VISITS.CLINICIAN_ID IS NULL)
            THEN ''Did not happen''
			WHEN (VISIT_STATUS) IN (''NOTECOMPLETED'',''OASISCOMPLETEDEXPORTREADY'',''OASISEXPORTED'',''ORDERRECEIVED'',
										''EVALRETURNEDWPHYSICIANSIGNATURE'',''NOTEMISSEDVISITCOMPLETE'',''NONOASISCOMPLETED'',
										''COMPLETED'',''COMPLETED(EXPORT READY)'',''COMPLETED(NOT EXPORTED)'',''EXPORTED''
										,''COMPLETED'',''COMPLETED(EXPORT READY)'',''COMPLETED(NOT EXPORTED)'',''EXPORTED'',''RETURNED W/ PHYSICIAN SIGNATURE'',''COMPLETED (NOT EXPORTED)''
										,''COMPLETED (EXPORT READY)'',
										''OASISCOMPLETEDNOTEXPORTED'') 
										THEN ''Completed''
			WHEN (VISIT_STATUS) IN (''ORDERREOPENED'',''NOTEREOPENED'',''NOTERETURNED'',''OASISNOTYETDUE'',
										''OASISNOTSTARTED'',''ORDERTOBESENTTOPHYSICIAN'',''NOTESAVED'',''ORDERNOTYETSTARTED'',''ORDERSENTTOPHYSICIAN'',''NOTENOTYETDUE'',
										''OASISSAVED'',''OASISREOPENED'',''ORDERRETURNEDFORCLINICIANREVIEW'',''ORDERSAVED''
										,''NOT YET DUE'',''SAVED'',''RETURNED FOR REVIEW'',''TO BE SENT TO PHYSICIAN'',
							            ''SENT TO PHYSICIAN (MANUALLY)'',''RETURNED FOR CLINICIAN SIGNATURE'',''NOT YET STARTED''
							            ,''COMPLETED (PENDING QA REVIEW)'',''OASISCOMPLETEDPENDINGREVIEW'',''REOPENED'',''SUBMITTED (PENDING QA REVIEW)''
							            ,''SUBMITTED WITH SIGNATURE'',''SUBMITTED PENDING CO-SIGNATURE'',''MISSED VISIT(RETURN FOR REVIEW)'') 
										THEN ''In Review''
			WHEN (VISIT_STATUS) IN (''NOTESUBMITTEDWITHSIGNATURE'',''ORDERSUBMITTEDPENDINGREVIEW'',''NOTEMISSEDVISITPENDING'',
										''SUBMITTEDWITHSIGNATUREPENDINGOASISAPPROVAL'') 
										THEN ''Pending''
   		 ELSE ''Completed'' END AS DERIVED_VISIT_STATUS -- UNKNOWN
FROM VISITS
)
--SELECT DISTINCT visit_Status FROM DISC_VISIT --WHERE --VISIT_STATUS  IN (''NOTESUBMITTEDWITHSIGNATURE'',''ORDERSUBMITTEDPENDINGREVIEW'',''NOTEMISSEDVISITPENDING'',''SUBMITTEDWITHSIGNATUREPENDINGOASISAPPROVAL'') 
--WHERE DISC_vISIT_sTATUS=''In Review''
,DERIVED_INV AS 
(
SELECT VISITS.*,
	CASE 	WHEN UPPER(VISITS.INVOICE_STATUS) IN (''SUBMITTED'',''PROCESSED AS PRIMARY'',''PAID'',''DENIED'',''AUTO-SUBMITTED'',
		''PAYMENT PENDING'',''WRITE-OFF'',''CO-PAY PENDING'',''REVERSAL OF PREVIOUS PAYMENT'',''ACCEPTED/PROCESSING'',''EXECUTIVE REVIEW'',''OVER PAID'',''PARTIALLY PAID'')THEN ''Billed'' 
		WHEN UPPER(VISITS.INVOICE_STATUS) IN (''REJECTED'',''CREATED'',''CORRECTION'',''RETURNED WITH ERRORS'') THEN ''Unbilled'' 
		WHEN UPPER(VISITS.INVOICE_STATUS) IN (''CANCELLED'') THEN ''Not Billable'' 
	END AS DERIVED_INV_STATUS
FROM VISITS
--LEFT JOIN DISC_PROD.AXXESS.AXXESS_INVOICE_STATUS_MAPPING INV ON VISITS.INVOICE_STATUS=UPPER(TRIM(INV.FINAL_OR_MANAGEDCARE_STATUS ))
)
,CONFIRMED_FLAG_CTE AS		--Added By Pinkal on 11/25/2022
(
	SELECT VISITS.VISIT_KEY,VISITS.REVENUE_CATEGORY,VIS.DERIVED_VISIT_STATUS,
	CASE WHEN NVL(VIS.DERIVED_VISIT_STATUS,'''') IN (''In Review'',''Completed'') AND VISITS.CLINICIAN_ID IS NOT NULL THEN ''YES'' 
	 WHEN  NVL(VIS.DERIVED_VISIT_STATUS,'''')=''Did not happen'' 	THEN ''NO''
	 ELSE ''UNKNOWN'' END AS CONFIRMED_FLAG
	FROM  VISITS 
	LEFT JOIN DERIVED_VISIT VIS ON VIS.VISIT_KEY=VISITS.VISIT_KEY AND VIS.REVENUE_CATEGORY=VISITS.REVENUE_CATEGORY
)
--SELECT * FROM DERIVED_INV
/*
SELECT DISTINCT INVOICE_STATUS ,DISC_INV_STATUS FROM DISC_INV

SELECT VISITS.*, SCH.DISC_SCHEDULE_STATUS, VIS.DISC_VISIT_STATUS, INV.DISC_INV_STATUS
FROM VISITS 
LEFT JOIN DISC_SCH SCH ON SCH.VISIT_ID=VISITS.VISIT_ID AND SCH.REVENUE_CATEGORY=VISITS.REVENUE_CATEGORY
LEFT JOIN DISC_VISIT VIS ON VIS.VISIT_ID=VISITS.VISIT_ID AND VIS.REVENUE_CATEGORY=VISITS.REVENUE_CATEGORY
LEFT JOIN DISC_INV INV ON INV.VISIT_ID=VISITS.VISIT_ID AND INV.REVENUE_CATEGORY=VISITS.REVENUE_CATEGORY
WHERE CONCAT( NVL(SCH.DISC_SCHEDULE_STATUS,''''),''-'', NVL(VIS.DISC_VISIT_STATUS,''''),''-'', NVL(INV.DISC_INV_STATUS,'''')) =''Cancelled-Completed-''
*/
SELECT DISTINCT
--VISITS.VISIT_KEY AS VISIT_STATUS_KEY,
--MD5(''14'' || ''-'' || ''AXXESS'' || ''-'' || CONCAT( UPPER(NVL(SCH.DERIVED_SCHEDULE_STATUS,'''')),''-'', NVL(VISITS.VISIT_STATUS,''''),''-'', NVL(VISITS.INVOICE_STATUS,'''')) ) AS VISIT_STATUS_KEY,
--MD5(''14'' || ''-'' || ''AXXESS'' || ''-'' || CONCAT( UPPER(NVL(SCH.DERIVED_SCHEDULE_STATUS,'''')),''-'',NVL(VISITS.VISIT_STATUS,''''),''-'', NVL(VIS.DERIVED_VISIT_STATUS,''''),''-'', NVL(VISITS.INVOICE_STATUS,'''')) ) AS VISIT_STATUS_KEY,		--Added By Pinkal
MD5(''14'' || ''-'' || ''AXXESS'' || ''-'' || CONCAT( UPPER(NVL(SCH.DERIVED_SCHEDULE_STATUS,'''')),''-'',NVL(VISITS.VISIT_STATUS,''''),''-'', NVL(VIS.DERIVED_VISIT_STATUS,''''),''-'', NVL(VISITS.INVOICE_STATUS,''''),''-'', NVL(CON.CONFIRMED_FLAG,'''')) ) AS VISIT_STATUS_KEY,		--Added by Pinkal
14 AS SOURCE_SYSTEM_ID,
''PRIME'' AS SYSTEM_CODE,
--CONCAT(  UPPER(NVL(SCH.DERIVED_SCHEDULE_STATUS,'''')),''-'', NVL(VISITS.VISIT_STATUS,''''),''-'', NVL(VISITS.INVOICE_STATUS,''''))  AS DERIVED_DISC_STATUS,
CONCAT(  UPPER(NVL(SCH.DERIVED_SCHEDULE_STATUS,'''')),''-'', NVL(VISITS.VISIT_STATUS,''''),''-'',NVL(VIS.DERIVED_VISIT_STATUS,'''') ,''-'', NVL(VISITS.INVOICE_STATUS,'''')) AS DERIVED_DISC_STATUS,		--Added By Pinkal
NULL AS DISC_SCHEDULE_STATUS,
(VISITS.VISIT_STATUS) AS DISC_VISIT_STATUS,
(VISITS.INVOICE_STATUS) AS DISC_INVOICE_STATUS,
NULL AS DISC_PAYROLL_STATUS,
CASE 	WHEN NVL(SCH.DERIVED_SCHEDULE_STATUS,'''')=''Scheduled'' THEN ''s01'' 
		WHEN NVL(SCH.DERIVED_SCHEDULE_STATUS,'''')=''Scheduled-Open'' THEN ''s02'' 
		WHEN NVL(SCH.DERIVED_SCHEDULE_STATUS,'''')=''Cancelled'' THEN ''s05''
		WHEN NVL(SCH.DERIVED_SCHEDULE_STATUS,'''')=''Rescheduled'' THEN ''s03''
		ELSE ''s06''
		END AS SCHEDULE_STATUS_CODE,
SCH.DERIVED_SCHEDULE_STATUS AS SCHEDULE_STATUS_NAME,
SCH.DERIVED_SCHEDULE_STATUS AS SCHEDULE_STATUS_DESCRIPTION,  --- NEED TO CONFIRM
CASE 	WHEN NVL(VIS.DERIVED_VISIT_STATUS,'''')=''Future'' THEN ''v01'' 
		WHEN NVL(VIS.DERIVED_VISIT_STATUS,'''')=''In Review'' THEN ''v02'' 
		WHEN NVL(VIS.DERIVED_VISIT_STATUS,'''')=''Did not happen'' THEN ''v03'' 
		WHEN NVL(VIS.DERIVED_VISIT_STATUS,'''')=''Completed'' THEN ''v04'' 
	 END  AS VISIT_STATUS_CODE,
VIS.DERIVED_VISIT_STATUS AS VISIT_STATUS_NAME,
VIS.DERIVED_VISIT_STATUS AS VISIT_STATUS_DESCRIPTION,  -- NEED TO CONFIRM
CASE 	WHEN NVL(INV.DERIVED_INV_STATUS,'''')=''Billed'' THEN ''i03'' 
		WHEN NVL(INV.DERIVED_INV_STATUS,'''')=''Unbilled'' THEN ''i02'' 
		WHEN NVL(INV.DERIVED_INV_STATUS,'''')=''Not Billable'' THEN ''i01'' 
	 END  AS INVOICE_STATUS_CODE,
INV.DERIVED_INV_STATUS AS INVOICET_STATUS_NAME,
INV.DERIVED_INV_STATUS AS INVOICE_STATUS_DESCRIPTION, -- NEED TO CONFIRM
NULL AS PAYROLL_STATUS_CODE,
NULL AS PAYROLL_STATUS_NAME,
NULL AS PAYROLL_STATUS_DESCRIPTION,
CON.CONFIRMED_FLAG AS CONFIRMED_FLAG,
NULL AS CONSISTENT_FLAG
--SELECT DISTINCT CONCAT( NVL(SCH.DISC_SCHEDULE_STATUS,''''),''-'', NVL(VIS.DISC_VISIT_STATUS,''''),''-'', NVL(INV.DISC_INV_STATUS,''''))  AS DERIVED_DISC_STATUS
FROM  VISITS 
LEFT JOIN DERIVED_SCH SCH ON SCH.VISIT_KEY=VISITS.VISIT_KEY AND SCH.REVENUE_CATEGORY=VISITS.REVENUE_CATEGORY
LEFT JOIN DERIVED_VISIT VIS ON VIS.VISIT_KEY=VISITS.VISIT_KEY AND VIS.REVENUE_CATEGORY=VISITS.REVENUE_CATEGORY
LEFT JOIN DERIVED_INV INV ON INV.VISIT_KEY=VISITS.VISIT_KEY AND INV.REVENUE_CATEGORY=VISITS.REVENUE_CATEGORY
LEFT JOIN CONFIRMED_FLAG_CTE CON ON CON.VISIT_KEY=VISITS.VISIT_KEY AND CON.REVENUE_CATEGORY=VISITS.REVENUE_CATEGORY
--WHERE DERIVED_DISC_STATUS = ''-COMPLETED-''
;

RETURN ''SUCCESS'';
end;                        
';