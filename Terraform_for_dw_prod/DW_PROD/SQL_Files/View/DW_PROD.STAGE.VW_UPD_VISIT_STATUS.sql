create or replace view DW_PROD.STAGE.VW_UPD_VISIT_STATUS(
	VISIT_KEY,
	SOURCE_SYSTEM_ID,
	SYSTEM_CODE,
	VISIT_STATUS_KEY
) as
SELECT
VISIT_KEY,
SOURCE_SYSTEM_ID,
SYSTEM_CODE,
VISIT_STATUS_KEY
FROM 
(
SELECT
md5(Schedule_Number||'-'||DB||'-'||'COSTALSYNCDATA') AS VISIT_KEY,
DB AS  SYSTEM_CODE,
CASE DB WHEN 'SHC_ALTRUS' THEN 1 WHEN 'SHC_SAVANNAH' THEN 2 ELSE -1 END AS SOURCE_SYSTEM_ID,
CASE WHEN SCHEDULE_DATE <CURRENT_DATE() THEN 'Past' ELSE 'Future' END AS VISITTIME,
CASE 
	 WHEN trim(SCHEDULE_STATUS_CODE) IN ('T') AND VISITTIME = 'Past' THEN 'TentativePast' 
	 WHEN trim(SCHEDULE_STATUS_CODE) IN ('S') AND VISITTIME = 'Past' THEN 'ScheduledPast' 
	 WHEN trim(SCHEDULE_STATUS_CODE) IN ('O') AND VISITTIME = 'Past' THEN 'OpenPast' ELSE trim(SCHEDULE_STATUS_CODE) 
END AS DERIVED_DISC_STATUS,
MD5(DB || '-'||DERIVED_DISC_STATUS) AS VISIT_STATUS_KEY
FROM 
DISC_PROD.COSTALSYNCDATA.CV_Schedules WHERE Schedule_Date >= current_date-365 )
GROUP BY 1,2,3,4

UNION ALL 

(

WITH DF_IMPORT_VISITS AS 												-- Using only 1 record from multiple records per scheduleid just for mapping between DF and SD
(
SELECT ROW_NUMBER()OVER(PARTITION BY VISITKEY, TRACKINGID, WEEKENDDATE, STATE, SERVICEDATE ORDER BY IMPORTTASKID DESC, LINEID DESC) RNO,
		VISITKEY,
		split_part(DFI.VISITKEY, '_',  3)::NUMBER AS SCHEDULEID,
		split_part(DFI.VISITKEY, '_',  2) AS AGENCYID,
		TRACKINGID, WEEKENDDATE, STATE, SERVICEDATE 
FROM DISC_PROD.SANDATAEXCHANGE.DFIMPORT_IMPORTVISITS DFI
WHERE ISIMPORTED = TRUE AND NVL(TRACKINGID,0) <> 0
QUALIFY RNO = 1			   
)
,DS AS (													-- To create Derived Statuses and status key to join wth Status_mapping table
SELECT 
	    f.DBNAME,F.REFERENCENO,f.SERVICEDATE,F.WEEKENDDATE,
	    CASE WHEN f.PAID = TRUE THEN '05'
			 WHEN f.PAID = FALSE AND f.BILLED = TRUE THEN '04'
			 ELSE '02'
		END AS STATUS1,
	    IFF(TS.PAIDFLAG = '',NULL,TS.PAIDFLAG) AS DISC_PAYROLL_STATUS,
        CASE WHEN f.SERVICEDATE::DATE <> COALESCE(MIN(SV.ADJUSTEDTIMEIN),f.SERVICEDATE)::DATE 
        	THEN 
        	CASE STATUS1 WHEN '02' THEN 'Rescheduled-Confirmed'
        				WHEN '04' THEN 'Rescheduled-Billed'
        				WHEN '05' THEN 'Rescheduled-Paid'
        				END
        WHEN STATUS1 = '02' THEN 'Confirmed'
        WHEN STATUS1 = '04' THEN 'Billed'
        WHEN STATUS1 = '05' THEN 'Paid'
        ELSE 'Unknown'
        END AS DERIVED_DISCSTATUS,										-- Taking dataflex's statuses only
        md5(3 ||'-'||f.DBNAME||'-'||nvl(DERIVED_DISCSTATUS,'Unknown')||'-'||nvl(DISC_PAYROLL_STATUS,'Unknown')) as VISIT_STATUSKEY
FROM DISC_PROD.DATAFLEXSYNCDATA.ALL_DFTIMESHEETS TS1 
LEFT JOIN DF_IMPORT_VISITS DFI 											-- ONLY IL AND MO CAN COME USING THIS JOIN FROM SANDATA
	ON TS1.TRACKINGID = DFI.TRACKINGID 
	AND TS1.WEEKENDDATE = DFI.WEEKENDDATE 
	AND TS1.DBNAME = DFI.STATE 
LEFT JOIN DISC_PROD.SANDATAIMPORT.SANDATA_VISITS SV
	ON DFI.SCHEDULEID = SV.SCHEDULEID  
	AND DFI.AGENCYID = SV.AGENCYID
	AND TS1.clientnumber::varchar=SV.CLIENTOTHERID 
	AND DFI.SERVICEDATE = SV.DATE
LEFT JOIN DISC_PROD.SANDATAIMPORT.SANDATA_SCHEDULES SCH 
	ON  DFI.SCHEDULEID = SCH.SCHEDULEID  
	AND DFI.AGENCYID = SCH.AGENCYID
	AND DFI.SERVICEDATE = SCH.SCHEDULEDATE
RIGHT JOIN DISC_PROD.DATAFLEXSYNCDATA.All_TIMESHEETSHOURS f
	ON f.DBNAME = ts1.DbName 
	AND f.ReferenceNo = ts1.ReferenceNo 
	AND f.WeekendDate = ts1.WeekendDate 
	AND f.SERVICEDATE = IFF(f.SERVICEDATE = COALESCE(SV.DATE,SCH.SCHEDULEDATE),COALESCE(SV.DATE,SCH.SCHEDULEDATE),f.SERVICEDATE) 	-- ONLY JOIN ON servicedate WHEN mapping IS possible, otherwise will GET TS.DATA ONLY FOR visits mapped WITH sd AND rest will have NULL
	AND f.SERVICEDATE = IFF(f.SERVICEDATE = DFI.SERVICEDATE,DFI.SERVICEDATE,NVL(DFI.SERVICEDATE,f.SERVICEDATE))			--  To avoid getting 1 - many join between TSH and Mapping table DFI
LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.ALL_DFTIMESHEETS TS 
ON TS.DBNAME = f.DBNAME 
AND TS.REFERENCENO = F.REFERENCENO 
AND F.WEEKENDDATE = TS.WEEKENDDATE																								 -- This join will only be used to get fields, the previous TS1 join's purpose is to just act as mapping between tables
GROUP BY f.DBNAME,F.REFERENCENO,f.SERVICEDATE,F.PAID,F.BILLED,TS.PAIDFLAG, F.WEEKENDDATE
	)
,DF AS (SELECT DISTINCT
	    MD5(f.DBNAME || '-' || f.REFERENCENO || '-' || f.WEEKENDDATE || '-' || f.SERVICEDATE || '-' || 'DATAFLEXSYNCDATA') AS VISIT_KEY,
	   STATUS_MAPPING.VISIT_STATUS_KEY,
	   F.DBNAME AS SYSTEM_CODE,
	   3 AS SOURCE_SYSTEM_ID						  
FROM 
DISC_PROD.DATAFLEXSYNCDATA.ALL_DFTIMESHEETS TS1 
LEFT JOIN DF_IMPORT_VISITS DFI 											-- ONLY IL AND MO CAN COME USING THIS JOIN FROM SANDATA
	ON TS1.TRACKINGID = DFI.TRACKINGID 
	AND TS1.WEEKENDDATE = DFI.WEEKENDDATE 
	AND TS1.DBNAME = DFI.STATE 
LEFT JOIN DISC_PROD.SANDATAIMPORT.SANDATA_VISITS SV
	ON DFI.SCHEDULEID = SV.SCHEDULEID  
	AND DFI.AGENCYID = SV.AGENCYID
	AND TS1.clientnumber::varchar=SV.CLIENTOTHERID 
	AND DFI.SERVICEDATE = SV.DATE
LEFT JOIN DISC_PROD.SANDATAIMPORT.SANDATA_SCHEDULES SCH 
	ON  DFI.SCHEDULEID = SCH.SCHEDULEID  
	AND DFI.AGENCYID  = SCH.AGENCYID
	AND DFI.SERVICEDATE = SCH.SCHEDULEDATE
RIGHT JOIN DISC_PROD.DATAFLEXSYNCDATA.ALL_TIMESHEETSHOURS f
	ON f.DbName = ts1.DbName 
	AND f.ReferenceNo = ts1.ReferenceNo 
	AND f.WeekendDate = ts1.WeekendDate 
	AND F.SERVICEDATE = IFF(F.SERVICEDATE = COALESCE(SV.DATE,SCH.SCHEDULEDATE),COALESCE(SV.DATE,SCH.SCHEDULEDATE),F.SERVICEDATE) 	-- ONLY JOIN ON servicedate WHEN mapping IS possible, otherwise will GET TS.DATA ONLY FOR visits mapped WITH sd AND rest will have NULL
	AND F.SERVICEDATE = IFF(F.SERVICEDATE = DFI.SERVICEDATE,DFI.SERVICEDATE,NVL(DFI.SERVICEDATE,F.SERVICEDATE))			--  To avoid getting 1 - many join between TSH and Mapping table DFI
LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.ALL_DFTIMESHEETS TS 																			-- This join will only be used to get fields, the previous TS1 join's purpose is to just act as mapping between TABLES. using same TS table for both causes issues 
	ON TS.DBNAME = F.DBNAME AND TS.REFERENCENO = F.REFERENCENO AND F.WEEKENDDATE = TS.WEEKENDDATE
LEFT JOIN DS ON 
	DS.DBNAME = F.DBNAME AND 
	DS.REFERENCENO = F.REFERENCENO AND 
	DS.SERVICEDATE = F.SERVICEDATE AND 
	DS.WEEKENDDATE = F.WEEKENDDATE	 
LEFT JOIN DW_PROD.HAH.DIM_VISIT_STATUS_MAPPING STATUS_MAPPING ON 
	STATUS_MAPPING.VISIT_STATUS_KEY = DS.VISIT_STATUSKEY	
	WHERE f.SERVICEDATE >= CURRENT_DATE-365 )	,
SD_STATUS AS (
 SELECT SCHEDULEID, AGENCYID,
 CASE SD.STATUS
        WHEN '01' THEN 'Pending'
        WHEN '09' THEN 'Hold'
        WHEN '10' THEN 'Cancelled'
        END AS DISC_VISIT_STATUS1,
        CASE WHEN SD.STATUS ='01' AND SD.STAFFAGENCYID IS NULL AND SD.SCHEDULEDATE > CURRENT_DATE() THEN '01OPENFUTURE' 
		WHEN SD.STATUS ='01' AND SD.STAFFAGENCYID IS NOT NULL AND SD.SCHEDULEDATE > CURRENT_DATE() THEN '01FUTURE'
		WHEN SD.STATUS ='01' AND SD.STAFFAGENCYID IS NULL AND SD.SCHEDULEDATE <= CURRENT_DATE() THEN '01OPEN' 
		WHEN SD.STATUS ='01' AND SD.STAFFAGENCYID IS NOT NULL AND SD.SCHEDULEDATE <= CURRENT_DATE() THEN '01' 
		ELSE SD.STATUS END
		AS DERIVED_DISC_STATUS1,	
md5(3 ||'-'||SD.DFDBNAME||'-'||nvl(DISC_VISIT_STATUS1,'Unknown')||'-'||DERIVED_DISC_STATUS1) as VISIT_STATUS_KEY		-- for dim_visit_status_mapping
	FROM DISC_PROD.PUBLIC.VW_DATAFLEX_SANDATA_PENDING_VISITS SD
), SD AS (
 SELECT DISTINCT												-- New logic (All Non-Confirmed. Includes Future Schedules)
		MD5(SD.DFDBNAME || '-' || SD.SCHEDULEID || '-' || 'DATAFLEXSYNCDATA') AS VISIT_KEY,
	   SM.VISIT_STATUS_KEY,
	   CASE SD.DFDBNAME WHEN 'IL' THEN 'IL - 8380' WHEN 'MO' THEN 'MO - 8463' END AS SYSTEM_CODE,
	   3 AS SOURCE_SYSTEM_ID					  
FROM DISC_PROD.PUBLIC.VW_DATAFLEX_SANDATA_PENDING_VISITS SD
LEFT JOIN DF_IMPORT_VISITS DFI
	ON 	DFI.SCHEDULEID = SD.SCHEDULEID  
	AND DFI.AGENCYID = SD.AGENCYID
LEFT JOIN SD_STATUS SDS 
	ON SDS.SCHEDULEID = SD.SCHEDULEID 
	AND SDS.AGENCYID = SD.AGENCYID
LEFT JOIN DW_PROD.HAH.DIM_VISIT_STATUS_MAPPING SM 
	ON SM.VISIT_STATUS_KEY = SDS.VISIT_STATUS_KEY

where SD.SCHEDULEDATE >= current_date-365 ),
	
	FINAL  AS (SELECT L.*
	FROM (
		SELECT * FROM DF
		UNION ALL 
		SELECT * FROM SD ) L

)  
SELECT
VISIT_KEY,
SOURCE_SYSTEM_ID,
SYSTEM_CODE,
VISIT_STATUS_KEY
FROM 
FINAL )

UNION ALL 



SELECT 
VISIT_KEY,
SOURCE_SYSTEM_ID,
SYSTEM_CODE,
VISIT_STATUS_KEY
FROM 
(SELECT  
VISIT_KEY,
VISIT_STATUS_KEY,
SOURCE_SYSTEM_ID,
SYSTEM_CODE,
UPD_DT,
ROW_NUMBER ()over(PARTITION BY VISIT_KEY ORDER BY UPD_DT DESC) AS LASTE_RECRD
FROM 
(
SELECT
DISTINCT 
CASE WHEN  SV.SERVICEID IN ('CARECO','VBPCG')	
		THEN MD5('CC_'||SV.AGENCYID || '-' || SV.SCHEDULEID || '-' || 'SANDATAIMPORT') 
		ELSE MD5(SV.AGENCYID || '-' || SV.SCHEDULEID || '-' || 'SANDATAIMPORT') 
		END AS VISIT_KEY,
CASE WHEN SV.STATUS ='01' AND SV.STAFFAGENCYID IS NULL AND SV.SCHEDULEDATE > CURRENT_DATE() THEN '01OPENFUTURE' 
		 WHEN SV.STATUS ='01' AND SV.STAFFAGENCYID IS NOT NULL AND SV.SCHEDULEDATE > CURRENT_DATE() THEN '01FUTURE'
		 WHEN SV.STATUS ='01' AND SV.STAFFAGENCYID IS NULL AND SV.SCHEDULEDATE <= CURRENT_DATE() THEN '01OPEN' 
		 WHEN SV.STATUS ='01' AND SV.STAFFAGENCYID IS NOT NULL AND SV.SCHEDULEDATE <= CURRENT_DATE() THEN '01'
		ELSE SV.STATUS END AS DERIVED_STATUS,
		md5(4 ||'-'||'8485'||'-'||nvl(DERIVED_STATUS,'S')) AS VISIT_STATUS_KEY,
		ETL_LAST_UPDATED_DATE AS UPD_DT ,
		CASE WHEN SV.SERVICEID IN ('CARECO','VBPCG') THEN 'CC_8485' ELSE '8485' END  AS SYSTEM_CODE ,
		4 AS SOURCE_SYSTEM_ID 
FROM 
DISC_PROD.BI_REPOSITORY.SANDATAVISITS SV WHERE agencyId ='8485' AND SCHEDULEDATE >= current_date-365
UNION ALL 
SELECT DISTINCT CASE WHEN SV.SERVICEID IN ('CARECO','VBPCG')	
		THEN MD5('CC_'||SV.agencyID || '-' || SV.scheduleid || '-' || 'SANDATAIMPORT') 
		ELSE MD5(SV.agencyID || '-' || SV.scheduleid || '-' || 'SANDATAIMPORT')
		END AS VISIT_KEY,
		CASE WHEN SV.EVENTSTATUS ='01' AND SV.STAFFAGENCYID IS NULL AND SV.DATE > CURRENT_DATE() THEN '01OPENFUTURE' 
		 WHEN SV.EVENTSTATUS ='01' AND SV.STAFFAGENCYID IS NOT NULL AND SV.DATE > CURRENT_DATE() THEN '01FUTURE'
		 WHEN SV.EVENTSTATUS ='01' AND SV.STAFFAGENCYID IS NULL AND SV.DATE <= CURRENT_DATE() THEN '01OPEN' 
		 WHEN SV.EVENTSTATUS ='01' AND SV.STAFFAGENCYID IS NOT NULL AND SV.DATE <= CURRENT_DATE() THEN '01'
	ELSE SV.EVENTSTATUS END AS DERIVED_STATUS ,
	md5(4 ||'-'||'8485'||'-'||nvl(DERIVED_STATUS,'S')) AS VISIT_STATUS_KEY,
	ETL_LAST_UPDATED_DATE AS UPD_DT ,
	CASE WHEN SV.SERVICEID IN ('CARECO','VBPCG') THEN 'CC_8485' ELSE '8485' END  AS SYSTEM_CODE,
	4 AS SOURCE_SYSTEM_ID 
FROM 
DISC_PROD.SANDATAIMPORT.SANDATA_VISITS SV WHERE  agencyID ='8485' AND  SV.DATE >= current_date-365 )
QUALIFY LASTE_RECRD = 1
) GROUP  BY 1,2,3,4;