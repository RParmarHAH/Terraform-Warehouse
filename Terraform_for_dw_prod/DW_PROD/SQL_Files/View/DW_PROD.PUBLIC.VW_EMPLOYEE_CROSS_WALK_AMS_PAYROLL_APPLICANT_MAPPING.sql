create or replace view DW_PROD.PUBLIC.VW_EMPLOYEE_CROSS_WALK_AMS_PAYROLL_APPLICANT_MAPPING(
	FIRST_NAME,
	LAST_NAME,
	BRANCH_STATE_CODE,
	AMS_EMPLOYEE_KEY,
	AMS_SOURCE_SYSTEM_ID,
	AMS_SYSTEM_CODE,
	AMS_EMPLOYEE_ID,
	PAYROLL_EMPLOYEE_KEY,
	PAYROLL_SOURCE_SYSTEM_ID,
	PAYROLL_SYSTEM_CODE,
	PAYROLL_EMPLOYEE_ID,
	APPLICANT_EMPLOYEE_KEY,
	APPLICANT_SOURCE_SYSTEM_ID,
	APPLICANT_SYSTEM_CODE,
	APPLICANT_EMPLOYEE_ID,
	WORKDAY_INTERNAL_ID,
	EMPLOYEE_ENTERPRISE_ID
) as
SELECT DISTINCT 
ECW.FIRST_NAME,
ECW.LAST_NAME,
ECW.BRANCH_STATE_CODE,
CASE WHEN ECW.AMS_EMPLOYEE_KEY IS NULL THEN ECW1.AMS_EMPLOYEE_KEY ELSE ECW.AMS_EMPLOYEE_KEY END AS AMS_EMPLOYEE_KEY,
CASE WHEN ECW.AMS_SOURCE_SYSTEM_ID IS NULL THEN ECW1.AMS_SOURCE_SYSTEM_ID ELSE ECW.AMS_SOURCE_SYSTEM_ID END AS AMS_SOURCE_SYSTEM_ID,
CASE WHEN ECW.AMS_SYSTEM_CODE IS NULL THEN ECW1.AMS_SYSTEM_CODE ELSE ECW.AMS_SYSTEM_CODE END AS AMS_SYSTEM_CODE,
CASE WHEN ECW.AMS_EMPLOYEE_ID IS NULL THEN ECW1.AMS_EMPLOYEE_ID ELSE ECW.AMS_EMPLOYEE_ID END AS AMS_EMPLOYEE_ID,
ECW.PAYROLL_EMPLOYEE_KEY,
ECW.PAYROLL_SOURCE_SYSTEM_ID,
ECW.PAYROLL_SYSTEM_CODE,
ECW.PAYROLL_EMPLOYEE_ID,
ECW1.APPLICANT_EMPLOYEE_KEY,
ECW1.APPLICANT_SOURCE_SYSTEM_ID,
ECW1.APPLICANT_SYSTEM_CODE,
ECW1.APPLICANT_EMPLOYEE_ID,
COALESCE(ECW.WORKDAY_INTERNAL_ID, ECW1.WORKDAY_INTERNAL_ID),
ECW.EMPLOYEE_ENTERPRISE_ID
FROM DW_PROD.INTEGRATION.EMPLOYEE_CROSS_WALK ECW
JOIN DW_PROD.INTEGRATION.EMPLOYEE_CROSS_WALK ECW1
	ON ECW.PAYROLL_EMPLOYEE_ID = ECW1.APPLICANT_EMPLOYEE_ID
	AND ECW.EMPLOYEE_ENTERPRISE_ID <> ECW1.EMPLOYEE_ENTERPRISE_ID
    AND ECW.PAYROLL_SOURCE_SYSTEM_ID = 36
	AND ECW.INACTIVE <> TRUE AND ECW.DUP_FLAG <> TRUE
	AND ECW1.INACTIVE <> TRUE AND ECW1.DUP_FLAG <> TRUE
    AND ECW1.PAYROLL_EMPLOYEE_KEY IS NULL;