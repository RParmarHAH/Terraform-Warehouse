create or replace view DW_PROD.REPORT.VW_HOURS_AND_CLIENT_CENSUS_WEEKLY_WIP_NEW(
	PERIOD_BEGIN_DATE,
	TYPE,
	PERIOD_END_DATE,
	STATE,
	CLIENT_KEY,
	BRANCH_KEY,
	CONTRACT_KEY,
	PARTNER_CONTRACT_SERVICE_KEY,
	SUPERVISOR_KEY,
	CLIENT_NUMBER,
	PARTNER_CODE,
	CONTRACT_CODE,
	SERVICE_CODE,
	PARTNER_NAME,
	CONTRACT_NAME,
	SERVICE_NAME,
	OFFICE_NUMBER,
	OFFICE_NAME,
	SUPERVISOR_CODE,
	ORIGINAL_SOURCE_SYSTEM_ID,
	SOURCE_SYSTEM_ID,
	AUTH_START_DATE,
	AUTH_END_DATE,
	HOURS_SCHEDULED,
	HOURS_SERVED_ALL,
	HOURS_CANCELLED,
	HOURS_IN_REVIEW,
	HOURS_MISSED,
	HOURS_RESCHEDULED,
	FUTURE_HOURS,
	FUTURE_HOURS_NO_CAREGIVER,
	FUTURE_CANCELLED_HOURS,
	FUTURE_HOLD_HOURS,
	VISITS_SCHEDULED,
	VISITS_COMPLETED,
	VISITS_CANCELLED,
	VISITS_IN_REVIEW,
	VISITS_MISSED,
	VISITS_RESCHEDULED,
	FUTURE_VISITS,
	FUTURE_VISITS_NO_CAREGIVER,
	FUTURE_CANCELLED_VISITS,
	FUTURE_HOLD_VISITS,
	NON_STANDARD_UNITS,
	NUMBER_OF_DAYS,
	VISITS_CLEAN_SHIFTS,
	HOURS_UNITS_SERVED_VALID_AUTHS,
	HOURS_UNITS_SERVED,
	AUTH_AMOUNT_VALID,
	UNITS_AUTH_NON_ADJUSTED,
	REVENUE_CATEGORY,
	CLIENT_ACQUIRED_FLAG,
	CLIENT_ACQUISITION_NAME,
	CLIENT_SERVED_FLAG,
	UNIT_OVER_OR_UNDER_SERVED,
	VALID_AUTH,
	POTENTIAL_UNIT,
	POTENTIAL_UNIT_SERVED_WHERE_AUTH_EXISTS,
	POTENTIAL_UNIT_OVER_OR_UNDER_SERVED,
	POTENTIAL_OVER_OR_UNDER_DESC,
	HAS_FUTURE_HRS_NO_CAREGIVER,
	DERIVED_FIRST_SERVICE_DATE,
	DERIVED_LAST_SERVICE_DATE,
	ETL_LAST_UPDATED_DATE
) as 
(WITH DATES AS (SELECT DISTINCT  HAH_CURRENT_WEEK_FIRST_DAY
	FROM HAH.DIM_DATE 
	WHERE HAH_CURRENT_WEEK_FIRST_DAY BETWEEN DATE_TRUNC(YEAR, DATEADD(YEAR, -4, current_date())) 
	AND DATE_TRUNC(MONTH, DATEADD(MONTH, 2, current_date())))
, DATA_1_0 AS (
    SELECT 
      DISTINCT --B.BRANCH_PAYROLL_PERIODS_KEY,     
A.SERVICE_WEEK AS PERIOD_BEGIN_DATE,	  
NULL AS STATE ,
NULL AS PARTNER_CONTRACT_SERVICE_KEY,
    NULL AS CONTRACT_CODE,
	NULL AS SERVICE_CODE,
	NULL AS PARTNER_CODE,--NULL AS UTILIZATION,  
	NULL AS CONTRACT_NAME,
	NULL AS SERVICE_NAME,
	NULL AS PARTNER_NAME,
	NULL AS AUTH_START_DATE,
	NULL AS AUTH_END_DATE,
	NULL AS NUMBER_OF_DAYS,
	NULL AS UNIT_OVER_OR_UNDER_SERVED,
   NULL AS VALID_AUTH,
   NULL AS POTENTIAL_UNIT,
   NULL AS POTENTIAL_UNIT_SERVED_WHERE_AUTH_EXISTS,
  NULL AS POTENTIAL_UNIT_OVER_OR_UNDER_SERVED,
  NULL AS POTENTIAL_OVER_OR_UNDER_DESC,
  NULL AS HAS_FUTURE_HRS_NO_CAREGIVER,
  NULL AS FUTURE_HOURS_NO_CAREGIVER,
  NULL AS FUTURE_VISITS_NO_CAREGIVER,
  HOURS_SERVED_ALL AS HOURS_UNITS_SERVED,
  A.*,
        CM.DERIVED_FIRST_SERVICE_DATE DERIVED_FIRST_SERVICE_DATE,
        CM.DERIVED_LAST_SERVICE_DATE DERIVED_LAST_SERVICE_DATE      
    FROM REPORT.UTILIZATION_WEEKLY_1_0  A
    LEFT JOIN INTEGRATION.DIM_CLIENT_MERGED CM ON 
        A.CLIENT_KEY = CM.CLIENT_KEY   
JOIN DATES DATES 
				ON DATES.HAH_CURRENT_WEEK_FIRST_DAY = A.SERVICE_WEEK
    --LEFT JOIN REPORT.VW_DASHBOARD_CONTRACTS CT ON A.CONTRACT_KEY=CT.CONTRACT_KEY 
    --    AND (CT.INCLUDE_FOR_EXEC_OPS_HOURS=1 AND INCLUDE_FOR_EXEC_OPS_CLIENTS=1)
--    LEFT JOIN INTEGRATION.FACT_BRANCH_PAYROLL_PERIODS_MERGED B ON A.BRANCH_KEY=B.ORIGINAL_BRANCH_KEY AND A.SERVICE_WEEK>=B.PERIOD_START_DATE 
--      AND A.SERVICE_WEEK<=B.PERIOD_END_DATE
--WHERE A.SERVICE_WEEK BETWEEN DATEADD('WEEK',-79,CURRENT_DATE) AND DATEADD( 'WEEK', 4, CURRENT_DATE)
WHERE A.SERVICE_WEEK <=	DATEADD( 'WEEK', 4, CURRENT_DATE)
)   
, DATA_2_0 AS (
    SELECT 
      DISTINCT --B.BRANCH_PAYROLL_PERIODS_KEY,
        A.*,
        CM.DERIVED_FIRST_SERVICE_DATE DERIVED_FIRST_SERVICE_DATE,
        CM.DERIVED_LAST_SERVICE_DATE DERIVED_LAST_SERVICE_DATE      
    FROM REPORT.UTILIZATION_WEEKLY_2_0_WIP  A
    LEFT JOIN INTEGRATION.DIM_CLIENT_MERGED CM ON 
        A.CLIENT_KEY = CM.CLIENT_KEY   
JOIN DATES DATES 
				ON DATES.HAH_CURRENT_WEEK_FIRST_DAY = A.SERVICE_WEEK 
    --LEFT JOIN REPORT.VW_DASHBOARD_CONTRACTS CT ON A.CONTRACT_KEY=CT.CONTRACT_KEY 
    --    AND (CT.INCLUDE_FOR_EXEC_OPS_HOURS=1 AND INCLUDE_FOR_EXEC_OPS_CLIENTS=1)
--    LEFT JOIN INTEGRATION.FACT_BRANCH_PAYROLL_PERIODS_MERGED B ON A.BRANCH_KEY=B.ORIGINAL_BRANCH_KEY AND A.SERVICE_WEEK>=B.PERIOD_START_DATE 
--      AND A.SERVICE_WEEK<=B.PERIOD_END_DATE
--WHERE A.SERVICE_WEEK BETWEEN DATEADD('WEEK',-79,CURRENT_DATE) AND DATEADD( 'WEEK', 4, CURRENT_DATE)  
WHERE A.SERVICE_WEEK <= DATEADD( 'WEEK', 4, CURRENT_DATE)
)--SELECT * FROM DATA_2_0;
,DATE_DATA AS (
 SELECT DISTINCT A.CALENDAR_DATE AS CALENDAR_DATE,B.BRANCH_KEY AS BRANCH_KEY FROM HAH.DIM_DATE A
 LEFT JOIN INTEGRATION.FACT_BRANCH_PAYROLL_PERIODS_MERGED B ON A.CALENDAR_DATE BETWEEN B.PERIOD_START_DATE AND B.PERIOD_END_DATE
 WHERE A.CALENDAR_DATE BETWEEN (SELECT MIN (HAH_CURRENT_WEEK_FIRST_DAY) FROM DATES) AND DATEADD( 'WEEK', 4, CURRENT_DATE)
)
SELECT 
A.SERVICE_WEEK AS PERIOD_BEGIN_DATE,
NULL AS TYPE,	
A.SERVICE_END_OF_WEEK AS PERIOD_END_DATE,
NULL AS STATE	, 
A.CLIENT_KEY,	
A.BRANCH_KEY,
A.CONTRACT_KEY ,
NULL AS PARTNER_CONTRACT_SERVICE_KEY,  
A.SUPERVISOR_KEY, 
NULL AS CLIENT_NUMBER, 
NULL AS PARTNER_CODE,
NULL AS CONTRACT_CODE,
NULL AS SERVICE_CODE,
NULL AS PARTNER_NAME,
NULL AS CONTRACT_NAME,
NULL AS SERVICE_NAME,
NULL AS OFFICE_NUMBER,
NULL AS OFFICE_NAME,
NULL AS SUPERVISOR_CODE,
A.ORIGINAL_SOURCE_SYSTEM_ID,
A.SOURCE_SYSTEM_ID,
NULL AS AUTH_START_DATE,
NULL AS AUTH_END_DATE,
A.HOURS_SCHEDULED,
A.HOURS_SERVED_ALL,
A.HOURS_CANCELLED,
A.HOURS_IN_REVIEW,
A.HOURS_MISSED,
A.HOURS_RESCHEDULED,
A.FUTURE_HOURS,
NULL AS FUTURE_HOURS_NO_CAREGIVER,
A.FUTURE_CANCELLED_HOURS,
A.FUTURE_HOLD_HOURS, 
A.VISITS_SCHEDULED,
A.VISITS_COMPLETED,
A.VISITS_CANCELLED,
A.VISITS_IN_REVIEW,
A.VISITS_MISSED,
A.VISITS_RESCHEDULED, 
A.FUTURE_VISITS,
NULL AS  FUTURE_VISITS_NO_CAREGIVER,
A.FUTURE_CANCELLED_VISITS,
A.FUTURE_HOLD_VISITS,					 
NULL AS NON_STANDARD_UNITS,
NULL AS NUMBER_OF_DAYS,	
A.VISITS_CLEAN_SHIFTS,
A.HOURS_SERVED_WHERE_AUTH_EXISTS AS HOURS_UNITS_SERVED_VALID_AUTHS,
A.HOURS_UNITS_SERVED, 
A.HOURS_AUTHORIZED AS AUTH_AMOUNT_VALID,
--A.HOURS_AUTHORIZED,
A.HOURS_AUTHORIZED_NON_ADJUSTED AS UNITS_AUTH_NON_ADJUSTED, 
NULL AS REVENUE_CATEGORY, 
A.CLIENT_ACQUIRED_FLAG,
A.CLIENT_ACQUISITION_NAME, 
A.CLIENT_SERVED_FLAG,	
NULL AS UNIT_OVER_OR_UNDER_SERVED,
NULL AS VALID_AUTH,
NULL AS POTENTIAL_UNIT,
NULL AS POTENTIAL_UNIT_SERVED_WHERE_AUTH_EXISTS,
NULL AS POTENTIAL_UNIT_OVER_OR_UNDER_SERVED,
NULL AS POTENTIAL_OVER_OR_UNDER_DESC,
NULL AS HAS_FUTURE_HRS_NO_CAREGIVER,
A.DERIVED_FIRST_SERVICE_DATE DERIVED_FIRST_SERVICE_DATE,
A.DERIVED_LAST_SERVICE_DATE DERIVED_LAST_SERVICE_DATE,
--NULL AS UTILIZATION,	
A.ETL_LAST_UPDATED_DATE
FROM DATA_1_0 A 
LEFT JOIN DATE_DATA B ON B.CALENDAR_DATE=DATEADD('DAY',-7,A.SERVICE_WEEK) AND A.BRANCH_KEY=B.BRANCH_KEY
WHERE B.CALENDAR_DATE IS NOT NULL
UNION ALL	   
SELECT 
    A.SERVICE_WEEK  AS PERIOD_BEGIN_DATE,
    A.BILL_UNIT AS TYPE,  
    A.SERVICE_END_OF_WEEK  AS PERIOD_END_DATE, 
    A.STATE, 
    A.CLIENT_KEY,
    A.BRANCH_KEY, 
    A.CONTRACT_KEY,
    A.PARTNER_CONTRACT_SERVICE_KEY,	
    A.SUPERVISOR_KEY, 
    A.CLIENT_NUMBER,
    A.PARTNER_CODE,
    A.CONTRACT_CODE,
	A.SERVICE_CODE,
    A.PARTNER_NAME,
    A.CONTRACT_NAME,
    A.SERVICE_NAME,
    A.OFFICE_NUMBER,
   	A.OFFICE_NAME  ,
    A.SUPERVISOR_CODE,  
    A.ORIGINAL_SOURCE_SYSTEM_ID,
    A.SOURCE_SYSTEM_ID,
    A.AUTH_START_DATE,
	A.AUTH_END_DATE,
	A.HOURS_SCHEDULED,
    A.HOURS_SERVED_ALL, 
    A.HOURS_CANCELLED, 
    A.HOURS_IN_REVIEW,
	A.HOURS_MISSED,
	A.HOURS_RESCHEDULED,
	A.FUTURE_HOURS,
	A.FUTURE_HOURS_NO_CAREGIVER,
	A.FUTURE_CANCELLED_HOURS,
	A.FUTURE_HOLD_HOURS,
    A.VISITS_SCHEDULED,
    A.VISITS_COMPLETED,
    A.VISITS_CANCELLED,
    A.VISITS_IN_REVIEW,
    A.VISITS_MISSED,
    A.VISITS_RESCHEDULED,
    A.FUTURE_VISITS,
    a.FUTURE_VISITS_NO_CAREGIVER,
	A.FUTURE_CANCELLED_VISITS,
	A.FUTURE_HOLD_VISITS,
    A.NON_STANDARD_UNITS,
    A.NUMBER_OF_DAYS,
	A.VISITS_CLEAN_SHIFTS, 
	A.HOURS_SERVED_WHERE_AUTH_EXISTS AS HOURS_UNITS_SERVED_VALID_AUTHS,
	A.HOURS_UNIT_SERVED AS HOURS_UNITS_SERVED,
    NVL(CASE WHEN NOT (NVL(A.HOURS_AUTHORIZED, 0) = 0 OR A.HOURS_AUTHORIZED > 203 ) THEN IFF(A.BILL_UNIT='Visit',round(A.HOURS_AUTHORIZED),round(A.HOURS_AUTHORIZED)) END, 0)  AUTH_AMOUNT_VALID,
    --A.HOURS_AUTHORIZED,
	IFF(A.BILL_UNIT='Visit',round(A.HOURS_AUTHORIZED_NON_ADJUSTED),A.HOURS_AUTHORIZED_NON_ADJUSTED) AS UNITS_AUTH_NON_ADJUSTED,
   	A.REVENUE_CATEGORY,	  
	A.CLIENT_ACQUIRED_FLAG,
	A.CLIENT_ACQUISITION_NAME,
	A.CLIENT_SERVED_FLAG, 
    iff(A.BILL_UNIT='Visit',A.VISITS_ALL,A.HOURS_SERVED_ALL) - IFF(A.BILL_UNIT='Visit',round(A.HOURS_AUTHORIZED_NON_ADJUSTED),A.HOURS_AUTHORIZED_NON_ADJUSTED) AS UNIT_OVER_OR_UNDER_SERVED,
	CASE 
    WHEN AUTH_AMOUNT_VALID <> 0 THEN 'VALID AUTH'
--    WHEN A.BILL_UNIT='Visit' THEN 'VISIT BASED'
--    WHEN (A.HOURS_SERVED_ALL=0 AND UNITS_AUTH_NON_ADJUSTED=0 AND CLIENT_SERVED_FLAG = TRUE) THEN 'NA/VISIT BASED'
    WHEN AUTH_AMOUNT_VALID=0 AND (A.HOURS_AUTHORIZED_NON_ADJUSTED < 203 AND A.HOURS_AUTHORIZED_NON_ADJUSTED >0) THEN 'ON HOLD'
    ELSE 'INVALID_AUTH' END AS VALID_AUTH ,
    iff(A.BILL_UNIT='Visit',(A.VISITS_IN_REVIEW+A.VISITS_COMPLETED+A.FUTURE_VISITS),(A.HOURS_IN_REVIEW + A.HOURS_SERVED_ALL+A.FUTURE_HOURS)) AS POTENTIAL_UNIT,
    IFF(VALID_AUTH IN ('VALID AUTH','VISIT BASED') ,POTENTIAL_UNIT, 0) AS POTENTIAL_UNIT_SERVED_WHERE_AUTH_EXISTS,    
   IFF (VALID_AUTH ='INVALID_AUTH',0,POTENTIAL_UNIT_SERVED_WHERE_AUTH_EXISTS - UNITS_AUTH_NON_ADJUSTED) AS POTENTIAL_UNIT_OVER_OR_UNDER_SERVED,
	CASE WHEN VALID_AUTH ='INVALID_AUTH' THEN 'INVALID_AUTH'
    WHEN POTENTIAL_UNIT_OVER_OR_UNDER_SERVED < 0 THEN 'UNDER'
    WHEN POTENTIAL_UNIT_OVER_OR_UNDER_SERVED > 0 THEN 'OVER'
    ELSE 'EXACT'
    END AS POTENTIAL_OVER_OR_UNDER_DESC,
   	IFF(FUTURE_HOURS_NO_CAREGIVER>0,'YES','NO') AS HAS_FUTURE_HRS_NO_CAREGIVER,
   	A.DERIVED_FIRST_SERVICE_DATE DERIVED_FIRST_SERVICE_DATE,
    A.DERIVED_LAST_SERVICE_DATE DERIVED_LAST_SERVICE_DATE,
   -- A.UTILIZATION,
      A.ETL_LAST_UPDATED_DATE
FROM DATA_2_0 A 
LEFT JOIN DATE_DATA B ON B.CALENDAR_DATE=DATEADD('DAY',-7,A.SERVICE_WEEK) AND A.BRANCH_KEY=B.BRANCH_KEY
WHERE B.CALENDAR_DATE IS NOT NULL);