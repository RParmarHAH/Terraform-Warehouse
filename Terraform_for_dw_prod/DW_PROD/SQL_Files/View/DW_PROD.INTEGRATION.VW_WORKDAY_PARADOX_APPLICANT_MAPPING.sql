create or replace view DW_PROD.INTEGRATION.VW_WORKDAY_PARADOX_APPLICANT_MAPPING(
	LINKED_ID,
	WORKDAY_APPLICANT_KEY,
	WORKDAY_ID,
	FIRST_NAME,
	LAST_NAME,
	PARADOX_APPLICANT_KEY,
	PARADOX_APPLICANT_ID,
	PARADOX_SOURCE_SYSTEM_ID,
	PARADOX_SYSTEM_CODE,
	HIRED_DATETIME
) as
WITH CTE AS 
	(SELECT DISTINCT 
			APP.LINKED_ID AS LINKED_ID,
			APP.APPLICANT_KEY AS WORKDAY_APPLICANT_KEY,
			APP.APPLICANT_ID AS WORKDAY_ID,
			APP2.FIRST_NAME, APP2.LAST_NAME ,
			APP2.APPLICANT_KEY AS PARADOX_APPLICANT_KEY,
			APP2.APPLICANT_ID AS PARADOX_APPLICANT_ID,
			APP2.SOURCE_SYSTEM_ID AS PARADOX_SOURCE_SYSTEM_ID,
			APP2.SYSTEM_CODE AS PARADOX_SYSTEM_CODE,
			S.HIRED_DATETIME
	FROM DW_PROD.HAH.DIM_APPLICANT AS APP 
	JOIN DW_PROD.HAH.FACT_APPLICANT_STATUS AS S 
		ON APP.LINKED_ID = S.CANDIDATE_ID 
		AND APP.SOURCE_SYSTEM_ID = 36 
		AND APP.LINKED_ID IS NOT NULL
	JOIN DW_PROD.HAH.DIM_APPLICANT AS APP2 
		ON S.APPLICANT_KEY = APP2.APPLICANT_KEY 
)
SELECT DISTINCT C.*
FROM CTE c 
JOIN DW_PROD.HAH.DIM_APPLICANT AP 
	ON AP.APPLICANT_KEY = C.PARADOX_APPLICANT_KEY
	OR AP.APPLICANT_ID = C.WORKDAY_ID
WHERE  WORKDAY_APPLICANT_KEY NOT IN 
	(SELECT WORKDAY_APPLICANT_KEY
	FROM CTE
	GROUP BY 1 HAVING COUNT(*)>1)
AND PARADOX_APPLICANT_KEY NOT IN 
	(SELECT PARADOX_APPLICANT_KEY
	FROM CTE
	GROUP BY 1 HAVING COUNT(*)>1)
-- Excluding IDs which were already mapped in Existing mapping tables
AND WORKDAY_ID NOT IN 
	(SELECT DISTINCT WORKDAY_ID 
	FROM DW_PROD.INTEGRATION.WORKDAY_CROSSWALK_MAPPING
	UNION 
	SELECT DISTINCT WORKDAY_ID 
	FROM DW_PROD.INTEGRATION.APPLICANT_CROSSWALK_MAPPING
	);