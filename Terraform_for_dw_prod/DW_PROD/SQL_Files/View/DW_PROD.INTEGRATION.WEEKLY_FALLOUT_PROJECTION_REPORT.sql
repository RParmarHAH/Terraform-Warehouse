create or replace view DW_PROD.INTEGRATION.WEEKLY_FALLOUT_PROJECTION_REPORT(
	VISIT_KEY,
	EMPLOYEE_FIRST_NAME,
	EMPLOYEE_LAST_NAME,
	SOURCE_SYSTEM_ID,
	SYSTEM_CODE,
	AMS_EMPLOYEE_ID,
	WORKDAY_INTERNAL_ID,
	EXISITS_IN_CROSSWALK,
	EXISITS_IN_WORKDAY,
	SSN_POPULATED,
	DOB_POPULATED,
	WORKDAY_WORKER_STATUS,
	WORKDAY_HIRE_DATE,
	VISIT_SCHEDULED_BEFORE_HIRE_DATE,
	WORKDAY_TERMINATION_DATE,
	REHIRE,
	VISIT_SCHEDULED_AFTER_TERMINATION_DATE,
	MANAGER_NAME,
	WORKER_TYPE,
	VISIT_SCHEDULED_FOR_NON_HOURLY_EMPLOYEE,
	SERVICE_DATE,
	BRANCH_NAME,
	SOURCE_VISIT_EMPLOYEE_ID
) as 
WITH VIEW_DATA AS (
    WITH WORKDAY_DATA AS 
            (SELECT WS.EMPLOYEE_ID, WS.EMPLOYEE_STATUS, WS.HIRE_DATE, WS.TERMINATION_DATE, WS.REHIRE, 
                    CONCAT(ADD_INFO.MANAGER_FIRST_NAME,' ',ADD_INFO.MANAGER_LAST_NAME) AS MANAGER_NAME, 
                    W_POS.PAY_RATE_TYPE, W_POS.WORKER_TYPE , WP.BIRTH_DATE  
            FROM DISC_PROD.WORKDAY.WORKER_STATUS WS 
            LEFT JOIN DISC_PROD.WORKDAY.WORKER_ADDITIONAL_INFORMATION ADD_INFO 
                ON ADD_INFO.EMPLOYEE_ID = WS.EMPLOYEE_ID 
            LEFT JOIN DISC_PROD.WORKDAY.WORKER_POSITION_DATA W_POS 
                ON W_POS.EMPLOYEE_ID = WS.EMPLOYEE_ID
            LEFT JOIN DISC_PROD.WORKDAY.WORKER_PERSONAL WP 
                ON WP.EMPLOYEE_ID = WS.EMPLOYEE_ID 
            )
        , WD_EMP AS
            (SELECT EMPLOYEE_KEY, SOURCE_SYSTEM_ID, EMPLOYEE_ID,EMPLOYEE_FIRST_NAME , EMPLOYEE_LAST_NAME , EMPLOYEE_PID, EMPLOYEE_DOB,
                EMPLOYEE_CELL_PHONE , EMPLOYEE_PERSONAL_EMAIL
            FROM DW_PROD.HAH.DIM_EMPLOYEE
            WHERE SOURCE_SYSTEM_ID IN (36)
    --      AND EMPLOYEE_ID = 50007952
            )
        , WD_APP AS
            (SELECT APPLICANT_KEY , SOURCE_SYSTEM_ID, APPLICANT_ID ,FIRST_NAME, LAST_NAME, SSN, DATE_OF_BIRTH  , MOBILE_PHONE, EMAIL
            FROM DW_PROD.HAH.DIM_APPLICANT
            WHERE SOURCE_SYSTEM_ID IN (36)
            )
        SELECT DISTINCT 
            FV.VISIT_KEY ,
    --      CW.AMS_EMPLOYEE_KEY ,FV.EMPLOYEE_KEY ,
            EM.EMPLOYEE_FIRST_NAME, EM.EMPLOYEE_LAST_NAME, FV.SOURCE_SYSTEM_ID, FV.SYSTEM_CODE, FV.EMPLOYEE_ID AS AMS_EMPLOYEE_ID, 
            CW.WORKDAY_INTERNAL_ID,
            ----
    --      NVL(WD_E.EMPLOYEE_ID,WD_A.APPLICANT_ID)  AS WORKDAY_EMPLOYEE_ID,
            ----        
            CASE WHEN CW.EMPLOYEE_ENTERPRISE_ID IS NULL 
                THEN FALSE ELSE TRUE END AS EXISITS_IN_CROSSWALK,
            CASE WHEN CW.WORKDAY_INTERNAL_ID IS NULL
                THEN FALSE ELSE TRUE END AS EXISITS_IN_WORKDAY,
            ---
    --      CASE WHEN (NOT EXISITS_IN_WORKDAY) AND CW.EMPLOYEE_ENTERPRISE_ID > CW2.EMPLOYEE_ENTERPRISE_ID 
    --          THEN 'Mulesoft Process issue'
    --          ELSE NULL
    --          END AS REMARK2,
            CASE WHEN CW.EMPLOYEE_SSN IS NULL 
                THEN 'NO' ELSE 'YES' END AS SSN_POPULATED,
            CASE WHEN WD.BIRTH_DATE IS NULL 
                THEN 'NO' ELSE 'YES' END AS DOB_POPULATED,
            WD.EMPLOYEE_STATUS AS WORKDAY_WORKER_STATUS,
            WD.HIRE_DATE AS WORKDAY_HIRE_DATE, 
            CASE WHEN FV.SERVICE_DATE < WD.HIRE_DATE 
                THEN TRUE 
                ELSE FALSE 
            END AS VISIT_SCHEDULED_BEFORE_HIRE_DATE,
            WD.TERMINATION_DATE AS WORKDAY_TERMINATION_DATE,
            WD.REHIRE,
            CASE WHEN FV.SERVICE_DATE >= WD.TERMINATION_DATE  
                THEN TRUE 
                ELSE FALSE 
            END AS VISIT_SCHEDULED_AFTER_TERMINATION_DATE,
            WD.MANAGER_NAME,
            WD.WORKER_TYPE,
            CASE WHEN WD.PAY_RATE_TYPE <> 'Hourly'
                THEN 'YES' 
                WHEN EXISITS_IN_WORKDAY THEN 'NO' 
                ELSE NULL
            END AS VISIT_SCHEDULED_FOR_NON_HOURLY_EMPLOYEE,
            FV.SERVICE_DATE ,
            FV.BRANCH_NAME
        FROM DW_PROD.INTEGRATION.FACT_VISIT_MERGED FV
        LEFT JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_AMS_MERGED EM
            ON EM.ORIGINAL_EMPLOYEE_KEY = FV.ORIGINAL_EMPLOYEE_KEY
        LEFT JOIN DW_PROD.INTEGRATION.EMPLOYEE_CROSS_WALK CW
            ON CW.AMS_EMPLOYEE_KEY = CASE WHEN EM.EMPLOYEE_KEY = '70e04b16966213258d9ea084ce407767' THEN 'ff2e6c5e720e94eb10f5391387af88cd' -- FOR Axxess
                                        WHEN EM.EMPLOYEE_KEY= '567a0ef5e5c719aac27af1c2ee9d7009' THEN '73071bc1d0c72606bae2a09163a0d691' -- FOR IL
                                        ELSE EM.EMPLOYEE_KEY
                                        END
            AND CW.INACTIVE <> TRUE AND CW.DUP_FLAG <> TRUE
        LEFT JOIN WORKDAY_DATA AS WD
            ON WD.EMPLOYEE_ID = CW.WORKDAY_INTERNAL_ID 
        ----
        LEFT JOIN DW_PROD.HAH.DIM_EMPLOYEE E 
            ON E.EMPLOYEE_KEY = EM.ORIGINAL_EMPLOYEE_KEY 
        ------
    --LEFT JOIN WD_EMP AS WD_E
    --      ON
    --      ((UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_E.EMPLOYEE_FIRST_NAME)
    --      AND UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_E.EMPLOYEE_LAST_NAME)
    --      AND E.EMPLOYEE_DOB = WD_E.EMPLOYEE_DOB)
    --      OR (UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_E.EMPLOYEE_FIRST_NAME) AND E.EMPLOYEE_PID = WD_E.EMPLOYEE_PID)
    --      OR (UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_E.EMPLOYEE_LAST_NAME) AND E.EMPLOYEE_PID = WD_E.EMPLOYEE_PID)
    --      OR (UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_E.EMPLOYEE_LAST_NAME) AND UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_E.EMPLOYEE_FIRST_NAME) AND E.EMPLOYEE_CELL_PHONE  = WD_E.EMPLOYEE_CELL_PHONE)
    --      OR (UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_E.EMPLOYEE_LAST_NAME) AND UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_E.EMPLOYEE_FIRST_NAME) AND E.EMPLOYEE_PERSONAL_EMAIL  = WD_E.EMPLOYEE_PERSONAL_EMAIL)
    --      )
    --  LEFT JOIN WD_APP AS WD_A
    --      ON
    --      ((UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_A.FIRST_NAME)
    --      AND UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_A.LAST_NAME)
    --      AND E.EMPLOYEE_DOB = WD_A.DATE_OF_BIRTH)
    --      OR (UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_A.FIRST_NAME) AND E.EMPLOYEE_PID = WD_A.SSN)
    --      OR (UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_A.LAST_NAME) AND E.EMPLOYEE_PID = WD_A.SSN)
    --      OR (UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_A.LAST_NAME) AND UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_A.FIRST_NAME) AND E.EMPLOYEE_CELL_PHONE  = WD_A.MOBILE_PHONE)
    --      OR (UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_A.LAST_NAME) AND UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_A.FIRST_NAME) AND E.EMPLOYEE_PERSONAL_EMAIL  = WD_A.EMAIL)
    --      )
    ----
    --LEFT JOIN DW_PROD.INTEGRATION.EMPLOYEE_CROSS_WALK CW2
    --  ON CW2.WORKDAY_INTERNAL_ID = NVL(WD_E.EMPLOYEE_ID,WD_A.APPLICANT_ID)
    --  AND CW2.INACTIVE <> TRUE AND CW2.DUP_FLAG <> TRUE
        ----
        WHERE SERVICE_DATE >= '2023-12-23'::DATE AND SERVICE_DATE <= '2023-12-30'::DATE
        AND FV.VISIT_STATUS_NAME NOT ILIKE '%DID NOT HAPPEN%' AND NOT SCHEDULE_STATUS_NAME ILIKE ANY ('%Cancelled%', '%Hold%')
        AND FV.SYSTEM_CODE NOT IN ('PREFERRED', 'EDISON')
        AND (FV.SOURCE_SYSTEM_ID IN (3, 7) OR FV.SYSTEM_CODE ILIKE '%OSHAH - MS%' OR FV.SYSTEM_CODE = '%ALABAMA (3554)%')
    --  AND FV.SYSTEM_CODE <> 'MO'
    --  AND  NOT EXISITS_IN_CROSSWALK
    --  AND NOT EXISITS_IN_WORKDAY
    --  AND WORKDAY_EMPLOYEE_ID IS NOT NULL
    --  AND REMARK2 IS NULL
        ORDER BY 1, AMS_EMPLOYEE_ID, SERVICE_DATE)
, VISIT_DATA AS (
    WITH DATAFLEX AS (
        WITH DF_IMPORT_VISITS AS                                             
        (
        SELECT ROW_NUMBER()OVER(PARTITION BY VISITKEY, TRACKINGID, WEEKENDDATE, STATE, SERVICEDATE ORDER BY IMPORTTASKID DESC, LINEID DESC) RNO,
                VISITKEY,
                split_part(DFI.VISITKEY, '_',  3)::NUMBER AS SCHEDULEID,
                split_part(DFI.VISITKEY, '_',  2) AS AGENCYID,
                TRACKINGID, WEEKENDDATE, STATE, SERVICEDATE, ETL_LAST_UPDATED_DATE
        FROM DISC_DEV.SANDATAEXCHANGE.DFIMPORT_IMPORTVISITS DFI
        WHERE ISIMPORTED = TRUE AND NVL(TRACKINGID,0) <> 0
        QUALIFY RNO = 1            
        ), DF AS                                                    
        (
            SELECT DISTINCT
                MD5(f.DBNAME || '-' || f.REFERENCENO || '-' || f.WEEKENDDATE || '-' || f.SERVICEDATE || '-' || 'DATAFLEXSYNCDATA') AS VISIT_KEY,
                ts.EMPLOYEENUMBEr::VARCHAR AS EMPLOYEEID
        FROM 
        DISC_DEV.DATAFLEXSYNCDATA.ALL_DFTIMESHEETS TS1 
        LEFT JOIN DF_IMPORT_VISITS DFI                                          
            ON TS1.TRACKINGID = DFI.TRACKINGID 
            AND TS1.WEEKENDDATE = DFI.WEEKENDDATE 
            AND TS1.DBNAME = DFI.STATE 
        LEFT JOIN DISC_DEV.SANDATAIMPORT.SANDATA_SCHEDULES SCH 
            ON  DFI.SCHEDULEID = SCH.SCHEDULEID  
            AND DFI.AGENCYID = SCH.AGENCYID
            AND DFI.SERVICEDATE = SCH.SCHEDULEDATE
        LEFT JOIN DISC_DEV.SANDATAIMPORT.SANDATA_VISITS SV
            ON DFI.SCHEDULEID = SV.SCHEDULEID  
            AND DFI.AGENCYID = SV.AGENCYID
            AND TS1.clientnumber::varchar=SV.CLIENTOTHERID 
            AND DFI.SERVICEDATE = SV.DATE
        RIGHT JOIN DISC_DEV.DATAFLEXSYNCDATA.ALL_TIMESHEETSHOURS f
            ON f.DbName = ts1.DbName 
            AND f.ReferenceNo = ts1.ReferenceNo 
            AND f.WeekendDate = ts1.WeekendDate 
            AND F.SERVICEDATE = IFF(F.SERVICEDATE = COALESCE(SV.DATE,SCH.SCHEDULEDATE),COALESCE(SV.DATE,SCH.SCHEDULEDATE),F.SERVICEDATE)
            AND F.SERVICEDATE = IFF(F.SERVICEDATE = DFI.SERVICEDATE,DFI.SERVICEDATE,NVL(DFI.SERVICEDATE,F.SERVICEDATE))       
        LEFT JOIN DISC_DEV.DATAFLEXSYNCDATA.ALL_DFTIMESHEETS TS                                                                             
            ON TS.DBNAME = F.DBNAME AND TS.REFERENCENO = F.REFERENCENO AND F.WEEKENDDATE = TS.WEEKENDDATE                              
            )
        --------------------------- New logic for non confirmed -------------------------------------------------------
        ,SD AS (SELECT DISTINCT               
                MD5(SD.DFDBNAME || '-' || SD.SCHEDULEID || '-' || 'DATAFLEXSYNCDATA') AS VISIT_KEY,
                DE1.NUMBER::VARCHAR AS EMPLOYEEID
        FROM DISC_DEV.PUBLIC.VW_DATAFLEX_SANDATA_PENDING_VISITS SD
        LEFT JOIN DISC_DEV.DATAFLEXSYNCDATA.DFEMPLOYEES DE1
            ON SD.STAFFAGENCYID = DE1.PAYROLLIDINDEXNO                      
            AND SD.DFDBNAME = DE1.DBNAME
        ) 
        , FINAL AS 
        (
            SELECT * FROM DF
            UNION ALL 
            SELECT * FROM SD 
        )
    SELECT DISTINCT * FROM FINAL
    ),
    MATRIXCARE AS
    (
    SELECT DISTINCT MD5('MATRIXCARE' || '-' || SCH_ID::VARCHAR || '-' || 'MATRIXCARE') AS VISIT_KEY,SCH_CAREGIVERID::VARCHAR AS EMPLOYEEID
    FROM DISC_PROD.MATRIXCARE.STVHC_T_SCHEDULES
    )
    ,ALAYACARE AS
    (
    SELECT DISTINCT MD5(NVL(TRIM(B.PROPERTIES_TBL_GT_ACCOUNT_DESCRIPTION), 'UNKNOWN') || ' (' || NVL(VISITS.BRANCH_ID::VARCHAR,-1) || ')' || '-' || VISITS.VISIT_ID::VARCHAR|| '-' || 'ALAYACARE') AS VISIT_KEY, VISITS.EMPLOYEE_ID::VARCHAR AS EMPLOYEEID
    FROM DISC_PROD.ALAYACARE.VISIT VISITS LEFT JOIN
    DISC_PROD.ALAYACARE.BRANCH B ON VISITS.BRANCH_ID = B.BRANCH_ID
    )
    ,AXXESS AS
    (
       SELECT DISTINCT MD5('PRIME' ||'-' || IFNULL(UPPER(TRIM(SCHEDULED_TASK_ID::VARCHAR)),'UNKNOWN') || '-' || 'AXXESS') AS VISIT_KEY,CLINICIAN_ID::VARCHAR AS EMPLOYEEID FROM
       DISC_PROD.AXXESS.VW_AXXESS_HC_TASKDETAILS
    )
    ,OSHAH AS
    (
    SELECT DISTINCT MD5('OSHAH' || VISIT.VISITID::VARCHAR || '-' || 'HHAEXCHANGE') AS VISIT_KEY,VISIT.CAREGIVERID::VARCHAR AS EMPLOYEEID
    FROM        DISC_DEV.HHAEXCHANGEOSHAH.VISITINFO_REPL VINFO
    JOIN        DISC_DEV.HHAEXCHANGEOSHAH.TBLVISITS_REPL VISIT
                ON VINFO.VISITID = VISIT.VISITID
    JOIN        DISC_DEV.HHAEXCHANGEOSHAH.VISITS VST
                ON VST.VISITID =VISIT.VISITID
    LEFT JOIN   DISC_DEV.HHAEXCHANGEOSHAH.OFFICE_OFFICES_REPL OFFICE 
                ON VINFO.OFFICEID = OFFICE.OFFICEID
    ),
    ALL_SYSTEMS AS (
    SELECT * FROM (
    SELECT * FROM DATAFLEX
    UNION ALL
    SELECT * FROM MATRIXCARE
    UNION ALL
    SELECT AL.* FROM ALAYACARE AL
    UNION ALL
    SELECT * FROM AXXESS
    UNION ALL
    SELECT * FROM OSHAH)
    ),
     WORKDAY_DATA AS 
        (SELECT WS.EMPLOYEE_ID, WS.EMPLOYEE_STATUS, WS.HIRE_DATE, WS.TERMINATION_DATE, WS.REHIRE, 
                CONCAT(ADD_INFO.MANAGER_FIRST_NAME,' ',ADD_INFO.MANAGER_LAST_NAME) AS MANAGER_NAME,
                W_POS.PAY_RATE_TYPE, W_POS.WORKER_TYPE  
        FROM DISC_PROD.WORKDAY.WORKER_STATUS WS 
        LEFT JOIN DISC_PROD.WORKDAY.WORKER_ADDITIONAL_INFORMATION ADD_INFO 
            ON ADD_INFO.EMPLOYEE_ID = WS.EMPLOYEE_ID 
        LEFT JOIN DISC_PROD.WORKDAY.WORKER_POSITION_DATA W_POS 
            ON W_POS.EMPLOYEE_ID = WS.EMPLOYEE_ID
        )
    SELECT DISTINCT 
        FV.VISIT_KEY ,
        FV.EMPLOYEE_KEY ,EM.EMPLOYEE_FIRST_NAME, EM.EMPLOYEE_LAST_NAME, FV.SOURCE_SYSTEM_ID, FV.SYSTEM_CODE, FV.EMPLOYEE_ID AS AMS_EMPLOYEE_ID,
        CW.WORKDAY_INTERNAL_ID,C.EMPLOYEEID AS SOURCE_VISIT_EMPLOYEE_ID,
        CASE WHEN CW.EMPLOYEE_ENTERPRISE_ID IS NULL 
            THEN FALSE ELSE TRUE END AS EXISITS_IN_CROSSWALK,
        CASE WHEN CW.WORKDAY_INTERNAL_ID IS NULL
            THEN FALSE ELSE TRUE END AS EXISITS_IN_WORKDAY,
        CASE WHEN CW.EMPLOYEE_SSN IS NULL 
            THEN 'NO' ELSE 'YES' END AS SSN_POPULATED,
        WD.EMPLOYEE_STATUS AS WORKDAY_WORKER_STATUS,
        WD.HIRE_DATE AS WORKDAY_HIRE_DATE, 
        CASE WHEN FV.SERVICE_DATE < WD.HIRE_DATE 
            THEN TRUE 
            ELSE FALSE 
        END AS VISIT_SCHEDULED_BEFORE_HIRE_DATE,
        WD.TERMINATION_DATE AS WORKDAY_TERMINATION_DATE,
        WD.REHIRE,
        CASE WHEN FV.SERVICE_DATE >= WD.TERMINATION_DATE  
            THEN TRUE 
            ELSE FALSE 
        END AS VISIT_SCHEDULED_AFTER_TERMINATION_DATE,
        WD.MANAGER_NAME,
        WD.WORKER_TYPE,
        CASE WHEN WD.PAY_RATE_TYPE <> 'Hourly'
            THEN 'YES' 
            WHEN EXISITS_IN_WORKDAY THEN 'NO' 
            ELSE NULL
        END AS VISIT_SCHEDULED_FOR_NON_HOURLY_EMPLOYEE,
        FV.SERVICE_DATE ,
        FV.BRANCH_NAME
    FROM DW_PROD.INTEGRATION.FACT_VISIT_MERGED FV
    LEFT JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_AMS_MERGED EM
        ON EM.EMPLOYEE_KEY = FV.EMPLOYEE_KEY
    LEFT JOIN DW_PROD.INTEGRATION.EMPLOYEE_CROSS_WALK CW
        ON CW.AMS_EMPLOYEE_KEY = EM.EMPLOYEE_KEY
        AND CW.INACTIVE <> TRUE AND CW.DUP_FLAG <> TRUE
    LEFT JOIN WORKDAY_DATA AS WD
        ON WD.EMPLOYEE_ID = CW.WORKDAY_INTERNAL_ID 
    LEFT JOIN ALL_SYSTEMS C ON FV.VISIT_KEY = C.VISIT_KEY
    WHERE SERVICE_DATE >= '2023-12-23'::DATE AND SERVICE_DATE <= '2023-12-30'::DATE
    AND FV.VISIT_STATUS_NAME NOT ILIKE '%DID NOT HAPPEN%' AND NOT SCHEDULE_STATUS_NAME ILIKE ANY ('%Cancelled%', '%Hold%')
    AND FV.SYSTEM_CODE NOT IN ('PREFERRED', 'EDISON') AND FV.SOURCE_SYSTEM_ID IN (3, 7, 9 , 14, 17) 
    ORDER BY 1
    )
SELECT VD.* ,V.SOURCE_VISIT_EMPLOYEE_ID
FROM VIEW_DATA VD 
LEFT JOIN  VISIT_DATA V ON VD.VISIT_KEY = V.VISIT_KEY;