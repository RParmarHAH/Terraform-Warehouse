create or replace view DW_PROD.INTEGRATION.VW_AMS_PAYROLL_MAPPING_INPUT(
	ID,
	MAP_ID,
	EMPLOYEE_ID,
	SYSTEM_CODE,
	SOURCE_SYSTEM_ID,
	NAME,
	EMPLOYEE_FIRST_NAME,
	EMPLOYEE_LAST_NAME,
	EMPLOYEE_PID,
	EMPLOYEE_DOB,
	PHONE,
	EMPLOYEE_HOME_PHONE,
	EMPLOYEE_CELL_PHONE,
	EMAIL,
	ADDRESS,
	CITY,
	STATE,
	EMPLOYEE_ZIP,
	EMPLOYEE_NUMBER,
	EMPLOYEE_HIRE_DATE,
	EMPLOYEE_FIRST_CHECK_DATE,
	EMPLOYEE_LAST_CHECK_DATE,
	EMPLOYEE_LAST_WORKED_DATE,
	EMPLOYEE_TERMINATE_DATE,
	PAYROLL_ID,
	STATE_CODE,
	SOURCE_SYSTEM
) as 
select ID, 
CASE WHEN MAP_ID IS NULL OR trim(MAP_ID)='' THEN LEFT(random(),32) ELSE MAP_ID END AS MAP_ID,
EMPLOYEE_ID, SYSTEM_CODE, SOURCE_SYSTEM_ID, NAME, EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, 
CASE WHEN EMPLOYEE_PID IS NULL OR trim(EMPLOYEE_PID)='' THEN LEFT(random(),32) ELSE EMPLOYEE_PID END AS EMPLOYEE_PID, 
CASE WHEN EMPLOYEE_DOB IS NULL OR trim(EMPLOYEE_DOB)='' THEN LEFT(random(),8) ELSE EMPLOYEE_DOB END AS EMPLOYEE_DOB, 
CASE WHEN PHONE IS NULL OR trim(PHONE)='' THEN LEFT(random(),10) ELSE PHONE END AS PHONE, EMPLOYEE_HOME_PHONE, 
EMPLOYEE_CELL_PHONE, CASE WHEN EMAIL IS NULL OR trim(EMAIL)='' THEN randstr(10,random()) ELSE EMAIL END AS EMAIL,
CASE WHEN ADDRESS IS NULL OR trim(ADDRESS)='' THEN randstr(5,random()) ELSE ADDRESS END AS ADDRESS, 
CASE WHEN CITY IS NULL OR trim(CITY)='' THEN randstr(5,random()) ELSE CITY END AS CITY, 
CASE WHEN STATE IS NULL OR trim(STATE)='' THEN randstr(5,random()) ELSE STATE END AS STATE, EMPLOYEE_ZIP, 
EMPLOYEE_NUMBER, EMPLOYEE_HIRE_DATE, EMPLOYEE_FIRST_CHECK_DATE, EMPLOYEE_LAST_CHECK_DATE, 
EMPLOYEE_LAST_WORKED_DATE, EMPLOYEE_TERMINATE_DATE, PAYROLL_ID, STATE_CODE, SOURCE_SYSTEM from (
--AMS
 SELECT DISTINCT EMPLOYEE_KEY AS ID,
  CASE 
    WHEN SOURCE_SYSTEM_ID = 3 THEN  'GP-' || UPPER(TRIM(PAYROLL_ID))
    WHEN SYSTEM_CODE ilike '%OSHAH - MS%' THEN  'GP-' || UPPER(TRIM(PAYROLL_ID))
    WHEN SYSTEM_CODE  ilike '%PREFERRED%' THEN  'EMPPRE-' || UPPER(TRIM(PAYROLL_ID))
    WHEN SYSTEM_CODE  ilike '%EDISON%' THEN  'EMPEDI-' || UPPER(TRIM(PAYROLL_ID))
    WHEN SYSTEM_CODE  ilike '%GEORGIA (1002)%' THEN  'TRUSTGA-' || UPPER(TRIM(PAYROLL_ID))
    WHEN SOURCE_SYSTEM_ID = 13 THEN  'TRUSTPRIME-' || UPPER(TRIM(PAYROLL_ID))
    WHEN SYSTEM_CODE  ilike '%ALLIANCE%' THEN  'ADPALL-' || UPPER(TRIM(PAYROLL_ID))
  else null-- UPPER(TRIM(PAYROLL_ID))
  end AS MAP_ID,
  EMPLOYEE_ID,
  SYSTEM_CODE,SOURCE_SYSTEM_ID,
  UPPER(REGEXP_REPLACE(EMPLOYEE_FIRST_NAME, '[^A-Za-z]', '')) || UPPER(REGEXP_REPLACE(EMPLOYEE_LAST_NAME, '[^A-Za-z]', '')) AS NAME,
  UPPER(REGEXP_REPLACE(EMPLOYEE_FIRST_NAME, '[^A-Za-z]', '')) AS EMPLOYEE_FIRST_NAME,UPPER(REGEXP_REPLACE(EMPLOYEE_LAST_NAME, '[^A-Za-z]', '')) AS EMPLOYEE_LAST_NAME,
  TRIM(HEX_DECODE_STRING(EMPLOYEE_PID)) AS EMPLOYEE_PID,TRIM(EMPLOYEE_DOB) AS EMPLOYEE_DOB, 
  REGEXP_REPLACE(COALESCE(DW_DEV.PUBLIC.REPLACE_NON_UTF8_CHARS(EMPLOYEE_HOME_PHONE),EMPLOYEE_CELL_PHONE,EMPLOYEE_WORK_PHONE), '[^0-9]','') PHONE,
  REGEXP_REPLACE(TRIM(DW_DEV.PUBLIC.REPLACE_NON_UTF8_CHARS(EMPLOYEE_HOME_PHONE)), '[^0-9]','') EMPLOYEE_HOME_PHONE,
  REGEXP_REPLACE(TRIM(EMPLOYEE_CELL_PHONE), '[^0-9]','') EMPLOYEE_CELL_PHONE,  UPPER(TRIM(COALESCE(EMPLOYEE_PERSONAL_EMAIL,EMPLOYEE_WORK_EMAIL))) EMAIL,
  UPPER(COALESCE(DW_DEV.PUBLIC.REPLACE_NON_UTF8_CHARS(EMPLOYEE_ADDRESS1),EMPLOYEE_ADDRESS2)) ADDRESS,UPPER(TRIM(EMPLOYEE_CITY)) AS CITY,
  EMPLOYEE_STATE_CODE AS STATE,EMPLOYEE_ZIP,EMPLOYEE_NUMBER,EMPLOYEE_HIRE_DATE,EMPLOYEE_FIRST_CHECK_DATE,EMPLOYEE_LAST_CHECK_DATE,
  EMPLOYEE_LAST_WORKED_DATE,EMPLOYEE_TERMINATE_DATE,PAYROLL_ID,COALESCE(WORK_STATE,PRIMARY_BRANCH_STATE) STATE_CODE,'AMS' AS SOURCE_SYSTEM 
  FROM DW_PROD.INTEGRATION.DIM_EMPLOYEE_AMS_MERGED 
  UNION 
  --PAYROLL
  SELECT DISTINCT EMPLOYEE_KEY AS ID,
  CASE 
  WHEN P.SOURCE_SYSTEM_ID = 5 THEN  'GP-' || UPPER(TRIM(EMPLOYEE_ID)) 
  WHEN P.SYSTEM_CODE  ilike '%PREFERRED%' THEN  'EMPPRE-' || UPPER(TRIM(EMPLOYEE_ID))
  WHEN P.SYSTEM_CODE  ilike '%EDISON%' THEN  'EMPEDI-' || UPPER(TRIM(EMPLOYEE_ID))
  WHEN P.SYSTEM_CODE  ilike '%COASTAL%' THEN  'TRUSTGA-' || UPPER(TRIM(EMPLOYEE_ID))
  WHEN P.SYSTEM_CODE  ilike '%PRIME%' THEN  'TRUSTPRIME-' || UPPER(TRIM(EMPLOYEE_ID))
  WHEN P.SYSTEM_CODE  ilike '%ADP-ALLIANCE%' THEN  'ADPALL-' || UPPER(TRIM(EMPLOYEE_ID))
  else null -- UPPER(TRIM(PAYROLL_ID))
  END AS MAP_ID,
  EMPLOYEE_ID,P.SYSTEM_CODE,P.SOURCE_SYSTEM_ID,
  UPPER(REGEXP_REPLACE(EMPLOYEE_FIRST_NAME, '[^A-Za-z]', '')) || UPPER(REGEXP_REPLACE(EMPLOYEE_LAST_NAME, '[^A-Za-z]', '')) AS NAME,
  UPPER(REGEXP_REPLACE(EMPLOYEE_FIRST_NAME, '[^A-Za-z]', '')) AS EMPLOYEE_FIRST_NAME,UPPER(REGEXP_REPLACE(EMPLOYEE_LAST_NAME, '[^A-Za-z]', '')) AS EMPLOYEE_LAST_NAME,
  TRIM(HEX_DECODE_STRING(EMPLOYEE_PID)) AS EMPLOYEE_PID,TRIM(EMPLOYEE_DOB) AS EMPLOYEE_DOB,
  REGEXP_REPLACE(TRIM(COALESCE(DW_DEV.PUBLIC.REPLACE_NON_UTF8_CHARS(EMPLOYEE_HOME_PHONE),
  EMPLOYEE_CELL_PHONE,EMPLOYEE_WORK_PHONE)), '[^0-9]','') PHONE,
  REGEXP_REPLACE(TRIM(DW_DEV.PUBLIC.REPLACE_NON_UTF8_CHARS(EMPLOYEE_HOME_PHONE)), '[^0-9]','') EMPLOYEE_HOME_PHONE,
  REGEXP_REPLACE(TRIM(EMPLOYEE_CELL_PHONE), '[^0-9]','') EMPLOYEE_CELL_PHONE,UPPER(TRIM(COALESCE(EMPLOYEE_PERSONAL_EMAIL,EMPLOYEE_WORK_EMAIL))) EMAIL,
  UPPER(TRIM(COALESCE(DW_DEV.PUBLIC.REPLACE_NON_UTF8_CHARS(EMPLOYEE_ADDRESS1),EMPLOYEE_ADDRESS2))) ADDRESS,UPPER(TRIM(EMPLOYEE_CITY)) AS CITY,
  EMPLOYEE_STATE_CODE AS STATE,EMPLOYEE_ZIP,EMPLOYEE_NUMBER,EMPLOYEE_HIRE_DATE,EMPLOYEE_FIRST_CHECK_DATE,
  EMPLOYEE_LAST_CHECK_DATE,EMPLOYEE_LAST_WORKED_DATE,EMPLOYEE_TERMINATE_DATE,PAYROLL_ID,
  COALESCE(COALESCE(WORK_STATE,PRIMARY_BRANCH_STATE), S.DEFAULT_STATE) STATE_CODE,'PAYROLL' AS SOURCE_SYSTEM FROM DW_PROD.INTEGRATION.DIM_EMPLOYEE_PAYROLL_MERGE_DEDUPE P 
  LEFT JOIN DW_PROD.INTEGRATION.DEFAULT_SYSTEM_STATE S ON P.SOURCE_SYSTEM_ID = S.SOURCE_SYSTEM_ID AND P.SYSTEM_CODE = S.SYSTEM_CODE 
) --WHERE ID IN ('33ecafe862b16d4f5ff3f9e290b7bdfd','86bf6e54ea339469c9766b69d90f3430')
  ;