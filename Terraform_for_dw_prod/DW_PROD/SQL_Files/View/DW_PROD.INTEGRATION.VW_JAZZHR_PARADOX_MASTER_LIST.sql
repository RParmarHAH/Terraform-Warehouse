create or replace view DW_PROD.INTEGRATION.VW_JAZZHR_PARADOX_MASTER_LIST(
	ID,
	EMPLOYEE_KEY,
	EMPLOYEE_ID,
	SYSTEM_CODE,
	SOURCE_SYSTEM_ID,
	SSN,
	DOB,
	APPLIED_DATE,
	HIRED_DATE,
	HIRED_DATE_MONTH,
	FIRST_NAME,
	LAST_NAME,
	PHONE,
	EMAIL,
	ADDRESS,
	CITY,
	STATE,
	POSTAL,
	BRANCH_KEY,
	BRANCH_NAME,
	ETL_INSERTED_DATE,
	EMPLOYEE_LAST_CHECK_DATE,
	EMPLOYEE_FIRST_CHECK_DATE,
	EMPLOYEE_LAST_WORKED_DATE,
	EMPLOYEE_HIRE_DATE
) as 
WITH NEW_RECORD as (
    SELECT * from (
      SELECT
      ROW_NUMBER() OVER(PARTITION BY CLUSTER_ID ORDER BY HIRED_DATE desc NULLS LAST, APPLIED_DATE desc NULLS LAST) RECORD_ORDER, *
      FROM DW_PROD.INTEGRATION.JAZZHR_PARADOX_DEDUPE_OUTPUT where CLUSTER_ID is not null
    ) where RECORD_ORDER =1
  ) 
  --SELECT * FROM NEW_RECORD;
  , OLD_ID as (
    SELECT * from (
      SELECT
      ROW_NUMBER() OVER(PARTITION BY CLUSTER_ID ORDER BY HIRED_DATE asc NULLS LAST, APPLIED_DATE asc NULLS LAST) RECORD_ORDER, *
      FROM DW_PROD.INTEGRATION.JAZZHR_PARADOX_DEDUPE_OUTPUT where CLUSTER_ID is not null
    ) where RECORD_ORDER =1
  ) 
  --SELECT * FROM old_id;
  SELECT N.ID AS ID, N.EMPLOYEE_KEY AS EMPLOYEE_KEY,N.EMPLOYEE_ID,N.SYSTEM_CODE,N.SOURCE_SYSTEM_ID,N.SSN,N.DOB,N.APPLIED_DATE,N.HIRED_DATE,N.HIRED_DATE_MONTH,N.FIRST_NAME,N.LAST_NAME,N.PHONE,N.EMAIL,N.ADDRESS,N.CITY,N.STATE,N.POSTAL,N.BRANCH_KEY,N.BRANCH_NAME,N.ETL_INSERTED_DATE,N.EMPLOYEE_LAST_CHECK_DATE,N.EMPLOYEE_FIRST_CHECK_DATE,N.EMPLOYEE_LAST_WORKED_DATE,N.EMPLOYEE_HIRE_DATE
  FROM NEW_RECORD N
  INNER JOIN OLD_ID O 
    ON O.CLUSTER_ID = N.CLUSTER_ID
  UNION
  SELECT
    ID,EMPLOYEE_KEY,EMPLOYEE_ID,SYSTEM_CODE,SOURCE_SYSTEM_ID,SSN,DOB,APPLIED_DATE,HIRED_DATE,HIRED_DATE_MONTH,FIRST_NAME,LAST_NAME,PHONE,EMAIL,ADDRESS,CITY, STATE,POSTAL,BRANCH_KEY,BRANCH_NAME,ETL_INSERTED_DATE,EMPLOYEE_LAST_CHECK_DATE,EMPLOYEE_FIRST_CHECK_DATE,EMPLOYEE_LAST_WORKED_DATE,EMPLOYEE_HIRE_DATE
  FROM DW_PROD.INTEGRATION.JAZZHR_PARADOX_DEDUPE_OUTPUT 
  WHERE CLUSTER_ID IS NULL;