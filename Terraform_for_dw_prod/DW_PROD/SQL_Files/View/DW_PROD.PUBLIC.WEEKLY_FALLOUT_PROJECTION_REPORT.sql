create or replace view DW_PROD.PUBLIC.WEEKLY_FALLOUT_PROJECTION_REPORT(
	VISIT_KEY,
	AMS_EMPLOYEE_KEY,
	EMPLOYEE_KEY,
	EMPLOYEE_FIRST_NAME,
	EMPLOYEE_LAST_NAME,
	SOURCE_SYSTEM_ID,
	SYSTEM_CODE,
	AMS_EMPLOYEE_ID,
	WORKDAY_INTERNAL_ID,
	WORKDAY_EMPLOYEE_ID,
	EXISITS_IN_CROSSWALK,
	EXISITS_IN_WORKDAY,
	REMARK2,
	SSN_POPULATED,
	WORKDAY_WORKER_STATUS,
	WORKDAY_HIRE_DATE,
	VISIT_SCHEDULED_BEFORE_HIRE_DATE,
	WORKDAY_TERMINATION_DATE,
	REHIRE,
	VISIT_SCHEDULED_AFTER_TERMINATION_DATE,
	MANAGER_NAME,
	WORKER_TYPE,
	VISIT_SCHEDULED_FOR_NON_HOURLY_EMPLOYEE
) as 
WITH WORKDAY_DATA AS 
		(SELECT WS.EMPLOYEE_ID, WS.EMPLOYEE_STATUS, WS.HIRE_DATE, WS.TERMINATION_DATE, WS.REHIRE, 
				CONCAT(ADD_INFO.MANAGER_FIRST_NAME,' ',ADD_INFO.MANAGER_LAST_NAME) AS MANAGER_NAME, 
				W_POS.PAY_RATE_TYPE, W_POS.WORKER_TYPE  
		FROM DISC_PROD.WORKDAY.WORKER_STATUS WS 
		LEFT JOIN DISC_PROD.WORKDAY.WORKER_ADDITIONAL_INFORMATION ADD_INFO 
			ON ADD_INFO.EMPLOYEE_ID = WS.EMPLOYEE_ID 
		LEFT JOIN DISC_PROD.WORKDAY.WORKER_POSITION_DATA W_POS 
			ON W_POS.EMPLOYEE_ID = WS.EMPLOYEE_ID
		)
	, WD_EMP AS 
		(SELECT EMPLOYEE_KEY, SOURCE_SYSTEM_ID, EMPLOYEE_ID,EMPLOYEE_FIRST_NAME , EMPLOYEE_LAST_NAME , EMPLOYEE_PID, EMPLOYEE_DOB 
		FROM DW_PROD.HAH.DIM_EMPLOYEE
		WHERE SOURCE_SYSTEM_ID IN (36)
		)
	, WD_APP AS 
		(SELECT APPLICANT_KEY , SOURCE_SYSTEM_ID, APPLICANT_ID ,FIRST_NAME, LAST_NAME, SSN, DATE_OF_BIRTH  
		FROM DW_PROD.HAH.DIM_APPLICANT 
		WHERE SOURCE_SYSTEM_ID IN (36)
		)
	SELECT DISTINCT 
		FV.VISIT_KEY ,
		CW.AMS_EMPLOYEE_KEY ,FV.EMPLOYEE_KEY ,
		EM.EMPLOYEE_FIRST_NAME, EM.EMPLOYEE_LAST_NAME, FV.SOURCE_SYSTEM_ID, FV.SYSTEM_CODE, FV.EMPLOYEE_ID AS AMS_EMPLOYEE_ID, 
		CW.WORKDAY_INTERNAL_ID,
		----
		NVL(WD_E.EMPLOYEE_ID,WD_A.APPLICANT_ID)  AS WORKDAY_EMPLOYEE_ID,
		----		
		CASE WHEN CW.EMPLOYEE_ENTERPRISE_ID IS NULL 
			THEN FALSE ELSE TRUE END AS EXISITS_IN_CROSSWALK,
		CASE WHEN CW.WORKDAY_INTERNAL_ID IS NULL
			THEN FALSE ELSE TRUE END AS EXISITS_IN_WORKDAY,
		---
		CASE WHEN (NOT EXISITS_IN_WORKDAY) AND CW.EMPLOYEE_ENTERPRISE_ID > CW2.EMPLOYEE_ENTERPRISE_ID 
			THEN 'Mulesoft Process issue'
			ELSE NULL
			END AS REMARK2,
		CASE WHEN CW.EMPLOYEE_SSN IS NULL 
			THEN 'NO' ELSE 'YES' END AS SSN_POPULATED,
		WD.EMPLOYEE_STATUS AS WORKDAY_WORKER_STATUS,
		WD.HIRE_DATE AS WORKDAY_HIRE_DATE, 
		CASE WHEN FV.SERVICE_DATE < WD.HIRE_DATE 
			THEN TRUE 
			ELSE FALSE 
		END AS VISIT_SCHEDULED_BEFORE_HIRE_DATE,
		WD.TERMINATION_DATE AS WORKDAY_TERMINATION_DATE,
		WD.REHIRE,
		CASE WHEN FV.SERVICE_DATE >= WD.TERMINATION_DATE  
			THEN TRUE 
			ELSE FALSE 
		END AS VISIT_SCHEDULED_AFTER_TERMINATION_DATE,
		WD.MANAGER_NAME,
		WD.WORKER_TYPE,
		CASE WHEN WD.PAY_RATE_TYPE <> 'Hourly'
			THEN 'YES' 
			WHEN EXISITS_IN_WORKDAY THEN 'NO' 
			ELSE NULL
		END AS VISIT_SCHEDULED_FOR_NON_HOURLY_EMPLOYEE
	--	FV.SERVICE_DATE ,
	--	FV.BRANCH_NAME
	FROM DW_PROD.INTEGRATION.FACT_VISIT_MERGED FV
	LEFT JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_AMS_MERGED EM
		ON EM.ORIGINAL_EMPLOYEE_KEY = FV.ORIGINAL_EMPLOYEE_KEY
	LEFT JOIN DW_PROD.INTEGRATION.EMPLOYEE_CROSS_WALK CW
		ON CW.AMS_EMPLOYEE_KEY = CASE WHEN EM.EMPLOYEE_KEY = '70e04b16966213258d9ea084ce407767' THEN 'ff2e6c5e720e94eb10f5391387af88cd' -- FOR Axxess
									WHEN EM.EMPLOYEE_KEY= '567a0ef5e5c719aac27af1c2ee9d7009' THEN '73071bc1d0c72606bae2a09163a0d691' -- FOR IL
									ELSE EM.EMPLOYEE_KEY
									END
		AND CW.INACTIVE <> TRUE AND CW.DUP_FLAG <> TRUE
	LEFT JOIN WORKDAY_DATA AS WD
		ON WD.EMPLOYEE_ID = CW.WORKDAY_INTERNAL_ID 
	----
	LEFT JOIN DW_PROD.HAH.DIM_EMPLOYEE E 
		ON E.EMPLOYEE_KEY = EM.ORIGINAL_EMPLOYEE_KEY 
	------
	LEFT JOIN WD_EMP AS WD_E
		ON 
		((UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_E.EMPLOYEE_FIRST_NAME)
		AND UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_E.EMPLOYEE_LAST_NAME)
		AND E.EMPLOYEE_DOB = WD_E.EMPLOYEE_DOB)
		OR (UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_E.EMPLOYEE_FIRST_NAME) AND E.EMPLOYEE_PID = WD_E.EMPLOYEE_PID)
		OR (UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_E.EMPLOYEE_LAST_NAME) AND E.EMPLOYEE_PID = WD_E.EMPLOYEE_PID)
		)
	LEFT JOIN WD_APP AS WD_A
		ON 
		((UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_A.FIRST_NAME)
		AND UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_A.LAST_NAME)
		AND E.EMPLOYEE_DOB = WD_A.DATE_OF_BIRTH)
		OR (UPPER(E.EMPLOYEE_FIRST_NAME) = UPPER(WD_A.FIRST_NAME) AND E.EMPLOYEE_PID = WD_A.SSN)
		OR (UPPER(E.EMPLOYEE_LAST_NAME) = UPPER(WD_A.LAST_NAME) AND E.EMPLOYEE_PID = WD_A.SSN)
		)
----
LEFT JOIN DW_PROD.INTEGRATION.EMPLOYEE_CROSS_WALK CW2 
	ON CW2.WORKDAY_INTERNAL_ID = NVL(WD_E.EMPLOYEE_ID,WD_A.APPLICANT_ID)
	----
	WHERE SERVICE_DATE >= '2023-12-23'::DATE AND SERVICE_DATE <= '2023-12-30'::DATE
	AND FV.VISIT_STATUS_NAME NOT ILIKE '%DID NOT HAPPEN%' AND NOT SCHEDULE_STATUS_NAME ILIKE ANY ('%Cancelled%', '%Hold%')
	AND FV.SYSTEM_CODE NOT IN ('PREFERRED', 'EDISON')
--	AND  NOT EXISITS_IN_CROSSWALK
--	AND NOT EXISITS_IN_WORKDAY
--	AND WORKDAY_EMPLOYEE_ID IS NOT NULL
--	AND REMARK2 IS NULL
	ORDER BY 1;