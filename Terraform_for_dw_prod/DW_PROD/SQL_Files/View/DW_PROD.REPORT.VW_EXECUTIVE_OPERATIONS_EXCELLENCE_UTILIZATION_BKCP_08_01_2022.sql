create or replace view DW_PROD.REPORT.VW_EXECUTIVE_OPERATIONS_EXCELLENCE_UTILIZATION_BKCP_08_01_2022(
	PERIOD_BEGIN_DATE,
	PERIOD_NAME,
	STATE,
	BRANCH_KEY,
	OFFICE_NUMBER,
	OFFICE_NAME,
	SUPERVISOR_KEY,
	SUPERVISOR_CODE,
	ABSOLUTE_FIRST_SERVICE_DATE,
	CLIENT_KEY_DATA,
	CLIENT_NUMBER,
	ORIGINAL_SOURCE_SYSTEM_ID,
	SOURCE_SYSTEM_ID,
	CONTRACT_KEY,
	CONTRACT_CODE,
	CLIENT_KEY,
	HOURS_SERVED_WHERE_AUTH_EXISTS,
	HOURS_BILLED_WHERE_AUTH_EXISTS,
	HOURS_AUTHORIZED_WHERE_AUTH_EXISTS,
	HOURS_AUTHORIZED_NON_ADJUSTED_WHERE_AUTH_EXISTS,
	HOURS_SERVED_ALL,
	HOURS_BILLED_ALL,
	HOURS_AUTHORIZED_ALL,
	HOURS_AUTHORIZED_NON_ADJUSTED_ALL,
	INCLUDE_FOR_CLIENTS,
	INCLUDE_FOR_HOURS,
	REVENUE_CATEGORY,
	ETL_LAST_UPDATED_DATE,
	VISITS_ALL,
	VISITS_CLEAN_SHIFTS,
	VISITS_NEED_MAINTENANCE,
	CLIENT_ACQUIRED_FLAG,
	CLIENT_ACQUISITION_NAME
) as
WITH DATES AS 
(
		SELECT FIRST_DAY_OF_MONTH, PERIOD_NAME
		FROM REPORT.VW_EXECUTIVE_OPERATIONS_EXCELLENCE_UTILIZATION_DIM_DATE
	), CONTRACTS AS (
		SELECT CONTRACT_KEY, 
			CONTRACT_CODE, 
			CONTRACT_NAME, 
			REVENUE_CATEGORY,
			INCLUDE_FOR_EXEC_OPS_CLIENTS AS INCLUDE_FOR_CLIENTS,
			INCLUDE_FOR_EXEC_OPS_HOURS AS INCLUDE_FOR_HOURS,
			INCLUDE_FOR_OPS_PERF_HOURS
		FROM REPORT.VW_DASHBOARD_CONTRACTS
		WHERE INCLUDE_FOR_EXEC_OPS_CLIENTS = TRUE OR INCLUDE_FOR_EXEC_OPS_HOURS = TRUE
	), UTILIZATION_DATA AS (
		SELECT  DATA.PERIOD_BEGIN_DATE,
		    DATA.PERIOD_BEGIN_DATE AS REPORT_DATE,
			DATES.PERIOD_NAME,
			DATA.BRANCH_KEY,
			DATA.STATE,  
			DATA.OFFICE_NUMBER,
			DATA.OFFICE_NAME,
			DATA.SUPERVISOR_KEY,
			DATA.SUPERVISOR_CODE,
			DATA.ABSOLUTE_FIRST_SERVICE_DATE,
			DATA.CLIENT_KEY AS CLIENT_KEY_DATA, 
			DATA.CLIENT_NUMBER, 
			DATA.ORIGINAL_SOURCE_SYSTEM_ID,
			DATA.SOURCE_SYSTEM_ID,
			DATA.CONTRACT_KEY,
			DATA.CONTRACT_CODE,
			CONTRACT.CONTRACT_NAME,
			CONTRACT.INCLUDE_FOR_CLIENTS,
			CONTRACT.INCLUDE_FOR_HOURS,
			CONTRACT.REVENUE_CATEGORY,
			CASE WHEN CONTRACT.INCLUDE_FOR_CLIENTS = 1 THEN DATA.CLIENT_KEY END CLIENT_KEY,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN DATA.HOURS_BILLED END, 0) HOURS_BILLED_ALL,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN DATA.HOURS_SERVED END, 0) HOURS_SERVED_ALL,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN DATA.HOURS_AUTHORIZED END, 0) HOURS_AUTHORIZED_ALL,
			COALESCE(CASE WHEN CONTRACT.INCLUDE_FOR_OPS_PERF_HOURS=1 THEN DATA.OVER_AUTHED_HOURS END,0) AS OVER_AUTHED_HOURS,
			COALESCE(CASE WHEN CONTRACT.INCLUDE_FOR_OPS_PERF_HOURS=1 THEN DATA.HOURS_AUTHORIZED_NON_ADJUSTED END,0) AS HOURS_AUTHORIZED_NON_ADJUSTED_ALL,
			COALESCE(CASE WHEN CONTRACT.INCLUDE_FOR_OPS_PERF_HOURS=1 THEN DATA.HOURS_SERVED END,0) AS HOURS_SERVED,
			CASE WHEN CONTRACT.INCLUDE_FOR_OPS_PERF_HOURS=1 THEN DATA.CLIENT_KEY ELSE NULL END AS CLIENT_KEY_HOURS,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 AND NOT (NVL(DATA.HOURS_AUTHORIZED, 0) = 0 OR DATA.HOURS_AUTHORIZED > 900) THEN DATA.HOURS_SERVED END, 0) HOURS_SERVED_WHERE_AUTH_EXISTS,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 AND NOT (NVL(DATA.HOURS_AUTHORIZED, 0) = 0 OR DATA.HOURS_AUTHORIZED > 900) THEN DATA.HOURS_BILLED END, 0) HOURS_BILLED_WHERE_AUTH_EXISTS,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 AND NOT (NVL(DATA.HOURS_AUTHORIZED, 0) = 0 OR DATA.HOURS_AUTHORIZED > 900) THEN DATA.HOURS_AUTHORIZED END, 0) HOURS_AUTHORIZED_WHERE_AUTH_EXISTS,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 AND NOT (NVL(DATA.HOURS_AUTHORIZED, 0) = 0 OR DATA.HOURS_AUTHORIZED > 900) THEN DATA.HOURS_AUTHORIZED_NON_ADJUSTED END, 0) HOURS_AUTHORIZED_NON_ADJUSTED_WHERE_AUTH_EXISTS,
			DATA.ETL_LAST_UPDATED_DATE,
			DATA.VISITS_ALL,
			DATA.VISITS_CLEAN_SHIFTS,
			DATA.VISITS_NEED_MAINTENANCE,
            IFF(COALESCE(CCSI_BRANCH.BRANCH_KEY,CCSI_ACQUIRED_CLIENT.CLIENT_KEY,MATRIXCARE_BRANCH.BRANCH_KEY,ALTAMAHA_CLIENT.CLIENT_KEY,PRAETORIAN_ACQUIRED_CLIENT.CLIENT_KEY, PREFERRED_CLIENT.CLIENT_KEY) IS NULL, FALSE, TRUE) AS CLIENT_ACQUIRED_FLAG,
       CASE WHEN COALESCE(CCSI_BRANCH.BRANCH_KEY,CCSI_ACQUIRED_CLIENT.CLIENT_KEY) IS NOT NULL THEN 'CCSI' 
            WHEN MATRIXCARE_BRANCH.BRANCH_KEY IS NOT NULL THEN 'ADAPTIVE' 
            WHEN ALTAMAHA_CLIENT.CLIENT_KEY IS NOT NULL THEN 'ALTAMAHA'
			WHEN PREFERRED_CLIENT.CLIENT_KEY IS NOT NULL THEN 'PREFERRED'
            WHEN PRAETORIAN_ACQUIRED_CLIENT.CLIENT_KEY IS NOT NULL THEN 'PRAETORIAN' ELSE NULL END AS CLIENT_ACQUISITION_NAME
		FROM REPORT.UTILIZATION AS DATA
		JOIN CONTRACTS CONTRACT
			ON CONTRACT.CONTRACT_KEY = DATA.CONTRACT_KEY
		JOIN DATES DATES 
			ON DATES.FIRST_DAY_OF_MONTH = DATA.PERIOD_BEGIN_DATE 
       LEFT OUTER JOIN (SELECT DISTINCT BRANCH_KEY FROM HAH.DIM_BRANCH WHERE SOURCE_SYSTEM_ID = 8) CCSI_BRANCH
                        ON CCSI_BRANCH.BRANCH_KEY = DATA.ORIGINAL_BRANCH_KEY
      LEFT OUTER JOIN (SELECT DISTINCT CLIENT_KEY FROM HAH.FACT_CLIENT_ACQUIRED_MERGED WHERE NOTES = 'CCSI Acquired') CCSI_ACQUIRED_CLIENT
                        ON CCSI_ACQUIRED_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND PERIOD_BEGIN_DATE >= '2021-07-01'      
      LEFT OUTER JOIN (SELECT DISTINCT CLIENT_KEY FROM HAH.FACT_CLIENT_ACQUIRED_MERGED WHERE NOTES = 'Altamaha') ALTAMAHA_CLIENT
                        ON ALTAMAHA_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY  
       LEFT OUTER JOIN (SELECT DISTINCT CLIENT_KEY FROM HAH.FACT_CLIENT_ACQUIRED_MERGED WHERE NOTES = 'Praetorian') PRAETORIAN_ACQUIRED_CLIENT
                        ON PRAETORIAN_ACQUIRED_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY AND DATA.PERIOD_BEGIN_DATE >= '2022-01-01'
        LEFT OUTER JOIN (SELECT BRANCH_KEY FROM HAH.DIM_BRANCH WHERE branch_name like 'A__%' and system_code = 'MATRIXCARE') MATRIXCARE_BRANCH
      ON MATRIXCARE_BRANCH.BRANCH_KEY = DATA.ORIGINAL_BRANCH_KEY
		LEFT OUTER JOIN (SELECT DISTINCT CLIENT_KEY FROM HAH.FACT_CLIENT_ACQUIRED_MERGED WHERE NOTES = 'Preferred') PREFERRED_CLIENT
         ON PREFERRED_CLIENT.CLIENT_KEY = DATA.CLIENT_KEY
	  WHERE NVL(DATA.HOURS_SERVED, 0) > 0
	)
	SELECT DISTINCT PERIOD_BEGIN_DATE, PERIOD_NAME, STATE, BRANCH_KEY, OFFICE_NUMBER, OFFICE_NAME, SUPERVISOR_KEY, SUPERVISOR_CODE,ABSOLUTE_FIRST_SERVICE_DATE,
		CLIENT_KEY_DATA, CLIENT_NUMBER,ORIGINAL_SOURCE_SYSTEM_ID, SOURCE_SYSTEM_ID, CONTRACT_KEY, CONTRACT_CODE, CLIENT_KEY, 
		HOURS_SERVED_WHERE_AUTH_EXISTS, HOURS_BILLED_WHERE_AUTH_EXISTS, HOURS_AUTHORIZED_WHERE_AUTH_EXISTS, HOURS_AUTHORIZED_NON_ADJUSTED_WHERE_AUTH_EXISTS, 
		HOURS_SERVED_ALL, HOURS_BILLED_ALL, HOURS_AUTHORIZED_ALL, HOURS_AUTHORIZED_NON_ADJUSTED_ALL, 
		INCLUDE_FOR_CLIENTS, INCLUDE_FOR_HOURS, REVENUE_CATEGORY,
		ETL_LAST_UPDATED_DATE, VISITS_ALL, VISITS_CLEAN_SHIFTS, VISITS_NEED_MAINTENANCE,CLIENT_ACQUIRED_FLAG,CLIENT_ACQUISITION_NAME
	FROM UTILIZATION_DATA;