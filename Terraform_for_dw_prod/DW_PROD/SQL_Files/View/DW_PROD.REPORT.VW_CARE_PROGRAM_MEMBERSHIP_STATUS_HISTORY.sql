create or replace view DW_PROD.REPORT.VW_CARE_PROGRAM_MEMBERSHIP_STATUS_HISTORY(
	CLIENT_KEY,
	ROSTER_CLIENT_KEY,
	PROGRAM_CODE,
	REPORT_DATE,
	CLIENT_FIRST_NAME,
	CLIENT_LAST_NAME,
	STATUS_AT_END_OF_MONTH,
	STATUS_AT_START_OF_MONTH,
	STATUS_CHANGE_REASON,
	TILL_DATE
) as 
------------------------------------------------------------------------------------------------------------------------------
/*
Object Type :   View
Object Name :   VW_CARE_PROGRAM_MEMBERSHIP_STATUS_HISTORY
Author      :   ASHISH SHARMA
Description :
    - Provides Monthly Summary of CARE PROGRAM MEMBERSHIP STATUS
*/
--*****************************************************************************************************************************
-- CHANGE LOG :
-- Version  Date(MM/DD/YYYY)    Author              Change Description
-- -------- ----------------    ------------------  ---------------------------------------------------------------------------
-- 1.0      02/05/2024          ASHISH SHARMA       Initial development
-------------------------------------------------------------------------------------------------------------------------------
WITH LCM AS (
    SELECT 
        DISTINCT        
        COALESCE(RAM.PARTNER_CLIENT_KEY,RAM2.PARTNER_CLIENT_KEY,RAM3.PARTNER_CLIENT_KEY,DCM.CLIENT_KEY) AS ROSTER_CLIENT_KEY,
        CASE WHEN CPM.PROGRAM_CODE  IN ('HMNYHF','PAHW','OHMPA','HMIN','OHMIN')
            THEN ROSTER_CLIENT_KEY
            ELSE DCM.CLIENT_KEY
        END AS CLIENT_KEY,
        CPM.PROGRAM_CODE,
        TO_DATE(DATE_TRUNC(MONTH,CPM.ETL_LAST_UPDATED_DATE)) REPORT_DATE,
        NVL(DCM.CLIENT_FIRST_NAME,CPM.CLIENT_FIRST_NAME ) AS CLIENT_FIRST_NAME ,
        NVL(DCM.CLIENT_LAST_NAME,CPM.CLIENT_LAST_NAME ) AS CLIENT_LAST_NAME ,
        LAST_VALUE(CPM.STATUS) OVER (PARTITION BY CPM.CLIENT_KEY , CPM.PROGRAM_CODE , DATE_TRUNC(MONTH,CPM.ETL_LAST_UPDATED_DATE)  ORDER BY CPM.ETL_LAST_UPDATED_DATE ) STATUS_CURRENT,
        FIRST_VALUE(CPM.STATUS) OVER (PARTITION BY CPM.CLIENT_KEY , CPM.PROGRAM_CODE , DATE_TRUNC(MONTH,CPM.ETL_LAST_UPDATED_DATE)  ORDER BY CPM.ETL_LAST_UPDATED_DATE) STATUS_PREVIOUS ,
        FIRST_VALUE(STATUS_CHANGE_REASON) OVER (PARTITION BY DATE_PART(MONTH,CPM.ETL_LAST_UPDATED_DATE), CPM.CLIENT_KEY , CPM.PROGRAM_CODE  ORDER BY CPM.ETL_LAST_UPDATED_DATE DESC) AS STATUS_CHANGE_REASON,
        FIRST_VALUE(DATE_TRUNC(MONTH,CPM.ETL_INSERTED_DATE::DATE)) OVER (PARTITION BY CPM.CLIENT_KEY, CPM.PROGRAM_CODE ORDER BY CPM.ETL_INSERTED_DATE) AS FIRST_DATE_PROGRAM,
        (CASE WHEN DAY(CPM.ETL_LAST_UPDATED_DATE) = 1 THEN 1 ELSE 0 END) IS_START_MONTH  
        , LAST_VALUE(CASE WHEN CPM.STATUS = 'Disenrolled' THEN DATE_TRUNC(MONTH,CPM.ETL_LAST_UPDATED_DATE)::DATE END) IGNORE NULLS
              OVER (PARTITION BY CPM.CLIENT_KEY,CPM.PROGRAM_CODE 
                    ORDER BY CPM.ETL_LAST_UPDATED_DATE  
                    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS DIS_REPORT_DATE
    FROM APP_DB_PROD.CARE_COORDINATION.CLIENT_PROGRAM_MEMBERSHIP_STATUS_HISTORY CPM
    INNER JOIN APP_DB_PROD.CARE_COORDINATION.CARE_PROGRAM_CRITERIA CPC 
            ON CPC.PROGRAM_CODE = CPM.PROGRAM_CODE AND CPC.IS_CURRENT 
    LEFT JOIN DW_PROD.INTEGRATION.DIM_CLIENT_MERGED DCM 
        ON DCM.ORIGINAL_CLIENT_KEY = CPM.CLIENT_KEY 
    LEFT JOIN DW_PROD.INTEGRATION.ROSTER_AMS_MAPPING_HISTORY RAM 
        ON CPM.CLIENT_KEY = RAM.AMS_CLIENT_KEY AND CPC.ROSTER_NAME = RAM.ROSTER_NAME --AND RAM.AMS_CLIENT_KEY <> RAM.PARTNER_CLIENT_KEY 
    LEFT JOIN DW_PROD.REPORT.VW_GATOR_CLIENT_MAPPING CML 
        ON CPM.CLIENT_KEY = CML.CLIENT_KEY AND  CML.ORIGINAL_SOURCE_SYSTEM = 'DW'
    LEFT JOIN DW_PROD.INTEGRATION.ROSTER_AMS_MAPPING_HISTORY RAM2 
        ON CML.ORIGINAL_CLIENT_KEY = RAM2.AMS_CLIENT_KEY AND CPC.ROSTER_NAME = RAM2.ROSTER_NAME
    LEFT JOIN DW_PROD.REPORT.VW_GATOR_CLIENT_MAPPING CML2 
        ON CPM.CLIENT_KEY = CML2.CLIENT_KEY AND  CML2.ORIGINAL_SOURCE_SYSTEM = 'DW'
    LEFT JOIN DW_PROD.INTEGRATION.ROSTER_AMS_MAPPING_HISTORY RAM3 
        ON CML2.CLIENT_KEY = RAM3.AMS_CLIENT_KEY AND CPC.ROSTER_NAME = RAM3.ROSTER_NAME 
    ORDER BY CLIENT_KEY ,ROSTER_CLIENT_KEY, CPM.PROGRAM_CODE, REPORT_DATE
)
,LCM_REPORT_DATES AS (
    SELECT  ROSTER_CLIENT_KEY,CLIENT_KEY,PROGRAM_CODE,
    DD.FIRST_DAY_OF_MONTH AS REPORT_FILL_DATE,
    LH.CLIENT_FIRST_NAME, LH.CLIENT_LAST_NAME,
--    LH.IS_START_MONTH,
    NVL(LH.DIS_REPORT_DATE ,DATE_TRUNC(MONTH, CURRENT_DATE)::DATE) AS TILL_DATE
    FROM LCM LH 
    INNER JOIN DW_PROD.HAH.DIM_DATE DD
        ON DD.FIRST_DAY_OF_MONTH  
                BETWEEN  LH.FIRST_DATE_PROGRAM 
                AND NVL(DIS_REPORT_DATE ,DATE_TRUNC(MONTH, CURRENT_DATE)::DATE)
        GROUP BY ALL 
)
,LCM_STAT AS(
    SELECT CD.CLIENT_KEY, 
        CD.PROGRAM_CODE, 
        CD.ROSTER_CLIENT_KEY,
        CD.REPORT_FILL_DATE, 
--        CD.IS_START_MONTH,
        LC1.STATUS_PREVIOUS, 
        LC1.STATUS_CURRENT,
        CD.TILL_DATE
    FROM LCM_REPORT_DATES CD LEFT JOIN LCM LC1 
        ON CD.CLIENT_KEY = LC1.CLIENT_KEY 
        AND CD.PROGRAM_CODE = LC1.PROGRAM_CODE 
        AND CD.REPORT_FILL_DATE = LC1.REPORT_DATE
        GROUP BY ALL    
)
,LCM_GAPFILL AS (
    SELECT  DISTINCT LRD.CLIENT_KEY,
            LRD.ROSTER_CLIENT_KEY,
            LRD.PROGRAM_CODE,              
            LRD.CLIENT_FIRST_NAME, 
            LRD.CLIENT_LAST_NAME,
            LRD.REPORT_FILL_DATE AS NEW_REPORT_DATE, 
            LH.IS_START_MONTH,
            CASE WHEN LH.REPORT_DATE = LRD.REPORT_FILL_DATE  THEN FALSE
                ELSE TRUE 
             END AS FILL_DATE_CHECK,  
            CASE WHEN LH.REPORT_DATE = LRD.REPORT_FILL_DATE  THEN LRD.REPORT_FILL_DATE
                ELSE NULL 
             END AS FILL_DATE_VAL,
             CASE WHEN LH.REPORT_DATE = LRD.REPORT_FILL_DATE  THEN LRD.REPORT_FILL_DATE
                ELSE LAG(LRD.REPORT_FILL_DATE) OVER (PARTITION BY LRD.CLIENT_KEY,LRD.ROSTER_CLIENT_KEY,
                                    LRD.PROGRAM_CODE,LRD.CLIENT_FIRST_NAME,LRD.CLIENT_LAST_NAME ORDER BY NEW_REPORT_DATE) --'2023-12-01' 
             END AS FILL_DATE             
             , CASE WHEN NOT FILL_DATE_CHECK THEN NEW_REPORT_DATE 
                    ELSE    LAG(CASE WHEN FILL_DATE_VAL IS NOT NULL THEN LRD.REPORT_FILL_DATE END) IGNORE NULLS        
                            OVER (PARTITION BY LRD.CLIENT_KEY,LRD.ROSTER_CLIENT_KEY,LRD.PROGRAM_CODE,
                                        LRD.CLIENT_FIRST_NAME,LRD.CLIENT_LAST_NAME ORDER BY NEW_REPORT_DATE)
                END AS FILL_NEW_DATE
            , LS.TILL_DATE
    FROM LCM_REPORT_DATES LRD
    LEFT JOIN LCM LH
        ON LH.ROSTER_CLIENT_KEY = LRD.ROSTER_CLIENT_KEY 
            AND LH.CLIENT_KEY = LRD.CLIENT_KEY
            AND LH.PROGRAM_CODE = LRD.PROGRAM_CODE
            AND LH.REPORT_DATE = LRD.REPORT_FILL_DATE
     INNER JOIN LCM_STAT LS 
        ON LS.ROSTER_CLIENT_KEY = LRD.ROSTER_CLIENT_KEY
        AND LS.CLIENT_KEY = LRD.CLIENT_KEY
        AND LS.PROGRAM_CODE = LRD.PROGRAM_CODE
        AND LS.REPORT_FILL_DATE = LRD.REPORT_FILL_DATE
)
,FINAL_LCM AS (
    SELECT DISTINCT 
                FLH.CLIENT_KEY, 
                FLH.ROSTER_CLIENT_KEY, 
                FLH.PROGRAM_CODE, 
                FLH.NEW_REPORT_DATE AS REPORT_DATE,
                NVL(FLH.CLIENT_FIRST_NAME,LH_FILL.CLIENT_FIRST_NAME)AS CLIENT_FIRST_NAME, 
                NVL(FLH.CLIENT_LAST_NAME,LH_FILL.CLIENT_LAST_NAME) AS CLIENT_LAST_NAME,               
                CASE WHEN FLH.FILL_DATE <> FLH.NEW_REPORT_DATE
                    THEN LH_FILL.STATUS_CURRENT
                    ELSE LH.STATUS_CURRENT
                END AS STATUS_AT_END_OF_MONTH, 
                CASE WHEN FLH.FILL_DATE <> FLH.NEW_REPORT_DATE
                    THEN LH_FILL.STATUS_CURRENT
                    ELSE LH.STATUS_PREVIOUS 
                END AS STATUS_AT_START_OF_MONTH,
                CASE WHEN FLH.FILL_DATE <> FLH.NEW_REPORT_DATE
                    THEN LH_FILL.STATUS_CHANGE_REASON
                    ELSE LH.STATUS_CHANGE_REASON 
                END AS STATUS_CHANGE_REASON,
                LAG(STATUS_AT_END_OF_MONTH) IGNORE NULLS        
                OVER (PARTITION BY FLH.CLIENT_KEY,FLH.ROSTER_CLIENT_KEY,FLH.PROGRAM_CODE,
                            NVL(FLH.CLIENT_FIRST_NAME,LH_FILL.CLIENT_FIRST_NAME),NVL(FLH.CLIENT_LAST_NAME,LH_FILL.CLIENT_LAST_NAME) 
                            ORDER BY FLH.NEW_REPORT_DATE) AS PREV_STATUS_AT_END_OF_MONTH,
                (CASE WHEN LH.IS_START_MONTH = 1 THEN STATUS_AT_START_OF_MONTH ELSE COALESCE(PREV_STATUS_AT_END_OF_MONTH,STATUS_AT_START_OF_MONTH) END) AS FINAL_STATUS_AT_START_OF_MONTH,
                FLH.TILL_DATE
    FROM LCM_GAPFILL FLH
    LEFT JOIN LCM LH
        ON FLH.CLIENT_KEY = LH.CLIENT_KEY 
        AND FLH.ROSTER_CLIENT_KEY = LH.ROSTER_CLIENT_KEY 
        AND FLH.PROGRAM_CODE = LH.PROGRAM_CODE 
        AND FLH.NEW_REPORT_DATE = LH.REPORT_DATE
   INNER JOIN LCM_GAPFILL FLH_COPY
       ON FLH.CLIENT_KEY = FLH_COPY.CLIENT_KEY 
        AND FLH.ROSTER_CLIENT_KEY = FLH_COPY.ROSTER_CLIENT_KEY 
        AND FLH.PROGRAM_CODE = FLH_COPY.PROGRAM_CODE 
        AND FLH.NEW_REPORT_DATE = FLH_COPY.NEW_REPORT_DATE 
    LEFT JOIN LCM LH_FILL
        ON FLH_COPY.CLIENT_KEY = LH_FILL.CLIENT_KEY 
        AND FLH_COPY.ROSTER_CLIENT_KEY = LH_FILL.ROSTER_CLIENT_KEY 
        AND FLH_COPY.PROGRAM_CODE = LH_FILL.PROGRAM_CODE 
        AND NVL(FLH_COPY.FILL_NEW_DATE,FLH_COPY.NEW_REPORT_DATE) = LH_FILL.REPORT_DATE         
)
SELECT DISTINCT FLCM.CLIENT_KEY,
        FLCM.ROSTER_CLIENT_KEY,
        FLCM.PROGRAM_CODE,
        FLCM.REPORT_DATE,
        FLCM.CLIENT_FIRST_NAME,
        FLCM.CLIENT_LAST_NAME,
        FLCM.STATUS_AT_END_OF_MONTH,
        NVL(FINAL_STATUS_AT_START_OF_MONTH,STATUS_AT_END_OF_MONTH) AS STATUS_AT_START_OF_MONTH,
        FLCM.STATUS_CHANGE_REASON,
        FLCM.TILL_DATE
FROM FINAL_LCM FLCM
ORDER BY FLCM.CLIENT_KEY ,FLCM.ROSTER_CLIENT_KEY, FLCM.PROGRAM_CODE, FLCM.REPORT_DATE;