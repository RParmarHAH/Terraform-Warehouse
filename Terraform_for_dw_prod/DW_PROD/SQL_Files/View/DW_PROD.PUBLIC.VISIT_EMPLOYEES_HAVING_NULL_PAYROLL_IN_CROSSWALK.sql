create or replace view DW_PROD.PUBLIC.VISIT_EMPLOYEES_HAVING_NULL_PAYROLL_IN_CROSSWALK(
	REASON,
	SOURCE_SYSTEM_ID,
	SOURCE_SYSTEM,
	SYSTEM_CODE,
	MARKET,
	OFFICE,
	VISIT_EMPLOYEE_KEY,
	AMS_MERGED_EMPLOYEE_KEY,
	EMPLOYEE_ID,
	EMPLOYEE_FIRST_NAME,
	EMPLOYEE_LAST_NAME,
	EMPLOYEE_PID,
	EMPLOYEE_DOB,
	HIRE_DATE,
	PAYROLL_ID,
	FIRST_SRVC_ALL_TIME,
	FIRST_SRVC_PAST_6_WKS,
	LAST_SRVC_PAST_6_WKS,
	NUM_VISITS_PAST_6_WKS,
	HRS_SRVD_PAST_6_WKS,
	EMPLOYEE_ENTERPRISE_ID,
	WORKDAY_INTERNAL_ID,
	AMS_EMPLOYEE_KEY,
	AMS_SOURCE_SYSTEM_ID,
	AMS_SYSTEM_CODE,
	AMS_EMPLOYEE_ID,
	AMS_IVR_ID,
	AMS_PUBLIC_ID,
	PAYROLL_EMPLOYEE_KEY,
	PAYROLL_SOURCE_SYSTEM_ID,
	PAYROLL_SYSTEM_CODE,
	PAYROLL_EMPLOYEE_ID,
	DW_PAYROLL_ORIGINAL_EMPLOYEE_KEY,
	DW_PAYROLL_ORIGINAL_EMPLOYEE_ID,
	DW_PAYROLL_EMPLOYEE_KEY,
	DW_PAYROLL_EMPLOYEE_ID
) as (
WITH  EMPLOYEES AS (
	 WITH FIRST_SERVICE_DATE AS (
		SELECT VIS.EMPLOYEE_KEY,
		       MIN(VIS.SERVICE_DATE) AS FIRST_SERVICE_DATE
		FROM DW_PROD.INTEGRATION.FACT_VISIT_MERGED AS VIS
		WHERE VIS.SYSTEM_CODE NOT IN ('PREFERRED', 'EDISON')
		GROUP BY 1
	), CURR_WEEK_CAREGIVERS AS (
		SELECT VIS.SOURCE_SYSTEM_ID, 
		       STM.SOURCE_SYSTEM, 
		       VIS.SYSTEM_CODE, 
		       BR.OFFICE_STATE_CODE AS MARKET,
		       BR.DETAILED_OFFICE_NAME AS OFFICE,
		       VIS.EMPLOYEE_ID, 
		       EMP.EMPLOYEE_FIRST_NAME, EMP.EMPLOYEE_LAST_NAME, EMP.EMPLOYEE_HIRE_DATE AS HIRE_DATE, EMP.EMPLOYEE_PID, EMP.EMPLOYEE_DOB, EMP.PAYROLL_ID,
		       VIS.EMPLOYEE_KEY,
		       EMP.EMPLOYEE_KEY AS AMS_MERGED_EMPLOYEE_KEY,
		       MIN(VIS.SERVICE_DATE) AS MIN_SERVICE_DATE,
		       MAX(VIS.SERVICE_DATE) AS MAX_SERVICE_DATE,
		       COUNT(VIS.VISIT_KEY) AS NUM_VISITS,
		       SUM(IFNULL(VIS.HOURS_SERVED, 0)) AS SUM_WK_HRS
		FROM DW_PROD.INTEGRATION.FACT_VISIT_MERGED AS VIS
		INNER JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_AMS_MERGED  AS EMP ON EMP.ORIGINAL_EMPLOYEE_KEY = VIS.ORIGINAL_EMPLOYEE_KEY AND IFNULL( EMP.EMPLOYEE_CATEGORY, 'Caregiver') <> 'ADMIN'
		LEFT OUTER JOIN DW_PROD.HAH.VW_DIM_SOURCE_SYSTEM_TO_MARKET AS STM ON VIS.SOURCE_SYSTEM_ID = STM.SOURCE_SYSTEM_ID AND VIS.SYSTEM_CODE = STM.SYSTEM_CODE
		LEFT OUTER JOIN DW_PROD.INTEGRATION.DIM_BRANCH_MERGED AS BR ON BR.ORIGINAL_BRANCH_KEY = VIS.ORIGINAL_BRANCH_KEY
		WHERE (VIS.VISIT_STATUS_CODE IN ('v04') OR UPPER( VIS.CONFIRMED_FLAG) = 'YES')
		AND VIS.SYSTEM_CODE NOT IN ('PREFERRED', 'EDISON')
		AND VIS.SERVICE_DATE BETWEEN CAST( '2023-10-07' AS DATE) AND CAST( '2023-11-26' AS DATE)
		GROUP BY ALL
	), EMP_LIST AS (
		SELECT CWC.SOURCE_SYSTEM_ID,CWC.SOURCE_SYSTEM, CWC.SYSTEM_CODE, CWC.MARKET, CWC.OFFICE,
		   CWC.EMPLOYEE_KEY AS VISIT_EMPLOYEE_KEY,AMS_MERGED_EMPLOYEE_KEY,
		   CWC.EMPLOYEE_ID,CWC.EMPLOYEE_FIRST_NAME, CWC.EMPLOYEE_LAST_NAME, CWC.EMPLOYEE_PID, CWC.EMPLOYEE_DOB,
		   CWC.HIRE_DATE, CWC.PAYROLL_ID,
	       FSD.FIRST_SERVICE_DATE AS FIRST_SRVC_ALL_TIME,
	       CWC.MIN_SERVICE_DATE AS FIRST_SRVC_PAST_6_WKS,
	       CWC.MAX_SERVICE_DATE AS LAST_SRVC_PAST_6_WKS,
	       CWC.NUM_VISITS AS NUM_VISITS_PAST_6_WKS,
	       CWC.SUM_WK_HRS AS HRS_SRVD_PAST_6_WKS,
	       ECW.EMPLOYEE_ENTERPRISE_ID, ECW.WORKDAY_INTERNAL_ID,
	       ECW.AMS_EMPLOYEE_KEY,
	       ECW.AMS_SOURCE_SYSTEM_ID, ECW.AMS_SYSTEM_CODE, ECW.AMS_EMPLOYEE_ID, ECW.AMS_IVR_ID, ECW.AMS_PUBLIC_ID,
	       ECW.PAYROLL_EMPLOYEE_KEY,
	       ECW.PAYROLL_SOURCE_SYSTEM_ID, ECW.PAYROLL_SYSTEM_CODE, ECW.PAYROLL_EMPLOYEE_ID
		FROM CURR_WEEK_CAREGIVERS AS CWC 
		LEFT OUTER JOIN FIRST_SERVICE_DATE AS FSD ON FSD.EMPLOYEE_KEY = CWC.EMPLOYEE_KEY
		LEFT OUTER JOIN DW_PROD.INTEGRATION.EMPLOYEE_CROSS_WALK AS ECW 
			ON CWC.AMS_MERGED_EMPLOYEE_KEY = ECW.AMS_EMPLOYEE_KEY AND INACTIVE <> TRUE AND DUP_FLAG <> TRUE
		WHERE ECW.PAYROLL_EMPLOYEE_ID IS NULL
		AND UPPER( CWC.OFFICE) NOT LIKE '%TRAINING%'
		AND CWC.SUM_WK_HRS > 0
		ORDER BY CWC.SOURCE_SYSTEM_ID,CWC.SOURCE_SYSTEM, CWC.SYSTEM_CODE, MARKET, OFFICE, CWC.EMPLOYEE_LAST_NAME, CWC.EMPLOYEE_FIRST_NAME
		)
		SELECT * FROM EMP_LIST
)
, FINAL_EMP AS (
	SELECT DISTINCT 
        CASE 
		    WHEN PAY_EMP.EMPLOYEE_KEY IS NULL THEN 'NOT IN DW'
		    WHEN AMS_AP.CLUSTER_ID IS NULL AND PAYROLL_AP.CLUSTER_ID IS NULL THEN 'DATA QUALITY ISSUE'
            WHEN NVL(AMS_AP.CLUSTER_ID, '') <> PAYROLL_AP.CLUSTER_ID  THEN 'PAYROLL MAPPED WITH OTHER AMS'
            WHEN AMS_AP.CLUSTER_ID = PAYROLL_AP.CLUSTER_ID    THEN 'TWO AMS MAPPED WITH SAME PAYROLL'
	        ELSE 'OTHER'
       END AS REASON, EMP.*,
       P.ORIGINAL_EMPLOYEE_KEY AS DW_PAYROLL_ORIGINAL_EMPLOYEE_KEY,P.ORIGINAL_EMPLOYEE_NUMBER AS DW_PAYROLL_ORIGINAL_EMPLOYEE_ID,
       P.EMPLOYEE_KEY AS DW_PAYROLL_EMPLOYEE_KEY,P.EMPLOYEE_ID AS DW_PAYROLL_EMPLOYEE_ID
	FROM EMPLOYEES EMP
	LEFT JOIN DW_PROD.HAH.DIM_EMPLOYEE AMS_EMP
		ON AMS_EMP.EMPLOYEE_KEY = EMP.AMS_MERGED_EMPLOYEE_KEY
	LEFT JOIN (
		    SELECT EMP.EMPLOYEE_KEY,EMP.SOURCE_SYSTEM_ID, EMP.SYSTEM_CODE,EMP.EMPLOYEE_PID,
		    	   EMP.EMPLOYEE_FIRST_NAME, EMP.EMPLOYEE_LAST_NAME,EMP.EMPLOYEE_DOB
		    FROM DW_PROD.HAH.DIM_EMPLOYEE EMP
			JOIN DW_PROD.HAH.DIM_SOURCE_SYSTEM SS 
				ON EMP.SOURCE_SYSTEM_ID = SS.SOURCE_SYSTEM_ID
			WHERE SS.SOURCE_SYSTEM_TYPE IN ('Payroll')
		) AS PAY_EMP
		ON (UPPER(AMS_EMP.EMPLOYEE_FIRST_NAME) = UPPER(PAY_EMP.EMPLOYEE_FIRST_NAME)
				AND UPPER(AMS_EMP.EMPLOYEE_LAST_NAME) = UPPER(PAY_EMP.EMPLOYEE_LAST_NAME)
				AND AMS_EMP.EMPLOYEE_DOB = PAY_EMP.EMPLOYEE_DOB)
			OR  (UPPER(AMS_EMP.EMPLOYEE_FIRST_NAME) = UPPER(PAY_EMP.EMPLOYEE_FIRST_NAME)
				AND UPPER(AMS_EMP.EMPLOYEE_PID) = UPPER(PAY_EMP.EMPLOYEE_PID))
			OR  (UPPER(AMS_EMP.EMPLOYEE_LAST_NAME) = UPPER(PAY_EMP.EMPLOYEE_LAST_NAME)
				AND UPPER(AMS_EMP.EMPLOYEE_PID) = UPPER(PAY_EMP.EMPLOYEE_PID))
	LEFT JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_PAYROLL_MERGE_DEDUPE P 
		ON P.ORIGINAL_EMPLOYEE_KEY = PAY_EMP.EMPLOYEE_KEY
	LEFT JOIN DW_PROD.INTEGRATION.DIM_EMPLOYEE_AMS_MERGED AMS
		ON AMS.ORIGINAL_EMPLOYEE_KEY = EMP.AMS_MERGED_EMPLOYEE_KEY
	LEFT JOIN DW_PROD.INTEGRATION.AMS_PAYROLL_MAPPING_OUTPUT AMS_AP
		ON EMP.AMS_MERGED_EMPLOYEE_KEY = AMS_AP.ID
	LEFT JOIN DW_PROD.INTEGRATION.AMS_PAYROLL_MAPPING_OUTPUT PAYROLL_AP
		ON P.EMPLOYEE_KEY = PAYROLL_AP.ID
	LEFT JOIN DW_PROD.INTEGRATION.FACT_AMS_PAYROLL_MAPPING APM 
		ON APM.AMS_EMPLOYEE_KEY = EMP.AMS_MERGED_EMPLOYEE_KEY 
			AND APM.PAYROLL_EMPLOYEE_KEY = P.EMPLOYEE_KEY
)
SELECT * 
FROM FINAL_EMP 
ORDER BY 1
);