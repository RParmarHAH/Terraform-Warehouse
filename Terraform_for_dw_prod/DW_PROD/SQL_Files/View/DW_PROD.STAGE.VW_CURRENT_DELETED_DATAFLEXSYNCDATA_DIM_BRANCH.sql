create or replace view DW_PROD.STAGE.VW_CURRENT_DELETED_DATAFLEXSYNCDATA_DIM_BRANCH(
	BRANCH_KEY
) as
WITH DEDUPE_EMP as
(
SELECT DISTINCT NVL(CAST(S.EMPLOYEE_NUMBER AS varchar),CAST(M.EMPLOYEE_ID AS varchar)) Dedupe_Emp_number,S.MASTER_EMP_ID Dedupe_Master_ID,M.*
FROM HAH.DIM_EMPLOYEE M
left outer join 
(
select md5(COALESCE(M.DBNAME,'') || '-' || UPPER(NVL(TRIM(substring(M.MASTER_ID,3)),'')) || '-'  ||  '1900-01-01' || '-' || 'DATAFLEXSYNCDATA') AS EMPLOYEE_KEY
,M.NUMBER EMPLOYEE_NUMBER
,substring(M.MASTER_ID,3) MASTER_EMP_ID
,TRIM(M.DbName) SYSTEM_CODE
from DISC_DEDUPE_PROD.DATAFLEXSYNCDATA.EMPLOYEE_MATCH_LIST M
) S
ON S.EMPLOYEE_KEY=M.EMPLOYEE_KEY
LEFT JOIN  
(
select md5(COALESCE(D.DBNAME,'') || '-' || UPPER(NVL(TRIM(substring(D.MASTER_ID,3)), '')) || '-'  ||  '1900-01-01' || '-' || 'DATAFLEXSYNCDATA') AS EMPLOYEE_KEY
,substring(D.MASTER_ID,3) EMPLOYEE_NUMBER
,substring(D.MASTER_ID,3) MASTER_EMP_ID
,TRIM(D.DbName) SYSTEM_CODE
from DISC_DEDUPE_PROD.DATAFLEXSYNCDATA.EMPLOYEE_MASTER_LIST D
) L
ON M.EMPLOYEE_KEY=L.EMPLOYEE_KEY
)
,RISKCONNECT_HIERARCHY AS (
	SELECT *
	FROM (
		SELECT *, 
			-- Give preference to nodes that are not marked inactive (e.g. office 730)
			CHARINDEX('inactive', LOWER(NODE_KEY)) INACTIVE_CHECK_1,
			CHARINDEX('inactive', LOWER(NODE_CODE)) INACTIVE_CHECK_2,
			CHARINDEX('inactive', LOWER(NODE_NAME)) INACTIVE_CHECK_3,
		ROW_NUMBER() OVER(PARTITION BY STATE, COALESCE(OFFICE_NUMBER, OFFICENO) ORDER BY GREATEST(NVL(INACTIVE_CHECK_1, 0), NVL(INACTIVE_CHECK_2, 0), NVL(INACTIVE_CHECK_3, 0))) AS ROW_NUMBER
		FROM DISC_PROD.STAGE.RISKCONNECT_HIERARCHY
	) L
	WHERE L.ROW_NUMBER = 1
), HR_OFFICE_MAPPING AS (
	SELECT *
	FROM (
		SELECT *, COUNT(*) OVER(PARTITION BY STATE, OFFICE_NUMBER) AS COUNT_OF_ROWS
		FROM DISC_PROD.STAGE.HR_OFFICE_MAPPING
	) L
	WHERE L.COUNT_OF_ROWS = 1
), HAH_OFFICES AS (
	SELECT OFFICES.STATE,
		TRY_CAST(OFFICES.OFFICENUMBER AS INT) AS OFFICE_NUMBER,
		OFFICES.OFFICENAME AS OFFICE_NAME,
		OFFICES.ADDRESS AS OFFICE_ADDRESS1,
		OFFICES.ADDRESS2 AS OFFICE_ADDRESS2,
		OFFICES.CITY AS OFFICE_CITY,
		OFFICES.ZIP AS OFFICE_ZIP,
		OFFICES.PHONE AS OFFICE_PHONE,
		OFFICES.TOLLFREE AS OFFICE_TOLL_FREE_PHONE,
		OFFICES.FAX AS OFFICE_FAX,
		OFFICES.GP_DB,
		TRIM( OFFICES.Email) AS Primary_Branch_Email,
		CAST(NULL AS VARCHAR(10)) AS Secondary_Branch_Email,
		OFFICES.OFFICEMANAGER AS OFFICEMANAGER1,
		CAST(NULL AS VARCHAR(10)) AS OFFICEMANAGER2,
		OFFICES.ETL_LAST_UPDATED_DATE
	FROM DISC_PROD.HAHUSERS.LOGIN_OFFICE AS OFFICES
	WHERE TRY_CAST(OFFICES.OFFICENUMBER AS INT) IS NOT NULL
		AND OFFICES.STATUS > 0
		AND NOT (OFFICES.STATE = 'GA' AND CAST(OFFICES.OFFICENUMBER AS INT) >= 900) -- Excluding new GA offices (except for original HAH GA offices)
		AND OFFICES.ETL_DELETED_FLAG = TRUE AND CAST(OFFICES.ETL_LAST_UPDATED_DATE AS DATE) IN (SELECT CAST(MAX(ETL_LAST_UPDATED_DATE) AS DATE) FROM DISC_PROD.HAHUSERS.LOGIN_OFFICE)
), KEY_METRIC_OFFICES AS (
	SELECT TRIM(KEY_MET_OFFICES.OFFICESTATE) AS STATE, TRY_CAST(KEY_MET_OFFICES.OFFICENUMBER AS INT) AS OFFICE_NUMBER, 
		UPPER(TRIM(KEY_MET_OFFICES.OFFICENAME)) AS OFFICE_NAME, KEY_MET_OFFICES.ETL_LAST_UPDATED_DATE 
	FROM DISC_PROD.HAH_REPORTING.KEYMETOFFICES AS KEY_MET_OFFICES
	WHERE TRY_CAST(KEY_MET_OFFICES.OFFICENUMBER AS INT) IS NOT NULL
	AND KEY_MET_OFFICES.ETL_DELETED_FLAG = TRUE 
		AND CAST(KEY_MET_OFFICES.ETL_LAST_UPDATED_DATE AS DATE) IN (SELECT CAST(MAX(ETL_LAST_UPDATED_DATE) AS DATE) FROM DISC_PROD.HAH_REPORTING.KEYMETOFFICES)
), OFFICE_LIST AS (
	SELECT 3 AS SOURCE_SYSTEM_ID, DBNAME AS SYSTEM_CODE, DBNAME AS DBNAME, DBNAME AS STATE, OFFICENUMBER, OFFICENAME, PAYROLLBATCHNAME, ETL_LAST_UPDATED_DATE
	FROM DISC_PROD.DATAFLEXSYNCDATA.HIST_DFOFFICES
	 WHERE ETL_DELETED_FLAG = TRUE
        AND CAST(ETL_LAST_UPDATED_DATE AS DATE) IN (SELECT CAST(MAX(ETL_LAST_UPDATED_DATE) AS DATE) FROM DISC_PROD.DATAFLEXSYNCDATA.HIST_DFOFFICES)
	UNION ALL
	-- Corporate/offices missing in Dataflex but required for Fact_Budget, etc
	SELECT IFF(HAH_OFFICES.OFFICE_NUMBER = 0, 5, 3) AS SOURCE_SYSTEM_ID,
		IFF(HAH_OFFICES.OFFICE_NUMBER = 0, (SELECT TOP 1 SOURCE_SYSTEM_NAME FROM HAH.DIM_SOURCE_SYSTEM WHERE SOURCE_SYSTEM_ID = 5), TRIM(UPPER(HAH_OFFICES.STATE))) AS SYSTEM_CODE,
		IFF(HAH_OFFICES.OFFICE_NUMBER = 0, HAH_OFFICES.GP_DB, TRIM(UPPER(HAH_OFFICES.STATE))) AS DBNAME,
		TRIM(UPPER(HAH_OFFICES.STATE)) AS STATE,
		HAH_OFFICES.OFFICE_NUMBER,
		-- For backwards compatibility with old logic, some offices are hashed with uppercase office names whilst others are not
		UPPER(TRIM(
			CASE HAH_OFFICES.OFFICE_NUMBER 
				WHEN 210 THEN HAH_OFFICES.OFFICE_NAME
				WHEN 417 THEN REPLACE(HAH_OFFICES.OFFICE_NAME, 'Options of', '')
				WHEN 418 THEN REPLACE(HAH_OFFICES.OFFICE_NAME, 'ADS')
				WHEN 748 THEN HAH_OFFICES.OFFICE_NAME
			ELSE HAH_OFFICES.OFFICE_NAME END
		)) AS OFFICE_NAME,
		NULL AS PAYROLLBATCHNAME, 
		HAH_OFFICES.ETL_LAST_UPDATED_DATE 
	FROM HAH_OFFICES AS HAH_OFFICES
	LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.DFOFFICES AS DFOFFICES
		ON DFOFFICES.DBNAME = HAH_OFFICES.STATE AND DFOFFICES.OFFICENUMBER = HAH_OFFICES.OFFICE_NUMBER
	WHERE DFOFFICES.DBNAME IS NULL AND HAH_OFFICES.STATE <> 'PA' -- Exclude new PA offices as Dataflex offices, except those that exist in Dataflex from prior testing
	UNION ALL
	-- Few offices in KeyMetOffices table that are not in either Dataflex or Login_Office tables
	SELECT 3 AS SOURCE_SYSTEM_ID,
		KEY_MET_OFFICES.STATE AS SYSTEM_CODE,
		KEY_MET_OFFICES.STATE AS DBNAME,
		KEY_MET_OFFICES.STATE,
		KEY_MET_OFFICES.OFFICE_NUMBER,
		KEY_MET_OFFICES.OFFICE_NAME,
		NULL AS PAYROLLBATCHNAME,
		KEY_MET_OFFICES.ETL_LAST_UPDATED_DATE 
	FROM KEY_METRIC_OFFICES AS KEY_MET_OFFICES
	LEFT JOIN DISC_PROD.DATAFLEXSYNCDATA.DFOFFICES AS DFOFFICES
		ON DFOFFICES.DBNAME = KEY_MET_OFFICES.STATE AND DFOFFICES.OFFICENUMBER = KEY_MET_OFFICES.OFFICE_NUMBER
	LEFT JOIN HAH_OFFICES AS HAH_OFFICES
		ON HAH_OFFICES.STATE = KEY_MET_OFFICES.STATE AND HAH_OFFICES.OFFICE_NUMBER = KEY_MET_OFFICES.OFFICE_NUMBER
	WHERE DFOFFICES.DBNAME IS NULL AND HAH_OFFICES.STATE IS NULL
), OFFICES AS (
	SELECT MD5(OFFICES.DBNAME || '-' || OFFICES.OFFICENUMBER || '-' || IFF(OFFICES.OFFICENUMBER = 0, 'GPSYNCDATA', 'DATAFLEXSYNCDATA')) AS BRANCH_KEY,
		OFFICES.OFFICENAME AS BRANCH_NAME,
		OFFICES.SYSTEM_CODE,
		OFFICES.SOURCE_SYSTEM_ID,
		OFFICES.OFFICENUMBER AS OFFICE_NUMBER,
		OFFICES.OFFICENUMBER::STRING AS OFFICE_CODE,
		OFFICES.OFFICENAME AS OFFICE_NAME,
		IFF(OFFICES.OFFICENUMBER = 0, UPPER(OFFICES.OFFICENAME), OFFICES.OFFICENAME) AS OFFICE_NAME_ALT,
		OFFICES.PAYROLLBATCHNAME AS DEPARTMENT_NAME,
		CASE WHEN OFFICES.OFFICENAME LIKE '%DD%' THEN 'DD'
			WHEN OFFICES.OFFICENAME LIKE '%ADS%' THEN 'ADS'
			ELSE NULL END AS BRANCH_SERVICE_LINE,
		TRUE AS PARENT_FLAG,
		BRANCH_KEY AS PARENT_BRANCH_KEY,
		OFFICES.OFFICENUMBER AS PARENT_OFFICE_NUMBER,
		OFFICES.OFFICENUMBER::STRING AS PARENT_OFFICE_CODE,
		OFFICES.DBNAME || ' - ' || OFFICES.OFFICENAME || ' (' || IFF(OFFICES.OFFICENUMBER = 0, '00', OFFICES.OFFICENUMBER::STRING) || ')' AS PARENT_BRANCH_NAME,
		HAH_OFFICES.OFFICE_ADDRESS1,
		HAH_OFFICES.OFFICE_ADDRESS2,
		HAH_OFFICES.OFFICE_CITY,
		OFFICES.STATE AS OFFICE_STATE_CODE,
		HAH_OFFICES.OFFICE_ZIP,
		HAH_OFFICES.OFFICE_PHONE,
		HAH_OFFICES.OFFICE_TOLL_FREE_PHONE,
		HAH_OFFICES.OFFICE_FAX,
		OFFICES.DBNAME || ' - ' || OFFICES.OFFICENAME || ' (' || IFF(OFFICES.OFFICENUMBER = 0, '00', OFFICES.OFFICENUMBER::STRING) || ')' AS DETAILED_OFFICE_NAME,
		REGIONS.REGIONNUMBER AS REGION_NUMBER,
		IFF(UPPER(TRIM(REGIONS.NAME)) = 'DD/MICHIGAN', 'MICHIGAN', UPPER(TRIM(REGIONS.NAME))) AS REGION_NAME,
		UPPER(TRIM(COALESCE(REGIONAL_EMPLOYEE.EMPLOYEE_FIRST_NAME || ' ' || REGIONAL_EMPLOYEE.EMPLOYEE_LAST_NAME, REGIONS.MANAGER))) AS REGION_MANAGER, -- Do we select the name in SQL Server, or concat name from Dim_Employee
		REGIONAL_EMPLOYEE.EMPLOYEE_KEY AS REGION_MANAGER_EMPLOYEE_KEY,
		CAST(NULL AS VARCHAR) AS SUBREGION_NAME,
		UPPER(TRIM(COALESCE(PRIMARY_MANAGER.EMPLOYEE_FIRST_NAME || ' ' || PRIMARY_MANAGER.EMPLOYEE_LAST_NAME, HAH_OFFICES.OfficeManager1))) AS Primary_Branch_Manager_Name,
		COALESCE(BRANCH_MANAGERS.PRIMARY_BRANCH_EMAIL, HAH_OFFICES.PRIMARY_BRANCH_EMAIL) AS PRIMARY_BRANCH_EMAIL,
		PRIMARY_MANAGER.EMPLOYEE_KEY AS PRIMARY_BRANCH_MANAGER_EMPLOYEE_KEY,
		UPPER(TRIM(COALESCE(SECONDARY_MANAGER.EMPLOYEE_FIRST_NAME || ' ' || SECONDARY_MANAGER.EMPLOYEE_LAST_NAME, HAH_OFFICES.OfficeManager2))) AS Secondary_Branch_Manager_Name,
		COALESCE(BRANCH_MANAGERS.SECONDARY_BRANCH_EMAIL, HAH_OFFICES.SECONDARY_BRANCH_EMAIL) AS SECONDARY_BRANCH_EMAIL,
		SECONDARY_MANAGER.EMPLOYEE_KEY AS SECONDARY_BRANCH_MANAGER_EMPLOYEE_KEY,
		RISKCONNECT.NODE_KEY AS RISKCONNECT_NODE_KEY,
		RISKCONNECT.NODE_NAME AS RISKCONNECT_NAME,
		HR.HR_OFFICE_NUMBER,
		HR.HR_OFFICE_NAME,
		TRUE AS ACTIVE_FLAG,
		TO_DATE('1900-01-01', 'YYYY-MM-DD') AS EFFECTIVE_FROM_DATE,
		TO_DATE('9999-12-31', 'YYYY-MM-DD') AS EFFECTIVE_TO_DATE,
		ROW_NUMBER() OVER(PARTITION BY OFFICES.SYSTEM_CODE, OFFICES.OFFICENUMBER 
			ORDER BY IFF(REGIONAL_EMPLOYEE.ACTIVE_EMPLOYEE_FLAG = TRUE, 0, 1), IFF(REGIONAL_EMPLOYEE.EMPLOYEE_CATEGORY IN ('Admin', 'Corp'), 0, 1), REGIONAL_EMPLOYEE.EMPLOYEE_LAST_CHECK_DATE DESC,
				IFF(PRIMARY_MANAGER.ACTIVE_EMPLOYEE_FLAG = TRUE, 0, 1), IFF(PRIMARY_MANAGER.EMPLOYEE_CATEGORY IN ('Admin', 'Corp'), 0, 1), PRIMARY_MANAGER.EMPLOYEE_LAST_CHECK_DATE DESC,
				IFF(SECONDARY_MANAGER.ACTIVE_EMPLOYEE_FLAG = TRUE, 0, 1), IFF(SECONDARY_MANAGER.EMPLOYEE_CATEGORY IN ('Admin', 'Corp'), 0, 1), SECONDARY_MANAGER.EMPLOYEE_LAST_CHECK_DATE DESC
			) AS ROW_NUMBER
	FROM OFFICE_LIST AS OFFICES
	JOIN HAH.DIM_STATE AS STATES 
		ON STATES.STATE_ISO_CODE = OFFICES.STATE
	LEFT JOIN HAH_OFFICES AS HAH_OFFICES
		ON HAH_OFFICES.STATE = OFFICES.STATE AND HAH_OFFICES.OFFICE_NUMBER = OFFICES.OFFICENUMBER
	LEFT JOIN DISC_PROD.HAH_REPORTING.KEYMETOFFICES AS REGION_OFFICES -- Only used for IL regions
		ON OFFICES.STATE = 'IL' AND TRIM(REGION_OFFICES.OFFICESTATE) = OFFICES.STATE AND TRY_CAST(REGION_OFFICES.OFFICENUMBER AS INT) = OFFICES.OFFICENUMBER
	LEFT JOIN DISC_PROD.BI_REPOSITORY.KMREGIONS AS REGIONS
		ON (REGION_OFFICES.REGIONNUMBER IS NULL AND 
			CASE WHEN UPPER( STATES.State_Name) = 'GEORGIA' THEN 'GEORGIA/SOUTH CAROLINA'
				WHEN UPPER( STATES.State_Name) = 'SOUTH CAROLINA' THEN 'GEORGIA/SOUTH CAROLINA'
				WHEN UPPER( STATES.State_Name) = 'MICHIGAN' THEN 'DD/MICHIGAN'
				WHEN UPPER( STATES.State_Name) = 'KANSAS' THEN 'MISSOURI' 
				WHEN UPPER( STATES.State_Name) = 'IOWA' THEN 'ILLINOIS - NORTH' 
				WHEN UPPER( STATES.State_Name) = 'MISSISSIPPI' THEN 'MISSISSIPPI/TENNESSEE'
				WHEN UPPER( STATES.State_Name) = 'TENNESSEE' THEN 'MISSISSIPPI/TENNESSEE'
				ELSE UPPER( STATES.State_Name) END = REGIONS.NAME) 
			OR (REGION_OFFICES.REGIONNUMBER = REGIONS.REGIONNUMBER)
	LEFT JOIN DEDUPE_EMP AS REGIONAL_EMPLOYEE 
		ON ((OFFICES.STATE NOT IN ('GA', 'SC', 'PA') AND REGIONAL_EMPLOYEE.SOURCE_SYSTEM_ID = 5)
				OR (OFFICES.STATE IN ('GA', 'SC') AND REGIONAL_EMPLOYEE.SOURCE_SYSTEM_ID = 2)
				OR (OFFICES.STATE IN ('PA') AND REGIONAL_EMPLOYEE.SOURCE_SYSTEM_ID = 4)) 
				AND REGIONAL_EMPLOYEE.Dedupe_Emp_number = REGIONS.MANAGEREMPLOYEEID 
				-- AND REGIONAL_EMPLOYEE.ACTIVE_EMPLOYEE_FLAG = TRUE AND REGIONAL_EMPLOYEE.EMPLOYEE_CATEGORY IN ('Admin', 'Corp')
	LEFT JOIN HAH.FACT_BRANCH_MANAGER_MAPPING AS BRANCH_MANAGERS
		ON BRANCH_MANAGERS.OFFICE_SYSTEM_CODE = OFFICES.SYSTEM_CODE AND BRANCH_MANAGERS.OFFICE_CODE = OFFICES.OFFICENUMBER::STRING 
	LEFT JOIN DEDUPE_EMP AS PRIMARY_MANAGER
		ON PRIMARY_MANAGER.SYSTEM_CODE = BRANCH_MANAGERS.PRIMARY_MANAGER_SYSTEM_CODE  
			AND PRIMARY_MANAGER.Dedupe_Emp_number = BRANCH_MANAGERS.PRIMARY_MANAGER_EMPLOYEE_ID
			-- AND PRIMARY_MANAGER.ACTIVE_EMPLOYEE_FLAG = TRUE AND PRIMARY_MANAGER.EMPLOYEE_CATEGORY IN ('Admin', 'Corp')
	LEFT JOIN DEDUPE_EMP AS SECONDARY_MANAGER
		ON SECONDARY_MANAGER.SYSTEM_CODE = BRANCH_MANAGERS.SECONDARY_MANAGER_SYSTEM_CODE  
			AND SECONDARY_MANAGER.Dedupe_Emp_number = BRANCH_MANAGERS.SECONDARY_MANAGER_EMPLOYEE_ID
			-- AND SECONDARY_MANAGER.ACTIVE_EMPLOYEE_FLAG = TRUE AND SECONDARY_MANAGER.EMPLOYEE_CATEGORY IN ('Admin', 'Corp')
	LEFT JOIN RISKCONNECT_HIERARCHY AS RISKCONNECT
		ON RISKCONNECT.PARENT_LEVEL = 2 AND RISKCONNECT.STATE = OFFICES.STATE
			AND TRY_CAST(COALESCE(RISKCONNECT.OFFICE_NUMBER, RISKCONNECT.OFFICENO) AS INTEGER) = IFF(OFFICES.OFFICENUMBER = 0, 999, OFFICES.OFFICENUMBER)
	LEFT JOIN HR_OFFICE_MAPPING AS HR
		ON HR.STATE = OFFICES.STATE AND TRY_CAST(HR.OFFICE_NUMBER AS INTEGER) = OFFICES.OFFICENUMBER 
	
)
	SELECT OFFICES.BRANCH_KEY
    FROM OFFICES AS OFFICES
	WHERE OFFICES.ROW_NUMBER = 1
;