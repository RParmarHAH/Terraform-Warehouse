resource "snowflake_procedure" "DW_HAH_GET_STAGE_DATAFLEXSYNCDATA_DIM_VISIT_EXCEPTION" {
	name ="GET_STAGE_DATAFLEXSYNCDATA_DIM_VISIT_EXCEPTION"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT


BEGIN
--*****************************************************************************************************************************
-- NAME:  DATAFLEXSYNCDATA_DIM_VISIT_EXCEPTION
--
-- PURPOSE: Creates one row per visit exception according to DATAFLEXSYNCDATA
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 12/1/2022	Abhishek Sunil			Initial PRODevelopment
-- 30/6/2023	Naresha Bhat			Data Source Modification
-- 9/22/2023	Diya Mistry             Added CATEGORY_KEY field
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.DATAFLEXSYNCDATA_DIM_VISIT_EXCEPTION
WITH CODES AS (
	SELECT
		VISITS.AGENCYID,
		TRIM(exc.value)::STRING AS EXCEPTION_CODE
	FROM
		DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES VISITS
	,LATERAL FLATTEN(input => SPLIT(VISITS.EXCEPTIONCODE, ''|'')) exc 
	WHERE 
		NULLIF(EXCEPTION_CODE,'''') IS NOT NULL AND TRIM(EXCEPTIONCODE) <> ''0'' AND TRIM(VISITS.AGENCYID) IN (''38004'',''8380'',''8463'')
		AND VISITS.ETL_LAST_UPDATED_DATE >= (:STR_CDC_START)::timestamp_ntz
	GROUP BY
		VISITS.AGENCYID, EXCEPTION_CODE
)
, EXC_CODES AS (
	SELECT DISTINCT
		SEC.AGENCYID, 
		SEC.EXCEPTION_CODE AS CODE, 
		SEC.EXCEPTION_DESC AS DESCRIPTION 
	FROM 
		DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_MANUAL_EXCEPTIONCODES SEC
	WHERE
		TRIM(SEC.AGENCYID) IN (''38004'',''8380'',''8463'')
)
, COMBINED_CODES AS (
	SELECT
		AGENCYID,
		EXCEPTION_CODE
	FROM CODES -- TO pick up ALL exceptions NOT included IN EXCEPTION_CODES table
	UNION
	SELECT
		AGENCYID,
		CODE
	FROM EXC_CODES -- TO pick up ALL exceptions which ARE NOT yet raised IN visits till date
)
, ALL_DF_CODES AS (
	SELECT 
		MD5(''EDISON'' || ''-'' || CC.EXCEPTION_CODE || ''-'' || ''EDISON'') AS EXCEPTION_KEY,
		CASE CC.AGENCYID
			WHEN ''38004'' THEN ''IN''
			WHEN ''8380'' THEN ''IL''
			WHEN ''8463'' THEN ''MO''
			WHEN ''5841'' THEN ''TN''
			WHEN ''38005'' THEN ''MI''
		END AS DBNAME,
		TRIM(CC.EXCEPTION_CODE) AS EXCEPTION_CODE,
		TRIM(EC.DESCRIPTION) AS EXCEPTION_DESC
	FROM 
		COMBINED_CODES CC
	LEFT JOIN 
		EXC_CODES EC 
		ON CC.AGENCYID = EC.AGENCYID 
			AND CC.EXCEPTION_CODE = EC.CODE
)
SELECT
	MD5(DBNAME || ''-'' || EXCEPTION_CODE || ''-'' || ''DATAFLEXSYNCDATA'') AS EXCEPTION_KEY,
	3 AS SOURCE_SYSTEM_ID,
	DBNAME AS SYSTEM_CODE,
	EXCEPTION_CODE AS EXCEPTION_CODE,
	EXCEPTION_DESC AS EXCEPTION_DESC,
	NULL AS EXCEPTION_CATEGORY,
	MD5(UPPER(EXCEPTION_DESC)) AS CATEGORY_KEY,
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	FALSE AS ETL_DELETED_FLAG
FROM
	ALL_DF_CODES
ORDER BY 
	SYSTEM_CODE, EXCEPTION_CODE::NUMBER ASC;
 
RETURN ''SUCCESS'';
END;


 EOT
}

