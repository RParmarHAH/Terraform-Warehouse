resource "snowflake_procedure" "DW_HAH_GET_STAGE_CCSI_FACT_VISIT" {
	name ="GET_STAGE_CCSI_FACT_VISIT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "JAVASCRIPT"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

        var sql = `
--*****************************************************************************************************************************
-- NAME: CCSI_FACT_VISIT
--
-- PURPOSE: Creates one row per Visit according to CCSI
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 08/25/2021  MOIN SAIYED           Initial development
-- 01/27/2023  VIJAY SHARMA 		 Added schedule/visit/invoice/payroll status information and schedule/actual/adjusted timing information,scheduled employee,
--									Confirmed_Flag, Bill_unit_type & Bill_Unit_Served,Updated Hours_Served logic.
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.CCSI_FACT_VISIT
WITH RAWVRFP AS  --VISIT DATA
(
	SELECT DISTINCT RECORD_NUMBER
					,CLIENT_ID
					,SERVICE_TYPE
					,AREA_2
					,DAY_OF_SERVICE
					,PAY_PERIOD_ENDING_DATE
					,DATEADD(DAY,(IFNULL(DAY_OF_SERVICE,1) - 1),DATE_TRUNC(''MONTH'',TRY_TO_DATE(PERIOD_DATE, ''MMDDYY''))) AS "PERIOD_DATE" --CHANGE
					,EMPLOYEE_NUMBER
					,EMP_DESK
					,HOURS_WORKED
					,UPPER (TRIM (CONTRACT_NO)) AS "CONTRACT_NO" 
			FROM DISC_${var.SF_ENVIRONMENT}.CCSI.RAWVRFP
			WHERE PERIOD_DATE IS NOT NULL
			AND TRY_TO_DATE(PERIOD_DATE, ''MMDDYY'') > ''2015-12-31''
			AND DAY_OF_SERVICE  IS NOT NULL
			AND CLIENT_ID IS NOT NULL
),
CALLSFIELD_DATA AS (
	SELECT DISTINCT CF.CLIENT_ID,CF.CALLER_ID,CF.LOG_IN_OUT,CF.OFFICE 
	,try_to_timestamp(DATE_TIME) AS D_DATETIME
	FROM DISC_${var.SF_ENVIRONMENT}.CCSI.CALLSFIELD CF	
)
,LOG_IN_DATA AS (
	SELECT DISTINCT CF.CLIENT_ID,CF.CALLER_ID , OFFICE, CF.D_DATETIME AS ACTUAL_START_DATE
	,ROW_NUMBER() OVER (PARTITION BY CLIENT_ID,(CF.D_DATETIME::DATE) ORDER BY CF.D_DATETIME ASC) AS RN1
	FROM CALLSFIELD_DATA CF 	
	WHERE LOG_IN_OUT =2
	ORDER BY CF.D_DATETIME ASC
)
, LOG_OUT_DATA AS (
	SELECT DISTINCT CF.CLIENT_ID,CF.CALLER_ID, OFFICE, CF.D_DATETIME AS ACTUAL_END_DATE	
	,ROW_NUMBER() OVER (PARTITION BY CLIENT_ID,(CF.D_DATETIME::DATE) ORDER BY CF.D_DATETIME ASC) AS RN2
	FROM CALLSFIELD_DATA CF 
	WHERE LOG_IN_OUT = 3
	ORDER BY CF.D_DATETIME ASC
)
, LOG_DATA AS (
	SELECT DISTINCT  CTE1.CLIENT_ID,CTE1.OFFICE,CTE1.ACTUAL_START_DATE
	,CTE2.ACTUAL_END_DATE
	,(CAST(DATEDIFF(MINUTE, CTE1.ACTUAL_START_DATE, CTE2.ACTUAL_END_DATE) AS DECIMAL(18, 3)) / 60.0) AS ACTUAL_DURATION	
	FROM LOG_IN_DATA AS CTE1 
	JOIN LOG_OUT_DATA AS CTE2 ON CTE1.CLIENT_ID = CTE2.CLIENT_ID
	AND (CTE1.ACTUAL_START_DATE::DATE) = (CTE2.ACTUAL_END_DATE::DATE)
	WHERE CTE1.RN1 = CTE2.RN2
)
,DIM_EMPLOYEE AS
(
SELECT EMPLOYEE_NUMBER, AREA, HIRE_DATE, TERMINATION_DATE,MASTER_ID,RN FROM 
(
SELECT *,ROW_NUMBER() OVER (PARTITION BY EMPLOYEE_NUMBER,AREA ORDER BY UPDATED_DATE, CREATED_DATE DESC) AS DUP FROM 
(
SELECT * FROM 
(
	SELECT DISTINCT DIM_EMPLOYEE_NUMBER AS "EMPLOYEE_NUMBER"
			,AREA
			,HIRE_DATE
			,TERMINATION_DATE
			,(RECORD_NUMBER::STRING || ''-'' || NVL(AREA,''C'')::STRING || ''-'' || ''CCSI'') AS MASTER_ID
			,ROW_NUMBER() OVER (PARTITION BY DIM_EMPLOYEE_NUMBER,AREA ORDER BY UPDATED_DATE, CREATED_DATE DESC) AS 			RN 
			,UPDATED_DATE, CREATED_DATE
	FROM  DISC_DEDUPE_${var.SF_ENVIRONMENT}.CCSI.EMP_MASTER_LIST_CCSI	
) WHERE RN = 1
UNION 
SELECT * FROM 
(
	SELECT DISTINCT DIM_EMPLOYEE_NUMBER AS EMPLOYEE_NUMBER
			,AREA
			,HIRE_DATE
			,TERMINATION_DATE
			,MASTER_ID
			,ROW_NUMBER() OVER (PARTITION BY EMPLOYEE_NUMBER,AREA ORDER BY UPDATED_DATE,CREATED_DATE DESC) AS RN 
			,UPDATED_DATE, CREATED_DATE
	FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.CCSI.EMP_MATCH_CCSI R
	WHERE 
	EMPLOYEE_NUMBER IS NOT NULL 
	AND NOT EXISTS (SELECT 1 FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.CCSI.EMP_MASTER_LIST_CCSI A WHERE (A.RECORD_NUMBER || A.AREA) = (R.RECORD_NUMBER || R.AREA)) 
) WHERE RN > 1 
) 
) WHERE DUP = 1
)
,DIM_CLIENT AS 
(
SELECT CLIENT_NUMBER, AREA, CLIENT_NAME, MASTER_ID,RN,SHORT_DATE FROM 
(
SELECT *,ROW_NUMBER() OVER (PARTITION BY CLIENT_NUMBER,AREA ORDER BY SHORT_DATE DESC) AS DUP FROM 
(
	SELECT CLIENT_IDOA_NO AS "CLIENT_NUMBER"
			,USED_FOR_AREA AS "AREA"
			,FINAL_CLIENT_NAME AS "CLIENT_NAME"
			,CASE WHEN 
					UPDATED_DATE LIKE ''%/OV%''  OR CREATED_DATE LIKE ''%/OV%''  OR UPDATED_DATE IS NULL 
					THEN COALESCE(TRY_TO_DATE(CREATED_DATE ,''MM/DD/YY'') , TRY_TO_DATE(ACTION_DATE ,''YYYYMMDD''))
				ELSE TO_DATE(UPDATED_DATE,''MM/DD/YY'') END AS SHORT_DATE
			,(RECORD_NUMBER  || ''-'' ||  NVL(USED_FOR_AREA, ''CCSI'') || ''-'' || ''CCSI'') AS MASTER_ID
			,ROW_NUMBER() OVER (PARTITION BY (CLIENT_NUMBER  || ''-'' ||  NVL(USED_FOR_AREA, ''CCSI'') || ''-'' || ''CCSI'') ORDER BY 
				CASE WHEN 
					UPDATED_DATE LIKE ''%/OV%''  OR CREATED_DATE LIKE ''%/OV%''  OR UPDATED_DATE IS NULL 
					THEN COALESCE(TRY_TO_DATE(CREATED_DATE ,''MM/DD/YY'') , TRY_TO_DATE(ACTION_DATE ,''YYYYMMDD''))
				ELSE TO_DATE(UPDATED_DATE,''MM/DD/YY'') 
				END
			,RECORD_NUMBER DESC) AS RN FROM  DISC_DEDUPE_${var.SF_ENVIRONMENT}.CCSI.CLIENT_MASTER_LIST_CCSI	
) WHERE RN = 1
UNION 
SELECT *,ROW_NUMBER() OVER (PARTITION BY CLIENT_NUMBER,AREA ORDER BY SHORT_DATE DESC) AS DUP FROM 
(
	SELECT CLIENT_IDOA_NO AS "CLIENT_NUMBER"
			,USED_FOR_AREA AS "AREA"
			,COMBINED_CLIENT_NAME AS "CLIENT_NAME"
			,CASE WHEN 
					UPDATED_DATE LIKE ''%/OV%''  OR CREATED_DATE LIKE ''%/OV%''  OR UPDATED_DATE IS NULL 
					THEN COALESCE(TRY_TO_DATE(CREATED_DATE ,''MM/DD/YY'') , TRY_TO_DATE(ACTION_DATE ,''YYYYMMDD''))
				ELSE TO_DATE(UPDATED_DATE,''MM/DD/YY'') END AS SHORT_DATE
			,MASTER_ID
			,ROW_NUMBER() OVER (PARTITION BY (CLIENT_NUMBER  || ''-'' ||  NVL(USED_FOR_AREA, ''CCSI'') || ''-'' || ''CCSI'') ORDER BY 
				CASE WHEN 
					UPDATED_DATE LIKE ''%/OV%''  OR CREATED_DATE LIKE ''%/OV%''  OR UPDATED_DATE IS NULL 
					THEN COALESCE(TRY_TO_DATE(CREATED_DATE ,''MM/DD/YY'') , TRY_TO_DATE(ACTION_DATE ,''YYYYMMDD''))
				ELSE TO_DATE(UPDATED_DATE,''MM/DD/YY'') 
				END
			,RECORD_NUMBER DESC) AS RN 
			FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.CCSI.CLIENT_MATCH_LIST_CCSI R
			WHERE CLIENT_IDOA_NO IS NOT NULL 
	AND NOT EXISTS (SELECT 1 FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.CCSI.CLIENT_MASTER_LIST_CCSI A WHERE (A.RECORD_NUMBER || A.USED_FOR_AREA) = (R.RECORD_NUMBER || R.USED_FOR_AREA))
) WHERE RN > 1
) WHERE DUP = 1
)
,OTHERINV AS
(
	SELECT DISTINCT TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'') AS "DATE_OF_SERVICE"
					,SUM(AMOUNT_BILLED) AS "AMOUNT_BILLED"
					,CLIENT_ID
					,AREA 
					--,CLIENT_NAME
					,SUM(UNITS_PROVIDED) AS "UNITS"
					,SUM(BALANCE) AS "BALANCE"
					,TYPE_OF_SERVICE AS "SERVICE_TYPE"
				FROM DISC_${var.SF_ENVIRONMENT}.CCSI.OTHERINV
				--WHERE CLIENT_ID  = 001641372
				GROUP BY CLIENT_ID,AREA,TYPE_OF_SERVICE				
				,TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'')
)
,MAXOTHERINV AS
(
	SELECT DISTINCT MAX(TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'')) AS "DATE_OF_SERVICE"
					,SUM(AMOUNT_BILLED) AS "AMOUNT_BILLED"
					,CLIENT_ID
					,AREA 
					--,CLIENT_NAME
					,SUM(UNITS_PROVIDED) AS "UNITS"
					,SUM(BALANCE) AS "BALANCE"
					,TYPE_OF_SERVICE AS "SERVICE_TYPE"
				FROM DISC_${var.SF_ENVIRONMENT}.CCSI.OTHERINV
				--WHERE CLIENT_ID  = 001641372
				GROUP BY CLIENT_ID,AREA
				,TYPE_OF_SERVICE
				,TRY_TO_DATE(DATE_OF_SERVICE, ''MM/YYYY'')
)
, MCOINVOICE AS
(
	SELECT DISTINCT TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'') AS "DATE_OF_SERVICE"
					,SUM(DOLLAR_AMOUNT) AS "AMOUNT_BILLED"
					,CLIENT_ID
					,UPPER(CCSI_OFFICE) AS "AREA"
					,SUM(BALANCE) AS "BALANCE"
					,SUM(UNITS) AS "UNITS"
					,SERVICE_TYPE
			FROM DISC_${var.SF_ENVIRONMENT}.CCSI.MCOINV
			GROUP BY CLIENT_ID,UPPER(CCSI_OFFICE)
					,SERVICE_TYPE
					,TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'')
)	
, MAXMCOINVOICE AS
(
	SELECT DISTINCT MAX(TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'')) AS "DATE_OF_SERVICE"
					,SUM(DOLLAR_AMOUNT) AS "AMOUNT_BILLED"
					,CLIENT_ID
					,UPPER(CCSI_OFFICE) AS "AREA"
					,SUM(BALANCE) AS "BALANCE"
					,SUM(UNITS) AS "UNITS"
					,SERVICE_TYPE
			FROM DISC_${var.SF_ENVIRONMENT}.CCSI.MCOINV
			GROUP BY CLIENT_ID,UPPER(CCSI_OFFICE)
			,SERVICE_TYPE
			,TRY_TO_DATE(SERVICE_MONTH, ''YYYY/MM'')
)
, RAWVRFP_OTHERINV AS --DATA RELATED OTHER INVOICE
(
	SELECT * FROM RAWVRFP WHERE try_to_numeric(SERVICE_TYPE) IS NOT NULL --NUMERIC OTHER INV
)
, RAWVRFP_MCOINV AS --DATA RELATED MCO INVOICE
(
	SELECT * FROM RAWVRFP WHERE try_to_numeric(SERVICE_TYPE) IS NULL --NON NUMERIC FOR MCO INV
)
SELECT 
VISIT_KEY
		,REPORT_DATE
		,BRANCH_KEY
 		,CLIENT_KEY
		,CONTRACT_KEY
		,SCHEDULED_EMPLOYEE_KEY 
		,EMPLOYEE_KEY
		,8 AS SOURCE_SYSTEM_ID
		,SUPERVISOR_KEY
		,INVOICE_KEY 
		,PAYROLL_KEY 
		,CLIENT_SERVICE_KEY 
		,PARTNER_CONTRACT_SERVICE_KEY
		,BILLING_KEY 			   
		,SERVICE_DATE
		,PAYROLL_DATE
		,BRANCH_NAME
		,CLIENT_NUMBER
		,CONTRACT_CODE
		,SCHEDULED_EMPLOYEE_ID 
		,EMPLOYEE_ID
		,''CCSI'' AS SYSTEM_CODE
		,SUPERVISOR_CODE
		,INVOICE_ID  
		,CHEQUE_NUMBER  
		,CLEAN_SHIFT_FLAG
		--
		,VSM.SCHEDULE_STATUS_CODE 
		,VSM.SCHEDULE_STATUS_NAME 
		,VSM.SCHEDULE_STATUS_DESCRIPTION 
		,VSM.VISIT_STATUS_CODE 
		,VSM.VISIT_STATUS_NAME 
		,VSM.VISIT_STATUS_DESCRIPTION 
		,VSM.INVOICE_STATUS_CODE 
		,VSM.INVOICE_STATUS_NAME 
		,VSM.INVOICE_STATUS_DESCRIPTION 
		,VSM.PAYROLL_STATUS_CODE
		,VSM.PAYROLL_STATUS_NAME 
		,VSM.PAYROLL_STATUS_DESCRIPTION
		--
		,CANCEL_REASON_CODE
		,CANCEL_REASON_DESCRIPTION
		,CANCEL_REASON_NOTES
		,EXCEPTION_REASON_INDICATOR
		,RESOLUTION_CODE
		,RESOLUTION_DESCRIPTION
		,REJECTION_CODE
		,REJECTION_DESCRIPTION
		,BILL_CODE
		,BILL_RATE
		,BILL_UNITS_SERVED  
		,BILL_UNIT_TYPE  
		,OVERHEAD_RATE
		,SCHEDULE_TIMEIN 
		,SCHEDULE_TIMEOUT 
		,SCHEDULE_DURATION 
		,ACTUAL_TIMEIN 
		,ACTUAL_TIMEOUT 
		,ACTUAL_DURATION 
		,ADJUSTED_TIMEIN 
		,ADJUSTED_TIMEOUT 
		,ADJUSTED_DURATION 
		,HOURS_SERVED
		,COMMENTS
		,IS_EVV_FLAG
		,TIMESHEET_TYPE
		,TRACKING_ID
		,ETL_TASK_KEY
		,ETL_INSERTED_TASK_KEY
      	,ETL_INSERTED_DATE
      	,ETL_INSERTED_BY 
      	,ETL_LAST_UPDATED_DATE
      	,ETL_LAST_UPDATED_BY
	    ,ETL_DELETED_FLAG
		,VSM.CONFIRMED_FLAG AS CONFIRMED_FLAG 			
FROM 
(
WITH RESULT AS
(
SELECT DISTINCT 
MD5(NVL(R.CLIENT_ID,''E'')::STRING || ''-'' || NVL(R.PERIOD_DATE::STRING,''E'')::STRING || ''-'' || NVL(R.DAY_OF_SERVICE,''E'')::STRING
			|| ''-'' || NVL(R.RECORD_NUMBER,''E'')::STRING) AS VISIT_KEY
		,R.PERIOD_DATE AS "REPORT_DATE"
		,B.BRANCH_KEY
 		,MD5(C.MASTER_ID) AS "CLIENT_KEY"
		,CO.CONTRACT_KEY
		,NULL AS "SCHEDULED_EMPLOYEE_KEY" -- MD5(E.MASTER_ID)
		,MD5(E.MASTER_ID) AS "EMPLOYEE_KEY"
		,8 AS "SOURCE_SYSTEM_ID"
		,MD5(D.AREA ||''-''|| NVL(D.SUPERVISOR_INITIAL,''UNKNOWN'') ||''-''|| ''CCSI'') AS SUPERVISOR_KEY--DIM SUPERVISOR
		,NULL AS INVOICE_KEY
		,NULL AS PAYROLL_KEY
		,null as CLIENT_SERVICE_KEY 
		,MD5(''CCSI''|| ''-'' || PCM.PAYOR_ID || ''-'' || R.CONTRACT_NO || ''-'' || R.SERVICE_TYPE || ''-'' || ''CCSI'') AS PARTNER_CONTRACT_SERVICE_KEY
		,null as BILLING_KEY 
		,R.PERIOD_DATE AS "SERVICE_DATE"
		,TRY_TO_DATE(R.PAY_PERIOD_ENDING_DATE, ''MMDDYY'') AS "PAYROLL_DATE"
		,UPPER(B.BRANCH_NAME) AS "BRANCH_NAME"
		,R.CLIENT_ID AS "CLIENT_NUMBER"
		,CO.CONTRACT_CODE
		,NULL AS "SCHEDULED_EMPLOYEE_ID" --R.EMPLOYEE_NUMBER
		,R.EMPLOYEE_NUMBER AS "EMPLOYEE_ID"
		,''CCSI'' AS "SYSTEM_CODE"
		,UPPER(D.SUPERVISOR_INITIAL) AS "SUPERVISOR_CODE"
		,NULL as INVOICE_ID
		,NULL as CHEQUE_NUMBER
		,FALSE AS "CLEAN_SHIFT_FLAG"
		,CASE WHEN COALESCE(O.BALANCE,O1.BALANCE) <= 0 THEN ''05'' ELSE ''02'' END AS "STATUS_CODE" -- 05 = PAID , 01 = PENDING, 02 = Confirmed
		,CASE WHEN COALESCE(O.BALANCE,O1.BALANCE) <= 0 THEN ''Paid'' ELSE ''Confirmed'' END AS "STATUS_DESCRIPTION" --NEED TO SHOW PENDING IN CASE OF INCOICE NOT  GENERATED
		,NULL AS "CANCEL_REASON_CODE"
		,NULL AS "CANCEL_REASON_DESCRIPTION"
		,NULL AS "CANCEL_REASON_NOTES"
		,FALSE AS "EXCEPTION_REASON_INDICATOR"
		,NULL AS "RESOLUTION_CODE"
		,NULL AS "RESOLUTION_DESCRIPTION"
		,NULL AS "REJECTION_CODE"
		,NULL AS "REJECTION_DESCRIPTION"
		,NULL AS "BILL_CODE"
		,ROUND((NULLIF(COALESCE(O.AMOUNT_BILLED,O1.AMOUNT_BILLED),0)/NULLIF((COALESCE(O.UNITS,O1.UNITS)/4),0)), 2) AS "BILL_RATE"
		,NULL AS "BILL_UNITS_SERVED"
		,NULL AS "BILL_UNIT_TYPE"
		,NULL AS "OVERHEAD_RATE"
		,NULL AS "SCHEDULE_TIMEIN"
		,NULL AS "SCHEDULE_TIMEOUT"
		,NULL AS "SCHEDULE_DURATION"
		--,NULL AS "ACTUAL_TIMEIN"
		--,NULL AS "ACTUAL_TIMEOUT"
		--,NULL AS "ACTUAL_DURATION"
		,ACDATA.ACTUAL_START_DATE AS "ACTUAL_TIMEIN"
		,ACDATA.ACTUAL_END_DATE AS "ACTUAL_TIMEOUT"
		,ACDATA.ACTUAL_DURATION AS "ACTUAL_DURATION"	
		,NULL AS "ADJUSTED_TIMEIN"
		,NULL AS "ADJUSTED_TIMEOUT"
		,R.HOURS_WORKED AS "ADJUSTED_DURATION"
		--,R.HOURS_WORKED AS "HOURS_SERVED"
		,NVL(CAST(COALESCE(ADJUSTED_DURATION,ACTUAL_DURATION) AS DECIMAL(18, 3)),0) AS HOURS_SERVED 
		,NULL AS "COMMENTS"
		,NULL AS "IS_EVV_FLAG"
		,NULL AS "TIMESHEET_TYPE"
		,NULL AS "TRACKING_ID"
		,-1 AS ETL_TASK_KEY
		,-1 AS ETL_INSERTED_TASK_KEY
      	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
      	,CURRENT_USER AS ETL_INSERTED_BY 
      	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
      	,CURRENT_USER AS ETL_LAST_UPDATED_BY
	    ,0 AS ETL_DELETED_FLAG
		,R.AREA_2
		,MD5(8  || ''-'' ||''CCSI'' || ''-'' || STATUS_DESCRIPTION) AS VISIT_STATUS_KEY
		FROM RAWVRFP_MCOINV R 
	LEFT JOIN MCOINVOICE O  
		ON R.CLIENT_ID = O.CLIENT_ID
		AND R.AREA_2 = O.AREA 
		AND  (MONTH(O.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE) AND YEAR(O.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE)) AND R.SERVICE_TYPE = O.SERVICE_TYPE
	LEFT JOIN MAXMCOINVOICE O1  
		ON R.CLIENT_ID = O1.CLIENT_ID
		AND R.AREA_2 = O1.AREA 
		AND  (MONTH(O1.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE)-1 AND YEAR(O1.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE)) AND R.SERVICE_TYPE = O1.SERVICE_TYPE
	INNER JOIN HAH.DIM_BRANCH B 
		ON R.AREA_2  = B.OFFICE_CODE AND B.SOURCE_SYSTEM_ID  = 8 
	INNER JOIN DIM_EMPLOYEE E		
		ON R.EMPLOYEE_NUMBER = E.EMPLOYEE_NUMBER AND R.AREA_2 = E.AREA
	INNER JOIN DIM_CLIENT C --INNER JOIN DUE TO WE DON''T NEE TO TAKE BLAN CLIENT DATA
		ON R.CLIENT_ID = C.CLIENT_NUMBER AND R.AREA_2 = C.AREA
	INNER JOIN HAH.DIM_CONTRACT CO ON R.CONTRACT_NO = CO.CONTRACT_CODE AND CO.SOURCE_SYSTEM_ID  = 8  
	INNER JOIN DISC_${var.SF_ENVIRONMENT}.CCSI.DESKINFO D 
		ON R.EMP_DESK = D.DESK_DESIGNATOR AND R.AREA_2 = D.AREA
		--ON E.SUPERVISORY_DESK = D.DESK_DESIGNATOR AND E.AREA = D.AREA
		--WHERE R.CLIENT_ID  = 001641372
	LEFT JOIN LOG_DATA  AS ACDATA
		ON ACDATA.CLIENT_ID = R.CLIENT_ID
		AND ACDATA.OFFICE = R.AREA_2
		AND (ACDATA.ACTUAL_START_DATE::DATE) = (R.PERIOD_DATE::DATE)	
 	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.PAYOR_CONTRACT_UI.PAYOR_CONTRACT_MAPPING PCM
		ON  PCM.ORIGINAL_SOURCE_SYSTEM_ID = 8
		AND UPPER(R.CONTRACT_NO) = PCM.CONTRACT_CODE
	UNION
SELECT DISTINCT
		MD5(NVL(R.CLIENT_ID,''E'')::STRING || ''-'' || NVL(R.PERIOD_DATE::STRING,''E'')::STRING || ''-'' || NVL(R.DAY_OF_SERVICE,''E'')::STRING
			|| ''-'' || NVL(R.RECORD_NUMBER,''E'')::STRING) AS VISIT_KEY
		,R.PERIOD_DATE AS "REPORT_DATE"
		,B.BRANCH_KEY
 		,MD5(C.MASTER_ID) AS "CLIENT_KEY"
		,CO.CONTRACT_KEY
		,NULL AS "SCHEDULED_EMPLOYEE_KEY" -- MD5(E.MASTER_ID)
		,MD5(E.MASTER_ID) AS "EMPLOYEE_KEY"
		,8 AS "SOURCE_SYSTEM_ID"
		,MD5(D.AREA ||''-''|| NVL(D.SUPERVISOR_INITIAL,''UNKNOWN'') ||''-''|| ''CCSI'') AS SUPERVISOR_KEY--DIM SUPERVISOR
		,NULL AS INVOICE_KEY
		,NULL AS PAYROLL_KEY
		,null as CLIENT_SERVICE_KEY 
		,MD5(''CCSI''|| ''-'' || PCM.PAYOR_ID || ''-'' || R.CONTRACT_NO || ''-'' || R.SERVICE_TYPE || ''-'' || ''CCSI'') AS PARTNER_CONTRACT_SERVICE_KEY
		,null as BILLING_KEY 
		,R.PERIOD_DATE AS "SERVICE_DATE"
		,TRY_TO_DATE(R.PAY_PERIOD_ENDING_DATE, ''MMDDYY'') AS "PAYROLL_DATE"
		,UPPER(B.BRANCH_NAME) AS "BRANCH_NAME"
		,R.CLIENT_ID AS "CLIENT_NUMBER"
		,CO.CONTRACT_CODE
		,NULL AS "SCHEDULED_EMPLOYEE_ID" --R.EMPLOYEE_NUMBER 
		,R.EMPLOYEE_NUMBER AS "EMPLOYEE_ID"
		,''CCSI'' AS "SYSTEM_CODE"
		,UPPER(D.SUPERVISOR_INITIAL) AS "SUPERVISOR_CODE"
		,NULL as INVOICE_ID
		,NULL as CHEQUE_NUMBER
		,FALSE AS "CLEAN_SHIFT_FLAG"
		,CASE WHEN COALESCE(O.BALANCE,O1.BALANCE) <= 0 THEN ''05'' ELSE ''02'' END AS "STATUS_CODE" -- 05 = PAID , 01 = PENDING, 02 = Confirmed
		,CASE WHEN COALESCE(O.BALANCE,O1.BALANCE) <= 0 THEN ''Paid'' ELSE ''Confirmed'' END AS "STATUS_DESCRIPTION" --NEED TO SHOW PENDING IN CASE OF INCOICE NOT 			GENERATED
		,NULL AS "CANCEL_REASON_CODE"
		,NULL AS "CANCEL_REASON_DESCRIPTION"
		,NULL AS "CANCEL_REASON_NOTES"
		,FALSE AS "EXCEPTION_REASON_INDICATOR"
		,NULL AS "RESOLUTION_CODE"
		,NULL AS "RESOLUTION_DESCRIPTION"
		,NULL AS "REJECTION_CODE"
		,NULL AS "REJECTION_DESCRIPTION"
		,NULL AS "BILL_CODE"
		,ROUND((NULLIF(COALESCE(O.AMOUNT_BILLED,O1.AMOUNT_BILLED),0)/ NULLIF(COALESCE(O.UNITS,O1.UNITS),0)), 2) AS "BILL_RATE"
		--* R.HOURS_WORKED AS "BILL_RATE" --ANDY WILL CONFIRM PER VISIT BILL RATE FROM WHERE TO TAKE
		,NULL AS "BILL_UNITS_SERVED"
		,NULL AS "BILL_UNIT_TYPE"
		,NULL AS "OVERHEAD_RATE"
		,NULL AS "SCHEDULE_TIMEIN"
		,NULL AS "SCHEDULE_TIMEOUT"
		,NULL AS "SCHEDULE_DURATION"
		--,NULL AS "ACTUAL_TIMEIN"
		--,NULL AS "ACTUAL_TIMEOUT"
		--,NULL AS "ACTUAL_DURATION"
		,ACDATA.ACTUAL_START_DATE AS "ACTUAL_TIMEIN"
		,ACDATA.ACTUAL_END_DATE AS "ACTUAL_TIMEOUT"
		,ACDATA.ACTUAL_DURATION AS "ACTUAL_DURATION"
		,NULL AS "ADJUSTED_TIMEIN"
		,NULL AS "ADJUSTED_TIMEOUT"
		,R.HOURS_WORKED AS "ADJUSTED_DURATION"
		--,R.HOURS_WORKED AS "HOURS_SERVED"
		,NVL(CAST(COALESCE(ADJUSTED_DURATION,ACTUAL_DURATION) AS DECIMAL(18, 3)),0) AS HOURS_SERVED 
		,NULL AS "COMMENTS"
		,NULL AS "IS_EVV_FLAG"
		,NULL AS "TIMESHEET_TYPE"
		,NULL AS "TRACKING_ID"
		,-1 AS ETL_TASK_KEY
		,-1 AS ETL_INSERTED_TASK_KEY
      	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
      	,CURRENT_USER AS ETL_INSERTED_BY 
      	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
      	,CURRENT_USER AS ETL_LAST_UPDATED_BY
	    ,0 AS ETL_DELETED_FLAG
		,R.AREA_2
		,MD5(8  || ''-'' ||''CCSI'' || ''-'' || STATUS_DESCRIPTION) AS VISIT_STATUS_KEY
	FROM RAWVRFP_OTHERINV R 
	LEFT JOIN OTHERINV O  
		ON R.CLIENT_ID = O.CLIENT_ID
		AND R.AREA_2 = O.AREA 
		AND  (MONTH(O.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE) AND YEAR(O.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE)) AND R.SERVICE_TYPE = O.SERVICE_TYPE
	LEFT JOIN MAXOTHERINV O1  
		ON R.CLIENT_ID = O1.CLIENT_ID
		AND R.AREA_2 = O1.AREA 
		AND  (MONTH(O1.DATE_OF_SERVICE) = MONTH(R.PERIOD_DATE)-1 AND YEAR(O1.DATE_OF_SERVICE) = YEAR(R.PERIOD_DATE)) AND R.SERVICE_TYPE = O1.SERVICE_TYPE
	INNER JOIN HAH.DIM_BRANCH B 
		ON R.AREA_2  = B.OFFICE_CODE AND B.SOURCE_SYSTEM_ID  = 8
	INNER JOIN DIM_EMPLOYEE E		
		ON R.EMPLOYEE_NUMBER = E.EMPLOYEE_NUMBER AND R.AREA_2 = E.AREA 
	INNER JOIN DIM_CLIENT C --INNER JOIN DUE TO WE DON''T NEE TO TAKE BLAN CLIENT DATA
		ON R.CLIENT_ID = C.CLIENT_NUMBER AND R.AREA_2 = C.AREA 
	INNER JOIN HAH.DIM_CONTRACT CO ON R.CONTRACT_NO = CO.CONTRACT_CODE AND CO.SOURCE_SYSTEM_ID  = 8 
	INNER JOIN DISC_${var.SF_ENVIRONMENT}.CCSI.DESKINFO D 
		ON R.EMP_DESK = D.DESK_DESIGNATOR AND R.AREA_2 = D.AREA
	LEFT JOIN LOG_DATA  AS ACDATA
		ON ACDATA.CLIENT_ID = R.CLIENT_ID
		AND ACDATA.OFFICE = R.AREA_2
		AND (ACDATA.ACTUAL_START_DATE::DATE) = (R.PERIOD_DATE::DATE)		
		LEFT JOIN DISC_${var.SF_ENVIRONMENT}.PAYOR_CONTRACT_UI.PAYOR_CONTRACT_MAPPING PCM
		ON  PCM.ORIGINAL_SOURCE_SYSTEM_ID = 8
		AND UPPER(R.CONTRACT_NO) = PCM.CONTRACT_CODE		
		)
		SELECT *
		,ROW_NUMBER() OVER (PARTITION BY VISIT_KEY
		--,EMPLOYEE_KEY,EMPLOYEE_ID
		ORDER BY VISIT_KEY DESC) AS RN  
		FROM RESULT		
		) AS TLB
		LEFT JOIN HAH.DIM_VISIT_STATUS_MAPPING VSM ON TLB.VISIT_STATUS_KEY = VSM.VISIT_STATUS_KEY   
		WHERE RN = 1 ;--900 DATA ARE DUPLICATE FOR CLIENT, IF TRYING FOR UNIQUE FOR CLINET CTE THEN 200000 DATA LOSS THAT''S WHY MANGED WITH THIS CONDITION `;
		 try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
          
 EOT
}

