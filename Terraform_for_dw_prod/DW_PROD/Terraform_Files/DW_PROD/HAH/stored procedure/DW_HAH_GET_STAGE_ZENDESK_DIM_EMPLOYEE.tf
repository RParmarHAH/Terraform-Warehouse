resource "snowflake_procedure" "DW_HAH_GET_STAGE_ZENDESK_DIM_EMPLOYEE" {
	name ="GET_STAGE_ZENDESK_DIM_EMPLOYEE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result varchar(1000);
BEGIN

INSERT OVERWRITE INTO STAGE.ZENDESK_DIM_EMPLOYEE
(WH_EMPLOYEE_KEY
,EMPLOYEE_KEY
,EMPLOYEE_ID
,SYSTEM_CODE
,SOURCE_SYSTEM_ID
,EMPLOYEE_NUMBER
,EMPLOYEE_HIRE_DATE
,ACTIVE_EMPLOYEE_FLAG
,EMPLOYEE_FIRST_NAME
,EMPLOYEE_MIDDLE_NAME
,EMPLOYEE_LAST_NAME
,EMPLOYEE_STATE_CODE
,EMPLOYEE_HOME_PHONE
,EMPLOYEE_CELL_PHONE
,EMPLOYEE_WORK_PHONE
,HISPANIC_OR_LATINO
,EMPLOYEE_PERSONAL_EMAIL
,EMPLOYEE_WORK_EMAIL
,EMPLOYEE_CATEGORY
,PAYROLL_ID
,WORK_STATE
,PRIMARY_BRANCH_NAME
,EFFECTIVE_FROM_DATE
,EFFECTIVE_TO_DATE
,ETL_TASK_KEY
,ETL_INSERTED_TASK_KEY
,ETL_INSERTED_DATE
,ETL_INSERTED_BY
,ETL_LAST_UPDATED_DATE
,ETL_LAST_UPDATED_BY
,ETL_DELETED_FLAG
,ETL_INFERRED_MEMBER_FLAG
)
--
WITH FOR_NULL_NAMES AS 
(SELECT ID, NAME,SPLIT_PART(NAME,'' '',1) AS FIRST_NAME,
		CASE WHEN REGEXP_COUNT(NAME, '' '') > 1 
			 THEN SPLIT_PART(NAME,'' '',2) -- if number of spaces are more than one then taking second word as middle name
		END AS MIDDLE_NAME,
		CASE WHEN REGEXP_COUNT(NAME, '' '') >=2 
			 THEN SUBSTR(NAME, LENGTH(SUBSTR(NAME, 1, POSITION('' '', NAME, POSITION('' '', NAME) + 1) - 1)) + 1)
			 WHEN REGEXP_COUNT(NAME, '' '') = 1 
			 THEN SPLIT_PART(NAME,'' '',-1)
		END AS LAST_NAME
FROM DISC_${var.SF_ENVIRONMENT}.ZENDESK."USER"
WHERE name NOT LIKE ''%@%''
  AND name NOT REGEXP ''^[0-9]{3}-[0-9]{3}''
  AND name NOT REGEXP ''^[0-9]{2}-[0-9]{4}''
  AND NOT (name  ILIKE ANY (''+1%'',''+2%'',''+8%'',''CALLER%'',''REPLY+%'',''EMAILCUSTOMER%'',''???%''))
AND NOT (NAME REGEXP ''^[0-9-]+$'')
AND USER_FIELDS_FIRST_NAME IS NULL
AND LEN("NAME") <> 64 -- some keys are coming of length 64, excluding those
AND LEN(COALESCE(FIRST_NAME,'''')) <= 50
AND LEN(COALESCE(MIDDLE_NAME,'''')) <= 50
AND LEN(COALESCE(LAST_NAME,'''')) <= 50
)
SELECT DISTINCT
  USER_FIELDS_EMPLOYEE_KEY AS WH_EMPLOYEE_KEY
, MD5(''ZENDESK'' || ''-'' || Z.ID  || ''-'' || Z.SOURCE || ''-'' || ''ZENDESK'' ) AS EMPLOYEE_KEY
, Z.ID AS EMPLOYEE_ID
, CASE SOURCE WHEN ''Payroll'' THEN ''ZENDESK_PAYROLL''
			  WHEN ''AMS'' THEN ''ZENDESK_AMS''	
			  END AS SYSTEM_CODE
, 25 AS SOURCE_SYSTEM_ID
, TRY_CAST(USER_FIELDS_EMPLOYEE_ID_TEXT AS INTEGER) AS EMPLOYEE_NUMBER
, USER_FIELDS_HIRE_DATE AS EMPLOYEE_HIRE_DATE
, CASE USER_FIELDS_EMPLOYEE_STATUS WHEN ''active'' THEN TRUE
								   WHEN ''inactive'' THEN FALSE
								   ELSE TRUE	
								   END AS ACTIVE_EMPLOYEE_FLAG
, COALESCE(USER_FIELDS_FIRST_NAME,UPPER(NN.FIRST_NAME)) AS EMPLOYEE_FIRST_NAME 
, UPPER(NN.MIDDLE_NAME) AS EMPLOYEE_MIDDLE_NAME
, COALESCE(USER_FIELDS_LAST_NAME,UPPER(NN.LAST_NAME)) AS EMPLOYEE_LAST_NAME 
, S.STATE_ISO_CODE AS EMPLOYEE_STATE_CODE 
, USER_FIELDS_HOME_PHONE AS EMPLOYEE_HOME_PHONE
, USER_FIELDS_CELL_PHONE AS EMPLOYEE_CELL_PHONE
, PHONE AS EMPLOYEE_WORK_PHONE
, FALSE AS HISPANIC_OR_LATINO
, USER_FIELDS_PERSONAL_EMAIL AS EMPLOYEE_PERSONAL_EMAIL
, CASE WHEN EMAIL ILIKE ''%gmartinkus@prod.exchangelabs.com%'' 
	THEN ''gmartinkus@prod.exchangelabs.com'' 
	ELSE EMAIL 
	END AS EMPLOYEE_WORK_EMAIL 
, upper(USER_FIELDS_ADMIN_OR_CAREGIVER) AS EMPLOYEE_CATEGORY
, USER_FIELDS_EMPLOYEE_ID_TEXT  AS PAYROLL_ID
, S.STATE_ISO_CODE AS WORK_STATE
, USER_FIELDS_BRANCH AS PRIMARY_BRANCH_NAME
, TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE
, TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,

:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,

      CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
	, CURRENT_USER AS ETL_INSERTED_BY
	, CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
	, CURRENT_USER AS ETL_LAST_UPDATED_BY
	, 0 AS ETL_DELETED_FLAG	 
	, 0 AS ETL_INFERRED_MEMBER_FLAG            
FROM DISC_${var.SF_ENVIRONMENT}.ZENDESK.USER Z
LEFT JOIN FOR_NULL_NAMES NN 
	ON NN.ID = Z.ID
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_STATE S
ON REPLACE(UPPER(TRIM(Z.USER_FIELDS_STATE)),''_'','' '') = UPPER(TRIM(S.STATE_NAME));
--WHERE Z."NAME" <> ''Permanently deleted user''

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;

 EOT
}

