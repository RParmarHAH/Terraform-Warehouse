resource "snowflake_procedure" "DW_HAH_GET_STAGE_QUICKBOOKS_DIM_EMPLOYEE" {
	name ="GET_STAGE_QUICKBOOKS_DIM_EMPLOYEE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT


BEGIN

--***********************************************************************************************************************************
-- NAME: QUICKBOOKS_DIM_EMPLOYEE
--
-- PURPOSE: Creates one row per employee according to QuickBooks
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR				NOTES:
-- ---------	----------------	-------------------------------------------------------------------------------------------------        
-- 03/17/23		Aditya Shukla		Initial Development
--									(since the source files had some encrypted SSNs and some missing SSNs
--									QB_SSN_MAPPING is unique list of all employees and their SSN - from employee and payroll files)																		  
-- 11/10/2023   Deepen Gajjar     Added a logic for HISPANIC_OR_LATINO and update the logic for ethnicity as per ticket - IDDOX- 388.  
-- 12/13/2023	Saurav Purohit		Added Acquired System field
--***********************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.QUICKBOOKS_DIM_EMPLOYEE

WITH PAYROLL AS (
	SELECT DISTINCT 
		PAY.COMPANY, 
		PAY."NAME",
		PAY.SSN,
		MIN(PAY.CHK_DATE)::DATE AS FIRST_CHECK_DATE,
		MAX(PAY.CHK_DATE)::DATE AS LAST_CHECK_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.ADP.QB_PAYROLL PAY
	GROUP BY 1, 2, 3
	UNION
	SELECT DISTINCT 
		COMPANY,
		"NAME",
		SSN,
		MIN(PAY.CHK_DATE)::DATE AS FIRST_CHECK_DATE,
		MAX(PAY.CHK_DATE)::DATE AS LAST_CHECK_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.ADP.QB_PAYROLL_DATES PAY
	GROUP BY 1, 2, 3
	UNION 
	SELECT DISTINCT 
	COMPANY,
	"NAME",
	NULL AS SSN,
	MIN(PAY.DATE)::DATE AS FIRST_CHECK_DATE,
	MAX(PAY.DATE)::DATE AS LAST_CHECK_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.ADP.QB_PAYROLL_MIDWAY_20_GROSS PAY
	GROUP BY 1, 2, 3
)
SELECT DISTINCT
	MD5(''QuickBooks'' || QB."NAME" || QB.COMPANY || 31) AS EMPLOYEE_KEY,
	MD5(QB."NAME" || QB.COMPANY) AS EMPLOYEE_ID,
	''QB - '' || QB.COMPANY AS SYSTEM_CODE,
	31 AS SOURCE_SYSTEM_ID,
	COALESCE(HEX_ENCODE(COALESCE(QB.SSN, REPLACE(QB_EMP.SS_NO, ''-''))), EMP.EMPLOYEE_PID) AS EMPLOYEE_PID,
	MD5(QB."NAME") AS EMPLOYEE_NUMBER,
	COALESCE(QB_EMP.DATE_OF_BIRTH, EMP.EMPLOYEE_DOB)::DATE AS EMPLOYEE_DOB,
	NULL AS EMPLOYEE_DATE_OF_DEATH,
	COALESCE(QB_EMP.HIRE_DATE, EMP.EMPLOYEE_HIRE_DATE)::DATE AS EMPLOYEE_HIRE_DATE,
	EMP.EMPLOYEE_REHIRE_DATE AS EMPLOYEE_REHIRE_DATE,
	EMP.EMPLOYEE_BENEFIT_START_DATE AS EMPLOYEE_BENEFIT_START_DATE,
	PAYROLL.FIRST_CHECK_DATE AS EMPLOYEE_FIRST_CHECK_DATE,
	PAYROLL.LAST_CHECK_DATE AS EMPLOYEE_LAST_CHECK_DATE,
	EMP.EMPLOYEE_LAST_WORKED_DATE AS EMPLOYEE_LAST_WORKED_DATE,
	EMP.EMPLOYEE_TERMINATE_DATE AS EMPLOYEE_TERMINATE_DATE,
	EMP.REASON_TO_TERMINATE AS REASON_TO_TERMINATE,
	FALSE AS ACTIVE_EMPLOYEE_FLAG, -- ask
	EMP.ABLE_TO_REHIRE_FLAG AS ABLE_TO_REHIRE_FLAG,
	NULL AS EMPLOYEE_PREFIX,
	COALESCE(QB_EMP.FIRST_NAME, SPLIT_PART(QB."NAME", '' '', 2)) AS EMPLOYEE_FIRST_NAME,
	QB_EMP.MI AS EMPLOYEE_MIDDLE_NAME,
	COALESCE(QB_EMP.LAST_NAME, SPLIT_PART(QB."NAME", '' '', 1)) AS EMPLOYEE_LAST_NAME,
	NULL AS EMPLOYEE_SUFFIX,
	COALESCE(QB_EMP.STREET1, EMP.EMPLOYEE_ADDRESS1) AS EMPLOYEE_ADDRESS1,
	COALESCE(QB_EMP.STREET2, EMP.EMPLOYEE_ADDRESS2) AS EMPLOYEE_ADDRESS2,
	COALESCE(QB_EMP.CITY, EMP.EMPLOYEE_CITY) AS EMPLOYEE_CITY,
	COALESCE(QB_EMP.STATE, EMP.EMPLOYEE_STATE_CODE) AS EMPLOYEE_STATE_CODE,
	COALESCE(QB_EMP.ZIP, EMP.EMPLOYEE_ZIP) AS EMPLOYEE_ZIP,
	EMP.EMPLOYEE_HOME_PHONE AS EMPLOYEE_HOME_PHONE,
	EMP.EMPLOYEE_CELL_PHONE AS EMPLOYEE_CELL_PHONE,
	EMP.EMPLOYEE_WORK_PHONE AS EMPLOYEE_WORK_PHONE,
	UPPER(COALESCE(QB_EMP.MAIN_EMAIL, EMP.EMPLOYEE_PERSONAL_EMAIL)) AS EMPLOYEE_PERSONAL_EMAIL,
	EMP.EMPLOYEE_WORK_EMAIL AS EMPLOYEE_WORK_EMAIL,
	NULL AS LINKED_IN_PROFILE_URL,
	COALESCE(QB_EMP.GENDER, EMP.EMPLOYEE_GENDER) AS EMPLOYEE_GENDER,
	EMP.EMPLOYEE_ETHNICITY AS EMPLOYEE_ETHNICITY,
	IFF(EMP.HISPANIC_OR_LATINO IS NULL, FALSE,EMP.HISPANIC_OR_LATINO) AS HISPANIC_OR_LATINO,
	EMP.EMPLOYEE_LANGUAGE AS EMPLOYEE_LANGUAGE,
	COALESCE(QB_EMP.MARITAL_STATUS, EMP.EMPLOYEE_MARITAL_STATUS) AS EMPLOYEE_MARITAL_STATUS,
	EMP.EMPLOYEE_TYPE AS EMPLOYEE_TYPE, -- ask
	EMP.EMPLOYEE_CATEGORY AS EMPLOYEE_CATEGORY, -- ask
	NULL AS EXEMPT_FLAG,
	EMP.JOB_TITLE AS JOB_TITLE,
	EMP.JOB_DESCRIPTION AS JOB_DESCRIPTION,
	EMP.CLASS_ID AS CLASS_ID,
	COALESCE(QB_EMP.WORKERS_COMP_CODE, EMP.WORKERS_COMP) AS WORKERS_COMP,
	NULL AS PAYROLL_ID,
	NULL AS PERCENT_401K_DEDUCTION,
	NULL AS AMOUNT_401K_DEDUCTION,
	NULL AS JAZZHR_APPLICANT_ID,
	NULL AS JAZZHR_USER_ID,
	NULL AS JAZZHR_CONTACT_ID,
	EMP.WORK_STATE AS WORK_STATE,
	EMP.SUTA_STATE AS SUTA_STATE,
	NULL AS EMPLOYEE_DEPARTMENT,
	EMP.EMPLOYEE_OFFICE_CODE AS EMPLOYEE_OFFICE_CODE,
	COALESCE(QB_BRANCHES.BRANCH_KEY, MD5(''QuickBooks'' || ''QB - CORPORATE'' || 31)) AS PRIMARY_BRANCH_KEY,
	QB_BRANCHES.OFFICE_STATE_CODE AS PRIMARY_BRANCH_STATE,
	COALESCE(QB_BRANCHES.BRANCH_NAME, ''QB - CORPORATE'') AS PRIMARY_BRANCH_NAME,
	QB_BRANCHES.SYSTEM_CODE AS PRIMARY_BRANCH_SYSTEM_CODE,
	NULL AS CASE_MANAGER_FLAG,
	NULL AS SUPERVISOR_FLAG,
	NULL AS COORDINATOR_FLAG,
	NULL AS LINKED_ID,
	NULL AS SALARY,
	NULL AS PAY_RATE,
	TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
	TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
	NULL AS MDM_DIM_EMPLOYEE_KEY,
		-1 AS ETL_TASK_KEY,
		-1 AS ETL_INSERTED_TASK_KEY,
		current_date() AS ETL_INSERTED_DATE,
		current_user() AS ETL_INSERTED_BY,
		current_date() AS ETL_LAST_UPDATED_DATE,
		current_user() AS ETL_LAST_UPDATED_BY,
		FALSE ETL_DELETED_FLAG,
		FALSE ETL_INFERRED_MEMBER_FLAG,
		QB.COMPANY as acquired_system 
FROM DISC_${var.SF_ENVIRONMENT}.ADP.QB_SSN_MAPPING QB
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ADP.QB_EMPLOYEES QB_EMP
	ON TRIM(REPLACE(QB_EMP.SS_NO, ''-'')) = QB.SSN 
	AND QB_EMP.COMPANY = QB.COMPANY
	AND (QB_EMP.FIRST_NAME IS NOT NULL AND QB_EMP.LAST_NAME IS NOT NULL)
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_EMPLOYEE EMP
	ON EMP.SOURCE_SYSTEM_ID = 6 
	AND QB.SSN = HEX_DECODE_STRING(EMP.EMPLOYEE_PID)
	AND SPLIT_PART(QB."NAME", '' '', 2) = UPPER(EMP.EMPLOYEE_FIRST_NAME)
	AND QB.COMPANY
		= 
		CASE WHEN EMP.SYSTEM_CODE = ''PRIME'' THEN ''PRIMEHOMECARE'' ELSE EMP.SYSTEM_CODE END
LEFT JOIN PAYROLL 
	ON UPPER(PAYROLL.NAME) = QB."NAME" 
	AND REPLACE(PAYROLL.SSN, ''-'') = QB.SSN
LEFT JOIN DW_${var.SF_ENVIRONMENT}.STAGE.QUICKBOOKS_DIM_BRANCH QB_BRANCHES 
	ON QB_BRANCHES.BRANCH_NAME = TRIM(UPPER(QB_EMP.CLASS))
	AND QB_BRANCHES.SYSTEM_CODE = ''QB - '' || QB.COMPANY;
	
RETURN ''SUCESS'';
END;

 EOT
}

