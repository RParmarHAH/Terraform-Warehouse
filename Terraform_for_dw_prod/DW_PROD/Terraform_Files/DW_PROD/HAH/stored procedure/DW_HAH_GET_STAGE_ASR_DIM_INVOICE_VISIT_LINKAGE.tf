resource "snowflake_procedure" "DW_HAH_GET_STAGE_ASR_DIM_INVOICE_VISIT_LINKAGE" {
	name ="GET_STAGE_ASR_DIM_INVOICE_VISIT_LINKAGE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN
--*****************************************************************************************************************************
-- NAME:  ASR_DIM_INVOICE_VISIT_LINKAGE
--
-- DEVELOPMENT LOG:A
-- DATE         AUTHOR              NOTES:
-- --------     ------------------- -----------------------------------------------------------------------------------------------
-- 06/12/23     Preeti Sharma       Initial Development

--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO STAGE.ASR_DIM_INVOICE_VISIT_LINKAGE
WITH CLIENT AS
(
    SELECT * FROM
    (
        SELECT MASTER_ID, CUSTOMERID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MASTER_LIST
    )
    UNION
    SELECT * FROM
    (
        SELECT DISTINCT MASTER_ID, CUSTOMERID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MATCH_LIST
        WHERE CLIENTID NOT IN (SELECT CLIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MASTER_LIST)
    )
)
, EMPLOYEE AS
(
SELECT* FROM
(
SELECT MASTER_ID, EMPLOYEEID
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MASTER_LIST
)
UNION
SELECT* FROM
(
SELECT DISTINCT MASTER_ID, EMPLOYEEID
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MATCH_LIST
WHERE EMPLOYEEID NOT IN(SELECT EMPLOYEEID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MASTER_LIST)
)
)
, REVENUE_DATA AS(
SELECT*, EMP.EMPLOYEEID AS DIM_EMP_ID
FROM
DISC_${var.SF_ENVIRONMENT}.ASR.ASR_REVENUE PR
LEFT JOIN
DISC_${var.SF_ENVIRONMENT}.ASR.ASR_EMPLOYEES EMP ON EMP.EMPLOYEEPUBLICID = PR.EMPLOYEE_ID
WHERE BILLING_TRAN_ID_NUMBER NOT IN(SELECT BILLINGTRANSACTIONID FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_RECEIVABLES)
AND TO_DATE(PR.VISIT_DATE,''MM/DD/YYYY'') < ''2022-06-01''
)
SELECT
MD5(''PRIME''|| ''-''|| BSVR.BILLING_TRAN_ID_NUMBER|| ''-''|| IFNULL(TRIM(COALESCE(EMP.MASTER_ID,BSVR.EMPLOYEE_ID)),''UNKNOWN'') || ''-''|| TRIM(COALESCE(CLI.MASTER_ID,BSVR.CUSTOMER_ID)) || ''-''|| ''ASR'') AS REVENUE_KEY
,MD5(''PRIME'' || ''-'' || COALESCE(V.SERVICEVISITACTUALID,BSVR.BILLING_TRAN_ID_NUMBER) || ''-'' || ''ASR'') AS VISIT_KEY
,CAST(COALESCE(V.SERVICEVISITACTUALID,BSVR.BILLING_TRAN_ID_NUMBER) AS VARCHAR) AS VISIT_ID
,CASE WHEN TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <> TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
      THEN TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
      ELSE TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')
      END AS SERVICE_DATE
,''PRIME''AS SYSTEM_CODE
,13 AS SOURCE_SYSTEM_ID
,:STR_ETL_TASK_KEY AS ETL_TASK_KEY
,:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY                     
,convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE
,CURRENT_USER as ETL_INSERTED_BY
,convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE
,CURRENT_USER as ETL_LAST_UPDATED_BY
,0 as ETL_DELETED_FLAG
FROM
REVENUE_DATA BSVR
LEFT JOIN
CLIENT CLI ON BSVR.CUSTOMER_ID= CLI.CUSTOMERID
LEFT JOIN
EMPLOYEE EMP ON BSVR.DIM_EMP_ID= EMP.EMPLOYEEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_VISITS V 
ON BSVR.BILLING_TRAN_ID_NUMBER = V.SERVICEVISITACTUALID
UNION
SELECT
MD5(''PRIME''|| ''-''|| RSB.BILLINGTRANSACTIONID|| ''-''|| IFNULL(TRIM(COALESCE(EMP.MASTER_ID,RSB.EMPLOYEEID)),''UNKNOWN'') || ''-''|| TRIM(COALESCE(CLI.MASTER_ID,RSB.CUSTOMERID)) || ''-''|| ''ASR'') AS REVENUE_KEY
,MD5(''PRIME'' || ''-'' || COALESCE(V.SERVICEVISITACTUALID,RSB.SERVICEVISITACTUALID) || ''-'' || ''ASR'') AS VISIT_KEY
,CAST(COALESCE(V.SERVICEVISITACTUALID,RSB.SERVICEVISITACTUALID) AS VARCHAR) AS VISIT_ID
,CASE WHEN TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <> TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
      THEN TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
      ELSE TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')
      END AS SERVICE_DATE
,''PRIME''ASSYSTEM_CODE
,13 AS SOURCE_SYSTEM_ID
,:STR_ETL_TASK_KEY AS ETL_TASK_KEY
,:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY                     
,convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE
,CURRENT_USER as ETL_INSERTED_BY
,convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE
,CURRENT_USER as ETL_LAST_UPDATED_BY
,0 as ETL_DELETED_FLAG
FROM
DISC_${var.SF_ENVIRONMENT}.ASR.ASR_RECEIVABLES RSB
LEFT JOIN
CLIENT CLI ON RSB.CUSTOMERID= CLI.CUSTOMERID
LEFT JOIN
EMPLOYEE EMP ON RSB.EMPLOYEEID= EMP.EMPLOYEEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_VISITS V 
ON RSB.SERVICEVISITACTUALID = V.SERVICEVISITACTUALID
; 

RETURN ''SUCCESS'';
END;

 EOT
}

