resource "snowflake_procedure" "DW_HAH_GET_STAGE_MATRIXCARE_FACT_BRANCH_PAYROLL_PERIODS" {
	name ="GET_STAGE_MATRIXCARE_FACT_BRANCH_PAYROLL_PERIODS"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

                BEGIN
 --*************************************************************************************************************************************
-- NAME:  FACT_BRANCH_Payroll_Periods
--
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 04/20/22    Deepen Gajjar       Added MISSING_BRANCH CTE and for the branches which are missing under Matrix Care
    INSERT OVERWRITE INTO STAGE.MATRIXCARE_FACT_BRANCH_PAYROLL_PERIODS 
WITH BRANCHES AS (
	SELECT DISTINCT COALESCE(MAPPING.CONVERGED_BRANCH_KEY, BRANCH.BRANCH_KEY) AS BRANCH_KEY, 
		COALESCE(MAPPING.CONVERGED_OFFICE_CODE, BRANCH.OFFICE_CODE) AS OFFICE_CODE, 
		COALESCE(CONVERGED_BRANCH.OFFICE_STATE_CODE, BRANCH.OFFICE_STATE_CODE) AS OFFICE_STATE_CODE, 
		COALESCE(CONVERGED_BRANCH.BRANCH_NAME, BRANCH.BRANCH_NAME) AS BRANCH_NAME,
		IFF(CHARINDEX(''H_'', UPPER(COALESCE(CONVERGED_BRANCH.BRANCH_NAME, BRANCH.BRANCH_NAME))) = 1, TRUE, FALSE) AS IS_HAH_OFFICE,
		GREATEST(
			NVL(BRANCH.ETL_LAST_UPDATED_DATE, ''1/1/1900''),
			NVL(MAPPING.ETL_LAST_UPDATED_DATE, ''1/1/1900''),
			NVL(CONVERGED_BRANCH.ETL_LAST_UPDATED_DATE, ''1/1/1900'')) AS ETL_LAST_UPDATED_DATE
	FROM HAH.DIM_BRANCH AS BRANCH
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.MATRIXCARE_MASTER_BRANCH_MAPPING AS MAPPING
		ON MAPPING.BRANCH_KEY = BRANCH.BRANCH_KEY 
	LEFT JOIN HAH.DIM_BRANCH AS CONVERGED_BRANCH
		ON CONVERGED_BRANCH.BRANCH_KEY = COALESCE(MAPPING.CONVERGED_BRANCH_KEY, BRANCH.BRANCH_KEY)
	WHERE BRANCH.SOURCE_SYSTEM_ID = 7
), PAYROLL_DATA AS (
	SELECT CAST(PB.PROLLB_PAYDATE AS DATE) AS CHECK_DATE, PB.PROLLB_BRANCHID::STRING AS OFFICE_CODE, 
		COALESCE(BRANCHES.BRANCH_KEY, MD5(''MATRIXCARE'' || ''-'' || PB.PROLLB_BRANCHID::STRING || ''-'' || ''MATRIXCARE'')) AS BRANCH_KEY,
		COALESCE(BRANCHES.BRANCH_NAME, ''Unknown ('' || PB.PROLLB_BRANCHID || '')'') AS BRANCH_NAME,
		BRANCHES.IS_HAH_OFFICE, BRANCHES.OFFICE_STATE_CODE, PD.PROLLD_CAREGIVERID AS EMPLOYEE_ID, 
		CAST(NVL(MIN(PD.PROLLD_SERVICEDATE), DATEADD(DAY, -1, CHECK_DATE)) AS DATE) AS RECORDED_PERIOD_START_DATE, 
		CAST(NVL(MAX(PD.PROLLD_SERVICEDATE), DATEADD(DAY, -1, CHECK_DATE)) AS DATE) AS RECORDED_PERIOD_END_DATE,
		UPPER(DAYNAME(CHECK_DATE)) AS CHECK_DATE_DAY,
		GREATEST(
			NVL(MAX(PB.ETL_LAST_UPDATED_DATE), ''1/1/1900''),
			NVL(MAX(PD.ETL_LAST_UPDATED_DATE), ''1/1/1900''),
			NVL(MAX(BRANCHES.ETL_LAST_UPDATED_DATE), ''1/1/1900'')) AS ETL_LAST_UPDATED_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_PAYROLLBATCH PB
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_PAYROLLDETAILS PD 
		ON PD.PROLLD_PAYROLLBATCHID = PB.PROLLB_ID
	LEFT JOIN BRANCHES AS BRANCHES
		ON BRANCHES.OFFICE_CODE = PB.PROLLB_BRANCHID::STRING
	GROUP BY CAST(PB.PROLLB_PAYDATE AS DATE), PB.PROLLB_BRANCHID, 
		COALESCE(BRANCHES.BRANCH_KEY, MD5(''MATRIXCARE'' || ''-'' || PB.PROLLB_BRANCHID::STRING || ''-'' || ''MATRIXCARE'')),
		COALESCE(BRANCHES.BRANCH_NAME, ''Unknown ('' || PB.PROLLB_BRANCHID || '')''),
		BRANCHES.IS_HAH_OFFICE, BRANCHES.OFFICE_STATE_CODE,
		PD.PROLLD_CAREGIVERID
), ADAPTIVE_PAYDATES AS (
	-- Adaptive
	SELECT DISTINCT R.BRANCH_KEY, R.OFFICE_STATE_CODE, R.OFFICE_CODE, R.BRANCH_NAME,
		--DATEDIFF(DAY, R.CHECK_DATE, D.CALENDAR_DATE) AS CHECK_DATE_DIFF,
		DATEADD(DAY, DATEDIFF(DAY, R.CHECK_DATE, D.CALENDAR_DATE), R.CHECK_DATE) AS CHECK_DATE, 
		DATEADD(DAY, DATEDIFF(DAY, R.CHECK_DATE, D.CALENDAR_DATE), R.PERIOD_START_DATE) AS PERIOD_START_DATE, 
		DATEADD(DAY, DATEDIFF(DAY, R.CHECK_DATE, D.CALENDAR_DATE), R.PERIOD_END_DATE) AS PERIOD_END_DATE,
		MAX(R.ETL_LAST_UPDATED_DATE) OVER (PARTITION BY R.BRANCH_KEY, R.CHECK_DATE) AS ETL_LAST_UPDATED_DATE
	FROM HAH.DIM_DATE AS D
	JOIN (
		SELECT DISTINCT L.CHECK_DATE, L.BRANCH_KEY, L.OFFICE_STATE_CODE, L.OFFICE_CODE, L.BRANCH_NAME, 
			P.PERIOD_START_DATE, P.PERIOD_END_DATE,
			DAYNAME(P.PERIOD_START_DATE) AS PERIOD_START_DAY,
			DAYNAME(P.PERIOD_END_DATE) AS PERIOD_END_DAY,
			DAYNAME(L.CHECK_DATE) AS CHECK_DAY,
			L.MIN_DATE, L.ETL_LAST_UPDATED_DATE
		FROM (
			SELECT DISTINCT PAYROLL.CHECK_DATE, PAYROLL.BRANCH_KEY, PAYROLL.OFFICE_STATE_CODE, PAYROLL.OFFICE_CODE, PAYROLL.BRANCH_NAME, 
				MIN(PAYROLL.RECORDED_PERIOD_START_DATE) OVER (PARTITION BY PAYROLL.BRANCH_KEY) AS MIN_DATE,
				MAX(PAYROLL.ETL_LAST_UPDATED_DATE) OVER (PARTITION BY PAYROLL.CHECK_DATE, PAYROLL.BRANCH_KEY) AS ETL_LAST_UPDATED_DATE
			FROM PAYROLL_DATA AS PAYROLL
			WHERE PAYROLL.IS_HAH_OFFICE = FALSE AND UPPER(DAYNAME(PAYROLL.CHECK_DATE)) = ''FRI''
		) AS L
		LEFT JOIN (
			SELECT DISTINCT BEGINNING_OF_WEEK.CALENDAR_DATE AS PERIOD_START_DATE,
				ENDING_OF_WEEK.CALENDAR_DATE AS PERIOD_END_DATE,
				PAY_DAY.CALENDAR_DATE AS CHECK_DATE
			FROM HAH.DIM_DATE AS BEGINNING_OF_WEEK
			JOIN HAH.DIM_DATE AS ENDING_OF_WEEK
				ON UPPER(ENDING_OF_WEEK.DAY_NAME) = ''SAT'' AND DATEDIFF(DAY, BEGINNING_OF_WEEK.CALENDAR_DATE, ENDING_OF_WEEK.CALENDAR_DATE) BETWEEN 1 AND 6
			JOIN HAH.DIM_DATE AS PAY_DAY
				ON UPPER(PAY_DAY.DAY_NAME) = ''FRI'' AND DATEDIFF(DAY, ENDING_OF_WEEK.CALENDAR_DATE, PAY_DAY.CALENDAR_DATE) BETWEEN 1 AND 6
			WHERE UPPER(BEGINNING_OF_WEEK.DAY_NAME) = ''SUN''
		) AS P
			ON P.CHECK_DATE = L.CHECK_DATE
	) R
		ON R.MIN_DATE <= D.CALENDAR_DATE AND UPPER(D.DAY_NAME) = UPPER(R.CHECK_DAY)
), HAH_PAYDATES AS (
	-- Legacy HAH in MatrixCare
	SELECT L.BRANCH_KEY, L.OFFICE_STATE_CODE, L.OFFICE_CODE, L.BRANCH_NAME, PAYROLL_GROUP.GROUPNAME, L.CHECK_DATE, 
		PAYROLL_PERIOD.PERIODSTART AS PERIOD_START_DATE, PAYROLL_PERIOD.PERIODEND AS PERIOD_END_DATE,
		GREATEST(
			NVL(L.ETL_LAST_UPDATED_DATE, ''1/1/1900''),
			NVL(PAYROLL_GROUP.ETL_LAST_UPDATED_DATE, ''1/1/1900''),
			NVL(PAYROLL_PERIOD.ETL_LAST_UPDATED_DATE, ''1/1/1900'')) AS ETL_LAST_UPDATED_DATE
	FROM (
		SELECT DISTINCT PAYROLL.CHECK_DATE, PAYROLL.BRANCH_KEY, PAYROLL.OFFICE_STATE_CODE, PAYROLL.OFFICE_CODE, PAYROLL.BRANCH_NAME, PAYROLL.ETL_LAST_UPDATED_DATE
		FROM PAYROLL_DATA AS PAYROLL
		WHERE PAYROLL.IS_HAH_OFFICE = TRUE AND UPPER(DAYNAME(PAYROLL.CHECK_DATE)) = ''FRI''
	) AS L
	JOIN DISC_${var.SF_ENVIRONMENT}.APPBASEDATA.PAYROLLPERIODGROUPS AS PAYROLL_GROUP
		ON PAYROLL_GROUP.STATECODE = L.OFFICE_STATE_CODE
	JOIN DISC_${var.SF_ENVIRONMENT}.APPBASEDATA.PAYROLLPERIODS AS PAYROLL_PERIOD 
		ON PAYROLL_PERIOD.GROUPNAME = PAYROLL_GROUP.GROUPNAME AND PAYROLL_PERIOD.CHECKDATE = L.CHECK_DATE
), MISSING_BRANCHES AS (
	SELECT a.BRANCH_KEY , a.OFFICE_STATE_CODE ,A.BRANCH_NAME,
	a.DETAILED_OFFICE_NAME,
	b.period_start_date,
	b.period_end_date,
	b.check_date
	FROM DW_${var.SF_ENVIRONMENT}.HAH.DIM_BRANCH a
	FULL OUTER JOIN (
	SELECT dd.Calendar_Date AS Check_Date,
	       ''Weekly'' AS Pay_Frequency,
	       dd.Day_Name AS Check_Day_Name,
	       stdt.Calendar_Date AS Period_Start_Date,
	       stdt.Day_Name AS Period_Start_Day_Name,
	       enddt.Calendar_Date AS Period_End_Date,
	       enddt.Day_Name AS Period_End_Day_Name
	FROM HAH.DIM_Date AS dd
	INNER JOIN HAH.DIM_Date AS stdt ON stdt.Calendar_Date = DATEADD( DAY, -12, dd.Calendar_Date)
	INNER JOIN HAH.DIM_Date AS enddt ON enddt.Calendar_Date = DATEADD( DAY, -6, dd.Calendar_Date)
	WHERE dd.Day_Name = ''Fri''
	AND dd.Date_Key > ''20010301''
	) b 
	WHERE a.BRANCH_KEY IN (
	-- MISSING BRANCHES 
	SELECT DISTINCT BRANCH_KEY
	FROM DW_${var.SF_ENVIRONMENT}.HAH.DIM_BRANCH
	WHERE SOURCE_SYSTEM_ID = 7
	AND OFFICE_CODE NOT IN (SELECT PROLLB_BRANCHID::STRING
	FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_PAYROLLBATCH ))
), RESULTS AS (
	SELECT BRANCH_KEY, OFFICE_STATE_CODE, BRANCH_NAME AS DETAILED_OFFICE_NAME, PERIOD_START_DATE, PERIOD_END_DATE, CHECK_DATE
	FROM ADAPTIVE_PAYDATES AS A
	WHERE A.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	UNION 
	SELECT BRANCH_KEY, OFFICE_STATE_CODE, BRANCH_NAME AS DETAILED_OFFICE_NAME, PERIOD_START_DATE, PERIOD_END_DATE, CHECK_DATE
	FROM HAH_PAYDATES AS A
	WHERE A.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	UNION
	SELECT BRANCH_KEY, OFFICE_STATE_CODE, BRANCH_NAME AS DETAILED_OFFICE_NAME, PERIOD_START_DATE, PERIOD_END_DATE, CHECK_DATE
	FROM MISSING_BRANCHES A 
)
	SELECT MD5( CAST( BRANCH_KEY AS VARCHAR)|| CAST(CHECK_DATE AS VARCHAR)||''AppBaseData''||''5''||''1900-01-01'') AS BRANCH_PAYROLL_PERIODS_KEY,
		BRANCH_KEY,
		OFFICE_STATE_CODE,
		DETAILED_OFFICE_NAME,
		PERIOD_START_DATE,
		PERIOD_END_DATE,
		CHECK_DATE,
		
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
                        
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
		CURRENT_USER as ETL_INSERTED_BY ,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
		CURRENT_USER as ETL_LAST_UPDATED_BY,
		0 as ETL_DELETED_FLAG,
		0 as ETL_INFERRED_MEMBER_FLAG
	FROM RESULTS
;
;
    RETURN ''SUCCESS'';
    END;
    
 EOT
}

