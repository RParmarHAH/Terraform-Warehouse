resource "snowflake_procedure" "DW_HAH_GET_STAGE_MATRIXCARE_DIM_BILLING" {
	name ="GET_STAGE_MATRIXCARE_DIM_BILLING"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN
--****************************************************************************************************************************
-- NAME:  MATRIXCARE_DIM_BILLING
--
-- PURPOSE: Creates one row per BILLING according to MATRIXCARE 
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   ------------------------------------------------------------------------------------------
-- 04/03/23     Rajat Sapkal         Initial development
-- 07/03/23		Rajat Sapkal		 Bill Type change - added 0 as visit
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.MATRIXCARE_DIM_BILLING
WITH DATA AS(
SELECT DISTINCT 
MD5(''MATRIXCARE'' || ''-'' || s1.SVCC_id || ''-'' || ''MATRIXCARE'') AS BILLING_KEY,
	7 AS SOURCE_SYSTEM_ID,
	''MATRIXCARE'' AS SYSTEM_CODE,
	s1.SVCC_ID::varchar AS BILL_CODE,
COALESCE(s2.SVCC_NAME, ''UNKNOWN'') AS BILL_NAME,
	s1.SVCC_DESCRIPTION AS BILL_DESCRIPTION,
	CASE 
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG in (0,150) then ''Visit''
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG IN (15,30,60) then ''Hourly''
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG = 1440 then ''Daily''
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG IS NOT NULL THEN ''UNKNOWN''
        ELSE NULL
    END                                                                                                     AS BILL_TYPE,
	CASE 
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG = -1 then ''Medicare''
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG in (0,150) then ''Visit''
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG = 1 then ''Minute''
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG = 15 then ''15 Min''
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG = 30 then ''30 Min''
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG = 60 then ''Hourly''
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG = 1440 then ''Daily''
        WHEN s1.SVCC_DEFAULTBILLUNITFLAG IS NOT NULL THEN ''UNKNOWN''
        ELSE NULL
    END AS BILL_UOM,
	R.RATE_RATE1 AS BILL_RATE,
	R.RATE_EFFECTIVESTARTDATE AS RATE_EFFECTIVE_START_DATE,
	/*COALESCE(s2.SVCC_NAME, s1.SVCC_DESCRIPTION, ''UNKNOWN'') AS SERVICE_TYPE,
	CASE
    WHEN SERVICE_TYPE ILIKE ''%HHA%'' THEN ''HH''
    WHEN SERVICE_TYPE ILIKE ''%DD WAIVER%'' THEN ''HC''
    WHEN SERVICE_TYPE ILIKE ''%RN%'' THEN ''HC''
    WHEN SERVICE_TYPE ILIKE ''%ATTENDANT CARE%'' THEN ''HC''
    WHEN SERVICE_TYPE ILIKE ''%HOMEMAKER%'' THEN ''HH''
    WHEN SERVICE_TYPE ILIKE ''%INSERVICES%'' THEN ''OTH''
    WHEN SERVICE_TYPE ILIKE ''%WCOMP%'' THEN ''OTH''
    WHEN SERVICE_TYPE ILIKE ''%EXPENSES%'' THEN ''OTH''
    WHEN SERVICE_TYPE ILIKE ''%ADMIN%'' THEN ''OTH''
    WHEN SERVICE_TYPE ILIKE ''%PC%'' THEN ''HC''
    WHEN SERVICE_TYPE ILIKE ''%RSPO%'' THEN ''HC''
    WHEN SERVICE_TYPE ILIKE ''%PTO%'' THEN ''OTH''
    WHEN SERVICE_TYPE ILIKE ''%ATTC%'' THEN ''HC''
    WHEN SERVICE_TYPE ILIKE ''%DD EVENT%'' THEN ''HC''
    ELSE ''UNKNOWN''
	END AS REVENUE_CATEGORY,*/
	SERVICE_MAPPING.SERVICE_LINE as REVENUE_CATEGORY,
	SERVICE_MAPPING.SERVICE_LINE_SUBCATEGORY AS REVENUE_SUBCATEGORY_CODE,
	SERVICE_MAPPING.SERVICE_LINE_SUBCATEGORY_NAME AS REVENUE_SUBCATEGORY_NAME,
	NULL AS GL_CODE,
	NULL AS GL_NAME,
	NULL AS GL_DESCRIPTION,
	s1.SVCC_ACTIVE AS ACTIVE_FLAG,
	 :STR_ETL_TASK_KEY AS ETL_TASK_KEY
	 	, :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
	    , Convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
		, CURRENT_USER AS ETL_INSERTED_BY
		, Convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
		, CURRENT_USER AS ETL_LAST_UPDATED_BY
	 	, 0 AS ETL_DELETED_FLAG
		,R.RATE_EFFECTIVEENDDATE AS RATE_EFFECTIVE_END_DATE
	 FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SERVICECODE s1
	 left join DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SERVICECODE s2 on s2.svcc_id = s1.svcc_categoryid
	 LEFT JOIN (SELECT DISTINCT RATE_SERVICECODEID, RATE_RATE1, RATE_EFFECTIVESTARTDATE, RATE_EFFECTIVEENDDATE 
	 		FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_RATES R
	 			QUALIFY ROW_NUMBER() OVER (PARTITION BY RATE_SERVICECODEID ORDER BY RATE_EFFECTIVESTARTDATE DESC)=1
	 		   	) R 
	 ON S1.SVCC_ID = R.RATE_SERVICECODEID 
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}."STAGE".MATRIXCARE_SERVICE_REVENUE_CATEGORY_MAPPING AS SERVICE_MAPPING
		ON SERVICE_MAPPING.SVCC_ID = S1.SVCC_ID)
SELECT BILLING_KEY,SOURCE_SYSTEM_ID,SYSTEM_CODE, BILL_CODE, BILL_NAME, BILL_DESCRIPTION, BILL_TYPE, BILL_UOM, BILL_RATE, RATE_EFFECTIVE_START_DATE, REVENUE_CATEGORY, 
REVENUE_SUBCATEGORY_CODE,REVENUE_SUBCATEGORY_NAME,GL_CODE, GL_NAME,GL_DESCRIPTION,ACTIVE_FLAG,ETL_TASK_KEY,ETL_INSERTED_TASK_KEY,
ETL_INSERTED_DATE,ETL_INSERTED_BY,ETL_LAST_UPDATED_DATE,ETL_LAST_UPDATED_BY,ETL_DELETED_FLAG,RATE_EFFECTIVE_END_DATE FROM DATA	 
;
return ''SUCCESS'';
END;

 EOT
}

