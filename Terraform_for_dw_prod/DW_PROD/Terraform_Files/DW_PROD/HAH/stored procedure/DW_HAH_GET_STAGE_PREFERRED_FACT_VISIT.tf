resource "snowflake_procedure" "DW_HAH_GET_STAGE_PREFERRED_FACT_VISIT" {
	name ="GET_STAGE_PREFERRED_FACT_VISIT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN
    --*****************************************************************************************************************************
-- NAME:  PREFERRED_FACT_VISIT
--
-- PURPOSE: Creates one row per visit according to PREFERRED 
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 04/25/22     Moin Saiyed          Initial development
-- 06/02/22	    Mohit Vaghadiya		 Updated the logic of Is EVV Flag - going with IVRCALLIN and OUT
-- 07/29/22		Mohit Vaghadiya		 Using DIM_EMPLOYEE and DIM_CLIENT to use the CLIENT and EMPLOYEE KEY 
--									 as client may have moved to other agency, due to which it was generating
--									 different client key which was not there in DIM_CLIENT
-- 09/15/22		Mohit Vaghadiya		 Fixed IS_EVV flag issue returning duplicate records for few visits having diff flag 
--									 for Missed Visit in VISITS vs TBLVISITS_REPL table
--									 Updated the logic to look at only TBLVISITS_REPL table to identify if visit was missed or not
-- 11/11/22		Shraddha Sejpal		 Added schedule/visit/invoice/payroll status information and schedule/actual/adjusted timing information,scheduled employee,
--									 Confirmed_Flag, Bill_unit_type & Bill_Unit_Served.
-- 02/09/22		Mohit Vaghadiya		 Added this CTE to avoid multiple rates w/ same as of date - going with latest modified date
-- 12/05/2023   Sanket Jain          Added CLIENT_SERVICE_KEY,PARTNER_CONTRACT_SERVICE_KEY,BILLING_KEY
-- 08/18/2023   Harshala Kadam       VISIT STATUS MAPPING COLUMNS
-- 11/02/2023 	Shikhar Saxena		 Updated the CLEAN_SHIFT_FLAG logic for Auto Confirmed visits	
-- 22/11/2023   Harshala Kadam       Updated visit_status
-- 12/08/2023   DEEPEN GAJJAR        Updated Auto-confirm visit logic by leveraging historical data IDDOX 490.
-- 01/19/24	   Shubham Khunare	     schedule/visit Status name correction
--*****************************************************************************************************************************
--
	
INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.STAGE.PREFERRED_FACT_VISIT
WITH EMPLOYEE AS 
(
	SELECT * FROM
	(
		SELECT CAREGIVERID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.EMPLOYEE_MASTER_LIST
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT CAREGIVERID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.EMPLOYEE_MATCH_LIST
		WHERE CAREGIVERID NOT IN (SELECT CAREGIVERID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.EMPLOYEE_MASTER_LIST ) 
	) 
), CLIENT AS
(
	SELECT * FROM
	(
		SELECT MD5((AGENCYID||''-''||MASTER_ID||''-''||''PREFERRED'' )) as CLIENT_KEY,
		PATIENTID, MASTER_ID, AGENCYID, LASTNAME, FIRSTNAME, OFFICEID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT MD5((M.AGENCYID||''-''||M.MASTER_ID||''-''||''PREFERRED'' )) as CLIENT_KEY,
        MA.PATIENTID AS CLIENT_NUMBER, MA.MASTER_ID, MA.AGENCYID, MA.LASTNAME, MA.FIRSTNAME, MA.OFFICEID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.CLIENT_MATCH_LIST MA
		LEFT JOIN DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.CLIENT_MASTER_LIST M ON M.MASTER_ID =MA.MASTER_ID 
		WHERE MA.PATIENTID NOT IN (SELECT PATIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.CLIENT_MASTER_LIST)
	)
), AGENCY_CONTRACTS_INCLUDE AS
(
	SELECT CONFIG.AGENCYID, INCLUDE_ALL_CONTRACTS, GET(CONTRACT.VALUE, ''CONTRACTID'')::STRING AS CONTRACTID
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.AGENCY_MAPPING CONFIG
		, TABLE(FLATTEN(PARSE_JSON(CONFIG.CONTRACTS_TO_INCLUDE), OUTER => TRUE)) CONTRACT
	WHERE CONFIG.ISACTIVE = TRUE
), AGENCY_CONTRACTS_EXCLUDE AS
(
	SELECT CONFIG.AGENCYID, INCLUDE_ALL_CONTRACTS, GET(CONTRACT.VALUE, ''CONTRACTID'')::STRING AS CONTRACTID
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.AGENCY_MAPPING CONFIG
		, TABLE(FLATTEN(PARSE_JSON(CONFIG.CONTRACTS_TO_EXCLUDE), OUTER => TRUE)) CONTRACT
	WHERE CONFIG.ISACTIVE = TRUE
			AND CONFIG.CONTRACTS_TO_EXCLUDE IS NOT NULL
), AGENCY_OFFICES_INCLUDE AS
(
	SELECT CONFIG.AGENCYID, INCLUDE_ALL_OFFICES, GET(CONTRACT.VALUE, ''OFFICEID'')::STRING AS OFFICEID
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.AGENCY_MAPPING CONFIG
		, TABLE(FLATTEN(PARSE_JSON(CONFIG.OFFICES_TO_INCLUDE), OUTER => TRUE)) CONTRACT
	WHERE CONFIG.ISACTIVE = TRUE
), AGENCY_OFFICES_EXCLUDE AS
(
	SELECT CONFIG.AGENCYID, INCLUDE_ALL_OFFICES, GET(CONTRACT.VALUE, ''OFFICEID'')::STRING AS OFFICEID
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.AGENCY_MAPPING CONFIG
		, TABLE(FLATTEN(PARSE_JSON(CONFIG.OFFICES_TO_EXCLUDE), OUTER => TRUE)) CONTRACT
	WHERE CONFIG.ISACTIVE = TRUE
			AND CONFIG.OFFICES_TO_EXCLUDE IS NOT NULL
), COORDINATOR AS
(
	SELECT P.PATIENTID, LASTNAME, FIRSTNAME, PC1.COORDINATORID AS COORDINATORID1
			, PC1.COORDINATORNAME AS COORDINATORNAME1
	FROM CLIENT P
	JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.PROVIDERPATIENTCOORDINATORS PC1 
		ON P.PATIENTID = PC1.PATIENTID
			AND P.AGENCYID = PC1.AGENCYID
			AND PC1.COORDINATORSRNO = 1
), PREFERRED_REVENUE_SEG AS
(
	SELECT VISITID, REVENUE_CATEGORY, REVENUE_SUBCATEGORY_NAME, REVENUE_SUBCATEGORY_CODE 
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.REVENUE_MAPPING
	GROUP BY VISITID, REVENUE_CATEGORY, REVENUE_SUBCATEGORY_NAME, REVENUE_SUBCATEGORY_CODE
),
 RESCHEDULED AS 
( 
	WITH DELETEDVISIT AS 
	( 
		SELECT PATIENTID,VISITDATE FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.TBLVISITS_REPL
		WHERE DELETED=TRUE 
		GROUP BY PATIENTID ,VISITDATE 
	)
	SELECT *
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.TBLVISITS_REPL VISIT 
	INNER JOIN DELETEDVISIT DT 
	ON VISIT.PATIENTID =DT.PATIENTID AND VISIT.VISITDATE=DT.VISITDATE
	WHERE DELETED =FALSE 
),
DERIVED_STATUS AS 
( 
	SELECT DISTINCT VISITS.VISITID, VISITS.AGENCYID,
	CASE 
    WHEN  RE.VISITID IS NOT NULL  AND  VR.BILLED = 1 AND  VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL )
    THEN  ''ReScheduled In Review-Billed''
	WHEN  RE.VISITID IS NOT NULL  AND  VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN  ''ReScheduled In Review Notbillable''
	WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
    AND VR."VISITENDTIME" IS NOT NULL AND RE.VISITID IS NOT NULL AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN  ''ReScheduled Completed-Notbillable''
	WHEN   VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
    AND VR."VISITENDTIME" IS NOT NULL AND RE.VISITID IS NOT NULL AND  VR.BILLED = 1 
    THEN  ''ReScheduled Completed-Billed''
    WHEN  RE.VISITID IS NOT NULL AND (VR.BILLED =0) AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL )
    THEN  ''ReScheduled In Review Unbilled''
    WHEN  RE.VISITID IS NOT NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
    AND VR."VISITENDTIME" IS NOT NULL AND RE.VISITID IS NOT NULL  AND  VR.BILLED = 0
    THEN  ''ReScheduled Completed-Unbilled''
	WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 1  AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Cancelled Not billable'' 
	WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =1 AND VR.DELETED = TRUE
    THEN ''Cancelled Billed'' 
    WHEN (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL )  AND VR.VISITDATE::DATE > GETDATE()AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Scheduled Future Notbillable''--yes
    WHEN RE.VISITID IS NULL  AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Scheduled In Review Notbillable''
    WHEN RE.VISITID IS NULL AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND VR.BILLED =1
    THEN ''Scheduled In Review billed''
    WHEN  RE.VISITID IS NULL  AND VR.BILLED =0 AND VR.ISMISSEDVISIT = 0 AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL )
    THEN ''Scheduled In Review Unbilled''
    WHEN RE.VISITID IS NULL  AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
    AND VR."VISITENDTIME" IS NOT NULL AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )--AND INVOICE.VISITPAYMENTSTATUS = ''0'') OR (INVOICE.VISITPAYMENTSTATUS IN (''1'',''2''))) 
    THEN ''Scheduled Completed Not billable''
    WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
    AND VR."VISITENDTIME" IS NOT NULL AND  RE.VISITID IS NULL  AND VR.BILLED =1
    THEN ''Scheduled Completed Billed''
    WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
    AND VR."VISITENDTIME" IS NOT NULL AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL )
    THEN ''Completed In Review '' --yes
	WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
    AND VR."VISITENDTIME" IS NOT NULL AND  RE.VISITID IS NULL  AND VR.BILLED = 0 
    THEN ''Scheduled Completed UnBilled''
    WHEN  (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL)  AND  (VR.BILLED =0 )AND NVL(VR.ISMISSEDVISIT,0) =''0''
    THEN ''Scheduled Future Unbilled''
    WHEN (VR.VISITDATE::DATE > GETDATE() AND  RE.VISITID IS NOT NULL ) AND  (VR.BILLED =0 )AND NVL(VR.ISMISSEDVISIT,0) =''0''
    THEN ''Rescheduled Future Unbilled''
    WHEN (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL ) AND (VR.BILLED =0 )AND VR.DELETED=FALSE
    THEN ''Scheduled Unbilled''--yes
    WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL )
    THEN ''Cancelled In Review Unbilled''--yes
--  WHEN (VR.VISITDATE::DATE > GETDATE() AND  RE.VISITID IS NULL ) AND VR.ISMISSEDVISIT=1 AND (VR.BILLED =0 )AND VR.DELETED=TRUE
--  THEN ''Scheduled Cancelled Unbilled''--yes
    WHEN VR.VISITDATE::DATE > GETDATE() AND VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE
    THEN ''Future Cancelled Unbilled''
	WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE
    THEN ''Cancelled Unbilled''
    WHEN (VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE())
    THEN ''Cancelled''
    ELSE NULL END AS DERIVED_DISC_STATUS,
    CASE 
	WHEN VR.VISITDATE::DATE > GETDATE() AND NVL(INVOICE.VISITPAYMENTSTATUS,0) = 0 AND NVL(VR.ISMISSEDVISIT,0)=0 AND RE.VISITID IS NULL THEN ''Scheduled-Open''
	WHEN RE.VISITID IS NULL AND VR.ISMISSEDVISIT = 0 THEN ''Scheduled''
	WHEN RE.VISITID IS NOT NULL THEN ''Rescheduled''
	WHEN VR.ISMISSEDVISIT = 1  THEN ''Cancelled''
	--WHEN RE.VISITID IS NULL THEN ''Scheduled''
	END AS SCHEDULE_STATUS_NAME,
    CASE 
    WHEN VR.VISITDATE::DATE > GETDATE() THEN ''Future''
	WHEN VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) THEN ''In Review''
	WHEN VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE() THEN ''Did not happen''
	WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
    AND VR."VISITENDTIME" IS NOT NULL THEN ''Completed''
    ELSE NULL 
    END AS VISIT_STATUS_NAME,
    CASE 
	WHEN UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE 
	THEN ''Not BIllable''
	WHEN VR.BILLED =0  THEN ''UnBIlled''
--	WHEN VR.BILLED = 1 AND NVL(INVOICE.VISITPAYMENTSTATUS,0) THEN ''Billed''
	WHEN VR.BILLED = 1 AND NVL(INVOICE.VISITPAYMENTSTATUS,0) in(0,1,2) THEN ''Billed'' 
    ELSE NULL 
    END AS INVOICE_STATUS_NAME,
--	MD5(''17'' || ''-'' || ''PREFERRED'' || ''-'' || NVL(DERIVED_DISC_STATUS,''S'')) AS VISIT_STATUS_KEY
MD5(''17'' || ''-'' || ''PREFERRED'' || ''-'' || NVL(SCHEDULE_STATUS_NAME,''S'')||NVL(VISIT_STATUS_NAME,''S'')||NVL(INVOICE_STATUS_NAME,''S'')) AS VISIT_STATUS_KEY
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.VISITINFO_REPL VISITS
JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.TBLVISITS_REPL VR 
	ON VISITS.VISITID = VR.VISITID AND VISITS.AGENCYID = VR.AGENCYID
--LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.VISITUNBILLEDDETAILS IV
--	ON IV.VISITID=VISITS.VISITID
LEFT JOIN RESCHEDULED RE 
	ON VISITS.VISITID=RE.VISITID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.SERVICECODES SC
ON VISITS.PRIMARYSERVICECODEID=SC.SERVICECODEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.TBLINVOICEDETAILS_REPL INVOICE 
	ON VISITS.VISITID = INVOICE.VISITID AND VISITS.PRIMARYSERVICECODEID = INVOICE.INVSERVICECODEID
), PREFERRED_VISITS AS
(
	SELECT * FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.VISITS
	QUALIFY DENSE_RANK() OVER (PARTITION BY VISITID ORDER BY LASTMODIFIEDDATE DESC) = 1
), CONTRACT_RATES AS -- Added this CTE to avoid multiple rates w/ same as of date - going with latest modified date
(
	SELECT CR.*
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.CONTRACTRATES CR
	WHERE CR.TODATE::DATE > GETDATE()
			AND CR.FROMDATE::DATE <= GETDATE()
	QUALIFY ROW_NUMBER() OVER (PARTITION BY CR.AGENCYID, CR.CONTRACTID, CR.SERVICECODEID ORDER BY CR.MODIFIEDDATE DESC) = 1 
),Latest_Visit_Auth AS (
SELECT VISITID, PA.AUTHORIZATIONID,PA.CONTRACTID,PA.SERVICECODEID
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.VISITAUTHORIZATIONS_REPL VAR
JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.STAGE_PATIENTAUTHORIZATION PA ON PA.AUTHORIZATIONID = VAR.AUTHORIZATIONID 
QUALIFY  ROW_NUMBER() OVER(PARTITION BY VISITID ORDER BY VISITAUTHORIZATIONID DESC) = 1
)
,Latest_Check_Number AS (
SELECT VISITID, first_value(CHECKNUMBER) OVER (PARTITION BY VISITID ORDER BY PAIDDATE DESC) AS CHECKNUMBER
,first_value(INVOICENUMBER) OVER (PARTITION BY VISITID ORDER BY PAIDDATE DESC) AS INVOICENUMBER
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.PAYMENTS
)
,AUTO_CONFIRMED_VISITS AS (
SELECT UV.VISITID
--FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.UNTOUCHEDVISITS UV -- GETTING ONLY LATEST 3 MONTHS DATA FROM SOURCE
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.UNTOUCHEDVISITS_WITH_HISTORY UV -- IDDOX-490: CAPTURING THE HISTORY ALONG WITH THE LASTEST 3 MONTHS DATA
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.INREVIEWVISITS IV
ON UV.VISITID = IV.VISITID
WHERE IV.VISITID IS NULL
)
,VISIT_DATA AS
(
	SELECT DISTINCT	MD5(''PREFERRED'' || ''-'' || VISITS.VISITID || ''-'' || '' PREFERRED'') AS VISIT_KEY
			, DATE_TRUNC (DAY, VR.VISITDATE) AS REPORT_DATE
			, MD5(''PREFERRED'' || ''-'' || ''PREFERRED CORPORATE OFFICE'' || ''-'' || ''PREFERRED'') AS BRANCH_KEY
			, DC.CLIENT_KEY AS CLIENT_KEY
			, MD5(VISITS.AGENCYID || ''-'' || NVL(SC.CONTRACTID,-1) || ''-'' || NVL(CR.CONTRACTRATEID, -1) || 
				''-'' || NVL(SC.SERVICECODEID, -1) || 
				''-'' || NVL(PS.REVENUE_SUBCATEGORY_CODE, ''UNKNOWN'') || ''PREFERRED'') AS CONTRACT_KEY
			, MD5(''PREFERRED'' || ''-'' || E.MASTER_ID  || ''-'' || ''PREFERRED'') AS SCHEDULED_EMPLOYEE_KEY
			, MD5(''PREFERRED'' || ''-'' || E.MASTER_ID  || ''-'' || ''PREFERRED'') AS EMPLOYEE_KEY
			, 17 AS SOURCE_SYSTEM_ID
			, MD5(''PREFERRED'' || ''-'' || VISITS.AGENCYID || ''-'' || NVL(COORDINATOR.COORDINATORID1,-1) 
					|| ''-'' || ''PREFERRED'') AS SUPERVISOR_KEY
			, NULL AS INVOICE_KEY
    		, NULL AS PAYROLL_KEY
    		, MD5(''PREFERRED'' || ''-'' || VA.AUTHORIZATIONID || ''-'' || IFNULL(PS.REVENUE_SUBCATEGORY_CODE, ''1'') || ''-'' || ''HHAEXCHANGE'') AS CLIENT_SERVICE_KEY
			--, MD5(''PREFERRED'' || ''-'' || SC.AGENCYID || ''-'' || IFNULL(PR.PAYERID, -1) || ''-'' || IFNULL(SC.CONTRACTID, -1) || ''-'' || IFNULL(SC.SERVICECODEID, -1) || ''-'' || IFNULL(PS.REVENUE_SUBCATEGORY_CODE, ''1'') || ''-'' || IFNULL(SC.VISITTYPE, ''-1'') || ''-'' || IFNULL(SC.RATETYPETEXT, ''-1'') || ''-'' || ''HHAEXCHANGE'') AS PARTNER_CONTRACT_SERVICE_KEY 
            ,CASE WHEN PR.PAYERID IS NULL AND SC.CONTRACTID IS NULL AND SC.SERVICECODEID IS NULL THEN NULL ELSE
             MD5(''PREFERRED'' || ''-'' || IFNULL(VISITS.AGENCYID,-1) || ''-'' || IFNULL(PR.PAYERID, -1) || ''-'' || IFNULL(SC.CONTRACTID, -1) || ''-'' || IFNULL(SC.SERVICECODEID, -1) || ''-'' || IFNULL(PS.REVENUE_SUBCATEGORY_CODE, ''1'') || ''-'' || IFNULL(SC.VISITTYPE, ''-1'') || ''-'' || IFNULL(SC.RATETYPETEXT, ''-1'') || ''-'' || ''HHAEXCHANGE'') END AS PARTNER_CONTRACT_SERVICE_KEY
            , MD5(''PREFERRED'' || ''-'' || SC.SERVICECODEID || ''-'' || NVL(PS.REVENUE_SUBCATEGORY_CODE,''-1'') || ''-'' || ''HHAEXCHANGE'') AS BILLING_KEY
			, DATE_TRUNC(DAY, VR.VISITDATE) AS SERVICE_DATE
			, DATE_TRUNC(DAY, PAYROLL.PAYROLLDATE) AS PAYROLL_DATE
			, ''PREFERRED CORPORATE OFFICE'' AS BRANCH_NAME 
			, DC.CLIENT_NUMBER AS CLIENT_NUMBER
			, NVL(TO_VARCHAR(SC.CONTRACTID), ''Unknown'') AS CONTRACT_CODE
			, NVL(E.CAREGIVERID,E.MASTER_ID) AS SCHEDULED_EMPLOYEE_ID
			, NVL(E.CAREGIVERID,E.MASTER_ID) AS EMPLOYEE_ID
			, ''PREFERRED'' AS SYSTEM_CODE
			, COORDINATOR.COORDINATORID1 AS SUPERVISOR_CODE 
			, LCN.INVOICENUMBER AS INVOICE_ID
			, LCN.CHECKNUMBER AS CHEQUE_NUMBER
			, CASE WHEN ACV.VISITID IS NOT NULL THEN TRUE ELSE FALSE END AS CLEAN_SHIFT_FLAG
			, M.SCHEDULE_STATUS_CODE AS SCHEDULE_STATUS_CODE
       	    , M.SCHEDULE_STATUS_NAME AS SCHEDULE_STATUS_NAME
        	, M.SCHEDULE_STATUS_DESCRIPTION AS SCHEDULE_STATUS_DESCRIPTION
         	, M.VISIT_STATUS_CODE AS VISIT_STATUS_CODE
        	, M.VISIT_STATUS_NAME AS VISIT_STATUS_NAME
        	, M.VISIT_STATUS_DESCRIPTION AS VISIT_STATUS_DESCRIPTION
        	, M.INVOICE_STATUS_CODE AS INVOICE_STATUS_CODE
        	, M.INVOICE_STATUS_NAME AS INVOICE_STATUS_NAME
        	, M.INVOICE_STATUS_DESCRIPTION AS INVOICE_STATUS_DESCRIPTION
        	, M.PAYROLL_STATUS_CODE AS PAYROLL_STATUS_CODE
        	, M.PAYROLL_STATUS_NAME AS PAYROLL_STATUS_NAME
        	, M.PAYROLL_STATUS_DESCRIPTION AS PAYROLL_STATUS_DESCRIPTION
			, NULL AS CANCEL_REASON_CODE
			, NULL AS CANCEL_REASON_DESCRIPTION
			, NULL AS CANCEL_REASON_NOTES
			, FALSE AS EXCEPTION_REASON_INDICATOR
			, NULL AS RESOLUTION_CODE
			, NULL AS RESOLUTION_DESCRIPTION
			, NULL AS REJECTION_CODE
			, NULL AS REJECTION_DESCRIPTION
			, COALESCE(SC.SERVICECODE,INVOICE.INVSERVICECODEID::VARCHAR,''Unknown'') AS BILL_CODE
			, COALESCE(INVOICE.BILLEDRATE,0)  AS BILL_RATE 
			, INVOICE.BILLEDUNITS AS BILL_UNITS_SERVED
        	, SC.RATETYPETEXT AS BILL_UNIT_TYPE --INVOICE.INVRATETYPE END AS BILL_UNIT_TYPE
			, NULL AS OVERHEAD_RATE
			, VR.SCHEDULEDSTARTTIME AS SCHEDULE_TIMEIN   --VISITS/TBLVISITS_REPL --SAME IN BOTH TABLE
        	, VR.SCHEDULEDENDTIME AS SCHEDULE_TIMEOUT
        	, IFNULL(DATEDIFF("MI",VR.SCHEDULEDSTARTTIME, VR.SCHEDULEDENDTIME)/60.0,0) AS SCHEDULE_DURATION
        	, VR.VISITSTARTTIME AS ACTUAL_TIMEIN
        	, VR.VISITENDTIME AS ACTUAL_TIMEOUT
        	, IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) AS ACTUAL_DURATION
        	, NULL AS ADJUSTED_TIMEIN
        	, NULL AS ADJUSTED_TIMEOUT
        	, NULL AS ADJUSTED_DURATION
			, CASE WHEN (VS.MISSEDVISIT = ''N'' AND VS.IVRCallIn IS NOT NULL AND VS.IVRCallOut IS NOT NULL) 
						OR (VS.MISSEDVISIT = ''N'' AND (VS.IVRCallIn IS NULL OR VS.IVRCallOut IS NULL) 
									AND (VS.VISITSTARTTIME IS NOT NULL AND VS.VISITENDTIME IS NOT NULL) 
									AND VS.TimesheetReceived = ''Y'' AND VS.TimesheetRequired = ''Y''
							)
						OR (VS.VISITSTARTTIME IS NOT NULL AND VS.VISITENDTIME IS NOT NULL 
							AND VS.MISSEDVISIT = ''N'' AND VS.TimesheetReceived =''N'' 
							AND VS.TimesheetRequired = ''N''
							)
						THEN
						  	CASE WHEN CHARINDEX(''T1020'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''S5126'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''S5151'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''PCA LEVEL II LIVE IN 263200'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''HHA LIVE IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''C LIVE IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''PCA LIVE-IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''HHA LIVE-IN OVERTIME'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''2405004 LIVE IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               ELSE IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0)
				          	END
				   ELSE 0
			  END AS HOURS_SERVED
			, NULL AS COMMENTS
			, IFF(VS.IVRCALLIN IS NOT NULL AND VS.IVRCALLOUT IS NOT NULL AND NVL(VR.ISMISSEDVISIT, 0) != 1, ''Y'', ''N'') AS IS_EVV_FLAG
			, NULL AS TIMESHEET_TYPE
			, NULL AS TRACKING_ID,
			-- ETL Fields
            :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
            :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY    
       		, CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
	   		, CURRENT_USER AS ETL_INSERTED_BY, CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
	    	, CURRENT_USER AS ETL_LAST_UPDATED_BY
	    	, 0 AS ETL_DELETED_FLAG
	    	,M.CONFIRMED_FLAG AS CONFIRMED_FLAG
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.VISITINFO_REPL VISITS
	JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.TBLVISITS_REPL VR
		ON VISITS.VISITID = VR.VISITID
			AND VISITS.AGENCYID = VR.AGENCYID
	INNER JOIN PREFERRED_VISITS VS
		ON VS.VISITID = VR.VISITID 
	JOIN CLIENT C
		ON VR.PATIENTID = C.PATIENTID
			AND VISITS.AGENCYID = C.AGENCYID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.STAGE_PATIENTS P ON P.PATIENTID = C.PATIENTID
	JOIN HAH.DIM_CLIENT DC
		ON DC.CLIENT_KEY =  C.CLIENT_KEY
		AND DC.SYSTEM_CODE = ''PREFERRED''
	JOIN EMPLOYEE E
		ON VR.CAREGIVERID = E.CAREGIVERID
			AND VISITS.AGENCYID = E.AGENCYID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.SERVICECODES SC 
		ON VISITS.PRIMARYSERVICECODEID = SC.SERVICECODEID
			AND  VISITS.AGENCYID = SC.AGENCYID
	LEFT JOIN Latest_Visit_Auth VA ON VA.VISITID = VR.VISITID AND SC.CONTRACTID = VA.CONTRACTID
   	 	 AND SC.SERVICECODEID = VA.SERVICECODEID 
	LEFT JOIN PREFERRED_REVENUE_SEG PS
		ON PS.VISITID = VISITS.VISITID 
	LEFT JOIN COORDINATOR
		ON C.PATIENTID = COORDINATOR.PATIENTID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.CONTRACTS 
		ON SC.CONTRACTID = CONTRACTS.CONTRACTID
			AND VISITS.AGENCYID = CONTRACTS.AGENCYID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.STAGE_PAYER_REPL SP
		ON SP.PAYERID = SC.CONTRACTID
			AND SP.AGENCYID = VISITS.AGENCYID
	LEFT JOIN CONTRACT_RATES CR
		ON CONTRACTS.CONTRACTID = CR.CONTRACTID
			AND CONTRACTS.AGENCYID = CR.AGENCYID
			AND SC.SERVICECODEID = CR.SERVICECODEID
			AND CR.TODATE::DATE > GETDATE()
			AND CR.FROMDATE::DATE <= GETDATE()
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.PAYROLL_VISITS_REPL PAYROLL 
		ON VISITS.VISITID = PAYROLL.VISITID
			AND VISITS.AGENCYID = PAYROLL.AGENCYID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.TBLINVOICEDETAILS_REPL INVOICE
		ON VISITS.VISITID = INVOICE.VISITID AND VISITS.PRIMARYSERVICECODEID = INVOICE.INVSERVICECODEID 
	LEFT JOIN AGENCY_CONTRACTS_INCLUDE CONTRACTS_I
		ON CONTRACTS_I.AGENCYID = VISITS.AGENCYID
	LEFT JOIN AGENCY_CONTRACTS_EXCLUDE CONTRACTS_E
		ON CONTRACTS_E.AGENCYID = VISITS.AGENCYID 
			AND SC.CONTRACTID = CONTRACTS_E.CONTRACTID
	LEFT JOIN AGENCY_OFFICES_INCLUDE OFFICES_I
		ON OFFICES_I.AGENCYID = VISITS.AGENCYID
	LEFT JOIN AGENCY_OFFICES_EXCLUDE OFFICES_E
		ON OFFICES_E.AGENCYID = VISITS.AGENCYID 
			AND VISITS.OFFICEID = OFFICES_E.OFFICEID
	LEFT JOIN DERIVED_STATUS DS ON DS.VISITID=VISITS.VISITID AND DS.AGENCYID= VISITS.AGENCYID 
	LEFT JOIN HAH.DIM_VISIT_STATUS_MAPPING M ON DS.VISIT_STATUS_KEY = M.VISIT_STATUS_KEY
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEPREFERRED.STAGE_PAYER_REPL PR
	ON IFNULL(PR.CONTRACTID,PR.PAYERID) = SC.CONTRACTID
	LEFT JOIN Latest_Check_Number LCN ON LCN.VISITID = VR.VISITID
	LEFT JOIN AUTO_CONFIRMED_VISITS ACV ON ACV.VISITID = VISITS.VISITID
	WHERE (CONTRACTS_I.INCLUDE_ALL_CONTRACTS = TRUE OR NVL(CONTRACTS.CONTRACTID, SP.PAYERID) = CONTRACTS_I.CONTRACTID)
	 		AND CONTRACTS_E.CONTRACTID IS NULL
	 		AND (OFFICES_I.INCLUDE_ALL_OFFICES = TRUE OR VISITS.OFFICEID = OFFICES_I.OFFICEID)
	 		AND OFFICES_E.OFFICEID IS NULL
)
SELECT DISTINCT V.VISIT_KEY
		, V.REPORT_DATE
		, V.BRANCH_KEY
		, V.CLIENT_KEY
		, V.CONTRACT_KEY
		, V.SCHEDULED_EMPLOYEE_KEY
		, V.EMPLOYEE_KEY
		, V.SOURCE_SYSTEM_ID
		, V.SUPERVISOR_KEY
		, V.INVOICE_KEY
		, V.PAYROLL_KEY
		, V.CLIENT_SERVICE_KEY
		, V.PARTNER_CONTRACT_SERVICE_KEY
		, V.BILLING_KEY
		, V.SERVICE_DATE
		, V.PAYROLL_DATE
		, V.BRANCH_NAME
		, V.CLIENT_NUMBER
		, V.CONTRACT_CODE
		, V.SCHEDULED_EMPLOYEE_ID
		, V.EMPLOYEE_ID
		, V.SYSTEM_CODE
		, V.SUPERVISOR_CODE
		, V.INVOICE_ID
		, V.CHEQUE_NUMBER
		, V.CLEAN_SHIFT_FLAG
		, V.SCHEDULE_STATUS_CODE
		, V.SCHEDULE_STATUS_NAME
		, V.SCHEDULE_STATUS_DESCRIPTION
		, V.VISIT_STATUS_CODE
		, V.VISIT_STATUS_NAME
		, V.VISIT_STATUS_DESCRIPTION
		, V.INVOICE_STATUS_CODE
		, V.INVOICE_STATUS_NAME
		, V.INVOICE_STATUS_DESCRIPTION
		, V.PAYROLL_STATUS_CODE
		, V.PAYROLL_STATUS_NAME
		, V.PAYROLL_STATUS_DESCRIPTION
		, V.CANCEL_REASON_CODE
		, V.CANCEL_REASON_DESCRIPTION
		, V.CANCEL_REASON_NOTES
		, V.EXCEPTION_REASON_INDICATOR
		, V.RESOLUTION_CODE
		, V.RESOLUTION_DESCRIPTION
		, V.REJECTION_CODE
		, V.REJECTION_DESCRIPTION
		, V.BILL_CODE
		, V.BILL_RATE
		, V.BILL_UNITS_SERVED
		, V.BILL_UNIT_TYPE
		, V.OVERHEAD_RATE
		, V.SCHEDULE_TIMEIN
		, V.SCHEDULE_TIMEOUT
		, V.SCHEDULE_DURATION
		, V.ACTUAL_TIMEIN
		, V.ACTUAL_TIMEOUT
		, V.ACTUAL_DURATION
		, V.ADJUSTED_TIMEIN
		, V.ADJUSTED_TIMEOUT
		, V.ADJUSTED_DURATION
		, V.HOURS_SERVED
		, V.COMMENTS
		, V.IS_EVV_FLAG
		, V.TIMESHEET_TYPE
		, V.TRACKING_ID
		, V.ETL_TASK_KEY
		, V.ETL_INSERTED_TASK_KEY 
		, V.ETL_INSERTED_DATE 
		, V.ETL_INSERTED_BY 
		, V.ETL_LAST_UPDATED_DATE 
		, V.ETL_LAST_UPDATED_BY 
		, V.ETL_DELETED_FLAG
		, V.CONFIRMED_FLAG
FROM VISIT_DATA V;

RETURN ''SUCCESS'';
END;


 EOT
}

