resource "snowflake_procedure" "DW_HAH_GET_STAGE_MATRIXCARE_FACT_VISIT_TEST" {
	name ="GET_STAGE_MATRIXCARE_FACT_VISIT_TEST"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

                BEGIN
        --*****************************************************************************************************************************
-- NAME:  MATRIXCARE_FACT_VISIT
--
-- PURPOSE: Creates one row per visit according to MATRIXCARE
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 04/27/21     Prateek Bhatt           Initial Development
-- 05/07/21     Prateek Bhatt           Add Payer''s logic from different tables MatrixCare 	
-- 05/25/21		Shraddha Sejpal			Updated supervisor logic and ADM_AUTH CTE and Schedules join logic
-- 06/08/21     Prateek					Used EMPLOYEE/CLIENT/BRANCH Mapping table to get 
-- 08/31/21		Mir Ali					Added rounding fix for Hours_Served (calculating from Start/End time rather than using value provided in MyData server db)
-- 12/15/21     Jashvant Patel          Added ETL Updated flag to ADM_AUTH CTE and in where to keep updating SUPERVISOR details.
-- 03/02/21     Jashvant Patel			Updated Clean shift Flag logic 
-- 01/31/22		Paras Bhavnani			Removed the ADM_AUTH CTE and joined directly STVHC_T_ADMISSIONS. Added SCHCP_ID in order by for column SCHCP_PAYERID in CTE SCHEDULE_PAYERS. Instead of First_value changed to MAX for column ETL_LAST_UPDATED_DATE in CTE SCHEDULE_PAYERS.
-- 06/28/22		Vijay Sharma   			Added schedule/visit/invoice/payroll status information and schedule/actual/adjusted timing information,scheduled employee,
--										Confirmed_Flag, Bill_unit_type & Bill_Unit_Served,Updated Hours_Served logic.
-- 02/17/23		Vijay Sharma   			Updated schedule and actual timing information.
-- 04/04/23     Jashvant Patel 			Updated Date/Time format as per American time
--*****************************************************************************************************************************

WITH SCHEDULE_PAYERS AS
	(
	SELECT DISTINCT SCHCP_SCHEDULEID
	,FIRST_VALUE(SCHCP_PAYERID) OVER (PARTITION BY SCHCP_SCHEDULEID ORDER BY SCHCP_SEQNO,SCHCP_ID) SCHCP_PAYERID
	,MAX(COALESCE(ETL_LAST_UPDATED_DATE, ''1/1/1900'')) OVER (PARTITION BY SCHCP_SCHEDULEID) ETL_LAST_UPDATED_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SCHEDULEPAYERS 
	)
, CLIENT_PAYERS AS
	(
		SELECT DISTINCT CLIPAY_CLIENTID
		,FIRST_VALUE(CLIPAY_PAYERID) OVER (PARTITION BY CLIPAY_CLIENTID ORDER BY CLIPAY_SEQNO DESC) CLIPAY_PAYERID
		,FIRST_VALUE(COALESCE(ETL_LAST_UPDATED_DATE, ''1/1/1900'')) OVER (PARTITION BY CLIPAY_CLIENTID ORDER BY CLIPAY_SEQNO DESC) ETL_LAST_UPDATED_DATE
		FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_CLIENTPAYERS 
	)
, PAYER_BRANCH AS
	(
			 SELECT  DISTINCT PAYBR_BRANCH_ID 
			,FIRST_VALUE(PAYBR_PAYERID) OVER (PARTITION BY PAYBR_BRANCH_ID ORDER BY PAYBR_CREATEDDATE DESC) PAYBR_PAYERID
			,FIRST_VALUE(COALESCE(ETL_LAST_UPDATED_DATE, ''1/1/1900'')) OVER (PARTITION BY PAYBR_BRANCH_ID ORDER BY PAYBR_CREATEDDATE DESC) ETL_LAST_UPDATED_DATE
			FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_PAYERBRANCHES 
	) 	
, INVOICE_PAYERS AS
	(	
		-- Added Last modified date in order by to consider the latest record as we are seeing multiple invoice, one got cancelled and the latest one got paid
		-- Schedule ID with this issue is 6804832
		SELECT DISTINCT INVD_SCHEDULEID --,INH.INVH_ID AS INVH_ID
		,FIRST_VALUE(INH.INVH_ID) OVER(PARTITION BY INVD_SCHEDULEID ORDER BY INVH_INVOICEDATE DESC, INVH_MODIFIEDDATE DESC) INVH_ID
		,FIRST_VALUE(INVD_SCHEDULEPAYERID) OVER(PARTITION BY INVD_SCHEDULEID ORDER BY INVH_INVOICEDATE DESC, INVH_MODIFIEDDATE DESC) INV_PAYERID
		,FIRST_VALUE(INH.ETL_LAST_UPDATED_DATE) OVER(PARTITION BY INVD_SCHEDULEID ORDER BY INVH_INVOICEDATE DESC, INVH_MODIFIEDDATE DESC) ETL_LAST_UPDATED_DATE
		FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_INVOICEHEADER INH 
	 	JOIN  DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_INVOICEDETAILS IND ON INH.INVH_ID = IND.INVD_INVHID 
	)
, BILL_RATES AS
	(
		SELECT * FROM 
		(
		SELECT SCHEDULEID,starttime, endtime, unittype,units,actualrate
		,ROW_NUMBER() OVER (PARTITION  BY SCHEDULEID ORDER BY RBS_ID DESC) AS ROWRBS_ID 
		,MAX(COALESCE(ETL_LAST_UPDATED_DATE, ''1/1/1900'')) OVER (PARTITION  BY SCHEDULEID ORDER BY RBS_ID DESC)  ETL_LAST_UPDATED_DATE
		FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_RATEBILLSHIFTS 
		) WHERE ROWRBS_ID =1
	)
, INVOICE_DETAILS AS 
	(
		SELECT INVOICE_DETAILS.INVD_INVHID AS INVH_ID, 
		SUM(NVL(INVOICE_DETAILS.INVD_TOTALCHARGES, 0) + NVL(INVOICE_DETAILS.INVD_TOTALREVADJUSTMENTS, 0)) AS AMOUNT_BILLED,
		SUM(INVOICE_DETAILS.INVD_TOTALPAYMENTS * -1) AS AMOUNT_COLLECTED, -- Payments are in negative amounts 
		SUM(INVOICE_DETAILS.INVD_BALANCE) AS AMOUNT_OUTSTANDING,
		MAX(PAYMENT_POSTING.POST_POSTEDDATE) AS FINAL_PAYMENT_DATE,
		MAX(GREATEST(NVL(INVOICE_DETAILS.ETL_LAST_UPDATED_DATE, ''1/1/1900''),
				NVL(PAYMENT_POSTING.ETL_LAST_UPDATED_DATE, ''1/1/1900''))) AS ETL_LAST_UPDATED_DATE
		FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_INVOICEDETAILS AS INVOICE_DETAILS
		LEFT JOIN (
			SELECT POST_INVOICEDETAILID, MAX(POST_POSTEDDATE) AS POST_POSTEDDATE, MAX(ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
			FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_PAYMENTPOSTING
			GROUP BY POST_INVOICEDETAILID
		) AS PAYMENT_POSTING
		ON PAYMENT_POSTING.POST_INVOICEDETAILID = INVOICE_DETAILS.INVD_ID 
		GROUP BY INVOICE_DETAILS.INVD_INVHID
	)
	, TEMP_INVOICE_STATUS AS
	(
		SELECT  SCH.SCH_ID,CASE WHEN INVOICE_HEADER.INVH_CANCELDATE IS NOT NULL THEN ''Cancelled''
			WHEN INVOICE_DETAILS.AMOUNT_COLLECTED >= INVOICE_DETAILS.AMOUNT_BILLED THEN ''Paid''
			WHEN INVOICE_DETAILS.AMOUNT_COLLECTED > 0 THEN ''Partially Paid''
			WHEN INVOICE_DETAILS.AMOUNT_BILLED > 0 THEN ''Billed''
			WHEN NVL(INVOICE_DETAILS.AMOUNT_BILLED, 0) = 0 THEN ''Unbilled''
			ELSE NULL END AS INVOICE_STATUS_NAME
			--,MD5(7  || ''-'' ||''MATRIXCARE'' || ''-'' || INVOICE_STATUS_NAME) AS VISIT_STATUS_KEY			
			FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SCHEDULES AS SCH
			LEFT JOIN INVOICE_PAYERS INV ON INV.INVD_SCHEDULEID = SCH.SCH_ID
			LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_INVOICEHEADER AS INVOICE_HEADER ON INVOICE_HEADER.INVH_ID = INV.INVH_ID
			LEFT JOIN INVOICE_DETAILS AS INVOICE_DETAILS ON INVOICE_DETAILS.INVH_ID = INVOICE_HEADER.INVH_ID			
	)
	,DERIVED_STATUS AS 
		(
			SELECT DISTINCT SCH.SCH_ID
			,CASE WHEN SCHSTATUS.SCHST_NAME IN (''NTS'',''NTS_'') THEN ''NTS'' ELSE SCHSTATUS.SCHST_NAME END AS DISC_VISIT_CODE
			,CASE WHEN SCHSTATUS.SCHST_NAME = ''C'' THEN ''Completed''
			WHEN SCHSTATUS.SCHST_NAME = ''COR'' THEN ''Needs Correction''
			WHEN SCHSTATUS.SCHST_NAME = ''CV-19'' THEN ''Covid-19 Hold or Cancel''
			WHEN SCHSTATUS.SCHST_NAME = ''DD-AV'' THEN ''DD Annual Visit''
			WHEN SCHSTATUS.SCHST_NAME = ''DD-QV'' THEN ''DD Quarterly Visit''
			WHEN SCHSTATUS.SCHST_NAME = ''H'' THEN ''Hospitalization'' 
			WHEN SCHSTATUS.SCHST_NAME = ''R'' THEN ''Refused''
			WHEN SCHSTATUS.SCHST_NAME = ''S'' THEN ''Scheduled''
			WHEN SCHSTATUS.SCHST_NAME = ''NS'' THEN ''Caregiver No Show'' 
			WHEN SCHSTATUS.SCHST_NAME = ''T'' THEN ''Telephony Completed'' 
			WHEN SCHSTATUS.SCHST_NAME = ''AVAIL'' THEN ''Available Hours'' 	
	   		WHEN SCHSTATUS.SCHST_NAME = ''HOLD'' THEN ''On Hold- Misc Reason'' 
		   WHEN SCHSTATUS.SCHST_NAME = ''OPEN'' THEN ''Open Shift''
		   WHEN SCHSTATUS.SCHST_NAME = ''XCG'' THEN ''Cancelled by caregiver''
		   WHEN SCHSTATUS.SCHST_NAME = ''XC'' THEN ''Cancelled by client''
		   WHEN SCHSTATUS.SCHST_NAME = ''XO'' THEN ''Cancelled no staff''
   		   WHEN SCHSTATUS.SCHST_NAME = ''XX'' THEN ''Delete Shift''
   		   WHEN SCHSTATUS.SCHST_NAME IN (''NTS'',''NTS_'') THEN ''No Time Sheet''
   		   WHEN SCHSTATUS.SCHST_NAME = ''TCOR'' THEN ''Telephony Needs Correction''
   		   WHEN SCHSTATUS.SCHST_NAME = ''TH'' THEN ''Telehealth'' 
		   ELSE NULL END AS DISC_VISIT_STATUS
			,INVS.INVOICE_STATUS_NAME AS DISC_INVOICE_STATUS
			,CASE WHEN DISC_VISIT_STATUS =''Scheduled'' AND SCH.SCH_CAREGIVERID IS NULL AND SCH.SCH_STARTTIME > CURRENT_DATE() THEN ''01OPENFUTURE'' 
			WHEN DISC_VISIT_STATUS =''Scheduled'' AND SCH.SCH_CAREGIVERID IS NOT NULL AND SCH.SCH_STARTTIME > CURRENT_DATE() THEN ''01FUTURE''
			WHEN DISC_VISIT_STATUS =''Scheduled'' AND SCH.SCH_CAREGIVERID IS NULL AND SCH.SCH_STARTTIME <= CURRENT_DATE() THEN ''01OPEN'' 
			WHEN DISC_VISIT_STATUS =''Scheduled'' AND SCH.SCH_CAREGIVERID IS NOT NULL AND SCH.SCH_STARTTIME <= CURRENT_DATE() THEN ''Scheduled'' 
			ELSE DISC_VISIT_STATUS END AS DERIVED_DISC_STATUS
			,MD5(7  || ''-'' ||''MATRIXCARE'' || ''-'' || NVL(DERIVED_DISC_STATUS,''S'') || ''-'' || NVL(DISC_INVOICE_STATUS,''S'')) AS VISIT_STATUS_KEY
			FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SCHEDULES AS SCH
			LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SCHEDULESTATUS AS SCHSTATUS 
			ON SCH.SCH_SCHEDULESTATUSID = SCHSTATUS.SCHST_ID
			LEFT JOIN TEMP_INVOICE_STATUS INVS ON INVS.SCH_ID = SCH.SCH_ID
		),
		CLIENT AS 
(
	SELECT * FROM 
	(
		SELECT CLI_ID,MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.MATRIXCARE.CLIENT_MASTER_LIST 
	) 
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT ID AS CLI_ID,MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.MATRIXCARE.CLIENT_MATCH_LIST
		WHERE CLI_ID NOT IN (SELECT CLI_ID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.MATRIXCARE.CLIENT_MASTER_LIST)
	)),
	 EMPLOYEE AS 
(
	SELECT * FROM
	(
		SELECT CAR_ID, MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.MATRIXCARE.EMPLOYEE_MASTER_LIST
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT CAR_ID, MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.MATRIXCARE.EMPLOYEE_MATCH_LIST
		WHERE CAR_ID NOT IN (SELECT CAR_ID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.MATRIXCARE.EMPLOYEE_MASTER_LIST ) 
	) ),
	SUPERVISORS AS
(
	SELECT DISTINCT COALESCE(ADM.ADM_SUPERVISORID, ADM.ADM_COORDINATORID, ADM.ADM_INTERNALCASEMGRID) AS SUPERVISOR_CODE,
	MAX(ADM.ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_ADMISSIONS ADM
	WHERE COALESCE(ADM.ADM_SUPERVISORID, ADM.ADM_COORDINATORID, ADM.ADM_INTERNALCASEMGRID) IS NOT NULL
	GROUP BY 1
  UNION
   SELECT DISTINCT NVL( mccg.CAR_SUPERVISOR, mccg.CAR_MANAGER) AS SUPERVISOR_CODE,
    MAX( mccg.ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_CAREGIVER mccg
	WHERE NVL( mccg.CAR_SUPERVISOR, mccg.CAR_MANAGER) IS NOT NULL
  GROUP BY 1
  )
SELECT DISTINCT 
MD5(''MATRIXCARE'' || ''-'' || SCH.SCH_ID || ''-'' || ''MATRIXCARE'') AS VISIT_KEY
--,TO_DATE(SCH_STARTTIME) AS REPORT_DATE
,TO_DATE(DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', SCH_STARTTIME))) AS REPORT_DATE
,COALESCE (BRANCH_MAPPING.CONVERGED_BRANCH_KEY, MD5(''MATRIXCARE'' || ''-'' || SCH_BRANCHID || ''-'' || ''MATRIXCARE'' )) AS BRANCH_KEY
,MD5( ''MATRIXCARE'' || ''-'' ||  NVL(COALESCE (CLI.MASTER_ID::STRING,CLI.CLI_ID::STRING,SCH_CLIENTID::STRING),'''') || ''-'' || ''MATRIXCARE'') CLIENT_KEY
,MD5(''MATRIXCARE'' || ''-'' || COALESCE (SCHPAYER.SCHCP_PAYERID,CP.CLIPAY_PAYERID,INV.INV_PAYERID,PB.PAYBR_PAYERID) || ''-'' || SCH_SERVICECODEID || ''-'' || ''MATRIXCARE'' ) AS CONTRACT_KEY
,CASE  WHEN SCHSTATUS.SCHST_NAME = ''S'' THEN MD5(''MATRIXCARE'' || ''-'' || NVL(COALESCE(EMP.MASTER_ID,SCH_CAREGIVERID::STRING),'''') || ''-'' || ''MATRIXCARE'') 
ELSE NULL END AS SCHEDULED_EMPLOYEE_KEY
,MD5(''MATRIXCARE'' || ''-'' || NVL(COALESCE(EMP.MASTER_ID,SCH_CAREGIVERID::STRING),'''') || ''-'' || ''MATRIXCARE'') AS EMPLOYEE_KEY
,7 AS SOURCE_SYSTEM_ID		
,MD5(''MATRIXCARE'' || ''-'' || NVL(s.SUPERVISOR_CODE::STRING,''UNKNOWN'')|| ''-'' || ''MATRIXCARE'' ) SUPERVISOR_KEY
,NULL as INVOICE_KEY
,NULL as PAYROLL_KEY
--,TO_DATE(SCH_STARTTIME) SERVICE_DATE
,TO_DATE(DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', SCH_STARTTIME))) as SERVICE_DATE
--,TO_DATE(SCH_PAYDATE) AS PAYROLL_DATE
,TO_DATE(DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', SCH_PAYDATE))) AS PAYROLL_DATE
,UPPER(TRIM(COALESCE(BRANCH_MAPPING.CONVERGED_OFFICE_NAME,BRANCH.BR_NAME))) AS BRANCH_NAME
,COALESCE(CLI.MASTER_ID,SCH_CLIENTID) AS CLIENT_NUMBER
,COALESCE (SCHPAYER.SCHCP_PAYERID,CP.CLIPAY_PAYERID,INV.INV_PAYERID,PB.PAYBR_PAYERID) AS CONTRACT_CODE
,CASE  WHEN SCHSTATUS.SCHST_NAME = ''S'' THEN COALESCE(EMP.MASTER_ID::NUMBER ,SCH_CAREGIVERID::NUMBER) ELSE NULL END AS SCHEDULED_EMPLOYEE_ID
,COALESCE(EMP.MASTER_ID::NUMBER ,SCH_CAREGIVERID::NUMBER) AS EMPLOYEE_ID
,''MATRIXCARE'' AS SYSTEM_CODE
,COALESCE(ADM.ADM_SUPERVISORID::STRING, ADM.ADM_COORDINATORID::STRING, ADM.ADM_INTERNALCASEMGRID::STRING) AS SUPERVISOR_CODE
,NULL as INVOICE_ID
,NULL as CHEQUE_NUMBER
,CASE WHEN SCHSTATUS.SCHST_NAME IN (''C'',''T'',''TH'') AND UPPER(SCH.SCH_MODIFIEDUSER)=''TELUSER'' THEN TRUE ELSE FALSE END AS CLEAN_SHIFT_FLAG
, VSM.SCHEDULE_STATUS_CODE AS SCHEDULE_STATUS_CODE
, VSM.SCHEDULE_STATUS_NAME AS SCHEDULE_STATUS_NAME
, VSM.SCHEDULE_STATUS_DESCRIPTION AS SCHEDULE_STATUS_DESCRIPTION
, VSM.VISIT_STATUS_CODE AS VISIT_STATUS_CODE		
, VSM.VISIT_STATUS_NAME AS VISIT_STATUS_NAME
, VSM.VISIT_STATUS_DESCRIPTION  AS VISIT_STATUS_DESCRIPTION
 , VSM.INVOICE_STATUS_CODE  AS INVOICE_STATUS_CODE
 , VSM.INVOICE_STATUS_NAME  AS INVOICE_STATUS_NAME
		,VSM.INVOICE_STATUS_DESCRIPTION AS INVOICE_STATUS_DESCRIPTION
		,VSM.PAYROLL_STATUS_CODE AS PAYROLL_STATUS_CODE		
		,VSM.PAYROLL_STATUS_NAME AS PAYROLL_STATUS_NAME
		,VSM.PAYROLL_STATUS_DESCRIPTION  AS PAYROLL_STATUS_DESCRIPTION		
		,NULL AS CANCEL_REASON_CODE      
		,NULL AS CANCEL_REASON_DESCRIPTION 
		,NULL AS CANCEL_REASON_NOTES
		,0 AS EXCEPTION_REASON_INDICATOR
		,NULL AS RESOLUTION_CODE
		,NULL AS RESOLUTION_DESCRIPTION
		,NULL AS REJECTION_CODE							
		,NULL AS REJECTION_DESCRIPTION
		,SCH_SERVICECODEID AS BILL_CODE
		,CASE WHEN BR.UNITTYPE =0 OR BR.UNITTYPE =1 THEN 0 ELSE CAST(BR.ACTUALRATE*(60/BR.UNITTYPE) AS DECIMAL(18,3)) END AS BILL_RATE
		,SCH.SCH_UNITS AS BILL_UNITS_SERVED -- Needs to be confirmed
		,NULL AS BILL_UNIT_TYPE
		--, CASE WHEN SCH.SCH_BILLRATEUNITFLAG = 0 THEN ''Visit'' 
			--  WHEN SCH.SCH_BILLRATEUNITFLAG = 1 THEN ''Hourly''
			--  WHEN SCH.SCH_BILLRATEUNITFLAG = 15 THEN ''Hourly''
			--  WHEN SCH.SCH_BILLRATEUNITFLAG = 30 THEN ''Hourly''
			--  WHEN SCH.SCH_BILLRATEUNITFLAG = 60 THEN ''Hourly''
			--  ELSE NULL END AS BILL_UNIT_TYPE
		--,SCH.SCH_BILLRATEUNITFLAG AS BILL_UNIT_TYPE -- Needs to be confirmed					
		,NULL  AS OVERHEAD_RATE
--
--		,SCH.SCH_STARTTIME AS SCHEDULE_TIMEIN
--		,SCH.SCH_ENDTIME AS SCHEDULE_TIMEOUT
--		,NVL((CAST(DATEDIFF(MINUTE, SCH.SCH_STARTTIME, SCH.SCH_ENDTIME) AS DECIMAL(18, 3)) / 60.0),0) AS SCHEDULE_DURATION	
--		,SCH.SCH_SCHEDSTARTTIME AS ACTUAL_TIMEIN
--		,SCH.SCH_SCHEDENDTIME AS ACTUAL_TIMEOUT 
--		,NVL((CAST(DATEDIFF(MINUTE, SCH.SCH_SCHEDSTARTTIME, SCH.SCH_SCHEDENDTIME) AS DECIMAL(18, 3)) / 60.0),0) AS ACTUAL_DURATION 
--
	--	,COALESCE(SCH.SCH_SCHEDSTARTTIME,SCH.SCH_STARTTIME) AS SCHEDULE_TIMEIN
,COALESCE(DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', SCH.SCH_SCHEDSTARTTIME)),DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', SCH.SCH_STARTTIME))) AS SCHEDULE_TIMEIN
	--	,COALESCE(SCH.SCH_SCHEDENDTIME,SCH.SCH_ENDTIME) AS SCHEDULE_TIMEOUT
,COALESCE(DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', SCH.SCH_SCHEDENDTIME)),DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', SCH.SCH_ENDTIME))) AS SCHEDULE_TIMEOUT
		,ROUND(NVL((CAST(DATEDIFF(MINUTE, SCHEDULE_TIMEIN, SCHEDULE_TIMEOUT) AS DECIMAL(18, 3)) / 60.0),0),2) AS SCHEDULE_DURATION	
		--,IFF(SCH.SCH_SCHEDSTARTTIME IS NOT NULL, SCH.SCH_STARTTIME, NULL) AS ACTUAL_TIMEIN
,IFF(SCH.SCH_SCHEDSTARTTIME IS NOT NULL,  DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'',  SCH.SCH_STARTTIME)), NULL) AS ACTUAL_TIMEIN
		--,IFF(SCH.SCH_SCHEDENDTIME IS NOT NULL, SCH.SCH_ENDTIME, NULL) AS ACTUAL_TIMEOUT 
,IFF(SCH.SCH_SCHEDENDTIME IS NOT NULL,  DATEADD (MINUTE , 0, CONVERT_TIMEZONE(''America/New_York'', SCH.SCH_ENDTIME)), NULL) AS ACTUAL_TIMEOUT
		,ROUND(NVL((CAST(DATEDIFF(MINUTE, ACTUAL_TIMEIN, ACTUAL_TIMEOUT) AS DECIMAL(18, 3)) / 60.0),0),2) AS ACTUAL_DURATION
		--
		,NULL AS ADJUSTED_TIMEIN -- Needs to be confirmed : STVHC_T_RATEBILLSHIFTS(STARTTIME)
		,NULL AS ADJUSTED_TIMEOUT -- Needs to be confirmed : STVHC_T_RATEBILLSHIFTS(ENDTIME)
		,NULL AS ADJUSTED_DURATION -- calculated field based on above fields
		,CAST(ACTUAL_DURATION AS DECIMAL(18, 3)) AS HOURS_SERVED  ------COALEASE ADJUSTED THEN ACTUAL , Right now ADJUSTED_DURATION is NULL
		,SCH_DESCRIPTION  AS COMMENTS                   						
		,NULL  as IS_EVV_FLAG                
		,NULL  as TIMESHEET_TYPE 
		,NULL  as TRACKING_ID  
    	,:STR_ETL_TASK_KEY AS ETL_TASK_KEY
		,:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
        ,convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE
		,CURRENT_USER as ETL_INSERTED_BY 
		,convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE
		,CURRENT_USER as ETL_LAST_UPDATED_BY
		,0 as ETL_DELETED_FLAG	
		,VSM.CONFIRMED_FLAG AS CONFIRMED_FLAG		
FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SCHEDULES AS SCH
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SCHEDULESTATUS AS SCHSTATUS ON SCH.SCH_SCHEDULESTATUSID = SCHSTATUS.SCHST_ID
LEFT JOIN DERIVED_STATUS DSTATUS ON SCH.SCH_ID = DSTATUS.SCH_ID
LEFT JOIN HAH.DIM_VISIT_STATUS_MAPPING VSM ON DSTATUS.VISIT_STATUS_KEY = VSM.VISIT_STATUS_KEY  
--LEFT JOIN HAH.DIM_VISIT_STATUS_MAPPING VSM ON DSTATUS.DERIVED_DISC_STATUS = VSM.DERIVED_DISC_STATUS  
--AND VSM.SYSTEM_CODE = ''MATRIXCARE'' AND VSM.SOURCE_SYSTEM_ID = 7
--LEFT JOIN TEMP_INVOICE_STATUS INVS ON INVS.SCH_ID = SCH.SCH_ID
--LEFT JOIN HAH.DIM_VISIT_STATUS_MAPPING VSM2 ON INVS.INVOICE_STATUS_NAME = VSM2.INVOICE_STATUS_NAME 
--AND VSM2.SYSTEM_CODE = ''MATRIXCARE'' AND VSM2.SOURCE_SYSTEM_ID = 7
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_CAREGIVER AS CARE ON CARE.CAR_ID = SCH.SCH_CAREGIVERID
LEFT JOIN EMPLOYEE AS EMP ON EMP.CAR_ID = SCH.SCH_CAREGIVERID 
LEFT JOIN HAH.DIM_EMPLOYEE DE
		ON DE.EMPLOYEE_ID = EMP.MASTER_ID
			AND DE.SOURCE_SYSTEM_ID = ''7''
LEFT JOIN CLIENT AS CLI ON CLI.CLI_ID = SCH.SCH_CLIENTID 
LEFT JOIN BILL_RATES BR ON BR.SCHEDULEID = SCH.SCH_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_BRANCHES AS BRANCH ON BRANCH.BR_ID = SCH.SCH_BRANCHID 
AND  BRANCH.BR_NAME NOT LIKE  ''%Training%''
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.MATRIXCARE_MASTER_BRANCH_MAPPING BRANCH_MAPPING ON BRANCH_MAPPING.OFFICE_CODE = SCH.SCH_BRANCHID::STRING 
AND BRANCH_MAPPING.SOURCE_SYSTEM_ID = 7 AND BRANCH_MAPPING.SYSTEM_CODE = ''MATRIXCARE'' 
LEFT JOIN SCHEDULE_PAYERS AS SCHPAYER ON SCH.SCH_ID = SCHPAYER.SCHCP_SCHEDULEID
LEFT JOIN CLIENT_PAYERS CP ON SCH.SCH_CLIENTID = CP.CLIPAY_CLIENTID 
LEFT JOIN PAYER_BRANCH PB ON PB.PAYBR_BRANCH_ID = SCH.SCH_BRANCHID 
LEFT JOIN INVOICE_PAYERS INV ON INV.INVD_SCHEDULEID = SCH.SCH_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_INVOICEHEADER AS INVOICE_HEADER ON INVOICE_HEADER.INVH_ID = INV.INVH_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_ADMISSIONS  ADM ON ADM.ADM_ID = SCH.SCH_ADMISSIONID
LEFT JOIN SUPERVISORS S ON S.SUPERVISOR_CODE= COALESCE(ADM.ADM_SUPERVISORID, ADM.ADM_COORDINATORID, ADM.ADM_INTERNALCASEMGRID)
WHERE (SCH.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
		OR SCHSTATUS.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
		OR BRANCH.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	    OR CARE.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	    OR PB.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	    OR CP.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	    OR SCHPAYER.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	    OR BR.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
	    OR INV.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
		OR BRANCH_MAPPING.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
		OR ADM.ETL_LAST_UPDATED_DATE  > ''1900-01-01''
		)
	AND IFF(SCH.SCH_STARTTIME IS NULL OR SCH.SCH_ENDTIME IS NULL, 
		CASE WHEN SCH.SCH_BILLRATEUNITFLAG =0 THEN CAST(SCH.SCH_PAYUNITS/(60/NULLIF(SCH.SCH_PAYRATEUNITFLAG, 0)) AS DECIMAL(18,3)) ELSE 
			CAST(SCH.SCH_UNITS/(60/NULLIF(SCH.SCH_BILLRATEUNITFLAG, 0)) AS DECIMAL(18,3)) END,
		CAST(DATEDIFF(MINUTE, SCH.SCH_STARTTIME, SCH.SCH_ENDTIME) AS DECIMAL(18, 3)) / 60.0) > 0 ;
;
    RETURN ''SUCCESS'';
    END;
    
 EOT
}

