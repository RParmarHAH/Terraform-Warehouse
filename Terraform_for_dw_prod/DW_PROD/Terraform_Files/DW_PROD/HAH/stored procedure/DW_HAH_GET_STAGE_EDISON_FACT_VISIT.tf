resource "snowflake_procedure" "DW_HAH_GET_STAGE_EDISON_FACT_VISIT" {
	name ="GET_STAGE_EDISON_FACT_VISIT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result VARCHAR;
BEGIN
--*****************************************************************************************************************************
-- NAME:  EDISON_FACT_VISIT
--
-- PURPOSE: Creates one row per visit according to EDISON
--
-- PRODELOPMENT LOG:
-- DATE        AUTHOR                	NOTES:
-- --------    -------------------   	-----------------------------------------------------------------------------------------------
-- 04/25/22     Moin Saiyed          	Initial development
-- 06/02/22	    Mohit Vaghadiya	     	Updated the logic of Is EVV Flag - going with IVRCALLIN and OUT
-- 07/13/22     Poonit Mistry	     	Updated Hours Served (Paid Hours) with Custom Logic received from Edison
-- 08/09/22   	Mirisha Jarecha     	Revised revenue category, subcategory logic
-- 08/16/22		Mohit Vaghadiya			Reverted Hours Served Logic to Visit Hours Instead of Paid Hours
-- 09/13/22		Shraddha Sejpal		 	Added schedule/visit/invoice/payroll status information and schedule/actual/adjusted timing information,scheduled employee,
--									 	Confirmed_Flag, Bill_unit_type & Bill_Unit_Served.
-- 03/09/23 	Shikhar Saxena 			Changed the Branch key logic for Corporate branch
-- 12/05/2023   Sanket Jain          	Added CLIENT_SERVICE_KEY,PARTNER_CONTRACT_SERVICE_KEY,BILLING_KEY
-- 07/28/2023	Shikhar Saxena			Updated the CLEAN_SHIFT_FLAG logic for Auto Confirmed visits
--	11/22/2023  Harshala Kadam			Updated VISIT STATUS MAPPING COLUMNS
-- 01/19/24	   Shubham Khunare	        schedule/visit Status name correction
--*****************************************************************************************************************************
--
	
INSERT OVERWRITE INTO STAGE.EDISON_FACT_VISIT
WITH EMPLOYEE AS 
(
    SELECT * FROM
    (
        SELECT CAREGIVERID, MASTER_ID, AGENCYID --,BRANCHID,OFFICEID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.EMPLOYEE_MASTER_LIST
    )
    UNION
    SELECT * FROM
    (
        SELECT DISTINCT CAREGIVERID, MASTER_ID, AGENCYID --,BRANCHID,OFFICEID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.EMPLOYEE_MATCH_LIST
        WHERE CAREGIVERID NOT IN (SELECT CAREGIVERID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.EMPLOYEE_MASTER_LIST)
    )
),
CLIENT AS
(
    SELECT * FROM
	(
        SELECT MD5((AGENCYID||''-''||MASTER_ID||''-''||''EDISON'' )) as CLIENT_KEY,
		PATIENTID, MASTER_ID, AGENCYID, LASTNAME, FIRSTNAME, OFFICEID --,ADMISSIONID --,OFFICEID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CLIENT_MASTER_LIST
    )
    UNION
    SELECT * FROM
    (
        SELECT DISTINCT MD5((AGENCYID||''-''||MASTER_ID||''-''||''EDISON'' )) as CLIENT_KEY,
		PATIENTID, MASTER_ID, AGENCYID, LASTNAME, FIRSTNAME, OFFICEID --,ADMISSIONID --,OFFICEID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CLIENT_MATCH_LIST
        WHERE PATIENTID NOT IN (SELECT PATIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CLIENT_MASTER_LIST)
    )
),
COORDINATOR AS (
    SELECT P.PATIENTID, LASTNAME, FIRSTNAME, PC1.COORDINATORID AS COORDINATORID1, PC1.COORDINATORNAME AS COORDINATORNAME1
    FROM CLIENT P
    JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.PROVIDERPATIENTCOORDINATORS PC1 
    	ON P.PATIENTID = PC1.PATIENTID
        	AND P.AGENCYID = PC1.AGENCYID
        	AND PC1.COORDINATORSRNO = 1
    WHERE P.AGENCYID = 155
),
EDISON_REVENUE_SEG AS 
(
	SELECT VISITID, REVENUE_CATEGORY, REVENUE_SUBCATEGORY_NAME, REVENUE_SUBCATEGORY_CODE 
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.VW_EDISON_REVENUE_SEG
	GROUP BY VISITID, REVENUE_CATEGORY, REVENUE_SUBCATEGORY_NAME, REVENUE_SUBCATEGORY_CODE
), 
VISIT_DATA AS -- Added to get unique timesheet required flag, and IVR Timings per vist
(
	SELECT * FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.VISITS V
	QUALIFY ROW_NUMBER() OVER(PARTITION BY V.VISITID ORDER BY V.LASTMODIFIEDDATE DESC) = 1
), EDISON_TBLVISIT_INFO AS -- Getting multiple record or one visit - Consider latest created, modified
(
	SELECT * FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLVISITS_REPL VR
	QUALIFY ROW_NUMBER() OVER(PARTITION BY VR.VISITID ORDER BY VR.CREATEDDATE DESC, VR.LASTMODIFIEDDATE DESC) = 1
),
RESCHEDULED AS 
( 
	WITH DELETEDVISIT AS 
	( 
		SELECT PATIENTID,VISITDATE FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLVISITS_REPL
		WHERE DELETED=TRUE 
		GROUP BY PATIENTID ,VISITDATE 
	)
	SELECT *
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLVISITS_REPL VISIT 
	INNER JOIN DELETEDVISIT DT 
	ON VISIT.PATIENTID =DT.PATIENTID AND VISIT.VISITDATE=DT.VISITDATE
	WHERE DELETED =FALSE 
),
DERIVED_STATUS AS 
( 
	SELECT DISTINCT VISITS.VISITID, VISITS.AGENCYID,
	CASE  
	WHEN  RE.VISITID IS NOT NULL  AND  VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0''  AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL )
	AND  VR.BILLED = 1 AND NVL(INVOICE.VISITPAYMENTSTATUS,0) in(0,1,2) 
    THEN  ''ReScheduled In Review-Billed''
	WHEN  RE.VISITID IS NOT NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
    AND VR."VISITENDTIME" IS NOT NULL AND VR.BILLED = 1 AND NVL(INVOICE.VISITPAYMENTSTATUS,0) in(0,1,2) 
    THEN  ''ReScheduled Completed-Billed''
    WHEN  RE.VISITID IS NOT NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
        AND VR."VISITENDTIME" IS NOT NULL AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN  ''ReScheduled Completed-Notbillable''
    WHEN  RE.VISITID IS NOT NULL  AND  VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0''  AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND (VR.BILLED =0) 
    THEN  ''ReScheduled In Review Unbilled''
    WHEN  RE.VISITID IS NOT NULL AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
        AND VR."VISITENDTIME" IS NOT NULL AND  VR.BILLED = 0
    THEN  ''ReScheduled Completed-Unbilled''
	WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 1  AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Cancelled Not billable'' 
	WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =1 AND VR.DELETED = TRUE
    THEN ''Cancelled Billed'' 
    WHEN  RE.VISITID IS NOT NULL  AND  VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0''  AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN  ''ReScheduled In Review Notbillable''
    WHEN (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL )  AND VR.VISITDATE::DATE > GETDATE()AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Scheduled Future Notbillable''--yes
    WHEN  RE.VISITID IS NULL AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0''  AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Scheduled In Review Notbillable''
    WHEN   RE.VISITID IS NULL   AND VR.ISMISSEDVISIT = 0 AND  VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0''  AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND VR.BILLED =1 
    THEN ''Scheduled In Review Billed''
    WHEN   RE.VISITID IS NULL AND VR.ISMISSEDVISIT = 0 AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
        AND VR."VISITENDTIME" IS NOT NULL AND VR.BILLED =1
    THEN ''Scheduled Completed Billed''
    WHEN   RE.VISITID IS NULL AND VR.ISMISSEDVISIT = 0 AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
        AND VR."VISITENDTIME" IS NOT NULL AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Scheduled Completed Not billable''
    WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
        AND VR."VISITENDTIME" IS NOT NULL  AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL )
    THEN ''Completed In Review '' --yes
    WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND  VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0''  AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL )
    THEN ''Cancelled In Review Unbilled''
	WHEN  RE.VISITID IS NULL AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0''  AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) AND VR.BILLED =0 
    THEN ''Scheduled In Review Unbilled''
   	WHEN  RE.VISITID IS NULL AND VR.ISMISSEDVISIT = 0 AND VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
        AND VR."VISITENDTIME" IS NOT NULL AND VR.BILLED = 0
    THEN ''Scheduled Completed UnBilled''
    WHEN  (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL)  AND  (VR.BILLED =0 )AND NVL(VR.ISMISSEDVISIT,0) =''0''
    THEN ''Scheduled Future Unbilled''
    WHEN (VR.VISITDATE::DATE > GETDATE() AND  RE.VISITID IS NOT NULL ) AND  (VR.BILLED =0 )AND NVL(VR.ISMISSEDVISIT,0) =''0''
    THEN ''Rescheduled Future Unbilled''
    WHEN (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL ) AND (VR.BILLED =0 )AND VR.DELETED=FALSE
    THEN ''Scheduled Unbilled''--yes
    WHEN VR.ISMISSEDVISIT = 1 AND VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0''  AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL )
    THEN ''Cancelled In Review''--yes
    WHEN VR.VISITDATE::DATE > GETDATE() AND VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE
    THEN ''Future Cancelled Unbilled''
	WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE
    THEN ''Cancelled Unbilled''
    WHEN (VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE())
    THEN ''Cancelled''
    END AS DERIVED_DISC_STATUS,
    CASE 
	WHEN VR.VISITDATE::DATE > GETDATE() AND NVL(INVOICE.VISITPAYMENTSTATUS,0) = 0 AND NVL(VR.ISMISSEDVISIT,0)=0 AND RE.VISITID IS NULL THEN ''Scheduled-Open''
	WHEN RE.VISITID IS NULL AND VR.ISMISSEDVISIT = 0 THEN ''Scheduled''
	WHEN RE.VISITID IS NOT NULL THEN ''Rescheduled''
	WHEN VR.ISMISSEDVISIT = 1  THEN ''Cancelled''
	--WHEN RE.VISITID IS NULL THEN ''Scheduled''
	END AS SCHEDULE_STATUS_NAME
    ,
	CASE 
    WHEN VR.VISITDATE::DATE > GETDATE() THEN ''Future''
	WHEN VR.VISITDATE <=current_date AND VR.ISMISSEDVISIT =''0'' 
  	    AND (VR.VISITSTARTTIME IS NULL OR VR.VISITENDTIME  IS NULL ) THEN ''In Review''
	WHEN VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE() THEN ''Did not happen''
	WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 0 AND VR.VISITSTARTTIME IS NOT NULL
        AND VR."VISITENDTIME" IS NOT NULL THEN ''Completed''
    ELSE NULL 
    END AS VISIT_STATUS_NAME
    ,
	CASE 
	WHEN UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE 
	THEN ''Not BIllable''
	WHEN VR.BILLED =0  THEN ''UnBIlled''
--	WHEN VR.BILLED = 1 AND NVL(INVOICE.VISITPAYMENTSTATUS,0) THEN ''Billed''
	WHEN VR.BILLED = 1 AND NVL(INVOICE.VISITPAYMENTSTATUS,0) in(0,1,2) THEN ''Billed'' 
    ELSE NULL 
    END AS INVOICE_STATUS_NAME,
	MD5(''17'' || ''-'' || ''EDISON'' || ''-'' || NVL(SCHEDULE_STATUS_NAME,''S'')||NVL(VISIT_STATUS_NAME,''S'')||NVL(INVOICE_STATUS_NAME,''S'')) AS VISIT_STATUS_KEY
     FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.VISITINFO_REPL VISITS
JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLVISITS_REPL VR 
	ON VISITS.VISITID = VR.VISITID AND VISITS.AGENCYID = VR.AGENCYID
--LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.VISITUNBILLEDDETAILS IV
--	ON IV.VISITID=VISITS.VISITID
LEFT JOIN RESCHEDULED RE 
	ON VISITS.VISITID=RE.VISITID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.SERVICECODES SC
    ON VISITS.PRIMARYSERVICECODEID=SC.SERVICECODEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEDETAILS_REPL INVOICE 
	ON VISITS.VISITID = INVOICE.VISITID AND VISITS.PRIMARYSERVICECODEID = INVOICE.INVSERVICECODEID
WHERE VISITS.AGENCYID = 155
), EDISON_CONTRACTRATES AS
(
	SELECT CR.CONTRACTRATEID 
		, CR.RATE
		, CR.CONTRACTID 
		, CR.AGENCYID
		, CR.SERVICECODEID 
		, CR.UNITS 
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CONTRACTRATES CR 
	WHERE TODATE :: DATE > GETDATE()
	    	AND FROMDATE :: DATE <= GETDATE() 
	QUALIFY ROW_NUMBER() 
			  OVER(PARTITION BY CR.CONTRACTID, CR.SERVICECODEID, CR.AGENCYID 
				 	ORDER BY CR.RATE DESC, CR.MODIFIEDDATE DESC) = 1
),Latest_Visit_Auth AS (
SELECT VISITID, PA.AUTHORIZATIONID,PA.CONTRACTID,PA.SERVICECODEID
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.VISITAUTHORIZATIONS_REPL VAR
JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.PATIENTAUTHORIZATION PA ON PA.AUTHORIZATIONID = VAR.AUTHORIZATIONID 
QUALIFY  ROW_NUMBER() OVER(PARTITION BY VISITID ORDER BY VISITAUTHORIZATIONID DESC) = 1
)
/*,Latest_Visit_Auth AS (
SELECT VISITID, first_value(PA.AUTHORIZATIONID) OVER (PARTITION BY VISITID,PA.AUTHORIZATIONID ORDER BY VAR.SRNO DESC) AS AUTHORIZATIONID
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.VISITAUTHORIZATIONS_REPL VAR
JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.PATIENTAUTHORIZATION PA ON PA.AUTHORIZATIONID = VAR.AUTHORIZATIONID 
WHERE SRNO=1 AND PA.SERVICECODEID IS NOT NULL
)--SELECT * FROM Latest_Visit_Auth;*/
,Latest_Check_Number AS (
SELECT VISITID, first_value(CHECKNUMBER) OVER (PARTITION BY VISITID ORDER BY PAIDDATE DESC) AS CHECKNUMBER
,first_value(INVOICENUMBER) OVER (PARTITION BY VISITID ORDER BY PAIDDATE DESC) AS INVOICENUMBER
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.PAYMENTS
)--SELECT * FROM Latest_Check_Number;
,AUTO_CONFIRMED_VISITS AS (
SELECT UV.VISITID
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.UNTOUCHEDVISITS UV
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.INREVIEWVISITS IV
ON UV.VISITID = IV.VISITID
WHERE IV.VISITID IS NULL
)
SELECT DISTINCT MD5(''EDISON'' || ''-'' || VISITS.VISITID || ''-'' || '' EDISON'') AS VISIT_KEY
    	, DATE_TRUNC (DAY, VR.VISITDATE) AS REPORT_DATE
    	, MD5(''EDISON'' || ''-'' || ''EDISON CORPORATE OFFICE'' || ''-'' || ''EDISON'') AS BRANCH_KEY
    	, DC.CLIENT_KEY AS CLIENT_KEY
    	, MD5(VISITS.AGENCYID || ''-'' || NVL(SC.CONTRACTID,-1) || ''-'' || NVL(CR.CONTRACTRATEID, -1) || ''-'' || NVL(SC.SERVICECODEID, -1) || ''-'' || NVL(RS.REVENUE_SUBCATEGORY_CODE, ''UNKNOWN'') ||''EDISON'') AS CONTRACT_KEY
    	, MD5(''EDISON'' || ''-'' || EM.MASTER_ID  || ''-'' || ''EDISON'') AS SCHEDULE_EMPLOYEE_KEY
    	, MD5(''EDISON'' || ''-'' || EM.MASTER_ID  || ''-'' || ''EDISON'') AS EMPLOYEE_KEY
    	, 17 AS SOURCE_SYSTEM_ID
    	, MD5(''EDISON'' || ''-'' || VISITS.AGENCYID || ''-'' || NVL(COORDINATOR.COORDINATORID1, -1) || ''-'' || ''EDISON'') AS SUPERVISOR_KEY
    	, NULL AS INVOICE_KEY
    	, NULL AS PAYROLL_KEY
        , MD5(''EDISON'' || ''-'' || LVA.AUTHORIZATIONID || ''-'' || IFNULL(RS.REVENUE_SUBCATEGORY_CODE, ''1'') || ''-'' || ''EDISON'') AS CLIENT_SERVICE_KEY
        , CASE WHEN PR.PAYERID IS NULL AND SC.CONTRACTID IS NULL AND SC.SERVICECODEID IS NULL THEN NULL ELSE
             MD5(''EDISON'' 
	 || ''-'' || IFNULL(VISITS.AGENCYID,-1)
	 || ''-'' || ifnull(PR.PAYERID, -1) 
	 || ''-'' || IFNULL(SC.CONTRACTID, -1) 
	 || ''-'' || IFNULL(SC.SERVICECODEID, -1)
	 || ''-'' || IFNULL(RS.REVENUE_SUBCATEGORY_CODE, ''1'') 
	 || ''-'' || IFNULL(SC.VISITTYPE, ''-1'') 
	 || ''-'' || IFNULL(SC.RATETYPETEXT, ''-1'') 
	 || ''-'' || ''EDISON'') END AS PARTNER_CONTRACT_SERVICE_KEY                                                                                                         
	    , MD5(''EDISON'' || ''-'' || SC.SERVICECODEID || ''-'' || NVL(RS.REVENUE_SUBCATEGORY_CODE,''-1'') || ''-'' || ''HHAEXCHANGE'') AS BILLING_KEY
    	, DATE_TRUNC(DAY, VR.VISITDATE) AS SERVICE_DATE
    	, DATE_TRUNC(DAY, PAYROLL.PAYROLLDATE) AS PAYROLL_DATE
    	, ''EDISON CORPORATE OFFICE'' AS BRANCH_NAME
    	, DC.CLIENT_NUMBER AS CLIENT_NUMBER
    	, NVL(TO_VARCHAR(SC.CONTRACTID), ''Unknown'') AS CONTRACT_CODE
    	, NVL(E.CAREGIVERID,E.MASTER_ID) AS SCHEDULE_EMPLOYEE_ID
    	, NVL(E.CAREGIVERID,E.MASTER_ID) AS EMPLOYEE_ID
        , ''EDISON'' AS SYSTEM_CODE
        , COORDINATOR.COORDINATORID1 AS SUPERVISOR_CODE
        , LCN.INVOICENUMBER AS INVOICE_ID
	    , LCN.CHECKNUMBER AS CHEQUE_NUMBER
        , CASE WHEN ACV.VISITID IS NOT NULL THEN TRUE ELSE FALSE END AS CLEAN_SHIFT_FLAG
        , M.SCHEDULE_STATUS_CODE AS SCHEDULE_STATUS_CODE
        , M.SCHEDULE_STATUS_NAME AS SCHEDULE_STATUS_NAME
        , M.SCHEDULE_STATUS_DESCRIPTION AS SCHEDULE_STATUS_DESCRIPTION
        , M.VISIT_STATUS_CODE AS VISIT_STATUS_CODE
        , M.VISIT_STATUS_NAME AS VISIT_STATUS_NAME
        , M.VISIT_STATUS_DESCRIPTION AS VISIT_STATUS_DESCRIPTION
        , M.INVOICE_STATUS_CODE AS INVOICE_STATUS_CODE
        , M.INVOICE_STATUS_NAME AS INVOICE_STATUS_NAME
        , M.INVOICE_STATUS_DESCRIPTION AS INVOICE_STATUS_DESCRIPTION
        , M.PAYROLL_STATUS_CODE AS PAYROLL_STATUS_CODE
        , M.PAYROLL_STATUS_NAME AS PAYROLL_STATUS_NAME
        , M.PAYROLL_STATUS_DESCRIPTION AS PAYROLL_STATUS_DESCRIPTION
  		, NULL AS CANCEL_REASON_CODE 
		, NULL AS CANCEL_REASON_DESCRIPTION
        , NULL AS CANCEL_REASON_NOTES
        , FALSE AS EXCEPTION_REASON_INDICATOR  --CALENDARREASONCODES
        , NULL AS RESOLUTION_CODE
        , NULL AS RESOLUTION_DESCRIPTION
        , NULL AS REJECTION_CODE
        , NULL AS REJECTION_DESCRIPTION
        , NVL(TO_VARCHAR(SC.SERVICECODE), ''Unknown'') AS BILL_CODE
        , COALESCE(INVOICE.BILLEDRATE, 0) AS BILL_RATE
        , INVOICE.BILLEDUNITS AS BILL_UNITS_SERVED
        , SC.RATETYPETEXT AS BILL_UNIT_TYPE  --INVOICE.INVRATETYPE AS BILL_UNIT_TYPE --visitinfo_repl.visittype/TBLINVOICEDETAILS_REPL.INVRATETYPE
        , NULL AS OVERHEAD_RATE
        , VR.SCHEDULEDSTARTTIME AS SCHEDULE_TIMEIN   --VISITS/TBLVISITS_REPL --SAME IN BOTH TABLE
        , VR.SCHEDULEDENDTIME AS SCHEDULE_TIMEOUT
        , IFNULL(DATEDIFF("MI",VR.SCHEDULEDSTARTTIME, VR.SCHEDULEDENDTIME)/60.0,0) AS SCHEDULE_DURATION
        , VR.VISITSTARTTIME AS ACTUAL_TIMEIN
        , VR.VISITENDTIME AS ACTUAL_TIMEOUT
        , IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) AS ACTUAL_DURATION
        , NULL AS ADJUSTED_TIMEIN
        , NULL AS ADJUSTED_TIMEOUT
        , NULL AS ADJUSTED_DURATION
        , CASE WHEN (VS.MISSEDVISIT = ''N'' AND VS.IVRCallIn IS NOT NULL AND VS.IVRCallOut IS NOT NULL) 
						OR (VS.MISSEDVISIT = ''N'' AND (VS.IVRCallIn IS NULL OR VS.IVRCallOut IS NULL) 
									AND (VR.VISITSTARTTIME IS NOT NULL AND VR.VISITENDTIME IS NOT NULL) 
									AND VISITS.TIMESHEETRECEIVED = TRUE AND VS.TIMESHEETREQUIRED = ''Y''
							)
						OR (VR.VISITSTARTTIME IS NOT NULL AND VR.VISITENDTIME IS NOT NULL 
							AND VS.MISSEDVISIT = ''N'' AND VISITS.TIMESHEETRECEIVED = FALSE
							AND VS.TIMESHEETREQUIRED = ''N''
							)
						THEN
						  	CASE WHEN CHARINDEX(''T1020'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''S5126'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''S5151'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''PCA LEVEL II LIVE IN 263200'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''HHA LIVE IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''C LIVE IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''PCA LIVE-IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''HHA LIVE-IN OVERTIME'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               WHEN CHARINDEX(''2405004 LIVE IN'', SC.SERVICECODE) > 0 AND IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0) > 13 THEN 13
				               ELSE IFNULL(DATEDIFF("MI",VR.VISITSTARTTIME, VR.VISITENDTIME)/60.0,0)
				          	END
				   ELSE 0
  		  END AS HOURS_SERVED
        , NULL AS COMMENTS
        , IFF(VISITS.IVRCALLIN IS NOT NULL AND VISITS.IVRCALLOUT IS NOT NULL AND (VR.ISMISSEDVISIT != 1 OR VS.MISSEDVISIT = ''N''), ''Y'', ''N'') AS IS_EVV_FLAG
        , NULL AS TIMESHEET_TYPE
        , NULL AS TRACKING_ID,
        -- ETL Fields
   		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
        , CONVERT_TIMEZONE(''UTC'',CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
        , CURRENT_USER AS ETL_INSERTED_BY
        , CONVERT_TIMEZONE(''UTC'',CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
        , CURRENT_USER AS ETL_LAST_UPDATED_BY
        , 0 AS ETL_DELETED_FLAG
        ,M.CONFIRMED_FLAG AS CONFIRMED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.VISITINFO_REPL VISITS
JOIN EDISON_TBLVISIT_INFO VR 
	ON VISITS.VISITID = VR.VISITID
        AND VISITS.AGENCYID = VR.AGENCYID
INNER JOIN VISIT_DATA VS
     ON VS.VISITID = VR.VISITID 
JOIN CLIENT C 
	ON VR.PATIENTID = C.PATIENTID
        AND VISITS.AGENCYID = C.AGENCYID
JOIN HAH.DIM_CLIENT DC
	ON DC.CLIENT_KEY = C.CLIENT_KEY
		AND DC.SYSTEM_CODE = ''EDISON''
JOIN EMPLOYEE E 
	ON VR.CAREGIVERID = E.CAREGIVERID
        AND VISITS.AGENCYID = E.AGENCYID
LEFT JOIN DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.EMPLOYEE_MASTER_LIST  EM
	ON E.MASTER_ID = EM.MASTER_ID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.OFFICE_OFFICES_REPL O 
	ON C.OFFICEID = O.OFFICEID
        AND C.AGENCYID = O.AGENCYID
LEFT JOIN COORDINATOR 
	ON C.PATIENTID = COORDINATOR.PATIENTID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.SERVICECODES SC 
	ON VISITS.PRIMARYSERVICECODEID = SC.SERVICECODEID
        AND VISITS.AGENCYID = SC.AGENCYID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CONTRACTS 
	ON SC.CONTRACTID = CONTRACTS.CONTRACTID
        AND VISITS.AGENCYID = CONTRACTS.AGENCYID
LEFT JOIN EDISON_CONTRACTRATES CR 
	ON CONTRACTS.CONTRACTID = CR.CONTRACTID
		AND CONTRACTS.AGENCYID = CR.AGENCYID
        AND SC.SERVICECODEID = CR.SERVICECODEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.PAYROLL_VISITS_REPL PAYROLL 
	ON VISITS.VISITID = PAYROLL.VISITID
        AND VISITS.AGENCYID = PAYROLL.AGENCYID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEDETAILS_REPL INVOICE 
	ON VISITS.VISITID = INVOICE.VISITID
        AND VISITS.PRIMARYSERVICECODEID = INVOICE.INVSERVICECODEID
LEFT JOIN EDISON_REVENUE_SEG RS
		ON RS.VISITID = VISITS.VISITID
LEFT JOIN DERIVED_STATUS DS ON DS.VISITID=VISITS.VISITID AND DS.AGENCYID= VISITS.AGENCYID 
LEFT JOIN HAH.DIM_VISIT_STATUS_MAPPING M ON DS.VISIT_STATUS_KEY = M.VISIT_STATUS_KEY
LEFT JOIN Latest_Visit_Auth LVA ON LVA.VISITID = VR.VISITID AND SC.CONTRACTID = LVA.CONTRACTID
         AND SC.SERVICECODEID = LVA.SERVICECODEID 
LEFT JOIN Latest_Check_Number LCN ON LCN.VISITID = VR.VISITID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.PAYER_REPL PR
	   ON IFNULL(PR.CONTRACTID,PR.PAYERID) = SC.CONTRACTID
LEFT JOIN AUTO_CONFIRMED_VISITS ACV ON ACV.VISITID = VISITS.VISITID
WHERE VISITS.AGENCYID = 155 ; 

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;

 EOT
}

