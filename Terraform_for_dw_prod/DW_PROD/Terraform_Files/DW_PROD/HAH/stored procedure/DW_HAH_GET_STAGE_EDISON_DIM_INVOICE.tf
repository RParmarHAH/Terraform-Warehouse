resource "snowflake_procedure" "DW_HAH_GET_STAGE_EDISON_DIM_INVOICE" {
	name ="GET_STAGE_EDISON_DIM_INVOICE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result VARCHAR;
BEGIN
--*****************************************************************************************************************************
-- NAME:  EDISON_DIM_INVOICE
--
-- PURPOSE: Creates one row per Invoice according to EDISON
--
-- DEVELOPMENT LOG:
-- DATE        	AUTHOR                	NOTES:
-- --------    	-------------------   	-----------------------------------------------------------------------------------------------
-- 04/25/2022	Mohit Vaghadiya     	Initial development
-- 03/09/2023	Shikhar Saxena			Changed the Branch key logic for Corporate branch
-- 30/03/2023 	PINKAL PANCHAL 			INVOICE_STATUS_MAPPING CHANGES FOR RCM
-- 12/09/2023   Preeti Sharma           INVOICE_STATUS_MAPPING LOGIC CHANGES FOR RCM
--*****************************************************************************************************************************
  
INSERT OVERWRITE INTO STAGE.EDISON_DIM_INVOICE
WITH CLIENT AS 
(
	SELECT * FROM 
	(
		SELECT MD5((AGENCYID||''-''||MASTER_ID||''-''||''EDISON'' )) as CLIENT_KEY,
		PATIENTID,MASTER_ID,PATIENTID AS ORIGINAL_RECORD_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CLIENT_MASTER_LIST 
	) 
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT MD5((AGENCYID||''-''||MASTER_ID||''-''||''EDISON'' )) as CLIENT_KEY,
		PATIENTID,MASTER_ID,PATIENTID AS ORIGINAL_RECORD_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CLIENT_MATCH_LIST
		WHERE PATIENTID NOT IN (SELECT PATIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CLIENT_MASTER_LIST)
	)
), BILLING_SUMMARY AS
(
	SELECT INV_HEAD.INVOICEHEADERID
		, SUM(BPV.PAIDAMOUNT) AS AMOUNT_COLLECTED
		, SUM(NVL(BPV.ADJUSTMENT, 0) + NVL(BPV.TTADJUSTMENT, 0) + NVL(BPV.WRITEOFF, 0) + NVL(BPV.OTHERADJUSTMENT, 0)) AS AMOUNT_ADJUSTED
		, SUM(BPV.WRITEOFF) AS AMOUNT_WRITEOFF
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.BILLING_PAIDVISITS_REPL BPV
	INNER JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEDETAILS_REPL INV_DET
		ON INV_DET.VISITID = BPV.VISITID 
			AND INV_DET.PAYERID = BPV.PAYERID
			AND INV_DET.AGENCYID = BPV.AGENCYID 
	INNER JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEHEADER_REPL INV_HEAD
		ON INV_HEAD.INVOICEHEADERID = INV_DET.INVOICEHEADERID
			AND INV_HEAD.AGENCYID = INV_DET.AGENCYID 
	WHERE INV_HEAD .AGENCYID  = 155
	GROUP BY INV_HEAD.INVOICEHEADERID 
), PAYMENTS_SUMMARY AS
(
	SELECT INV_HEAD.INVOICEHEADERID
		, SUM(PYM.PAIDAMOUNT) AS AMOUNT_COLLECTED
		, SUM(NVL(PYM.ADJUSTMENT, 0) + NVL(PYM.TTADJUSTMENT, 0) + NVL(PYM.WRITEOFF, 0) + NVL(PYM.OTHERADJUSTMENT, 0)) AS AMOUNT_ADJUSTED
		, SUM(PYM.WRITEOFF) AS AMOUNT_WRITEOFF
		, MAX(PYM.PAIDDATE) AS PAIDDATE
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.PAYMENTS PYM
	INNER JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEDETAILS_REPL INV_DET
		ON INV_DET.VISITID = PYM.VISITID 
			AND INV_DET.INVOICEDETAILID = PYM.INVOICEDETAILID 
			AND INV_DET.AGENCYID = PYM.AGENCYID 
	INNER JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEHEADER_REPL INV_HEAD
		ON INV_HEAD.INVOICEHEADERID = INV_DET.INVOICEHEADERID
			AND INV_HEAD.AGENCYID = INV_DET.AGENCYID 
	WHERE INV_HEAD .AGENCYID  = 155
	GROUP BY INV_HEAD.INVOICEHEADERID 
), INVOICE_SUMMARY AS
(
	SELECT DISTINCT INV_HEAD.INVOICEHEADERID AS INVOICEHEADERID
			, INV_HEAD.INVOICEAMOUNT AS INV_AMOUNT_BILLED
			, NVL(BS.AMOUNT_ADJUSTED, PS.AMOUNT_ADJUSTED) AS INV_AMOUNT_ADJUSTED
			, COALESCE(BS.AMOUNT_COLLECTED, PS.AMOUNT_COLLECTED, 0) + NVL(INV_AMOUNT_ADJUSTED, 0) AS INV_AMOUNT_COLLECTED -- HHA Considering any adjusment OR Write off in paid amount
			, INV_AMOUNT_BILLED - INV_AMOUNT_COLLECTED AS INV_AMOUNT_OUTSTANDING
			, NVL(BS.AMOUNT_WRITEOFF, PS.AMOUNT_WRITEOFF) AS INV_AMOUNT_WRITEOFF
			, NULL AS WRITEOFF_NOTES
			, PS.PAIDDATE AS FINAL_PAYMENT_DATE
			, COUNT(DISTINCT INV_DET.PATIENTID) OVER (PARTITION BY INV_HEAD.INVOICEHEADERID) AS NUMBER_OF_CLIENTS
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEHEADER_REPL INV_HEAD
	INNER JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEDETAILS_REPL INV_DET
		ON INV_DET.INVOICEHEADERID = INV_HEAD.INVOICEHEADERID 
			AND INV_DET.AGENCYID = INV_HEAD.AGENCYID 
	LEFT JOIN BILLING_SUMMARY BS
		ON BS.INVOICEHEADERID = INV_HEAD.INVOICEHEADERID 
	LEFT JOIN PAYMENTS_SUMMARY PS
		ON PS.INVOICEHEADERID = INV_HEAD.INVOICEHEADERID 
	WHERE INV_HEAD.AGENCYID = 155
), SUPERVISOR AS
(
	SELECT CORD.PATIENTID, CORD.COORDINATORNAME
			, ROW_NUMBER() OVER(PARTITION BY CORD.AGENCYID, CORD.PATIENTID, CORD.COORDINATORSRNO ORDER BY CREATEDDATE DESC) RN
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.PROVIDERPATIENTCOORDINATORS CORD
	WHERE CORD.AGENCYID  = 155
			AND CORD.COORDINATORSRNO  = 1
),
INVOICE_STATUS_MAPPING AS		
(
SELECT DISTINCT
	INV.INVOICEHEADERID,
	17 AS SOURCE_SYSTEM_ID,
	''EDISON'' AS SYSTEM_CODE,
--	CASE WHEN INV.PAYMENTSTATUS = 0 THEN ''BILLED''
--		WHEN INV.PAYMENTSTATUS = 1 THEN ''PAID''
--		WHEN INV.PAYMENTSTATUS = 2 THEN ''PARTIAL PAY''
--	ELSE ''UNKNOWN'' END AS DERIVED_INVOICE_STATUS,
-- Changes made on 12/09/2023 for RCM
    CASE WHEN INVOICE_SUMMARY.INV_AMOUNT_OUTSTANDING <= 0 THEN ''PAID''
        WHEN INVOICE_SUMMARY.INV_AMOUNT_OUTSTANDING> 0 AND INVOICE_SUMMARY.INV_AMOUNT_COLLECTED> 0 THEN ''PARTIAL PAY''
        ELSE ''BILLED'' END AS DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEHEADER_REPL INV
LEFT JOIN INVOICE_SUMMARY --Added on 12/09/2023 for RCM
	ON INVOICE_SUMMARY.INVOICEHEADERID = INV.INVOICEHEADERID 
)
SELECT DISTINCT MD5(''EDISON'' || ''-'' || INV_HEAD.AGENCYID || ''-'' || INV_HEAD.INVOICEHEADERID || ''-'' || ''EDISON'') AS INVOICE_KEY
				, DC.CLIENT_KEY AS CLIENT_KEY
				, INV_HEAD.VENDORINVOICENUMBER AS INVOICE_NUMBER
				, NULL AS ALTERNATE_INVOICE_NUMBER
				, TO_VARCHAR(INV_HEAD.INVOICEDATE, ''YYYYMM'') AS PERIOD
				, ''Regular'' AS INVOICE_TYPE
				, INVOICE_SUMMARY.NUMBER_OF_CLIENTS AS NUMBER_OF_CLIENTS
				, ''EDISON'' AS SYSTEM_CODE
				, 17 AS SOURCE_SYSTEM_ID
				, MD5(''EDISON'' || ''-'' || ''EDISON CORPORATE OFFICE'' || ''-'' || ''EDISON'') AS BRANCH_KEY
				, PYR.PAYERID || ''-'' || ''EDISON'' AS PAYOR_CODE
				, NVL(NULLIF(TRIM(PYR.PAYERNAME), ''''), ''Unknown'') AS PAYOR_NAME
				, IFF(INV_HEAD.PAYMENTSTATUS = 1, FALSE, TRUE) AS INVOICE_OPEN_FLAG -- KEEP IT OPEN IF NOT FULLY PAID
				, INV_HEAD.INVOICEDATE AS FIRST_INVOICE_DATE
				, INVOICE_SUMMARY.FINAL_PAYMENT_DATE AS FINAL_PAYMENT_DATE 
				, INV_HEAD.VENDORINVOICENUMBER AS FIRST_INVOICE_NUMBER
				, 1 AS BILL_ITERATION
				, NULL AS BILL_REPRESENTATIVE
				, SUP.COORDINATORNAME AS BILL_SUPERVISOR
				, NULL AS BILL_MANAGER
--				, CASE WHEN INV_HEAD.PAYMENTSTATUS = 0 THEN ''Billed''
--					   WHEN INV_HEAD.PAYMENTSTATUS = 1 THEN ''Fully Paid''
--					   WHEN INV_HEAD.PAYMENTSTATUS = 2 THEN ''Partially Paid''
--				  END INVOICE_STATUS 
--		CHANGES MADE ON 30/03/23 FOR INVOICE_STATUS_MAPPING BY PINKAL
				,DISM.DERIVED_INVOICE_STATUS AS INVOICE_STATUS
				, (NVL(INVOICE_SUMMARY.INV_AMOUNT_WRITEOFF, 0) > 0) AS WRITEOFF_FLAG
				, NULL AS WRITEOFF_REASON
				, INVOICE_SUMMARY.INV_AMOUNT_BILLED AS AMOUNT_BILLED
				, INVOICE_SUMMARY.INV_AMOUNT_COLLECTED AS AMOUNT_COLLECTED
				, INVOICE_SUMMARY.INV_AMOUNT_OUTSTANDING AS AMOUNT_OUTSTANDING
				, TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE
				, TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE
				-- ETL Fields
    			,:STR_ETL_TASK_KEY AS ETL_TASK_KEY
        		,:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
						
		 		, CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
			    , CURRENT_USER as ETL_INSERTED_BY
			    , CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_UPDATED_DATE
			    , CURRENT_USER AS ETL_LAST_UPDATED_BY
			    , 0 AS ETL_DELETED_FLAG
			    , 0 AS ETL_INFERRED_MEMBER_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEHEADER_REPL INV_HEAD
INNER JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEDETAILS_REPL INV_DET
	ON INV_DET.INVOICEHEADERID = INV_HEAD.INVOICEHEADERID
		AND INV_HEAD.AGENCYID = INV_DET.AGENCYID 
INNER JOIN INVOICE_SUMMARY 
	ON INVOICE_SUMMARY.INVOICEHEADERID = INV_HEAD.INVOICEHEADERID 
INNER JOIN CLIENT C 
	ON C.PATIENTID = INV_DET.PATIENTID
INNER JOIN HAH.DIM_CLIENT DC
--    ON DC.CLIENT_NUMBER = C.MASTER_ID -- change has made on 6 April, 2023.
--ON DC.CLIENT_NUMBER = RIGHT(C.MASTER_ID,LEN(C.MASTER_ID)-3)  --change has made on 11 April, 2023.
	ON DC.CLIENT_KEY = C.CLIENT_KEY
	AND DC.SYSTEM_CODE = ''EDISON''
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.PAYER_REPL PYR
	ON PYR.PAYERID = INV_DET.PAYERID 
		AND INV_HEAD.AGENCYID = INV_DET.AGENCYID
LEFT JOIN SUPERVISOR SUP
	ON SUP.PATIENTID = INV_DET.PATIENTID 
		AND SUP.RN  = 1
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.OFFICE_OFFICES_REPL O ON O.OFFICEID = INV_HEAD.OFFICEID
LEFT JOIN INVOICE_STATUS_MAPPING ISM ON ISM.INVOICEHEADERID = INV_HEAD.INVOICEHEADERID
LEFT JOIN HAH.DIM_INVOICE_STATUS_MAPPING DISM ON DISM.INVOICE_STATUS_KEY = ISM.INVOICE_STATUS_KEY
WHERE INV_HEAD.AGENCYID = 155 ;
;
    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

    return return_result;
END;
    
 EOT
}

