resource "snowflake_procedure" "DW_HAH_GET_STAGE_QUALTRICS_DIM_DISTRIBUTION" {
	name ="GET_STAGE_QUALTRICS_DIM_DISTRIBUTION"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT
BEGIN

INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.STAGE.QUALTRICS_DIM_DISTRIBUTION 
SELECT 
MD5(''QUALTRICS''||ID) AS QUALTRICS_DIM_DISTRIBUTION_KEY,
MD5(''QUALTRICS''||PARENT_DISTRIBUTION_ID) AS PARENT_DISTRIBUTION_ID,
''QUALTRICS'' AS SURVEY_SOURCE_TYPE,
--OWNER_ID, 
--ORGANIZATION_ID,
REQUEST_STATUS AS DISTRIBUTION_STATUS, -- Scheduled,Finished,Done,Generated
REQUEST_TYPE AS DISTRIBUTION_TYPE, -- Reminder,GeneratedInvite,Invite
MD5(''QUALTRICS''||SURVEY_ID) AS SURVEY_KEY,
SURVEY_ID,
NAME AS DISTRIBUTION_NAME,
SEND_DATE::TIMESTAMP_NTZ,
CREATED_DATE::TIMESTAMP_NTZ,
MODIFIED_DATE::TIMESTAMP_NTZ,
--PARSE_JSON(REPLACE(HEADERS,''None'',NULL)):fromEmail as FROM_EMAIL,
--PARSE_JSON(REPLACE(HEADERS,''None'',''NULL'')):fromName as FROM_NAME,
--PARSE_JSON(REPLACE(HEADERS,''None'',''NULL'')):replyToEmail as REPLY_TO_EMAIL,
--PARSE_JSON(REPLACE(HEADERS,''None'',''NULL'')):subject as SUBJECT,
--PARSE_JSON(REPLACE(RECIPIENTS,''None'',''NULL'')):mailingListId as MAILING_LIST_ID,
--PARSE_JSON(REPLACE(RECIPIENTS,''None'',''NULL'')):transactionBatchId as TRANSACTION_BATCH_ID,
--PARSE_JSON(REPLACE(RECIPIENTS,''None'',''NULL'')):transactionId as TRANSACTION_ID,
--PARSE_JSON(REPLACE(RECIPIENTS,''None'',''NULL'')):contactId as CONTACT_ID,
--PARSE_JSON(REPLACE(RECIPIENTS,''None'',''NULL'')):libraryId as RECIPIENT_LIBRARY_ID,
--PARSE_JSON(REPLACE(RECIPIENTS,''None'',''NULL'')):sampleId as SAMPLE_ID,
--PARSE_JSON(REPLACE(MESSAGE,''None'',''NULL'')):libraryId as MESSAGE_LIBRARY_ID,
--PARSE_JSON(REPLACE(MESSAGE,''None'',''NULL'')):messageId as MESSAGE_ID,
--PARSE_JSON(REPLACE(MESSAGE,''None'',''NULL'')):messageType as MESSAGE_TYPE, -- LIBRARY, INLINE
PARSE_JSON(REPLACE(STATS,''None'',''NULL'')):failed as FAILED,
PARSE_JSON(REPLACE(STATS,''None'',''NULL'')):finished as FINISHED,
PARSE_JSON(REPLACE(STATS,''None'',''NULL'')):sent as SENT,
PARSE_JSON(REPLACE(STATS,''None'',''NULL'')):started as STARTED,
PARSE_JSON(REPLACE(STATS,''None'',''NULL'')):credits as CREDITS,
PARSE_JSON(REPLACE(STATS,''None'',''NULL'')):segments as SEGMENTS,
PARSE_JSON(REPLACE(STATS,''None'',''NULL'')):blocked as BLOCKED,
PARSE_JSON(REPLACE(STATS,''None'',''NULL'')):bounced as BOUNCED,
PARSE_JSON(REPLACE(STATS,''None'',''NULL'')):complaints as COMPLAINTS,
PARSE_JSON(REPLACE(STATS,''None'',''NULL'')):opened as OPENED,
PARSE_JSON(REPLACE(STATS,''None'',''NULL'')):skipped as SKIPPED,
SURVEY_LINK_EXPIRATION_DATE::TIMESTAMP_NTZ,
DSS.SOURCE_SYSTEM_ID as SOURCE_SYSTEM_ID,
''QUALTRICS'' as SOURCE_SYSTEM_CODE,
:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ as ETL_INSERTED_DATE,
CURRENT_USER as ETL_INSERTED_BY,
CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ as ETL_UPDATED_DATE,
CURRENT_USER as ETL_LAST_UPDATED_BY,
0 as ETL_DELETED_FLAG,
0 as ETL_INFERRED_MEMBER_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.QUALTRICS_SURVEYS.QUALTRICS_SURVEY_DISTRIBUTION_LIST QSDL
JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_SOURCE_SYSTEM DSS
  ON DSS.system_code = ''Qualtrics'';

RETURN(''SUCCESS'');

END
 EOT
}

