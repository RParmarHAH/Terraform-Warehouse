resource "snowflake_procedure" "DW_HAH_GET_STAGE_QUICKBOOKS_FACT_PAYROLL_DETAILS" {
	name ="GET_STAGE_QUICKBOOKS_FACT_PAYROLL_DETAILS"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT


BEGIN

--*****************************************************************************************************************************
-- NAME: QUICKBOOKS_FACT_PAYROLL_DETAILS
--
-- PURPOSE: Creates one row per PAYROLL PER PAYCODE according to QuickBooks
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR				NOTES:
-- ---------	----------------	-----------------------------------------------------------------------------------------------        
-- 03/17/23		Aditya Shukla		Initial Development
--									(the logic has unions since we had 3 different file formats from source with unique data)
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.QUICKBOOKS_FACT_PAYROLL_DETAILS

SELECT DISTINCT
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(PAY."NAME", '',''))) || PAY.COMPANY || CHK_DATE || NVL(CHK_NO, ''0'') || PAYCODES || 31) AS PAYROLL_DETAIL_KEY,
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(PAY."NAME", '',''))) || PAY.COMPANY || CHK_DATE || 31) AS PAYROLL_KEY,
	COALESCE(CHK_DATE, TYPE)::DATE AS REPORT_DATE,
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(PAY."NAME", '',''))) || PAY.COMPANY || 31) AS EMPLOYEE_KEY,
	COALESCE(QB_BRANCHES.BRANCH_KEY, MD5(''QuickBooks'' || ''QB - CORPORATE'' || 31)) AS BRANCH_KEY,
	31 AS SOURCE_SYSTEM_ID,
	COALESCE(CHK_DATE, TYPE)::DATE AS PAYROLL_DATE,
	MD5(TRIM(UPPER(REPLACE(PAY."NAME", '',''))) || PAY.COMPANY) AS EMPLOYEE_ID,
	COALESCE(QB_BRANCHES.BRANCH_NAME, ''QB - CORPORATE'') AS BRANCH_NAME,
	''QB - '' || PAY.COMPANY AS SYSTEM_CODE,
	PAY_START::DATE AS PAY_PERIOD_START_DATE,
	PAY_END::DATE AS PAY_PERIOD_END_DATE,
	CASE WHEN CHK_NO = ''DD'' THEN NULL ELSE CHK_NO END AS CHECK_NUMBER,
	REPLACE(PAYCODES, ''_'', '' '') AS PAY_CODE,
	REPLACE(PAYCODES, ''_'', '' '') AS PAY_CODE_DESCRIPTION,
	NULL AS PAY_CODE_TYPE,
	NULL AS PAY_CODE_TYPE_DESCRIPTION,
	PCM.PAY_CODE_CATEGORY AS PAY_CODE_CATEGORY,
	REPLACE(HOURS, '','') AS NUMBER_OF_UNITS,
	NULL AS UNIT_TYPE_CODE,
	NULL AS UNIT_TYPE_DESCRIPTION,
	CASE WHEN AMOUNT NOT LIKE ''-%'' 
		THEN ROUND(REPLACE(AMOUNT, '','') / CASE WHEN HOURS = 0 THEN NULL ELSE REPLACE(HOURS, '','') END, 2)
		ELSE NULL
	END AS RATE,
	REPLACE(AMOUNT, '','') AS AMOUNT,
		-1 AS ETL_TASK_KEY,
		-1 AS ETL_INSERTED_TASK_KEY,
		current_date() AS ETL_INSERTED_DATE,
		current_user() AS ETL_INSERTED_BY,
		current_date() AS ETL_LAST_UPDATED_DATE,
		current_user() AS ETL_LAST_UPDATED_BY,
		FALSE ETL_DELETED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.ADP.QB_PAYROLL_DETAILS PAY
LEFT JOIN DW_${var.SF_ENVIRONMENT}.STAGE.QUICKBOOKS_DIM_PAYCODE_MAPPING PCM
	ON ''QB - '' || PAY.COMPANY = PCM.SYSTEM_CODE
	AND REPLACE(PAY.PAYCODES, ''_'', '' '')  = PCM.PAY_CODE
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ADP.QB_SSN_MAPPING QB_MAPPING
	ON QB_MAPPING.COMPANY = PAY.COMPANY
	AND QB_MAPPING."NAME" = UPPER(TRIM(REPLACE(PAY."NAME", '','')))
LEFT JOIN DW_${var.SF_ENVIRONMENT}.STAGE.QUICKBOOKS_DIM_BRANCH QB_BRANCHES 
	ON QB_BRANCHES.BRANCH_NAME = TRIM(UPPER(QB_MAPPING.CLASS))
	AND QB_BRANCHES.SYSTEM_CODE = ''QB - '' || QB_MAPPING.COMPANY
UNION
SELECT DISTINCT 
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(PAY."NAME", '',''))) || PAY.COMPANY || DATE::DATE || PAYCODES || 31) AS PAYROLL_DETAIL_KEY,
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(PAY."NAME", '',''))) || PAY.COMPANY || DATE::DATE || 31) AS PAYROLL_KEY,
	DATE::DATE AS REPORT_DATE,
	MD5(''QuickBooks'' || TRIM(UPPER(REPLACE(PAY."NAME", '',''))) || PAY.COMPANY || 31) AS EMPLOYEE_KEY,
	COALESCE(QB_BRANCHES.BRANCH_KEY, MD5(''QuickBooks'' || ''QB - CORPORATE'' || 31)) AS BRANCH_KEY,
	31 AS SOURCE_SYSTEM_ID,
	DATE::DATE AS PAYROLL_DATE,
	MD5(TRIM(UPPER(REPLACE(PAY."NAME", '',''))) || PAY.COMPANY) AS EMPLOYEE_ID,
	COALESCE(QB_BRANCHES.BRANCH_NAME, ''QB - CORPORATE'') AS BRANCH_NAME,
	''QB - '' || PAY.COMPANY AS SYSTEM_CODE,
	NULL AS PAY_PERIOD_START_DATE,
	NULL AS PAY_PERIOD_END_DATE,
	NULL AS CHECK_NUMBER,
	CASE WHEN PAYCODES = ''EMPLOYEE_AFTERTAX_DEDUCTIONS_MANSFIELD_MUNICIPAL_COURT_CASE_2019CVF02359'' THEN ''AFTERTAX MANSFIELD MUNICIPAL COURT''
		WHEN PAYCODES = ''EMPLOYEE_AFTERTAX_DEDUCTIONS_TABLET_DATA_OVER_USAGE'' THEN ''AFTERTAX DEDUCTIONS DATA OVER USAGE''
		ELSE REPLACE(PAYCODES, ''_'', '' '') 
	END AS PAY_CODE,
	REPLACE(PAYCODES, ''_'', '' '') AS PAY_CODE_DESCRIPTION,
	NULL AS PAY_CODE_TYPE,
	NULL AS PAY_CODE_TYPE_DESCRIPTION,
	PCM.PAY_CODE_CATEGORY AS PAY_CODE_CATEGORY,
	NULL AS NUMBER_OF_UNITS,
	NULL AS UNIT_TYPE_CODE,
	NULL AS UNIT_TYPE_DESCRIPTION,
	NULL AS RATE,
	REPLACE(AMOUNT, '','') AS AMOUNT,
		-1 AS ETL_TASK_KEY,
		-1 AS ETL_INSERTED_TASK_KEY,
		current_date() AS ETL_INSERTED_DATE,
		current_user() AS ETL_INSERTED_BY,
		current_date() AS ETL_LAST_UPDATED_DATE,
		current_user() AS ETL_LAST_UPDATED_BY,
		FALSE ETL_DELETED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.ADP.QB_PAYROLL_DETAILS_MIDWAY_2020 PAY
LEFT JOIN DW_${var.SF_ENVIRONMENT}.STAGE.QUICKBOOKS_DIM_PAYCODE_MAPPING PCM
	ON ''QB - '' || PAY.COMPANY = PCM.SYSTEM_CODE
	AND REPLACE(PAY.PAYCODES, ''_'', '' '')  = PCM.PAY_CODE
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ADP.QB_SSN_MAPPING QB_MAPPING
	ON QB_MAPPING.COMPANY = PAY.COMPANY
	AND QB_MAPPING."NAME" = UPPER(TRIM(REPLACE(PAY."NAME", '','')))
LEFT JOIN DW_${var.SF_ENVIRONMENT}.STAGE.QUICKBOOKS_DIM_BRANCH QB_BRANCHES 
	ON QB_BRANCHES.BRANCH_NAME = TRIM(UPPER(QB_MAPPING.CLASS))
	AND QB_BRANCHES.SYSTEM_CODE = ''QB - '' || QB_MAPPING.COMPANY;

RETURN ''SUCESS'';
END;

 EOT
}

