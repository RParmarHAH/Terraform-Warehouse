resource "snowflake_procedure" "DW_HAH_GET_STAGE_EDISON_DIM_CLIENT" {
	name ="GET_STAGE_EDISON_DIM_CLIENT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

	   
						  
BEGIN
--*****************************************************************************************************************************
-- NAME:  EDISON_DIM_CLIENT
--
-- DEVELOPMENT LOG:
-- DATE        NAME                		CHANGES
-- --------    -------------------   	-----------------------------------------------------------------------------------------------
-- 03/15/23 	Shikhar Saxena 			Changed the Primary Branch key logic for Corporate branch
-- 28/04/23     JIGAR PRAJAPATI         replace patient id with master id in client number
-- 05/12/23     DEEPEN GAJJAR           ADD LOGIC FOR ETHNICITY, REPLACED IT WITH NULL	
-- 07/27/2023   DEEPEN GAJJAR           ADDED REFERRER_KEY FIELD
-- 08/31/2023   SANDESH GOSAVI         Add CONFIRMED_FLAG logic in SERVICE_DATE CTE to avoid clients future last_service_date
-- 11/08/2023	Shikhar Saxena 			Updated CLIENT_ETHNICITY logic and added HISPANIC_OR_LATINO column	
-- 11/20/2023  Sandesh Gosavi          ADDED A COULUMN AND CTE FOR CLIENT STATUS
-- 11/21/2023   Sandesh Gosavi         ADDED A LOGIC AND COLUMN FOR DISCHARGE_REASON	
-- 01/22/24    Trushali Ramoliya       added a logic for gender as per IDDOX - 308 gender sensitivity issue.																		  
--*****************************************************************************************************************************
    INSERT OVERWRITE  INTO STAGE.EDISON_DIM_CLIENT
WITH EMPLOYEE AS 
(
    SELECT * FROM
    (
        SELECT CAREGIVERID, MASTER_ID, AGENCYID --,BRANCHID,OFFICEID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.EMPLOYEE_MASTER_LIST
    )
    UNION
    SELECT * FROM
    (
        SELECT DISTINCT CAREGIVERID, MASTER_ID, AGENCYID --,BRANCHID,OFFICEID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.EMPLOYEE_MATCH_LIST
        WHERE CAREGIVERID NOT IN (SELECT CAREGIVERID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.EMPLOYEE_MASTER_LIST)
    )
),
CLIENT AS
(
    SELECT * FROM
	(
        SELECT MD5((AGENCYID||''-''||MASTER_ID||''-''||''EDISON'' )) as CLIENT_KEY,
		PATIENTID, MASTER_ID, AGENCYID, LASTNAME, FIRSTNAME, OFFICEID --,ADMISSIONID --,OFFICEID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CLIENT_MASTER_LIST
    )
    UNION
    SELECT * FROM
    (
        SELECT DISTINCT MD5((AGENCYID||''-''||MASTER_ID||''-''||''EDISON'' )) as CLIENT_KEY,
		PATIENTID, MASTER_ID, AGENCYID, LASTNAME, FIRSTNAME, OFFICEID --,ADMISSIONID --,OFFICEID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CLIENT_MATCH_LIST
        WHERE PATIENTID NOT IN (SELECT PATIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CLIENT_MASTER_LIST)
    )
), 
VISIT_DATA AS -- Added to get unique timesheet required flag, and IVR Timings per vist
(
	SELECT * FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.VISITS V
	QUALIFY ROW_NUMBER() OVER(PARTITION BY V.VISITID ORDER BY V.LASTMODIFIEDDATE DESC) = 1
), EDISON_TBLVISIT_INFO AS -- Getting multiple record or one visit - Consider latest created, modified
(
	SELECT * FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLVISITS_REPL VR
	QUALIFY ROW_NUMBER() OVER(PARTITION BY VR.VISITID ORDER BY VR.CREATEDDATE DESC, VR.LASTMODIFIEDDATE DESC) = 1
),
RESCHEDULED AS 
( 
	WITH DELETEDVISIT AS 
	( 
		SELECT PATIENTID,VISITDATE FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLVISITS_REPL
		WHERE DELETED=TRUE 
		GROUP BY PATIENTID ,VISITDATE 
	)
	SELECT *
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLVISITS_REPL VISIT 
	INNER JOIN DELETEDVISIT DT 
	ON VISIT.PATIENTID =DT.PATIENTID AND VISIT.VISITDATE=DT.VISITDATE
	WHERE DELETED =FALSE 
),
  STATUS_NAME AS 
(
	SELECT DISTINCT  STATUSID, PATIENTSTATUSNAME AS CLIENT_STATUS
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.PATIENTSTATUSCHANGEACTIVITY 
	),
 DISCHARGE_REASON AS (SELECT 
DISTINCT PATIENTID,
FIRST_VALUE(TRIM(DISCHARGEREASONTEXT)) OVER (PARTITION BY PATIENTID ORDER BY STARTDATE DESC,DISCHARGEDATE desc) AS DISCHARGEREASONTEXT
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.PATIENTCONTRACTCHANGES)
,
DERIVED_STATUS AS 
( 
	SELECT DISTINCT VISITS.VISITID, VISITS.AGENCYID,
	CASE  
	 WHEN  RE.VISITID IS NOT NULL  AND VR.ISMISSEDVISIT = 0  AND  VR.BILLED = 1 AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL --AND NVL(INVOICE.VISITPAYMENTSTATUS,0) in(0,1,2) 
    THEN  ''ReScheduled In Review-Billed''
	WHEN  RE.VISITID IS NOT NULL AND VR.VISITDATE::DATE < GETDATE() AND VR.ISMISSEDVISIT = 0  AND  VR.BILLED = 1 --AND NVL(INVOICE.VISITPAYMENTSTATUS,0) in(0,1,2) 
    THEN  ''ReScheduled Completed-Billed''
    WHEN  RE.VISITID IS NOT NULL AND VR.VISITDATE::DATE < GETDATE() AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN  ''ReScheduled Completed-Notbillable''
    WHEN  RE.VISITID IS NOT NULL AND (VR.BILLED =0) AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL 
    THEN  ''ReScheduled In Review Unbilled''
    WHEN  RE.VISITID IS NOT NULL AND VR.VISITDATE::DATE < GETDATE() AND VR.ISMISSEDVISIT = 0  AND  VR.BILLED = 0
    THEN  ''ReScheduled Completed-Unbilled''
	WHEN VR.VISITDATE::DATE <= GETDATE() AND VR.ISMISSEDVISIT = 1  AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Cancelled Not billable'' 
	WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =1 AND VR.DELETED = TRUE
    THEN ''Cancelled Billed'' 
    WHEN  RE.VISITID IS NOT NULL  AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN  ''ReScheduled In Review Notbillable''
    WHEN (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL )  AND VR.VISITDATE::DATE > GETDATE()AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Scheduled Future Notbillable''--yes
    WHEN (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL )  AND IV.VISITID IS NOT NULL  AND INVOICE.VISITID IS NULL AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )
    THEN ''Scheduled In Review Notbillable''
    WHEN   RE.VISITID IS NULL   AND VR.ISMISSEDVISIT = 0 AND VR.BILLED =1 AND IV.VISITID IS NOT NULL  AND INVOICE.VISITID IS NULL
    THEN ''Scheduled In Review Billed''
    WHEN (VR.VISITDATE::DATE < GETDATE() AND  RE.VISITID IS NULL )  AND VR.ISMISSEDVISIT = 0 AND VR.BILLED =1
    THEN ''Scheduled Completed Billed''
    WHEN  (VR.VISITDATE::DATE < GETDATE() AND RE.VISITID IS NULL ) AND (UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VISITS.NONBILLABLE=TRUE )--AND INVOICE.VISITPAYMENTSTATUS = ''0'') OR (INVOICE.VISITPAYMENTSTATUS IN (''1'',''2''))) 
    THEN ''Scheduled Completed Not billable''
    WHEN (VR.VISITDATE::DATE < GETDATE() AND RE.VISITID IS NULL ) AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL AND ((VR.DELETED =FALSE AND VR.BILLED = 1) )--OR ( INVOICE.VISITPAYMENTSTATUS = ''0'') OR (INVOICE.VISITPAYMENTSTATUS = ''1''))--DONE
    THEN ''Completed In Review '' --yes
    WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL
    THEN ''Cancelled In Review Unbilled''
	WHEN  RE.VISITID IS NULL  AND (VR.BILLED =0 )AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL 
    THEN ''Scheduled In Review Unbilled''
   	WHEN (VR.VISITDATE::DATE < GETDATE() AND  RE.VISITID IS NULL ) AND (VR.BILLED = 0 )AND VR.ISMISSEDVISIT = 0 --AND IV.VISITID IS NULL
    THEN ''Scheduled Completed UnBilled''
    WHEN  (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL)  AND  (VR.BILLED =0 )AND NVL(VR.ISMISSEDVISIT,0) =''0''
    THEN ''Scheduled Future Unbilled''
    WHEN (VR.VISITDATE::DATE > GETDATE() AND  RE.VISITID IS NOT NULL ) AND  (VR.BILLED =0 )AND NVL(VR.ISMISSEDVISIT,0) =''0''
    THEN ''Rescheduled Future Unbilled''
    WHEN (VR.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL ) AND (VR.BILLED =0 )AND VR.DELETED=FALSE
    THEN ''Scheduled Unbilled''--yes
    WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL
    THEN ''Cancelled In Review''--yes
--     WHEN (VR.VISITDATE::DATE > GETDATE() AND  RE.VISITID IS NULL ) AND VR.ISMISSEDVISIT=1 AND (VR.BILLED =0 )AND VR.DELETED=TRUE
--    THEN ''Scheduled Cancelled Unbilled''--yes
    WHEN VR.VISITDATE::DATE > GETDATE() AND VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE
    THEN ''Future Cancelled Unbilled''
	WHEN VR.ISMISSEDVISIT = 1 AND  VR.BILLED =0 AND VR.DELETED = TRUE
    THEN ''Cancelled Unbilled''
    WHEN (VR.ISMISSEDVISIT = 1 AND VR.VISITDATE::DATE <= GETDATE())
    THEN ''Cancelled''
    END AS DERIVED_DISC_STATUS
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.VISITINFO_REPL VISITS
JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLVISITS_REPL VR 
	ON VISITS.VISITID = VR.VISITID AND VISITS.AGENCYID = VR.AGENCYID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.INREVIEWVISITS IV
	ON IV.VISITID=VISITS.VISITID
LEFT JOIN RESCHEDULED RE 
	ON VISITS.VISITID=RE.VISITID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.SERVICECODES SC
    ON VISITS.PRIMARYSERVICECODEID=SC.SERVICECODEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLINVOICEDETAILS_REPL INVOICE 
	ON VISITS.VISITID = INVOICE.VISITID AND VISITS.PRIMARYSERVICECODEID = INVOICE.INVSERVICECODEID
WHERE VISITS.AGENCYID = 155
),
SERVICE_DATE AS (SELECT DISTINCT 
          DC.CLIENT_NUMBER AS PATIENTID
    	  ,min(DATE_TRUNC(DAY,VR.VISITDATE)) as SERVICE_START_DATE
          ,max(DATE_TRUNC(DAY,VR.VISITDATE)) AS SERVICE_END_DATE
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.VISITINFO_REPL VISITS
JOIN EDISON_TBLVISIT_INFO VR 
	ON VISITS.VISITID = VR.VISITID
        AND VISITS.AGENCYID = VR.AGENCYID
INNER JOIN VISIT_DATA VS
     ON VS.VISITID = VR.VISITID 
JOIN CLIENT C 
	ON VR.PATIENTID = C.PATIENTID
        AND VISITS.AGENCYID = C.AGENCYID
JOIN HAH.DIM_CLIENT DC
	ON DC.CLIENT_KEY = C.CLIENT_KEY
		AND DC.SYSTEM_CODE = ''EDISON''
JOIN EMPLOYEE E 
	ON VR.CAREGIVERID = E.CAREGIVERID
        AND VISITS.AGENCYID = E.AGENCYID
LEFT JOIN DERIVED_STATUS DS ON DS.VISITID=VISITS.VISITID AND DS.AGENCYID= VISITS.AGENCYID 
WHERE ds.DERIVED_DISC_STATUS IN (''ReScheduled Completed-Billed'',''Completed Billed'',''ReScheduled Completed'',''ReScheduled Billed'',''Scheduled Completed Billed'')
AND VISITS.AGENCYID = 155  
GROUP BY DC.CLIENT_NUMBER)
  
SELECT DISTINCT 
		MD5((M.AGENCYID||''-''||MASTER_ID||''-''||''EDISON'' )) as CLIENT_KEY
		,M.PATIENTID AS CLIENT_NUMBER
		,''EDISON'' AS SYSTEM_CODE
		,17 AS SOURCE_SYSTEM_ID
		,HEX_ENCODE((SSN))  AS CLIENT_PID 	 
        , NULLIF(TRIM(MEDICARENUMBER), '''') AS CLIENT_MEDICARE_ID
		, NULLIF(TRIM(MEDICAIDNUMBER), '''') AS MEDICAID_ID
		,DATEOFBIRTH  AS CLIENT_DOB 
		,NULL AS CLIENT_DATE_OF_DEATH 
		,UPPER(TRIM(GENDER))  AS CLIENT_GENDER
		,UPPER (CASE 
	    WHEN M.RACE IS NOT NULL THEN COALESCE(NULLIF(TRIM(M.RACE),''''), NULLIF(TRIM(M.ETHNICITY),''''), ''UNKNOWN'' )
        WHEN M.RACE ILIKE ''%HISPANIC%'' OR  M.ETHNICITY ILIKE ''%HISPANIC%'' THEN NULL																	
			ELSE NULL  
			END)  AS Client_Ethnicity
		,CASE WHEN M.ETHNICITY ILIKE ANY  (''%not%HISPANIC%OR%LATINO%'')THEN FALSE 
		WHEN (UPPER(TRIM(M.RACE)) = ''HISPANIC OR LATINO'' OR M.RACE IS NULL) AND M.ETHNICITY ILIKE ANY  (''%HISPANIC%OR%LATINO%'') THEN TRUE 
		ELSE FALSE END AS HISPANIC_OR_LATINO
        , NULL AS CLIENT_GENDER_IDENTITY -- NA
		, NULL AS CLIENT_SEXUAL_ORIENTATION -- NA
		, RACE AS CLIENT_RACE
        ,NULL AS CLIENT_MARITAL_STATUS   --missing 
		,NULL  AS CLIENT_SALUTATION
		,FIRSTNAME  AS CLIENT_FIRST_NAME
		,MIDDLENAME AS CLIENT_MIDDLE_NAME
		,LASTNAME  AS CLIENT_LAST_NAME
	--	,TO_CHAR(LASTNAME) || '', '' || TO_CHAR(FIRSTNAME) || '' '' || TO_CHAR(MIDDLENAME)  AS CLIENT_NAME
,CONCAT(UPPER(TRIM(LASTNAME)), '', '' , UPPER(TRIM(FIRSTNAME)) , '' '',nvl(UPPER(TRIM(MIDDLENAME)),'''')) AS CLIENT_NAME
  ,M.ADDRESS1  AS CLIENT_ADDRESS1
		,M.ADDRESS2  AS CLIENT_ADDRESS2 
		,UPPER(TRIM(M.CITY)) AS CLIENT_CITY
		,UPPER(TRIM(M.STATE))  AS CLIENT_STATE_CODE
		,ZIP5  AS CLIENT_ZIP
		,NULL AS CLIENT_CLN_ADDRESS1
		,NULL AS CLIENT_CLN_ADDRESS2
		,NULL AS CLIENT_CLN_CITY
		,NULL AS CLIENT_CLN_STATE_CODE
		,NULL AS CLIENT_CLN_ZIP
		,NULL AS CLIENT_STD_ADDRESS1
		,NULL AS CLIENT_STD_ADDRESS2
		,NULL AS CLIENT_STD_CITY
		,NULL AS CLIENT_STD_STATE_CODE
		,NULL AS CLIENT_STD_ZIP
       ,TRIM( REGEXP_REPLACE( M.HOMEPHONE,''\\\\\\\\.|\\\\\\\\,|\\\\\\\\+|\\\\\\\\-|\\\\\\\\?|\\\\\\\\]|\\\\\\\\/|\\\\\\\\(|\\\\\\\\)|\\\\\\\\\\\\\\\\|\\\\\\\\s|[a-z]|[A-Z]|'',''''))  AS CLIENT_HOME_PHONE
		,TRIM( REGEXP_REPLACE( M.PHONE2,''\\\\\\\\.|\\\\\\\\,|\\\\\\\\+|\\\\\\\\-|\\\\\\\\?|\\\\\\\\]|\\\\\\\\/|\\\\\\\\(|\\\\\\\\)|\\\\\\\\\\\\\\\\|\\\\\\\\s|[a-z]|[A-Z]|'','''')) AS CLIENT_CELL_PHONE  
		,TRIM( REGEXP_REPLACE( M.PHONE3,''\\\\\\\\.|\\\\\\\\,|\\\\\\\\+|\\\\\\\\-|\\\\\\\\?|\\\\\\\\]|\\\\\\\\/|\\\\\\\\(|\\\\\\\\)|\\\\\\\\\\\\\\\\|\\\\\\\\s|[a-z]|[A-Z]|'',''''))  AS CLIENT_WORK_PHONE 
     	,NULL AS CLIENT_FAX_NUMBER 
		,NULL AS CLIENT_PERSONAL_EMAIL            --missing 
		,REFERRALRECEIVEDDATE  AS REFERRAL_DATE  --missing   
        ,SERVICE_END_DATE::DATE -SERVICE_START_DATE::DATE   AS DAYS_TO_SERVICE
		,NULL AS CONTRACT_BEGIN_DATE   
		,NULL AS CONTRACT_END_DATE   
		,SERVICE_START_DATE as FIRST_SERVICE_DATE   
		,SERVICE_END_DATE as LAST_SERVICE_DATE  -- PROJECTEDDCDATE
		,NULL  AS BEGIN_DATE
		--,BEGIN_DATE  AS BEGIN_DATE        --PATIENTCREATEDDATE  PATIENTSTATUSCHANGEACTIVITY
	    ,CASE WHEN M.STATUSID = 5 THEN SERVICE_END_DATE::DATE ELSE NULL END  AS END_DATES        -- Discharged status STATUSCHANGEDATE  PATIENTSTATUSCHANGEACTIVITY STATUSID
        ,CASE WHEN M.STATUSID = 5 THEN FALSE ELSE TRUE END  AS ACTIVE_CLIENT_FLAG 
		,UPPER(SN.CLIENT_STATUS) AS CLIENT_STATUS								   
		,CASE  WHEN len(DR.DISCHARGEREASONTEXT) > 4995 
		       THEN LEFT(TRIM(DR.DISCHARGEREASONTEXT), 4995) 
		       ELSE TRIM(DR.DISCHARGEREASONTEXT) END AS DISCHARGE_REASON										 
		,NULL AS ON_HOLD_FLAGART_DATE
		,NULL AS ON_HOLD_EN        --PATIENTSTATUSNAME  PATIENTSTATUSCHANGEACTIVITY
		,NULL AS ON_HOLD_STD_DATE
        ,null as LINKED_ID
		,NULL AS ACQUIRED_FROM_COMPANY_KEY
		,NULL AS ACQUIRED_FROM_COMPANY_ID
		,NULL AS ACQUIRED_FROM_COMPANY_FULL_NAME
		,NULL AS ACQUISITION_DATE
		,NULL AS ACQUISITION_FLAG
		,NULL AS ADMISSION_DATE
		,NULL AS ADMISSION_FLAG
		,NULL AS CLIENT_CONVERTED_FLAG 
		,NULL AS PRIMARY_SUPERVISOR_KEY 
		,NULL AS PRIMARY_SUPERVISOR_CODE
		,NULL AS PRIMARY_SUPERVISOR_NAME  --COORDINATORS  NURSEID
		,NULL AS SECONDARY_SUPERVISOR_KEY
		,NULL AS SECONDARY_SUPERVISOR_CODE
		,NULL AS SECONDARY_SUPERVISOR_NAME
		,MD5(''EDISON'' || ''-'' || ''EDISON CORPORATE OFFICE'' || ''-'' || ''EDISON'') AS PRIMARY_BRANCH_KEY 
		,''EDISON CORPORATE OFFICE'' AS PRIMARY_BRANCH_NAME 
		,''NY'' AS PRIMARY_BRANCH_STATE
		,NULL AS GUARANTOR_NAME
		,po.OFFICENAME AS NOTES
        ,NULL AS AGENCY
		,MD5(RS.AGENCYID||''-''||RS."REFERRALSOURCEID"||''-''||''EDISON'') REFERRER_KEY
		,TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE
		,TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
		
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
         
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
		CURRENT_USER as ETL_INSERTED_BY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
		CURRENT_USER as ETL_LAST_UPDATED_BY,
		0 as ETL_DELETED_FLAG,
		0 as ETL_INFERRED_MEMBER_FLAG
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.CLIENT_MASTER_LIST M
LEFT JOIN SERVICE_DATE D ON D.PATIENTID = M.PATIENTID
--LEFT JOIN BEGIN_DATE S ON S.PATIENTID = M.PATIENTID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.OFFICE_OFFICES_REPL  O ON M.OFFICEID = O.OFFICEID
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_ZIP_CODE_DETAILED Z1 ON Z1.ZIP = LEFT(M.ZIP5,5)
LEFT JOIN DW_${var.SF_ENVIRONMENT}.STAGE.EDISON_PHYSICAL_OFFICES po on Z1.ZIP IS NOT NULL
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_ZIP_CODE_DETAILED Z2 ON Z2.ZIP = po.ZIP
LEFT JOIN STATUS_NAME SN ON SN.STATUSID = M.STATUSID													
LEFT JOIN DISCHARGE_REASON DR ON TRIM(M.PATIENTID) = TRIM(DR.PATIENTID)																	   
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.REFERRALSOURCE RS ON RS.REFERRALSOURCEID = M.REFERRALSOURCEID
qualify dense_rank() over (partition by M.PATIENTID order by st_distance(st_makepoint( Z1.LNG, Z1.LAT), st_makepoint(Z2.LNG,   Z2.LAT))) = 1;

 RETURN ''SUCCESS'';

						 
    END;

 EOT
}

