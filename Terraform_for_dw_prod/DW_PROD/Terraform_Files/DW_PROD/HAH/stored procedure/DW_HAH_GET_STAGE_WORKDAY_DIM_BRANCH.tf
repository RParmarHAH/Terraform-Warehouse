resource "snowflake_procedure" "DW_HAH_GET_STAGE_WORKDAY_DIM_BRANCH" {
	name ="GET_STAGE_WORKDAY_DIM_BRANCH"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE 
	RETURN_RESULT VARCHAR(1000);
BEGIN
-------------------------------------------------------------------------------------------------------------------------------
/*
Object Type : 	Procedure
Object Name	: 	GET_STAGE_WORKDAY_DIM_BRANCH
Author		:	Jainam Shah
Description :
	- This procedure populates the branches available in Workday
	- No specific branch table present, so created it based on the branches assigned to employees
*/

--*****************************************************************************************************************************
-- CHANGE LOG :
-- Version	Date(MM/DD/YYYY)	Author				Change Description
-- --------	----------------   	------------------	---------------------------------------------------------------------------
-- 1.0		09/13/2023    		Jainam Shah			Initial Development
-- 1.1		09/18/2023			Abhishek Sunil		Optimized code
-- 1.2      11/29/2023          Jainam Shah         Fixed Parent_Branch_Key Logic 
-------------------------------------------------------------------------------------------------------------------------------

INSERT OVERWRITE INTO STAGE.WORKDAY_DIM_BRANCH
WITH BRANCHES AS (
	SELECT
		BUSINESS_SITE,
		BUSINESS_SITE_NAME,
		BUSINESS_SITE_ADDRESS_LINE_DATA,
		BUSINESS_SITE_ADDRESS_LINE_DATA_2,
		BUSINESS_SITE_MUNICIPALITY,
		BUSINESS_SITE_REGION,
		BUSINESS_SITE_POSTAL_CODE,
		ETL_LAST_UPDATED_DATE AS ETL_LAST_UPDATED_DATE,
		ROW_NUMBER() OVER (PARTITION BY BUSINESS_SITE ORDER BY ETL_LAST_UPDATED_DATE DESC) AS DUP_ORDER--ETL_LAST_UPDATED_DATE
    FROM 
	DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_POSITION_DATA Br
	GROUP BY BUSINESS_SITE,
		BUSINESS_SITE_NAME,
		BUSINESS_SITE_ADDRESS_LINE_DATA,
		BUSINESS_SITE_ADDRESS_LINE_DATA_2,
		BUSINESS_SITE_MUNICIPALITY,
		BUSINESS_SITE_REGION,
		BUSINESS_SITE_POSTAL_CODE,
		ETL_LAST_UPDATED_DATE
	 QUALIFY DUP_ORDER = 1 
)
SELECT 
	DISTINCT 
	MD5(''WORKDAY'' || '' - '' || 
		CASE 
			WHEN re.BUSINESS_SITE_NAME IS NOT NULL THEN UPPER(TRIM(re.BUSINESS_SITE))
			ELSE UPPER(TRIM(Br.BUSINESS_SITE)) 
		END 
	|| '' - '' || ''WORKDAY'') AS BRANCH_KEY
    , CASE WHEN re.BUSINESS_SITE_NAME IS NOT NULL THEN UPPER(TRIM(re.BUSINESS_SITE_NAME))
           ELSE UPPER(TRIM(Br.BUSINESS_SITE_NAME)) END AS BRANCH_NAME
    , ''WORKDAY'' AS System_Code
    , 36 AS SOURCE_SYSTEM_ID
    , src.SOURCE_SYSTEM_TYPE AS SOURCE_SYSTEM_TYPE
    , CASE WHEN re.BUSINESS_SITE_NAME IS NOT NULL THEN re.BUSINESS_SITE::VARCHAR
           ELSE Br.BUSINESS_SITE::VARCHAR  
      END::VARCHAR AS OFFICE_NUMBER
    , OFFICE_NUMBER AS OFFICE_CODE
    , UPPER(TRIM(Br.BUSINESS_SITE_NAME)) AS OFFICE_NAME
    , NULL AS OFFICE_ALT_NAME
    , NULL AS DEPARTMENT_NAME 
    , NULL AS BRANCH_SERVICE_LINE
    , TRUE AS PARENT_FLAG
    , MD5(''WORKDAY'' || '' - '' || 
        CASE 
            WHEN re.BUSINESS_SITE_NAME IS NOT NULL THEN UPPER(TRIM(re.BUSINESS_SITE))
            ELSE UPPER(TRIM(Br.BUSINESS_SITE)) 
        END 
    || '' - '' || ''WORKDAY'')  AS PARENT_BRANCH_KEY
    , OFFICE_NUMBER AS PARENT_OFFICE_NUMBER
    , OFFICE_NUMBER AS PARENT_OFFICE_CODE
	, st.STATE_ISO_CODE || '' - '' || UPPER(TRIM(Br.BUSINESS_SITE_NAME)) || '' ('' ||
		CASE
			WHEN re.BUSINESS_SITE_NAME IS NOT NULL THEN TRIM(re.BUSINESS_SITE)
			ELSE TRIM(Br.BUSINESS_SITE)
		END
		|| '')'' AS Parent_Branch_Name
    , UPPER(TRIM(Br.BUSINESS_SITE_ADDRESS_LINE_DATA)) AS OFFICE_ADDRESS1
    , BR.BUSINESS_SITE_ADDRESS_LINE_DATA_2 AS OFFICE_ADDRESS2
    , UPPER(TRIM(Br.BUSINESS_SITE_MUNICIPALITY)) AS OFFICE_CITY
    , UPPER(TRIM(st.STATE_ISO_CODE)) AS OFFICE_STATE_CODE
    , Br.BUSINESS_SITE_POSTAL_CODE AS OFFICE_ZIP
    , NULL AS OFFICE_PHONE
    , NULL AS OFFICE_TOLL_FREE
    , NULL AS OFFICE_FAX
    , st.STATE_ISO_CODE || '' - '' || UPPER(TRIM(Br.BUSINESS_SITE_NAME)) || '' ('' ||
		CASE
			WHEN re.BUSINESS_SITE_NAME IS NOT NULL THEN TRIM(re.BUSINESS_SITE)
			ELSE TRIM(Br.BUSINESS_SITE)
		END
		|| '')'' AS Detailed_Office_Name
    , NULL AS REGION_NUMBER
    , UPPER(TRIM(st.State_Name)) AS REGION_NAME
    , NULL AS REGION_MANAGER
    , NULL AS REGION_MANAGER_EMPLOYEE_KEY 
    , NULL AS SUBREGION_NAME
    , NULL AS PRIMARY_BRANCH_MANAGER_NAME 
    , NULL AS PRIMARY_BRANCH_EMAIL 
    , NULL AS PRIMARY_BRANCH_MANAGER_EMPLOYEE_KEY 
    , NULL AS SECONDARY_BRANCH_MANAGER_NAME 
    , NULL AS SECONDARY_BRANCH_EMAIL  
    , NULL AS SECONDARY_BRANCH_MANAGER_EMPLOYEE_KEY 
    , NULL AS RISKCONNECT_NODE_KEY 
    , NULL AS RISKCONNECT_NAME 
    , NULL AS HR_OFFICE_NUMBER 
    , NULL AS HR_OFFICE_NAME 
    , TRUE AS ACTIVE_FLAG
    , TO_DATE(''1900-01-01'',''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE
    , TO_DATE(''9999-12-31'',''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE
    , :STR_ETL_TASK_KEY AS ETL_TASK_KEY -- :STR_ETL_TASK_KEY
    , :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
    , CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
    , CURRENT_USER AS ETL_INSERTED_BY
    , CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
    , CURRENT_USER AS ETL_LAST_UPDATED_BY
    , FALSE AS ETL_DELETED_FLAG
    , FALSE AS ETL_INFERRED_MEMBER_FLAG
FROM 
	BRANCHES Br
LEFT JOIN 
	DW_${var.SF_ENVIRONMENT}.HAH.DIM_STATE st 
	ON UPPER(Br.BUSINESS_SITE_REGION) = UPPER(ST.STATE_NAME)
JOIN 
	DW_${var.SF_ENVIRONMENT}.HAH.DIM_SOURCE_SYSTEM src 
	ON 36 = src.SOURCE_SYSTEM_ID
LEFT JOIN 
	DISC_${var.SF_ENVIRONMENT}.WORKDAY.REMOTE_LOCATIONS re 
	ON Br.BUSINESS_SITE_NAME = re.BUSINESS_SITE_NAME
WHERE NULLIF(trim(BRANCH_NAME),'''') IS NOT NULL;

SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted.'') into :RETURN_RESULT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
	RETURN return_result;
END;

 EOT
}

