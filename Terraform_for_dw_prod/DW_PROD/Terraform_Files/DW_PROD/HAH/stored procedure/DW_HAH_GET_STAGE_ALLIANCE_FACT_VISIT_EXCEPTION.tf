resource "snowflake_procedure" "DW_HAH_GET_STAGE_ALLIANCE_FACT_VISIT_EXCEPTION" {
	name ="GET_STAGE_ALLIANCE_FACT_VISIT_EXCEPTION"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT


BEGIN
--*****************************************************************************************************************************
-- NAME:  ALLIANCE_FACT_VISIT_EXCEPTION
--
-- PURPOSE: Creates one row per visit per exception according to ALLIANCE
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 12/1/2022	Abhishek Sunil			Initial Development
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.ALLIANCE_FACT_VISIT_EXCEPTION
WITH EMPLOYEE AS 
(
	SELECT * FROM
	(
		SELECT SOCIALSECURITYNUM, MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.GENERATIONSALLIANCE.EMPLOYEE_MASTER_LIST
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT SOCIALSECURITYNUM, MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.GENERATIONSALLIANCE.EMPLOYEE_MATCH_LIST
		WHERE SOCIALSECURITYNUM NOT IN (SELECT SOCIALSECURITYNUM FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.GENERATIONSALLIANCE.EMPLOYEE_MASTER_LIST)
	) 
), CLIENT AS
(
	SELECT * FROM
	(
		SELECT CLIENTID, MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.GENERATIONSALLIANCE.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT CLIENTID, MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.GENERATIONSALLIANCE.CLIENT_MATCH_LIST
		WHERE CLIENTID NOT IN (SELECT CLIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.GENERATIONSALLIANCE.CLIENT_MASTER_LIST) 
	)
)
, EXCEPTION_DUP_HANDLING AS (
	SELECT
		DISTINCT
		SCHEDULEID,
		EXCEPTIONID,
		REASONID,
		RESOLUTIONID,
		ACKNOWLEDGED
	FROM 
		DISC_${var.SF_ENVIRONMENT}.GENERATIONSALLIANCE.TELEPHONYEXCEPTIONS
)
, CALLS AS (
	SELECT DISTINCT
		TE.SCHEDULEID,
		SCH."DATE"::DATE AS SERVICE_DATE,
		NVL(TRIM(EC.STATECODE),''ALL'') || ''-'' || TRIM(EC.EXCEPTIONCODE) AS EXCEPTIONCODE,
		TREA.REASONCODE,
		TREA.REASONDESC,
		TRESO.RESOLUTIONCODE,
		TRESO.RESOLUTIONDESC,
		TE.ACKNOWLEDGED
	FROM 
		EXCEPTION_DUP_HANDLING TE
	LEFT JOIN
		DISC_${var.SF_ENVIRONMENT}.GENERATIONSALLIANCE.EXCEPTIONCODES EC
		ON EC.EXCEPTIONID = TE.EXCEPTIONID
	LEFT JOIN
		DISC_${var.SF_ENVIRONMENT}.GENERATIONSALLIANCE.TELEPHONYREASONS TREA
		ON TE.REASONID = TREA.REASONID
	LEFT JOIN 
		DISC_${var.SF_ENVIRONMENT}.GENERATIONSALLIANCE.TELEPHONYRESOLUTIONS TRESO
		ON TE.RESOLUTIONID = TRESO.RESOLUTIONID
	INNER JOIN 
		DISC_${var.SF_ENVIRONMENT}.GENERATIONSALLIANCE.SCHEDULES SCH
		ON SCH.SCHEDULEID = TE.SCHEDULEID
	WHERE 
		SCH."DATE"::DATE <= ''2022-09-30'' -- ALLIANCE MI has been migrated TO MATRIXCARE AND PAYROLL IS now being run BY TRUSTPOINT HAHMI
)
, EXCEPTIONS AS (
SELECT
	DISTINCT
	MD5(''ALLIANCE'' || ''-'' || CALLS.SCHEDULEID || ''-'' || UPPER(CALLS.EXCEPTIONCODE) || ''-'' || NVL(UPPER(CALLS.REASONCODE),''UNKNOWN'')  || ''-'' || NVL(UPPER(CALLS.RESOLUTIONCODE),''UNKNOWN'') || ''-'' || ''GENERATIONS'') AS VISIT_EXCEPTION_KEY,
	MD5(''ALLIANCE'' || ''-'' || CALLS.SCHEDULEID || ''-'' || ''GENERATIONS'') AS VISIT_KEY,
	CALLS.SCHEDULEID,
	SERVICE_DATE AS SERVICE_DATE, 
	19 AS SOURCE_SYSTEM_ID,
	''ALLIANCE''  AS SYSTEM_CODE,
	UPPER(CALLS.EXCEPTIONCODE) AS EXCEPTION_CODE,
	ACKNOWLEDGED AS ACKNOWLEDGED_FLAG,
	ACKNOWLEDGED AS RESOLVED_FLAG,
	REASONCODE AS REASON_CODE,
	REASONDESC AS REASON_NAME,
	RESOLUTIONCODE AS RESOLUTION_CODE,
	RESOLUTIONDESC AS RESOLUTION_NAME
FROM
	CALLS
)
SELECT
	DATA.VISIT_EXCEPTION_KEY,
	DATA.VISIT_KEY,
	VE.EXCEPTION_KEY,
	DATA.SERVICE_DATE,
	DATA.SOURCE_SYSTEM_ID,
	DATA.SYSTEM_CODE,
	VE.EXCEPTION_CODE,
	DATA.ACKNOWLEDGED_FLAG,
	DATA.RESOLVED_FLAG,
	DATA.REASON_CODE,
	DATA.REASON_NAME,
	DATA.RESOLUTION_CODE,
	DATA.RESOLUTION_NAME,
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	FALSE AS ETL_DELETED_FLAG
FROM
	EXCEPTIONS DATA
LEFT JOIN 
	HAH.DIM_VISIT_EXCEPTION VE 
	ON VE.EXCEPTION_CODE = DATA.EXCEPTION_CODE 
	AND VE.SOURCE_SYSTEM_ID = DATA.SOURCE_SYSTEM_ID 
	AND VE.SYSTEM_CODE = DATA.SYSTEM_CODE
ORDER BY
	DATA.SERVICE_DATE ASC;
	
RETURN ''SUCCESS'';
END;


 EOT
}

