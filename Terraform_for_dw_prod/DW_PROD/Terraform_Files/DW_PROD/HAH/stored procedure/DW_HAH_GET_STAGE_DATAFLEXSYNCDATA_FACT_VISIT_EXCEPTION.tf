resource "snowflake_procedure" "DW_HAH_GET_STAGE_DATAFLEXSYNCDATA_FACT_VISIT_EXCEPTION" {
	name ="GET_STAGE_DATAFLEXSYNCDATA_FACT_VISIT_EXCEPTION"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT


BEGIN
--*****************************************************************************************************************************
-- NAME:  DATAFLEXSYNCDATA_FACT_VISIT_EXCEPTION
--
-- PURPOSE: Creates one row per visit per exception according to DATAFLEXSYNCDATA
--
-- PRODELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 12/1/2022	Abhishek Sunil			Initial Development
-- 30/6/2023	Naresha Bhat			Bitwise operator implimentation for EXCEPTION_CODE
-- 09/8/2023    Ramesh Mokariya         Fixed incremental logic
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.DATAFLEXSYNCDATA_FACT_VISIT_EXCEPTION
WITH DF_IMPORT_VISITS AS 																-- Using only 1 record from multiple records per scheduleid just for mapping between DF and SD
(
	SELECT ROW_NUMBER() OVER (PARTITION BY VISITKEY, TRACKINGID, WEEKENDDATE, STATE, SERVICEDATE ORDER BY IMPORTTASKID DESC, LINEID DESC) RNO,
		VISITKEY, 
		TRACKINGID, 
		WEEKENDDATE, 
		STATE, 
		SERVICEDATE AS SERVICEDATE, 
		SPLIT_PART(VISITKEY, ''_'',  3)::NUMBER AS SANDATA_SCHEDULEID, 
		SPLIT_PART(VISITKEY, ''_'',  2) SANDATA_AGENCYID,
		ETL_LAST_UPDATED_DATE			   
	FROM DISC_${var.SF_ENVIRONMENT}.SANDATAEXCHANGE.DFIMPORT_IMPORTVISITS 
	WHERE ISIMPORTED = TRUE AND NVL(TRACKINGID,0) <> 0
	QUALIFY RNO = 1
)
, VISITS_WITH_EXCEPTIONS AS (
	SELECT
		VISITS.AGENCYID,
		VISITS.SCHEDULEID,
		VISITS.SCHEDULEDATE::TIMESTAMP_NTZ AS SCHEDULEDATE,
		TRIM(exc.value)::STRING AS EXCEPTION_CODE,
		NULLIF(TRIM(VISITS.REASONCODE),'''') AS REASON_CODE, 													
		NULLIF(TRIM(VISITS.RESOLUTIONCODE),'''') AS RESOLUTION_CODE, -- Bring Resolution description AFTER response FROM sandata
		ETL_LAST_UPDATED_DATE
	FROM
		DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES VISITS
	,LATERAL FLATTEN(input => SPLIT(VISITS.EXCEPTIONCODE, ''|'')) exc 
	WHERE 
		NULLIF(EXCEPTION_CODE,'''') IS NOT NULL AND TRIM(EXCEPTIONCODE) <> ''0'' AND TRIM(VISITS.AGENCYID) IN (''38004'',''8380'',''8463'')
	GROUP BY
		VISITS.AGENCYID, VISITS.SCHEDULEID, VISITS.SCHEDULEDATE, EXCEPTION_CODE, VISITS.REASONCODE, VISITS.RESOLUTIONCODE,VISITS.ETL_LAST_UPDATED_DATE
	ORDER BY
		VISITS.SCHEDULEDATE
),
ALL_VISIT_EXCEPTIONS AS (
	SELECT 
		AGENCYID,
		SCHEDULEID,
		SCHEDULEDATE,
		EXC.value::STRING AS EXCEPTION_CODE,
		REASON_CODE,
		RESOLUTION_CODE,
		ETL_LAST_UPDATED_DATE			   
	FROM 
	(
	SELECT
		AGENCYID,
		SCHEDULEID,
		SCHEDULEDATE,
		REASON_CODE,
		RESOLUTION_CODE,
		ETL_LAST_UPDATED_DATE,				
		CASE WHEN (BITAND(EXCEPTION_CODE, 1)) = 1 THEN (BITAND(EXCEPTION_CODE, 1))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 2)) = 2 THEN (BITAND(EXCEPTION_CODE, 2))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 4)) = 4 THEN (BITAND(EXCEPTION_CODE, 4))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 8)) = 8 THEN (BITAND(EXCEPTION_CODE, 8))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 16)) = 16 THEN (BITAND(EXCEPTION_CODE, 16))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 32)) = 32 THEN (BITAND(EXCEPTION_CODE, 32))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 64)) = 64 THEN (BITAND(EXCEPTION_CODE, 64))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 128)) = 128 THEN (BITAND(EXCEPTION_CODE, 128))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 256)) = 256 THEN (BITAND(EXCEPTION_CODE, 256))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 512)) = 512 THEN (BITAND(EXCEPTION_CODE, 512))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 8192)) = 8192 THEN (BITAND(EXCEPTION_CODE, 8192))::VARCHAR ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 16384)) = 16384 THEN (BITAND(EXCEPTION_CODE, 16384))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 32768)) = 32768 THEN (BITAND(EXCEPTION_CODE, 32768))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 65536)) = 65536 THEN (BITAND(EXCEPTION_CODE, 65536))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 131072)) = 131072 THEN (BITAND(EXCEPTION_CODE, 131072))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 524288)) = 524288 THEN (BITAND(EXCEPTION_CODE, 524288))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 1048576)) = 1048576 THEN (BITAND(EXCEPTION_CODE, 1048576))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 2097152)) = 2097152 THEN (BITAND(EXCEPTION_CODE, 2097152))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 4194304)) = 4194304 THEN (BITAND(EXCEPTION_CODE, 4194304))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 8388608)) = 8388608 THEN (BITAND(EXCEPTION_CODE, 8388608))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 16777216)) = 16777216 THEN (BITAND(EXCEPTION_CODE, 16777216))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 33554432)) = 33554432 THEN (BITAND(EXCEPTION_CODE, 33554432))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 67108864)) = 67108864 THEN (BITAND(EXCEPTION_CODE, 67108864))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 134217728)) = 134217728 THEN (BITAND(EXCEPTION_CODE, 134217728))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 268435456)) = 268435456 THEN (BITAND(EXCEPTION_CODE, 268435456))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 536870912)) = 536870912 THEN (BITAND(EXCEPTION_CODE, 536870912))::VARCHAR || ''|'' ELSE '''' END ||
		CASE WHEN (BITAND(EXCEPTION_CODE, 1073741824)) = 1073741824 THEN (BITAND(EXCEPTION_CODE, 1073741824))::VARCHAR || ''|'' ELSE '''' END AS CODES
	FROM
		VISITS_WITH_EXCEPTIONS
	) BREAKOUT
	,LATERAL FLATTEN(input => SPLIT(BREAKOUT.CODES, ''|'')) exc 
	WHERE NULLIF(EXCEPTION_CODE,'''') IS NOT NULL
) 
, EXCEPTIONS AS (
	SELECT 
	DISTINCT
		MD5(TRIM(F.DBNAME) || ''-'' || F.REFERENCENO || ''-'' || F.WEEKENDDATE::VARCHAR || ''-'' || F.SERVICEDATE::VARCHAR || ''-'' || ALL_EXC.EXCEPTION_CODE || ''-'' || ''DATAFLEXSYNCDATA'') AS VISIT_EXCEPTION_KEY,
		MD5(TRIM(F.DBNAME) || ''-'' || F.REFERENCENO || ''-'' || F.WEEKENDDATE::VARCHAR || ''-'' || F.SERVICEDATE::VARCHAR || ''-'' || ''DATAFLEXSYNCDATA'') AS VISIT_KEY,
--		F.DBNAME,
--		F.REFERENCENO,
--		F.WEEKENDDATE,
--		F.SERVICEDATE,
		F.SERVICEDATE AS SERVICE_DATE, 
		3 AS SOURCE_SYSTEM_ID,
		F.DBNAME AS SYSTEM_CODE,
		ALL_EXC.EXCEPTION_CODE AS EXCEPTION_CODE,
		CASE
			WHEN ALL_EXC.REASON_CODE IS NOT NULL OR ALL_EXC.RESOLUTION_CODE IS NOT NULL THEN TRUE
			WHEN ALL_EXC.REASON_CODE IS NULL AND ALL_EXC.RESOLUTION_CODE IS NULL THEN FALSE
		END AS ACKNOWLEDGED_FLAG,
		CASE 
			WHEN ALL_EXC.RESOLUTION_CODE IS NOT NULL THEN TRUE
			ELSE FALSE
		END AS RESOLVED_FLAG,
		ALL_EXC.REASON_CODE,
		ALL_EXC.REASON_NAME, -- Bring Resolution description FROM sandata EXTERNAL reason code
		ALL_EXC.RESOLUTION_CODE AS RESOLUTION_CODE,			  
		NULL AS RESOLUTION_NAME, -- Bring Resolution description AFTER response FROM sandata
		ALL_VISIT_EXCEPTIONS_ELU,
		DF_IMPORT_VISITS_ELU
	FROM (
		SELECT
			DFI.SANDATA_AGENCYID, 
			DFI.SANDATA_SCHEDULEID,
			DFI.SERVICEDATE,
			DFI.TRACKINGID,
			DFI.WEEKENDDATE,
			DFI.STATE,
			SCH.EXCEPTION_CODE,
			SCH.REASON_CODE,
			ERC.DESCRIPTION AS REASON_NAME,
			SCH.RESOLUTION_CODE,
			SCH.ETL_LAST_UPDATED_DATE AS ALL_VISIT_EXCEPTIONS_ELU,
			DFI.ETL_LAST_UPDATED_DATE AS DF_IMPORT_VISITS_ELU																   
		FROM 
			ALL_VISIT_EXCEPTIONS SCH
		INNER JOIN
			DF_IMPORT_VISITS DFI
			ON DFI.SANDATA_SCHEDULEID = SCH.SCHEDULEID
				AND DFI.SANDATA_AGENCYID = SCH.AGENCYID
				AND DFI.SERVICEDATE = SCH.SCHEDULEDATE
		LEFT JOIN 
			DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_EXTERNALREASONCODES ERC 
			ON ERC.AGENCYID = SCH.AGENCYID
				AND ERC.CODE = SCH.REASON_CODE
--		LEFT JOIN -- Need to know if the manual resolution table can work for all agencies (Currently provided for PA - 8485)
--			DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_MANUAL_EXTERNALRESOLUTIONCODES MERC 
--			ON MERC.AGENCYID = SCH.AGENCYID
--				AND MERC.CODE = SCH.RESOLUTION_CODE
		WHERE
			DFI.SANDATA_SCHEDULEID IS NOT NULL
	) ALL_EXC
	LEFT JOIN 
		DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.ALL_DFTIMESHEETS TS
		ON TS.TRACKINGID = ALL_EXC.TRACKINGID 
			AND TS.WEEKENDDATE = ALL_EXC.WEEKENDDATE 
			AND TS.DBNAME = ALL_EXC.STATE
	INNER JOIN
		DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.ALL_TIMESHEETSHOURS F
		ON F.DBNAME = TS.DBNAME
		    AND F.REFERENCENO = TS.REFERENCENO
		    AND F.WEEKENDDATE = TS.WEEKENDDATE
		    AND F.SERVICEDATE::TIMESTAMP_NTZ = ALL_EXC.SERVICEDATE
	WHERE 
		(F.ETL_LAST_UPDATED_DATE >= (:STR_CDC_START)::TIMESTAMP_NTZ OR 
		TS.ETL_LAST_UPDATED_DATE >= (:STR_CDC_START)::TIMESTAMP_NTZ OR
		ALL_VISIT_EXCEPTIONS_ELU >= (:STR_CDC_START)::TIMESTAMP_NTZ OR 
		DF_IMPORT_VISITS_ELU >= (:STR_CDC_START)::TIMESTAMP_NTZ)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY VISIT_EXCEPTION_KEY ORDER BY ALL_VISIT_EXCEPTIONS_ELU DESC) =1 													  
)
SELECT
	DATA.VISIT_EXCEPTION_KEY,
	DATA.VISIT_KEY,
	VE.EXCEPTION_KEY,
	DATA.SERVICE_DATE,
	DATA.SOURCE_SYSTEM_ID,
	DATA.SYSTEM_CODE,
	VE.EXCEPTION_CODE,
	DATA.ACKNOWLEDGED_FLAG,
	DATA.RESOLVED_FLAG,
	DATA.REASON_CODE,
	DATA.REASON_NAME,
	DATA.RESOLUTION_CODE,
	DATA.RESOLUTION_NAME,
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	FALSE AS ETL_DELETED_FLAG
FROM
	EXCEPTIONS DATA
LEFT JOIN 
	HAH.DIM_VISIT_EXCEPTION VE 
	ON VE.EXCEPTION_CODE = DATA.EXCEPTION_CODE 
	AND VE.SOURCE_SYSTEM_ID = DATA.SOURCE_SYSTEM_ID 
	AND VE.SYSTEM_CODE = DATA.SYSTEM_CODE
ORDER BY
	DATA.SERVICE_DATE ASC; 

RETURN ''SUCCESS'';
END;


 EOT
}

