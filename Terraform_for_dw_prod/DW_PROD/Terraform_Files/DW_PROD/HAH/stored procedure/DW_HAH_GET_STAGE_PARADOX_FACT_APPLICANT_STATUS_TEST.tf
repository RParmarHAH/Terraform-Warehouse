resource "snowflake_procedure" "DW_HAH_GET_STAGE_PARADOX_FACT_APPLICANT_STATUS_TEST" {
	name ="GET_STAGE_PARADOX_FACT_APPLICANT_STATUS_TEST"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

                BEGIN
    --*****************************************************************************************************************************
-- NAME:  PARADOX_FACT_APPLICANT_STATUS
--
-- PURPOSE: Creates one row per APPLICANT STATUS from PARADOX
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                               NOTES:
-- --------    -------------------                  ---------------------------------------------------------------------------
-- 17/02/2022  Saurav Purohit / Manmohan Soni       Initial development
-- 10/11/2022  Manmohan Soni                        Added IL branch mapping logic
-- 07/12/2022  Manmohan Soni                        Updated OH branch mapping logic
-- 09/02/2023  Manmohan Soni                        Updated MS and DL branch mapping logic
-- 21/04/2023  Manmohan Soni                        Updated Prime branch mapping logic
-- 23/05/2023  Manmohan Soni                        Updated IL branch mapping logic
-- 15/09/2023  Harshala Kadam                       Updated the branch mapping logic(dynamic)
-- 27/10/2023  Harshala Kadam                       Updated APPLICATION_COMPLETE_DATETIME status
-- 28/10/2023  Harshala Kadam                       Renamed column name APPLICATION_COMPLETE_DATETIME to
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.STAGE.PARADOX_FACT_APPLICANT_STATUS_TEST
WITH UNIQUE_APPLICANTS_STATUS_HISTORY_LATEST_LOCATION AS (
    SELECT 
        CJ.CANDIDATE_ID, CJ.REQUISITION_ID, CJ.LOCATION_NAME, CJ.STATUS_CHANGE_DATE, CJ.STATUS, 
        -- DENSE_RANK() OVER (PARTITION BY CJ.CANDIDATE_ID, CJ.REQUISITION_ID ORDER BY CJ.LOCATION_NAME DESC) RANK
        DENSE_RANK() OVER (PARTITION BY CJ.CANDIDATE_ID, CJ.REQUISITION_ID ORDER BY CJ.STATUS_CHANGE_DATE DESC) RANK
    FROM DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_JOURNEY_STATUS_HISTORY CJ
    WHERE REQUISITION_ID IS NOT NULL
	QUALIFY RANK = 1 
) 
, CANDIDATE_JOURNEY_STATUS_RANK AS (
    SELECT 
        CJ.CANDIDATE_ID, CJ.REQUISITION_ID, CJL.LOCATION_NAME, CJ.STATUS_CHANGE_DATE, CJ.STATUS, 
        ROW_NUMBER() OVER (PARTITION BY CJ.CANDIDATE_ID, CJ.REQUISITION_ID, CJL.LOCATION_NAME ORDER BY CJ.STATUS_CHANGE_DATE DESC) RANK
    FROM DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_JOURNEY_STATUS_HISTORY CJ
    INNER JOIN UNIQUE_APPLICANTS_STATUS_HISTORY_LATEST_LOCATION CJL
        ON CJ.CANDIDATE_ID = CJL.CANDIDATE_ID AND CJ.REQUISITION_ID = CJL.REQUISITION_ID 
)
, CANDIDATE_JOURNEY_HISTORY AS (
    SELECT 
        CANDIDATE_ID, REQUISITION_ID, LOCATION_NAME,
        MAX(CASE WHEN CJ.STATUS = ''Capture: Conversation In-Progress'' THEN CJ.STATUS_CHANGE_DATE END) CONVERSATION_INPROGRESS_DATETIME,
        MAX(CASE WHEN CJ.STATUS IN (''Application: Application Complete'',''Application/Background Check Consent Form: Background Check Consent Form Complete'',''Background Check Consent Form: Background Check Consent Form Complete'') THEN CJ.STATUS_CHANGE_DATE END) Application_and_Background_Check_Consent_Form_Complete_DATETIME,
        MAX(CASE WHEN CJ.STATUS IN (''Hire: Hired'', ''Orientation/ Hired: Hired'', ''Orientation/Hired: Hired'',''Hired: Hired'') THEN CJ.STATUS_CHANGE_DATE END) HIRED_DATETIME,
        COUNT(CASE WHEN CJ.STATUS = ''Scheduling: Interview Scheduled'' THEN 1 END) NUMBER_OF_TIMES_INTERVIEW_SCHEDULED,    
        MIN(CASE WHEN CJ.STATUS = ''Scheduling: Interview Scheduled'' THEN CJ.STATUS_CHANGE_DATE END) INTERVIEW_SCHEDULED_DATETIME,
        MAX(CASE WHEN CJ.STATUS = ''Scheduling: Interview Complete'' THEN CJ.STATUS_CHANGE_DATE END) INTERVIEW_COMPLETED_DATETIME,        
        MAX(CASE WHEN CJ.STATUS IN (''Scheduling: No Availability'',''Interview 2: No Availability'',''Interview 2: No Availability for Interview 2'') THEN CJ.STATUS_CHANGE_DATE END) INTERVIEW_NO_AVAILABILITY_DATETIME,

        CASE 
            WHEN 
                MIN(CASE WHEN CJ.STATUS = ''Scheduling: Interview Scheduled'' THEN CJ.STATUS_CHANGE_DATE END) <> MAX(CASE WHEN CJ.STATUS = ''Scheduling: Interview Scheduled'' THEN CJ.STATUS_CHANGE_DATE END)
            THEN 
                MAX(CASE WHEN CJ.STATUS = ''Scheduling: Interview Scheduled'' THEN CJ.STATUS_CHANGE_DATE END)
        END INTERVIEW_RESCHEDULED_DATETIME,
        MAX(CASE WHEN CJ.STATUS IN(''Offer: Send Offer'',''Offer: Offer Sent'') THEN CJ.STATUS_CHANGE_DATE END) OFFERS_SENT_DATETIME,
        MAX(CASE WHEN CJ.STATUS = ''Offer: Offer Accepted'' THEN CJ.STATUS_CHANGE_DATE END) OFFERS_ACCEPTED_DATETIME,
//        MAX(CASE 
//                WHEN CJ.STATUS LIKE ANY (''Offer: Offer Declined'', ''Rejected:%'')
//            THEN CJ.STATUS_CHANGE_DATE END) REJECTED_OR_OFFER_DECLINED_DATETIME,
        MAX(CASE 
                WHEN CJ.STATUS = ''Offer: Offer Declined''
            THEN CJ.STATUS_CHANGE_DATE END) OFFER_DECLINED_DATETIME,
        MAX(CASE 
                WHEN CJ.STATUS LIKE ''Rejected:%''
            THEN CJ.STATUS_CHANGE_DATE END) REJECTED_DATETIME,
        MAX(CASE WHEN CJ.STATUS = ''Onboarding: Send Onboarding'' THEN CJ.STATUS_CHANGE_DATE END) ONBOARDING_SENT_DATETIME,
        MAX(CASE WHEN CJ.STATUS = ''Onboarding: Onboarding Complete'' THEN CJ.STATUS_CHANGE_DATE END) ONBOARDING_COMPLETED_DATETIME,
        MAX(CASE WHEN CJ.STATUS IN (''Interview No Show: Candidate Interview No Show'',''Interview No Show: Interview No Show'') THEN CJ.STATUS_CHANGE_DATE END) INTERVIEW_NO_SHOW_DATETIME,
        MAX(CJ.STATUS_CHANGE_DATE) MOST_RECENT_STAGE_DATETIME,
        MAX(CASE WHEN RANK = 1 THEN CJ.STATUS END) MOST_RECENT_STATUS, 
        MAX(CASE WHEN RANK = 2 THEN CJ.STATUS_CHANGE_DATE END) PRIOR_STATUS_DATETIME, 
        MAX(CASE WHEN RANK = 2 THEN CJ.STATUS END) PRIOR_STATUS
  FROM CANDIDATE_JOURNEY_STATUS_RANK CJ
  GROUP BY 1, 2, 3
)
, CANDIDATE_JOURNEY_HISTORY_WITH_REJECTION_REASON AS (
  SELECT 
        HIST.*, CJ.STATUS REJECTION_REASON,
        ROW_NUMBER() OVER (PARTITION BY HIST.CANDIDATE_ID, HIST.REQUISITION_ID, HIST.REJECTED_DATETIME ORDER BY CJ.STATUS) R
  FROM CANDIDATE_JOURNEY_HISTORY HIST
  LEFT JOIN DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_JOURNEY_STATUS_HISTORY CJ 
    ON HIST.CANDIDATE_ID = CJ.CANDIDATE_ID
      AND HIST.LOCATION_NAME = CJ.LOCATION_NAME
      AND HIST.REQUISITION_ID = CJ.REQUISITION_ID
      AND GREATEST(COALESCE(HIST.REJECTED_DATETIME, HIST.OFFER_DECLINED_DATETIME), COALESCE(HIST.OFFER_DECLINED_DATETIME, HIST.REJECTED_DATETIME)) = CJ.STATUS_CHANGE_DATE        
      AND CJ.STATUS LIKE ANY (''Offer: Offer Declined'', ''Rejected:%'')
    QUALIFY R = 1
) 
    -- SELECT * FROM CANDIDATE_JOURNEY_HISTORY_WITH_REJECTION_REASON WHERE candidate_id = ''72036901479187'';
, F AS (
SELECT
    DISTINCT
    MD5( TRIM(CJ.CANDIDATE_ID) || ''-'' || TRIM(CJ.REQ_ID) || ''-'' || ''PARADOX'') APPLICANT_STATUS_KEY,
    12 AS SOURCE_SYSTEM_ID,
    ''PARADOX'' AS SYSTEM_CODE,
    MD5( TRIM( CSS.PROFILE_ID) || ''-'' || ''PARADOX'') AS APPLICANT_KEY,
    JOB_KEY AS JOB_KEY,
    J.JOB_FAMILY AS JOB_FAMILY,
    CJ.CANDIDATE_ID AS CANDIDATE_ID,
    CSS.CAPTURE_START_DATE as DATE_APPLIED,
    CONVERSATION_INPROGRESS_DATETIME CONVERSATION_INPROGRESS_DATETIME,
    INTERVIEW_SCHEDULED_DATETIME INTERVIEW_SCHEDULED_DATETIME,
    INTERVIEW_RESCHEDULED_DATETIME INTERVIEW_RESCHEDULED_DATETIME,
    INTERVIEW_COMPLETED_DATETIME INTERVIEW_COMPLETED_DATETIME,
    INTERVIEW_NO_AVAILABILITY_DATETIME INTERVIEW_NO_AVAILABILITY_DATETIME,
    INTERVIEW_NO_SHOW_DATETIME INTERVIEW_NO_SHOW_DATETIME,
    NUMBER_OF_TIMES_INTERVIEW_SCHEDULED NUMBER_OF_TIMES_INTERVIEW_SCHEDULED,
    Application_and_Background_Check_Consent_Form_Complete_DATETIME Application_and_Background_Check_Consent_Form_Complete_DATETIME,
    OFFERS_SENT_DATETIME OFFERS_SENT_DATETIME,
    OFFERS_ACCEPTED_DATETIME OFFERS_ACCEPTED_DATETIME,
    ONBOARDING_SENT_DATETIME ONBOARDING_SENT_DATETIME,
    ONBOARDING_COMPLETED_DATETIME ONBOARDING_COMPLETED_DATETIME,
    HIRED_DATETIME HIRED_DATETIME,
    OFFER_DECLINED_DATETIME OFFER_DECLINED_DATETIME, 
    REJECTED_DATETIME REJECTED_DATETIME,
    REJECTION_REASON REJECTION_REASON,
    MOST_RECENT_STAGE_DATETIME MOST_RECENT_STAGE_DATETIME,    
    MOST_RECENT_STATUS APPLICANT_STATUS,
    -- CJ.STATUS APPLICANT_STATUS,
    PRIOR_STATUS PRIOR_STATUS,
    PRIOR_STATUS_DATETIME PRIOR_STATUS_DATETIME,
    CS.BRANCH_KEY BRANCH_KEY,
    CS.ORIGINAL_BRANCH_NAME BRANCH_NAME, 
    CSS.SOURCE SOURCE,
    
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
     
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
    CURRENT_USER AS ETL_INSERTED_BY,
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_UPDATED_DATE,
    CURRENT_USER AS ETL_LAST_UPDATED_BY,
    0 AS ETL_DELETED_FLAG,
    CS.OFFICE_STATE_CODE BRANCH_STATE_CODE
FROM DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_JOURNEY CJ
    INNER JOIN CANDIDATE_JOURNEY_HISTORY_WITH_REJECTION_REASON CJH ON CJ.CANDIDATE_ID = CJH.CANDIDATE_ID AND CJ.REQ_ID = CJH.REQUISITION_ID
    INNER JOIN HAH.DIM_JOB J ON J.SOURCE_SYSTEM_ID = 12 AND CJ.REQ_ID = J.JOB_ID AND CJH.LOCATION_NAME = J.LOCATION_NAME
    INNER JOIN DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_SPECIFIC CSS ON CJ.CANDIDATE_ID = CSS.CANDIDATE_ID
   -- LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.AMS_PARADOX_BRANCH_MAPPING CS 
    LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.AMS_PARADOX_BRANCH_MAPPING_test_1 CS
    ON CS.CANDIDATE_LOCATION__LEVEL_1 = upper(CSS.CANDIDATE_LOCATION__LEVEL_1) 
	AND CS.CANDIDATE_LOCATION__LEVEL_2 = upper(CSS.CANDIDATE_LOCATION__LEVEL_2)
	AND ifnull(CS.CANDIDATE_LOCATION__LEVEL_3,''-1'') = upper(ifnull(CSS.CANDIDATE_LOCATION__LEVEL_3,''-1''))

WHERE CSS.PROFILE_ID IS NOT NULL
) 
SELECT * FROM F;

    RETURN ''SUCCESS'';
    END;
    
 EOT
}

