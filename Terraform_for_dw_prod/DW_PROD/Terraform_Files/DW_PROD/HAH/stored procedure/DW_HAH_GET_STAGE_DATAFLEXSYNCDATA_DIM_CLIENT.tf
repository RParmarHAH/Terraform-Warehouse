resource "snowflake_procedure" "DW_HAH_GET_STAGE_DATAFLEXSYNCDATA_DIM_CLIENT" {
	name ="GET_STAGE_DATAFLEXSYNCDATA_DIM_CLIENT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "NAME"
		type = "NAME"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result VARCHAR;
BEGIN
    --*****************************************************************************************************************************
-- NAME:  DataFlexSyncData_DIM_CLIENT
--
-- PURPOSE: Creates one row per client according to DataFlexSyncData
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 01/17/20     Greg Marsh           Initial development
-- 05/04/20 	Mir Ali 			 Updated ReferralDate logic
-- 05/11/20     Frank Noordover      Updated logic for PID, DOB, Gender and Address
-- 02/04/21     Mir Ali              Added dummy clients for DfArInvoices
-- 04/12/21     Devansh Patel 		 Added Primary and Secondary Supervisor
-- 05/14/21 	Mir Ali 			 Added logic for Primary_Branch attributes
-- 07/07/21 	Mir Ali				 Added new attributes including email, fax number, salutation, and marital status
-- 09/30/21     Jashvant Patel 		 Added AGENCY AND CCSI_FLAG COLUMN
-- 02/28/22     Deven Kapasi         Leveraged dataflex dedupe tables
-- 10/03/22		Abhishek Sunil		 Leveraged History tables to display (2013-2017) deleted timesheets data
-- 09/08/23     Mirisha              Dedupe key change for Client_key
-- 09/27/23     SANDESH GOSAVI       Add logic in TIMESHEET_0 CTE to avoid clients future last_service_date
-- 11/08/2023 Trushali Ramoliya Added the column for HISPANIC_OR_LATINO and also updated the logic for ethnicity as per IDDOX - 388
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO STAGE.DATAFLEXSYNCDATA_DIM_CLIENT
WITH TIMESHEET_0 AS(
SELECT
MAX(MAX(CASE WHEN H.SERVICEDATE <= CURRENT_DATE()THEN H.SERVICEDATE ELSE NULL END)) OVER (PARTITION BY T.CLIENTNUMBER, h.dbname) AS LAST_SERVICE_DATE
,MIN(MIN(H.SERVICEDATE)) OVER (PARTITION BY T.CLIENTNUMBER, h.dbname) AS FIRST_SERVICE_DATE
,MAX(MAX(H.SERVICEDATE)) OVER (PARTITION BY T.CLIENTNUMBER, h.dbname, CO.REVENUECATEGORY) AS LAST_SERVICE_DATE_BY_SERVICE_LINE
,MIN(MIN(H.SERVICEDATE)) OVER (PARTITION BY T.CLIENTNUMBER, h.dbname, CO.REVENUECATEGORY) AS FIRST_SERVICE_DATE_BY_SERVICE_LINE
,T.CLIENTNUMBER AS CLIENT_NUMBER
,DATEDIFF(''day'', LAST_SERVICE_DATE,CURRENT_DATE()) AS DAYS_SINCE_LAST_SERVICE
, h.dbname
, CO.REVENUECATEGORY AS SERVICE_LINE
, DATE_TRUNC(MONTH, H.SERVICEDATE) AS REPORT_MONTH
, SUM(H.SERVICEHOURS) AS SERVICE_HOURS
,GREATEST(NVL(MAX(H.ETL_LAST_UPDATED_DATE), ''1900-01-01''), NVL(MAX(CO.ETL_LAST_UPDATED_DATE), ''1900-01-01'')) AS ETL_LAST_UPDATED_DATE
FROM DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.ALL_TIMESHEETSHOURS H
JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.ALL_DFTIMESHEETS T ON T.REFERENCENO = H.REFERENCENO AND T.DBNAME = H.DBNAME AND T.WEEKENDDATE = H.WEEKENDDATE
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCONTRACTS CO ON CO.CONTRACTCODE = T.CONTRACTCODE AND CO.DBNAME = T.DBNAME
GROUP BY
T.CLIENTNUMBER, h.dbname, CO.REVENUECATEGORY, DATE_TRUNC(MONTH, H.SERVICEDATE)
),
TIMESHEET AS (
SELECT DISTINCT TIMESHEETS_LAST.DBNAME, TIMESHEETS_LAST.CLIENT_NUMBER, TIMESHEETS_LAST.FIRST_SERVICE_DATE, TIMESHEETS_LAST.LAST_SERVICE_DATE, TIMESHEETS_LAST.DAYS_SINCE_LAST_SERVICE,
TIMESHEETS_LAST.SERVICE_LINE, TIMESHEETS_LAST.REPORT_MONTH, TIMESHEETS_LAST.SERVICE_HOURS AS SERVICE_HOURS_LATEST_MONTH,
MAX(TIMESHEETS_LAST.ETL_LAST_UPDATED_DATE) OVER (PARTITION BY TIMESHEETS_LAST.DBNAME, TIMESHEETS_LAST.CLIENT_NUMBER) AS ETL_LAST_UPDATED_DATE
FROM TIMESHEET_0 AS TIMESHEETS
JOIN TIMESHEET_0 AS TIMESHEETS_LAST
ON TIMESHEETS_LAST.CLIENT_NUMBER = TIMESHEETS.CLIENT_NUMBER AND TIMESHEETS_LAST.DBNAME = TIMESHEETS.DBNAME AND TIMESHEETS_LAST.SERVICE_LINE = TIMESHEETS.SERVICE_LINE
AND TIMESHEETS_LAST.REPORT_MONTH = DATE_TRUNC(MONTH, TIMESHEETS.LAST_SERVICE_DATE_BY_SERVICE_LINE)
),
BULK_BILLING_CLIENTS AS (
SELECT I.DBNAME, I.OFFICE,
TRY_CAST(CONCAT(-100, I.OFFICE) AS INTEGER) AS DUMMY_CLIENT_NUMBER,
COALESCE(B.BRANCH_NAME, CONCAT(I.DBNAME, ''-Unknown'')) AS BRANCH_NAME,
MAX(GREATEST(COALESCE(I.ETL_LAST_UPDATED_DATE, ''1/1/1900''), COALESCE(B.ETL_LAST_UPDATED_DATE, ''1/1/1900''))) AS ETL_LAST_UPDATED_DATE
FROM DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFARINVOICES I
LEFT JOIN HAH.DIM_BRANCH B ON B.SOURCE_SYSTEM_ID = 3 AND B.SYSTEM_CODE = I.DBNAME AND B.OFFICE_NUMBER = I.OFFICE
GROUP BY I.DBNAME, I.OFFICE, COALESCE(B.BRANCH_NAME, CONCAT(I.DBNAME, ''-Unknown''))
),
SUPERVISORS AS (
--SELECT B.DBNAME, B.CLIENTNUMBER , A."CODE" SUPERVISORCODE , A."NAME" NAME, MAX(GREATEST(COALESCE(A.ETL_LAST_UPDATED_DATE, ''1/1/1900''), COALESCE(B.ETL_LAST_UPDATED_DATE, ''1/1/1900''))) AS ETL_LAST_UPDATED_DATE
--FROM DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFSUPERVISORS A
--LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTSUPERVISORS B
--ON B.SUPERVISORCODE = A.CODE AND A.DBNAME = B.DBNAME
--GROUP BY B.DBNAME, B.CLIENTNUMBER , A.CODE, A."NAME"
SELECT SPV_LIST.DBNAME, SPV_LIST.CLIENT_NUMBER, SPV_LIST.SUPERVISORCODE,
MD5(SPV_LIST.DBNAME || ''-'' || SPV_LIST.SUPERVISORCODE || ''-'' || ''DATAFLEXSYNCDATA'') AS SUPERVISOR_KEY,
COALESCE(T1.REPORT_MONTH, T2.REPORT_MONTH) AS REPORT_MONTH,
COALESCE(T1.SERVICE_HOURS_LATEST_MONTH, T2.SERVICE_HOURS_LATEST_MONTH) AS SERVICE_HOURS_LATEST_MONTH,
COALESCE(T1.FIRST_SERVICE_DATE, T2.FIRST_SERVICE_DATE) AS FIRST_SERVICE_DATE,
COALESCE(T1.LAST_SERVICE_DATE, T2.LAST_SERVICE_DATE) AS LAST_SERVICE_DATE,
COALESCE(T1.DAYS_SINCE_LAST_SERVICE, T2.DAYS_SINCE_LAST_SERVICE) AS DAYS_SINCE_LAST_SERVICE,
SPV_LIST.SERVICE_LINE,
GREATEST(SPV_LIST.ETL_LAST_UPDATED_DATE, NVL(SPV.ETL_LAST_UPDATED_DATE, ''1900-01-01''), NVL(T1.ETL_LAST_UPDATED_DATE, ''1900-01-01''), NVL(T2.ETL_LAST_UPDATED_DATE, ''1900-01-01'')) AS ETL_LAST_UPDATED_DATE,
COALESCE(SPV."NAME", SPV_LIST.DBNAME || '' - Unknown'') AS SUPERVISORNAME,
ROW_NUMBER() OVER(PARTITION BY SPV_LIST.DBNAME, SPV_LIST.CLIENT_NUMBER ORDER BY CASE WHEN SPV_LIST.SERVICE_LINE IS NOT NULL THEN 0 ELSE 1 END, COALESCE(T1.REPORT_MONTH, T2.REPORT_MONTH) DESC, COALESCE(T1.SERVICE_HOURS_LATEST_MONTH, T2.SERVICE_HOURS_LATEST_MONTH) DESC, COALESCE(T1.LAST_SERVICE_DATE, T2.LAST_SERVICE_DATE) DESC) AS ROW_NUM
FROM (
SELECT DCS.DBNAME, DCS.CLIENTNUMBER AS CLIENT_NUMBER, DCS.SUPERVISORCODE, DCS.BUSINESSLINE AS SERVICE_LINE, NVL(DCS.ETL_LAST_UPDATED_DATE, ''1900-01-01'') AS ETL_LAST_UPDATED_DATE
FROM DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTSUPERVISORS AS DCS
UNION ALL
SELECT C.DBNAME, C."NUMBER" AS CLIENT_NUMBER, C.SUPERVISORCODE, NULL AS SERVICE_LINE, NVL(C.ETL_LAST_UPDATED_DATE, ''1900-01-01'') AS ETL_LAST_UPDATED_DATE
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.CLIENT_MASTER_LIST AS C
) AS SPV_LIST
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFSUPERVISORS AS SPV
ON SPV.DBNAME = SPV_LIST.DBNAME AND SPV.CODE = SPV_LIST.SUPERVISORCODE
LEFT JOIN TIMESHEET AS T1
ON T1.DBNAME = SPV_LIST.DBNAME AND T1.CLIENT_NUMBER = SPV_LIST.CLIENT_NUMBER AND T1.SERVICE_LINE = SPV_LIST.SERVICE_LINE
LEFT JOIN TIMESHEET AS T2
ON T1.DBNAME IS NULL
AND T2.DBNAME = SPV_LIST.DBNAME AND T2.CLIENT_NUMBER = SPV_LIST.CLIENT_NUMBER
)
SELECT DISTINCT
md5(F.DBNAME || ''-'' || regexp_replace(F.MASTER_ID,F.DBNAME)::number || ''-'' || ''DATAFLEXSYNCDATA'' ) AS CLIENT_KEY --PK
-- , DAYS_SINCE_LAST_SERVICE
,F.NUMBER AS CLIENT_NUMBER --BK
,F.DBNAME AS SYSTEM_CODE --BK
,3 AS SOURCE_SYSTEM_ID --BK
,md5( F.SSN) AS Client_PID 
,NULL AS CLIENT_MEDICARE_ID -- NA
,f.MEDICAIDNO AS MEDICAID_ID -- NA
,F.DOB AS Client_DOB
,NULL AS CLIENT_DATE_OF_DEATH
--,F.Gender AS Client_Gender
,CASE WHEN UPPER( f.Gender) = ''F'' THEN ''FEMALE''
      WHEN UPPER( f.Gender) = ''M'' THEN ''MALE''
      ELSE NULL
END AS Client_Gender
-- ,NULL AS ETHNICITY  
,UPPER (CASE WHEN f.Ethics = ''W'' THEN ''White''
      WHEN f.Ethics = ''B'' THEN ''Black or African American''
      WHEN f.Ethics = ''H'' THEN NULL 
      WHEN f.Ethics = ''A'' THEN ''Asian''
      ELSE NULL
 END) AS Ethnicity
 , IFF(UPPER(TRIM(f.Ethics)) = ''H'' ,TRUE , FALSE ) AS HISPANIC_OR_LATINO
, NULL AS CLIENT_GENDER_IDENTITY -- NA
, NULL AS CLIENT_SEXUAL_ORIENTATION -- NA
, NULL AS CLIENT_RACE --NA
 ,NULL AS CLIENT_MARITAL_STATUS
 ,CASE TRIM(F.GENDER) WHEN ''M'' THEN ''MR.'' WHEN ''F'' THEN ''MS.'' END AS CLIENT_SALUTATION
,F.FirstName AS Client_First_Name
,F.MiddleName AS Client_Middle_Name
,F.LastName AS Client_Last_Name
,TO_CHAR(F.LASTNAME) || '', '' || TO_CHAR(F.FIRSTNAME) || '' '' || TO_CHAR(F.MIDDLENAME) AS CLIENT_NAME
,F.Address1 AS Client_Address1
,F.Address2 AS Client_Address2
,F.City AS Client_City
,CASE WHEN ST.STATE_ISO_CODE IS NOT NULL AND UPPER(F.STATE) REGEXP ''[A-Z][A-Z]'' THEN ST.STATE_ISO_CODE ELSE F.DBNAME END AS CLIENT_STATE_CODE
,F.Zip AS Client_Zip
,NULL AS CLIENT_CLN_ADDRESS_1
,NULL AS CLIENT_CLN_ADDRESS_2
,NULL AS CLIENT_CLN_CITY
,NULL AS CLIENT_CLN_STATE_CODE
,NULL AS CLIENT_CLN_ZIP
,NULL AS CLIENT_STD_ADDRESS_1
,NULL AS CLIENT_STD_ADDRESS_2
,NULL AS CLIENT_STD_CITY
,NULL AS CLIENT_STD_STATE_CODE
,NULL AS CLIENT_STD_ZIP
,F.PhoneNumber AS Client_Home_Phone
,CAST( NULL AS Varchar2(20)) AS Client_Cell_Phone
,CAST( NULL AS Varchar2(20)) AS Client_Work_Phone
,NULL AS CLIENT_FAX_NUMBER
--,CASE WHEN F.CREATEDDATE <= coalesce(F.BEGINSERVICEDATE, S1.FIRST_SERVICE_DATE) THEN F.CREATEDDATE ELSE coalesce(F.BEGINSERVICEDATE, S1.FIRST_SERVICE_DATE) END AS REFERRAL_DATE
,NULL AS CLIENT_PERSONAL_EMAIL
,F.DATEADDED REFERRAL_DATE
,CASE WHEN F.DATEADDED<''2013-01-01'' THEN NULL ELSE datediff(day, F.DATEADDED, S1.FIRST_SERVICE_DATE) END AS DAYS_TO_SERVICE
,NULL AS CONTRACT_BEGIN_DATE
,NULL AS CONTRACT_END_DATE
,MIN(S1.FIRST_SERVICE_DATE) OVER (PARTITION BY F.DBNAME, F."NUMBER") AS FIRST_SERVICE_DATE
,MAX(S1.LAST_SERVICE_DATE) OVER (PARTITION BY F.DBNAME, F."NUMBER") AS LAST_SERVICE_DATE
,F.BEGINSERVICEDATE AS BEGIN_DATE
,F.ENDSERVICEDATE AS END_DATE
,IFF (MIN(S1.DAYS_SINCE_LAST_SERVICE) OVER (PARTITION BY F.DBNAME, F."NUMBER") <= 30, ''TRUE'', ''FALSE'') AS ACTIVE_CLIENT_FLAG
, CASE WHEN CURRENT_DATE BETWEEN IFNULL( F.OnHoldStartDate, DATEADD( DAY, 1, CURRENT_DATE)) AND IFNULL( F.OnHoldEndDate, DATEADD( DAY, 1, CURRENT_DATE)) THEN CAST( ''TRUE'' AS BOOLEAN)
ELSE CAST( ''FALSE'' AS BOOLEAN)
END AS ON_HOLD_FLAG
, F.OnHoldStartDate AS On_Hold_Start_Date
, F.OnHoldEndDate AS On_Hold_End_Date
,NULL AS ACQUIRED_FROM_COMPANY_KEY
,NULL AS ACQUIRED_FROM_COMPANY_ID
,NULL AS ACQUIRED_FROM_COMPANY_FULL_NAME
,NULL AS ACQUISITION_DATE
,NULL AS ACQUISITION_FLAG
,NULL AS ADMISSION_DATE
,NULL AS ADMISSION_FLAG
,CASE WHEN datediff(day, CASE WHEN F.CREATEDDATE <= coalesce(F.BEGINSERVICEDATE, MIN(S1.FIRST_SERVICE_DATE) OVER (PARTITION BY F.DBNAME, F."NUMBER")) THEN F.CREATEDDATE ELSE coalesce(F.BEGINSERVICEDATE, MIN(S1.FIRST_SERVICE_DATE) OVER (PARTITION BY F.DBNAME, F."NUMBER")) END, coalesce(F.BEGINSERVICEDATE, MIN(S1.FIRST_SERVICE_DATE) OVER (PARTITION BY F.DBNAME, F."NUMBER"))) <= 60 THEN 1 ELSE 0 END AS CLIENT_CONVERTED_FLAG
--,F.SUPERVISORCODE AS CURRENT_SUPERVISOR_CODE
--,s.NAME AS CURRENT_SUPERVISOR_NAME
,COALESCE(FIRST_VALUE(S1.SUPERVISOR_KEY) OVER (PARTITION BY F.DBNAME, F."NUMBER" ORDER BY S1.REPORT_MONTH DESC, S1.SERVICE_HOURS_LATEST_MONTH DESC, S1.LAST_SERVICE_DATE DESC),MD5(F.DBNAME || ''-'' || F.SUPERVISORCODE || ''-'' || ''DATAFLEXSYNCDATA'')) AS PRIMARY_SUPERVISOR_KEY
,COALESCE(FIRST_VALUE(S1.SUPERVISORCODE) OVER (PARTITION BY F.DBNAME, F."NUMBER" ORDER BY S1.REPORT_MONTH DESC, S1.SERVICE_HOURS_LATEST_MONTH DESC, S1.LAST_SERVICE_DATE DESC), F.SUPERVISORCODE) AS PRIMARY_SUPERVISOR_CODE
,COALESCE(FIRST_VALUE(S1.SUPERVISORNAME) OVER (PARTITION BY F.DBNAME, F."NUMBER" ORDER BY S1.REPORT_MONTH DESC, S1.SERVICE_HOURS_LATEST_MONTH DESC, S1.LAST_SERVICE_DATE DESC), CONCAT(F.DBNAME, '' - Unknown'')) AS PRIMARY_SUPERVISOR_NAME
,COALESCE(MD5(F.DBNAME || ''-'' || F.SUPERVISORCODE || ''-'' || ''DATAFLEXSYNCDATA''), FIRST_VALUE(S2.SUPERVISOR_KEY) OVER (PARTITION BY F.DBNAME, F."NUMBER" ORDER BY S2.REPORT_MONTH DESC, S2.SERVICE_HOURS_LATEST_MONTH DESC, S2.LAST_SERVICE_DATE DESC)) AS SECONDARY_SUPERVISOR_KEY
,COALESCE(F.SUPERVISORCODE , FIRST_VALUE(S2.SUPERVISORCODE) OVER (PARTITION BY F.DBNAME, F."NUMBER" ORDER BY S2.REPORT_MONTH DESC, S2.SERVICE_HOURS_LATEST_MONTH DESC, S2.LAST_SERVICE_DATE DESC)) AS SECONDARY_SUPERVISOR_CODE
,COALESCE(DFS.NAME,FIRST_VALUE(S2.SUPERVISORNAME) OVER (PARTITION BY F.DBNAME, F."NUMBER" ORDER BY S2.REPORT_MONTH DESC, S2.SERVICE_HOURS_LATEST_MONTH DESC, S2.LAST_SERVICE_DATE DESC)) AS SECONDARY_SUPERVISOR_NAME
,MD5(F.DBNAME || ''-'' || F.OFFICENUMBER || ''-'' || ''DATAFLEXSYNCDATA'') AS PRIMARY_BRANCH_KEY
,COALESCE(UPPER(TRIM(O.OFFICENAME)), F.DBNAME || ''-'' || ''Unknown'') AS PRIMARY_BRANCH_NAME
,F.DBNAME AS PRIMARY_BRANCH_STATE
,NULL AS GAURANTOR_NAME
,NULL AS NOTES
,TRIM(UPPER(F.AGENCY)) AS AGENCY
,TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE
,TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
--- ETL FIELDS ---
:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
CURRENT_USER as ETL_INSERTED_BY ,
convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
CURRENT_USER as ETL_LAST_UPDATED_BY,
0 as ETL_DELETED_FLAG,
0 AS ETL_INFERRED_MEMBER_FLAG
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.CLIENT_MASTER_LIST F
LEFT JOIN DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.CLIENT_MATCH_LIST ML
ON ML.MASTER_ID = F.MASTER_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFOFFICES O ON O.DBNAME = F.DBNAME AND O.OFFICENUMBER = F.OFFICENUMBER
--LEFT JOIN TIMESHEET T ON T.CLIENT_NUMBER = F.NUMBER AND t.dbname = f.dbname
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DfSupervisors DFS ON F.SUPERVISORCODE = DFS.CODE AND f.DBNAME = DFS.DBNAME
LEFT JOIN SUPERVISORS S1 ON S1.CLIENT_NUMBER = COALESCE(F."NUMBER", ML."NUMBER") AND S1.DBNAME = COALESCE(F.DBNAME, ML.DBNAME) AND S1.ROW_NUM = 1
LEFT JOIN SUPERVISORS S2 ON S2.CLIENT_NUMBER = COALESCE(F."NUMBER", ML."NUMBER") AND S2.DBNAME = COALESCE(F.DBNAME, ML.DBNAME) AND S2.ROW_NUM = 2
LEFT JOIN HAH.DIM_STATE ST ON ST.STATE_ISO_CODE = F.STATE
UNION ALL
SELECT md5(C.DBNAME || ''-'' || C.DUMMY_CLIENT_NUMBER || ''-'' || ''DATAFLEXSYNCDATA-DUMMY'' ) AS CLIENT_KEY,
C.DUMMY_CLIENT_NUMBER AS CLIENT_NUMBER,
C.DBNAME AS SYSTEM_CODE,
3 AS SOURCE_SYSTEM_ID,
NULL AS CLIENT_PID,	
NULL AS CLIENT_MEDICARE_ID, -- NA
NULL AS MEDICAID_ID, -- NA
NULL AS CLIENT_DOB,
NULL AS CLIENT_DATE_OF_DEATH,
NULL AS CLIENT_GENDER,
NULL AS ETHNICITY,
FALSE AS HISPANIC_OR_LATINO,
 NULL AS CLIENT_GENDER_IDENTITY, -- NA
 NULL AS CLIENT_SEXUAL_ORIENTATION, -- NA
 NULL AS CLIENT_RACE, --NA
NULL AS CLIENT_MARITAL_STATUS,
NULL AS CLIENT_SALUTATION,
C.BRANCH_NAME AS CLIENT_FIRST_NAME,
NULL AS CLIENT_MIDDLE_NAME,
''BULK BILLING DUMMY CLIENT'' AS CLIENT_LAST_NAME,
TRIM(CONCAT(CLIENT_LAST_NAME, '', '', CLIENT_FIRST_NAME, '' '', CLIENT_MIDDLE_NAME)) AS CLIENT_NAME,
NULL AS CLIENT_ADDRESS1,
NULL AS CLIENT_ADDRESS2,
NULL AS CLIENT_CITY,
C.DBNAME AS CLIENT_STATE_CODE,
NULL AS CLIENT_ZIP,
NULL AS CLIENT_CLN_ADDRESS_1,
NULL AS CLIENT_CLN_ADDRESS_2,
NULL AS CLIENT_CLN_CITY,
NULL AS CLIENT_CLN_STATE_CODE,
NULL AS CLIENT_CLN_ZIP,
NULL AS CLIENT_STD_ADDRESS_1,
NULL AS CLIENT_STD_ADDRESS_2,
NULL AS CLIENT_STD_CITY,
NULL AS CLIENT_STD_STATE_CODE,
NULL AS CLIENT_STD_ZIP,
NULL AS CLIENT_HOME_PHONE,
NULL AS CLIENT_CELL_PHONE,
NULL AS CLIENT_WORK_PHONE,
NULL AS CLIENT_FAX_NUMBER,
NULL AS CLIENT_PERSONAL_EMAIL,
NULL AS REFERRAL_DATE,
NULL AS DAYS_TO_SERVICE,
NULL AS CONTRACT_BEGIN_DATE,
NULL AS CONTRACT_END_DATE,
NULL AS BEGIN_DATE,
NULL AS END_DATE,
NULL AS FIRST_SERVICE_DATE,
NULL AS LAST_SERVICE_DATE,
NULL AS ACTIVE_CLIENT_FLAG,
NULL AS ON_HOLD_FLAG,
NULL AS ON_HOLD_START_DATE,
NULL AS ON_HOLD_END_DATE,
NULL AS ACQUIRED_FROM_COMPANY_KEY,
NULL AS ACQUIRED_FROM_COMPANY_ID,
NULL AS ACQUIRED_FROM_COMPANY_FULL_NAME,
NULL AS ACQUISITION_DATE,
NULL AS ACQUISITION_FLAG,
NULL AS ADMISSION_DATE,
NULL AS ADMISSION_FLAG,
NULL AS CLIENT_CONVERTED_FLAG,
NULL AS PRIMARY_SUPERVISOR_KEY,
NULL AS PRIMARY_SUPERVISOR_CODE,
NULL AS PRIMARY_SUPERVISOR_NAME,
NULL AS SECONDARY_SUPERVISOR_KEY,
NULL AS SECONDARY_SUPERVISOR_CODE,
NULL AS SECONDARY_SUPERVISOR_NAME,
MD5(C.DBNAME || ''-'' || C.OFFICE || ''-'' || ''DATAFLEXSYNCDATA'') AS PRIMARY_BRANCH_KEY,
C.BRANCH_NAME AS PRIMARY_BRANCH_NAME,
C.DBNAME AS PRIMARY_BRANCH_STATE,
NULL AS GAURANTOR_NAME,
NULL AS NOTES,
NULL AS AGENCY,
TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
--- ETL FIELDS ---
:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
CURRENT_USER as ETL_INSERTED_BY ,
convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
CURRENT_USER as ETL_LAST_UPDATED_BY,
0 as ETL_DELETED_FLAG,
0 AS ETL_INFERRED_MEMBER_FLAG
FROM BULK_BILLING_CLIENTS C
;
    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

    return return_result;
END;
    
 EOT
}

