resource "snowflake_procedure" "DW_HAH_GET_STAGE_OSHAH_FACT_VISIT" {
	name ="GET_STAGE_OSHAH_FACT_VISIT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN
--*****************************************************************************************************************************
-- NAME:  OSHAH_FACT_VISIT
--
-- PURPOSE: Creates one row FOR FACT_VISIT according to OPAL
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 12/19/2022	Leo Joy     			Initial development
-- 12/05/2023   Sanket Jain          	Added CLIENT_SERVICE_KEY,PARTNER_CONTRACT_SERVICE_KEY,BILLING_KEY
-- 07/12/2023   Sandesh Gosavi          update code to use config flag
-- 07/30/2023   Leo Joy 				Added logic for In Review status in visit_status
-- 08/01/2023 	Shikhar Saxena			Updated the CLEAN_SHIFT_FLAG logic for Auto Confirmed visits
-- 08/25/2023      Mirisha              Updated logic for MS and changed exception_reason_indicator from T/F to Y/N 
-- 11/07/2023   Harshala Kadam			Updated logic for VISIT_STATUS
-- 01/19/24	   Shubham Khunare	        schedule/visit Status name correction
--*****************************************************************************************************************************
INSERT OVERWRITE INTO "STAGE".OSHAH_FACT_VISIT
WITH CLIENT AS
(
	SELECT MASTER_ID,PATIENTID FROM
	(
		SELECT PATIENTID, MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT MASTER_ID,PATIENTID FROM
	(
		SELECT DISTINCT PATIENTID, MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.CLIENT_MATCH_LIST
		WHERE PATIENTID NOT IN (SELECT PATIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.CLIENT_MASTER_LIST) 
	)
),
EMPLOYEE AS 
(
	SELECT MASTER_ID,CAREGIVERID FROM
	(
		SELECT CAREGIVERID, MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.EMPLOYEE_MASTER_LIST 
	)
	UNION
	SELECT MASTER_ID,CAREGIVERID FROM
	(
		SELECT DISTINCT CAREGIVERID, MASTER_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.EMPLOYEE_MATCH_LIST
		WHERE CAREGIVERID NOT IN (SELECT CAREGIVERID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.EMPLOYEE_MASTER_LIST) 
	)
),
--fetching the latest coordinator there are multiple coordinator present
SUPERVISORS AS 
(
	SELECT P.PATIENTID,PC.COORDINATORID AS COORDINATORID,
	PC.COORDINATORNAME AS COORDINATORNAME
FROM CLIENT P
JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.PROVIDERPATIENTCOORDINATORS PC
ON P.PATIENTID = PC.PATIENTID
AND PC.COORDINATORSRNO = 1
)
,
--if a visit is rescheduled it means that visit has to deleted and on the same date another visit must be created
RESCHEDULED AS 
( 
	WITH DELETEDVISIT AS 
	( 
		SELECT PATIENTID,VISITDATE FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.TBLVISITS_REPL
		WHERE DELETED=TRUE 
		GROUP BY PATIENTID ,VISITDATE 
	)
	SELECT *
	FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.TBLVISITS_REPL VISIT 
	INNER JOIN DELETEDVISIT DT 
	ON VISIT.PATIENTID =DT.PATIENTID AND VISIT.VISITDATE=DT.VISITDATE
	WHERE DELETED =FALSE 
)
,
--all the possbile visit status same as in visit_status_mapping
DERIVED_STATUS AS (
SELECT DISTINCT VINFO.VISITID,CONCAT(''OSHAH - '', OFFICE.STATE) AS SYSTEM_CODE,
CASE
WHEN VISIT.ISMISSEDVISIT = 1 AND  VISIT.BILLED =1 
    THEN ''Cancelled Billed''
  	WHEN VISIT.ISMISSEDVISIT = 1 AND  UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VINFO.NONBILLABLE=TRUE 
    THEN ''Cancelled Notbillable''
    WHEN  RE.VISITID IS NULL AND VISIT.ISMISSEDVISIT =''0'' AND VISIT.VISITDATE <=current_date  
  	    AND (VISIT.VISITSTARTTIME IS NULL OR VISIT.VISITENDTIME  IS NULL ) 
  	    AND UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VINFO.NONBILLABLE=TRUE 
    THEN ''Scheduled Notbilled In Review''
    WHEN  RE.VISITID IS NULL AND VISIT.ISMISSEDVISIT =''0'' AND VISIT.VISITDATE <=current_date  
  	    AND (VISIT.VISITSTARTTIME IS NULL OR VISIT.VISITENDTIME  IS NULL ) AND  VISIT.BILLED =0 
    THEN ''Scheduled Unbilled In Review''
    WHEN  RE.VISITID IS NULL AND VISIT.ISMISSEDVISIT =''0'' AND VISIT.VISITDATE <=current_date  
  	    AND (VISIT.VISITSTARTTIME IS NULL OR VISIT.VISITENDTIME  IS NULL ) AND  VISIT.BILLED =1 
    THEN ''Scheduled Billed In Review''
    WHEN  RE.VISITID IS NULL  AND VISIT.ISMISSEDVISIT = 0 AND (VISIT.VISITDATE::DATE <= GETDATE()AND VISIT.VISITSTARTTIME IS NOT NULL AND VISIT."VISITENDTIME" IS NOT NULL)AND UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VINFO.NONBILLABLE=TRUE 
    THEN ''Scheduled Completed Notbilled''
    WHEN (VISIT.VISITDATE::DATE > GETDATE() OR RE.VISITID IS NULL ) AND UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VINFO.NONBILLABLE=TRUE 
    THEN ''Scheduled Future Notbilled''
    WHEN VISIT.VISITDATE::DATE > GETDATE() AND NVL(INVOICE.VISITPAYMENTSTATUS,0) = 0 AND NVL(VISIT.ISMISSEDVISIT,0)=0 AND RE.VISITID IS NULL AND  VISIT.BILLED =0 
    THEN ''Scheduled-Open Future Unbilled''
    WHEN (VISIT.VISITDATE::DATE > GETDATE() AND RE.VISITID IS NULL ) AND VISIT.BILLED =0 AND NVL(VISIT.ISMISSEDVISIT,0) =''0''
    THEN ''Scheduled Future Unbilled''
    WHEN VISIT.ISMISSEDVISIT = 1 AND  VISIT.BILLED =0 
    THEN ''Cancelled Unbilled''
    WHEN RE.VISITID IS NULL  AND VISIT.ISMISSEDVISIT = 0 AND (VISIT.VISITDATE::DATE <= GETDATE()AND VISIT.VISITSTARTTIME IS NOT NULL AND VISIT."VISITENDTIME" IS NOT NULL) AND  VISIT.BILLED =0 
    THEN ''Scheduled Completed Unbilled''
    WHEN RE.VISITID IS NULL  AND VISIT.ISMISSEDVISIT = 0 AND (VISIT.VISITDATE::DATE <=GETDATE() AND VISIT.VISITSTARTTIME IS NOT NULL AND VISIT."VISITENDTIME" IS NOT NULL ) AND  ((VISIT.BILLED = 1 AND NVL(INVOICE.VISITPAYMENTSTATUS,0) = ''0'') OR (INVOICE.VISITPAYMENTSTATUS IN (''1'',''2''))) 
    THEN ''Scheduled Completed Billed''
    WHEN  RE.VISITID IS NOT NULL AND (VISIT.BILLED =0) AND VISIT.VISITDATE <=current_date AND VISIT.ISMISSEDVISIT =''0'' 
  	    AND (VISIT.VISITSTARTTIME IS NULL OR VISIT.VISITENDTIME  IS NULL )
    THEN  ''ReScheduled In Review Unbilled''
    WHEN  RE.VISITID IS NOT NULL AND VISIT.VISITDATE::DATE <= GETDATE()AND VISIT.ISMISSEDVISIT = 0 AND VISIT.VISITSTARTTIME IS NOT NULL AND VISIT."VISITENDTIME" IS NOT NULL AND UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VINFO.NONBILLABLE=TRUE  
    THEN  ''ReScheduled Notbillable Completed''
    WHEN  RE.VISITID IS NOT NULL AND VISIT.VISITDATE::DATE <= GETDATE() AND VISIT.ISMISSEDVISIT = 0 AND VISIT.VISITSTARTTIME IS NOT NULL AND VISIT."VISITENDTIME" IS NOT NULL  AND  VISIT.BILLED = 0
 	THEN  ''ReScheduled Unbilled Completed''
  	WHEN  RE.VISITID IS NOT NULL  AND VISIT.VISITDATE::DATE <= GETDATE()AND VISIT.ISMISSEDVISIT = 0 AND VISIT.VISITSTARTTIME IS NOT NULL AND VISIT."VISITENDTIME" IS NOT NULL AND  ((VISIT.BILLED = 1 AND INVOICE.VISITPAYMENTSTATUS = ''0'') OR (INVOICE.VISITPAYMENTSTATUS in(''1'',''2'')))
    THEN ''ReScheduled billed Completed''
   -- WHEN (VISIT.VISITDATE::DATE < GETDATE() AND RE.VISITID IS NULL ) AND INVOICE.VISITID IS NULL AND IV.VISITID IS NOT NULL AND ((VISIT.DELETED =FALSE AND VISIT.BILLED = 1) OR ( INVOICE.VISITPAYMENTSTATUS = ''0'') OR (INVOICE.VISITPAYMENTSTATUS = ''1''))--DONE
   -- THEN ''Scheduled Completed In Review''
  	WHEN (VISIT.VISITDATE::DATE > GETDATE() OR RE.VISITID IS NULL ) AND UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VINFO.NONBILLABLE=TRUE  AND IV.VISITID IS NOT NULL  AND INVOICE.VISITID IS NULL
    THEN ''Scheduled Notbilled In Review''
    WHEN (VISIT.VISITDATE::DATE > GETDATE() OR RE.VISITID IS NULL ) AND (VISIT.VISITDATE::DATE > GETDATE()) AND  VISIT.BILLED =0 AND VISIT.DELETED = TRUE 
    THEN ''Scheduled Future Unbilled''
    WHEN (VISIT.VISITDATE::DATE > GETDATE() AND  RE.VISITID IS NOT NULL ) AND  (VISIT.BILLED =0 )AND NVL(VISIT.ISMISSEDVISIT,0) =''0''
    THEN ''Rescheduled Future Unbilled''
    WHEN  RE.VISITID IS NOT NULL  AND VISIT.VISITDATE <=current_date AND VISIT.ISMISSEDVISIT =''0'' 
  	    AND (VISIT.VISITSTARTTIME IS NULL OR VISIT.VISITENDTIME  IS NULL ) AND UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VINFO.NONBILLABLE=TRUE 
    THEN  ''ReScheduled Notbillable In Review''
    WHEN  RE.VISITID IS NOT NULL  AND VISIT.VISITDATE <=current_date AND VISIT.ISMISSEDVISIT =''0'' 
  	    AND (VISIT.VISITSTARTTIME IS NULL OR VISIT.VISITENDTIME  IS NULL )AND UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VINFO.NONBILLABLE=TRUE 
		  AND VISIT.VISITSTARTTIME::DATE < GETDATE() AND VISIT.VISITENDTIME ::DATE < GETDATE()
    THEN  ''ReScheduled Notbillable Completed In Review''
    WHEN  RE.VISITID IS NOT NULL AND UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VINFO.NONBILLABLE=TRUE 
    THEN  ''ReScheduled Notbillable''
    WHEN (VISIT.ISMISSEDVISIT = 1 AND VISIT.VISITDATE::DATE <= GETDATE())
    THEN ''Cancelled'' ELSE NULL
END    AS DERIVED_DISC_STATUS, 
CASE 
		WHEN VISIT.VISITDATE::DATE > GETDATE() AND NVL(INVOICE.VISITPAYMENTSTATUS,0) = 0 AND NVL(VISIT.ISMISSEDVISIT,0)=0 AND RE.VISITID IS NULL THEN ''Scheduled-Open''
		WHEN RE.VISITID IS NULL  AND VISIT.ISMISSEDVISIT = 0 THEN ''Scheduled''
		--WHEN VISIT.VISITDATE::DATE > GETDATE() AND INVOICE.VISITPAYMENTSTATUS = 0 THEN ''Scheduled-Open''
		WHEN RE.VISITID IS NOT NULL THEN ''Rescheduled''
		WHEN VISIT.ISMISSEDVISIT = 1  THEN ''Cancelled''
		--WHEN RE.VISITID IS NULL THEN ''Scheduled''
END AS SCHEDULE_STATUS_NAME,
CASE 
		WHEN VISIT.VISITDATE::DATE > GETDATE() THEN ''Future''
		WHEN VISIT.VISITDATE <=current_date AND VISIT.ISMISSEDVISIT =''0'' 
  	    AND (VISIT.VISITSTARTTIME IS NULL OR VISIT.VISITENDTIME  IS NULL ) THEN ''In Review''
	    WHEN VISIT.ISMISSEDVISIT = 1 AND VISIT.VISITDATE::DATE <= GETDATE() THEN ''Did not happen''
        WHEN VISIT.VISITDATE::DATE <= GETDATE() AND VISIT.ISMISSEDVISIT = 0 AND VISIT.VISITSTARTTIME IS NOT NULL
        AND VISIT."VISITENDTIME" IS NOT NULL THEN  ''Completed''
        ELSE NULL 
END AS VISIT_STATUS_NAME,
CASE 
	     WHEN UPPER(SC.SERVICECODE) ILIKE ANY (''%NON-BILLABLE%'' , ''%NON BILLABLE%'')OR VINFO.NONBILLABLE=TRUE  
	     THEN ''Not Billable''
	     WHEN VISIT.BILLED =0 THEN ''UnBIlled''
	     WHEN VISIT.BILLED = 1 AND NVL(INVOICE.VISITPAYMENTSTATUS,0) = ''0'' THEN ''Billed'' 
         WHEN INVOICE.VISITPAYMENTSTATUS IN (1,2) THEN ''Billed''
         ELSE NULL 
END AS INVOICE_STATUS_NAME,
--MD5(''OSHAH'' ||''-'' || SYSTEM_CODE ||''-'' || NVL(DERIVED_DISC_STATUS,''S'') || ''-'' || ''HHAEXCHANGE'') AS VISIT_STATUS_KEY
 MD5(''17'' || ''-'' || ''OSHAH'' || ''-'' || SYSTEM_CODE ||''-'' || NVL(SCHEDULE_STATUS_NAME,''S'')||NVL(VISIT_STATUS_NAME,''S'')||NVL(INVOICE_STATUS_NAME,''S'')) AS VISIT_STATUS_KEY
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.VISITINFO_REPL VINFO
JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.TBLVISITS_REPL VISIT
     ON VISIT.VISITID = VINFO.VISITID
     AND VISIT.AGENCYID = VINFO.AGENCYID
JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.VISITS VST 
	 ON VISIT.VISITID = VST.VISITID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.TBLINVOICEDETAILS_REPL INVOICE
     ON VINFO.VISITID = INVOICE.VISITID
     AND VINFO.PRIMARYSERVICECODEID = INVOICE.INVSERVICECODEID
JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.OFFICE_OFFICES_REPL  OFFICE
     ON OFFICE.OFFICEID = VINFO.OFFICEID
LEFT JOIN RESCHEDULED RE ON VINFO.VISITID=RE.VISITID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.SERVICECODES SC
    ON VINFO.PRIMARYSERVICECODEID=SC.SERVICECODEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.VISITUNBILLEDDETAILS IV
	 ON IV.VISITID=VINFO.VISITID
),

VISIT_EXCEPTIONS AS 
(
SELECT 
		V.VISITID AS VID,
		
CONCAT(''OSHAH - '',OFFICE.STATE) AS SYSTEM_CODE,
		17  AS SOURCE_SYSTEM_ID,
		V.VISITDATE::DATE AS SERVICE_DATE,
		UPPER(TRIM(CM.STATUS)) AS EXCEPTION_CODE,
		NULLIF(TRIM(CRN.REASON),'''') AS EXCEPTION_REASON,
		NULLIF(TRIM(CRN.ACTIONTAKENREASON),'''') AS EXCEPTION_RESOLUTION,
		MD5(''OSHAH'' || ''-'' || VID || ''-'' || UPPER(EXCEPTION_CODE) || ''-'' || ''HHAEXCHANGE'') AS VISIT_EXCEPTION_KEY,
		MD5(''OSHAH'' || ''-'' || VID || ''-'' || ''HHAEXCHANGE'') AS VISIT_KEY
FROM 	DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.CALLMAINTENANCE CM
INNER JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.VISITS V
	ON V.AIDEID  = CM.AIDEID
	AND V.VISITDATE = CAST(CM.CALLTIME AS DATE)
	AND V.AGENCYID = CM.AGENCYID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.OFFICE_OFFICES_REPL OFFICE 
	ON CM.OFFICEID = OFFICE.OFFICEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.CALENDARREASONNOTES CRN 
	ON CRN.AGENCYID = V.AGENCYID 
	AND CRN.VISITID = V.VISITID
GROUP BY V.VISITID, V.VISITDATE::DATE,OFFICE.STATE, CM.STATUS, CRN.REASON, CRN.ACTIONTAKENREASON, CRN.CREATEDDATE
QUALIFY ROW_NUMBER() OVER (PARTITION BY V.VISITID, CM.STATUS ORDER BY CRN.CREATEDDATE DESC) = 1
),
EXCEPTIONS_MAIN AS
(
SELECT * FROM VISIT_EXCEPTIONS VE
LEFT JOIN HAH.DIM_VISIT_EXCEPTION DVE 
	ON VE.EXCEPTION_CODE = DVE.EXCEPTION_CODE 
	AND VE.SOURCE_SYSTEM_ID = DVE.SOURCE_SYSTEM_ID 
	AND VE.SYSTEM_CODE = DVE.SYSTEM_CODE
ORDER BY 
	VE.SERVICE_DATE ASC
)
,LATEST_CHECK_NUMBER AS (
SELECT VISITID, FIRST_VALUE(CHECKNUMBER) OVER (PARTITION BY VISITID ORDER BY PAIDDATE DESC) AS CHECKNUMBER
,FIRST_VALUE(INVOICENUMBER) OVER (PARTITION BY VISITID ORDER BY PAIDDATE DESC) AS INVOICENUMBER
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.PAYMENTS
)
,
Latest_Visit_Auth AS  (
WITH cte AS (SELECT VISITID, 
PA.AUTHORIZATIONID,SRNO, --var.AUTHORIZATIONNUMBER, pa.MAXUNITSFORPERIOD ,p.ADMISSIONID,P.FIRSTNAME ,P.LASTNAME ,
MAX(srno) OVER (PARTITION BY visitid) AS max_srno
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.VISITAUTHORIZATIONS_REPL VAR
JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.PATIENTAUTHORIZATION PA ON PA.AUTHORIZATIONID = VAR.AUTHORIZATIONID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.PATIENTS P ON P.PATIENTID = VAR.PATIENTID 
WHERE NOT (var.AUTHORIZATIONNUMBER ILIKE ''%TEMP%'' AND pa.MAXUNITSFORPERIOD <900) --AND VISITID =''886639803''
)
SELECT DISTINCT VISITID ,AUTHORIZATIONID --, AUTHORIZATIONNUMBER ,MAXUNITSFORPERIOD, ADMISSIONID, FIRSTNAME, LASTNAME 
FROM CTE WHERE SRNO = max_srno
),
AUTO_CONFIRMED_VISITS AS (
SELECT UV.VISITID
FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.UNTOUCHEDVISITS UV
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.INREVIEWVISITS IV
ON UV.VISITID = IV.VISITID
WHERE IV.VISITID IS NULL
)
SELECT DISTINCT MD5(''OSHAH'' || VISIT.VISITID || ''-'' || ''HHAEXCHANGE'') AS VISIT_KEY
    	, TRY_TO_DATE(VISIT.VISITDATE::DATE) AS REPORT_DATE
    	, MD5(''OSHAH'' || ''-'' || NVL(OFFICE.OFFICEID,-1) || ''-'' || ''HHAEXCHANGE'') AS BRANCH_KEY
    	, MD5(''OSHAH'' || ''-'' || CLI.MASTER_ID::NUMBER || ''-'' || ''HHAEXCHANGE'' ) AS CLIENT_KEY
    	, MD5(''OSHAH'' || ''-'' || SC.CONTRACTID  || ''-'' || NVL(CR.CONTRACTRATEID,-1) || ''-'' || NVL(SC.SERVICECODEID,-1)|| ''-'' || ''HHAEXCHANGE'') AS CONTRACT_KEY
    	, MD5(''OSHAH'' || ''-'' || EMP.MASTER_ID || ''-'' || ''HHAEXCHANGE'')  AS SCHEDULED_EMPLOYEE_KEY --VISIT.CAREGIVERID GIVES ORPHAN
    	, MD5(''OSHAH'' || ''-'' || EMP.MASTER_ID || ''-'' || ''HHAEXCHANGE'') AS EMPLOYEE_KEY
    	, 17 AS SOURCE_SYSTEM_ID
        , MD5(''OSHAH'' || ''-'' || NVL(SUPERVISOR.COORDINATORID,-1) || ''-'' || ''HHAEXCHANGE'') AS SUPERVISOR_KEY
    	, MD5(''OSHAH'' || ''-'' || INVOICE.INVOICEHEADERID || ''-'' || ''HHAEXCHANGE'') AS INVOICE_KEY
    	, MD5(''OSHAH'' || ''-'' || PAYROLL.PAYROLLVISITID || ''-'' || ''HHAEXCHANGE'') AS PAYROLL_KEY
    	, MD5(''OSHAH'' || ''-'' || LVA.AUTHORIZATIONID || ''-'' || ''HHAEXCHANGE'') AS CLIENT_SERVICE_KEY
        , MD5(''OSHAH'' || ''-'' || IFNULL(SC.AGENCYID, -1) || ''-'' || IFNULL(PR.PAYERID, -1) || ''-'' || IFNULL(SC.CONTRACTID, -1) || ''-'' || IFNULL(SC.SERVICECODEID, -1) || ''-'' || IFNULL(SC.VISITTYPE, ''-1'') || ''-'' || IFNULL(SC.RATETYPETEXT, ''-1'') || ''-'' || ''HHAEXCHANGE'') AS PARTNER_CONTRACT_SERVICE_KEY
        , MD5(''OSHAH'' || ''-'' || SC.SERVICECODEID || ''-'' || ''HHAEXCHANGE'') AS BILLING_KEY
    	, TRY_TO_DATE(VISIT.VISITDATE::DATE) AS SERVICE_DATE
    	, PAYROLL.PAYROLLDATE::DATE AS PAYROLL_DATE
    	, UPPER(TRIM(OFFICE.OFFICENAME)) AS BRANCH_NAME
    	, CLI.PATIENTID AS CLIENT_NUMBER
    	, NVL(TO_VARCHAR(SC.CONTRACTID), ''UNKNOWN'') AS CONTRACT_CODE 
    	, VISIT.CAREGIVERID AS SCHEDULED_EMPLOYEE_ID
    	, EMP.MASTER_ID AS EMPLOYEE_ID
       
 , CONCAT(''OSHAH - '',OFFICE.STATE) AS SYSTEM_CODE
        , SUPERVISOR.COORDINATORID AS SUPERVISOR_CODE
        , LCN.INVOICENUMBER  AS INVOICE_ID
        , LCN.CHECKNUMBER AS CHEQUE_NUMBER
        , CASE WHEN ACV.VISITID IS NOT NULL THEN TRUE ELSE FALSE END AS CLEAN_SHIFT_FLAG
        , VSM.SCHEDULE_STATUS_CODE AS SCHEDULE_STATUS_CODE
        , VSM.SCHEDULE_STATUS_NAME AS SCHEDULE_STATUS_NAME
        , VSM.SCHEDULE_STATUS_DESCRIPTION AS SCHEDULE_STATUS_DESCRIPTION
        , VSM.VISIT_STATUS_CODE AS VISIT_STATUS_CODE
        , VSM.VISIT_STATUS_NAME AS VISIT_STATUS_NAME
        , VSM.VISIT_STATUS_DESCRIPTION AS VISIT_STATUS_DESCRIPTION
        , VSM.INVOICE_STATUS_CODE AS INVOICE_STATUS_CODE
        , VSM.INVOICE_STATUS_NAME AS INVOICE_STATUS_NAME
        , VSM.INVOICE_STATUS_DESCRIPTION AS INVOICE_STATUS_DESCRIPTION
        , VSM.PAYROLL_STATUS_CODE AS PAYROLL_STATUS_CODE
        , VSM.PAYROLL_STATUS_NAME AS PAYROLL_STATUS_NAME
        , VSM.PAYROLL_STATUS_DESCRIPTION AS PAYROLL_STATUS_DESCRIPTION
  		, NULL AS CANCEL_REASON_CODE 
		, NULL AS CANCEL_REASON_DESCRIPTION
        , NULL AS CANCEL_REASON_NOTES
        , CASE WHEN EM.VID IS NOT NULL
        	   THEN ''YES''
        	   ELSE ''NO''
          END AS EXCEPTION_REASON_INDICATOR   
        , NULL AS RESOLUTION_CODE
        , NULL AS RESOLUTION_DESCRIPTION
        , NULL AS REJECTION_CODE
        , NULL AS REJECTION_DESCRIPTION
        , SC.SERVICECODE AS BILL_CODE
        , INVOICE.BILLEDRATE AS BILL_RATE
        , INVOICE.BILLEDUNITS  AS BILL_UNITS_SERVED
        , SC.RATETYPETEXT AS BILL_UNIT_TYPE  --HOURLY,VISIT,DAILY
        , NULL AS OVERHEAD_RATE
        , VISIT.SCHEDULEDSTARTTIME AS SCHEDULE_TIMEIN   
        , VISIT.SCHEDULEDENDTIME AS SCHEDULE_TIMEOUT
        , COALESCE(DATEDIFF(MINUTE,VISIT.SCHEDULEDSTARTTIME, VISIT.SCHEDULEDENDTIME)/60.0,0) AS SCHEDULE_DURATION
        , VISIT.VISITSTARTTIME AS ACTUAL_TIMEIN
        , VISIT.VISITENDTIME AS ACTUAL_TIMEOUT
        , COALESCE(DATEDIFF(MINUTE,VISIT.VISITSTARTTIME, VISIT.VISITENDTIME)/60.0,0) AS ACTUAL_DURATION
        , NULL AS ADJUSTED_TIMEIN
        , NULL AS ADJUSTED_TIMEOUT
        , NULL AS ADJUSTED_DURATION
        , CASE WHEN VISIT.DELETED = FALSE AND VISIT.ISMISSEDVISIT = FALSE 
	           AND  VISIT.VISITSTARTTIME IS NOT NULL AND VISIT.VISITENDTIME IS NOT NULL
	           AND (DATEDIFF(MINUTE,VISIT.VISITSTARTTIME, VISIT.VISITENDTIME)/60) > 0
	   		   THEN ROUND(DATEDIFF(MINUTE,VISIT.VISITSTARTTIME, VISIT.VISITENDTIME)/60,2)
	   		   ELSE 0
   		  END AS HOURS_SERVED
        , VINFO.COMMENTS  AS COMMENTS
  		, CASE 
  			WHEN VINFO.IVRCALLIN IS NOT NULL AND VINFO.IVRCALLOUT IS NOT NULL 
  			AND (VISIT.ISMISSEDVISIT != 1 OR VST.MISSEDVISIT = ''N'')
  			THEN ''Y''
  			ELSE ''N''
  		  END AS IS_EVV_FLAG
        , NULL AS TIMESHEET_TYPE
        , NULL AS TRACKING_ID
         -- ETL FIELDS
		, :STR_ETL_TASK_KEY AS ETL_TASK_KEY
		, :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY  
        , CONVERT_TIMEZONE(''UTC'',CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
        , CURRENT_USER AS ETL_INSERTED_BY
        , CONVERT_TIMEZONE(''UTC'',CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
        , CURRENT_USER AS ETL_LAST_UPDATED_BY
        , 0 AS ETL_DELETED_FLAG
        , VSM.CONFIRMED_FLAG AS CONFIRMED_FLAG
FROM 		DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.VISITINFO_REPL VINFO
JOIN 		DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.TBLVISITS_REPL VISIT
	 		ON VINFO.VISITID = VISIT.VISITID
JOIN  		DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.VISITS VST
	 		ON VST.VISITID =VISIT.VISITID 
JOIN 		CLIENT CLI 
			ON CLI.PATIENTID=VISIT.PATIENTID
JOIN 		EMPLOYEE EMP 
	 		ON EMP.CAREGIVERID=VISIT.CAREGIVERID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.PATIENTS P ON P.PATIENTID = CLI.PATIENTID
JOIN   		SUPERVISORS SUPERVISOR 
	 		ON CLI.PATIENTID  =SUPERVISOR.PATIENTID
LEFT JOIN 	DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.OFFICE_OFFICES_REPL OFFICE 
	 		ON VINFO.OFFICEID = OFFICE.OFFICEID
LEFT JOIN 	DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.SERVICECODES SC
	 		ON VINFO.PRIMARYSERVICECODEID = SC.SERVICECODEID
LEFT JOIN 	DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.TBLINVOICEDETAILS_REPL INVOICE
			ON VISIT.VISITID = INVOICE.VISITID
LEFT JOIN   DERIVED_STATUS DS 
			ON DS.VISITID=VINFO.VISITID
LEFT JOIN   DW_${var.SF_ENVIRONMENT}."STAGE".OSHAH_DIM_VISIT_STATUS_MAPPING VSM 
			ON DS.VISIT_STATUS_KEY=VSM.VISIT_STATUS_KEY
LEFT JOIN 	DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.PAYROLL_VISITS_REPL PAYROLL 
			ON VISIT.VISITID = PAYROLL.VISITID
LEFT JOIN 	DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.CONTRACTS CONTRACT
			ON SC.CONTRACTID = CONTRACT.CONTRACTID
LEFT JOIN 	DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.CONTRACTRATES CR 	
			ON SC.SERVICECODEID  = CR.SERVICECODEID
			AND CONTRACT.CONTRACTID = CR.CONTRACTID
			AND CR.AGENCYID = SC.AGENCYID
    		AND CR.TODATE :: DATE > GETDATE()
    		AND CR.FROMDATE :: DATE <= GETDATE()
LEFT JOIN   LATEST_CHECK_NUMBER LCN 
			ON LCN.VISITID=VISIT.VISITID
LEFT JOIN   EXCEPTIONS_MAIN EM
			ON EM.VID=VISIT.VISITID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.PAYER_REPL PR
			ON IFNULL(PR.CONTRACTID,PR.PAYERID) = SC.CONTRACTID
LEFT JOIN Latest_Visit_Auth LVA ON LVA.VISITID = VISIT.VISITID
LEFT JOIN AUTO_CONFIRMED_VISITS ACV ON ACV.VISITID = VISIT.VISITID
WHERE OFFICE.STATE IN (SELECT STATE FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEOSHAH.CONFIGURATION WHERE CONFIG = TRUE)
AND VINFO.PRIMARYSERVICECODEID IS NOT NULL;

RETURN ''SUCCESS'';
END;

 EOT
}

