resource "snowflake_procedure" "DW_HAH_GET_STAGE_PAYLOCITY_DIM_EMPLOYEE" {
	name ="GET_STAGE_PAYLOCITY_DIM_EMPLOYEE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT


BEGIN

--*****************************************************************************************************************************
-- NAME: PAYLOCITY_DIM_EMPLOYEE
--
-- PURPOSE: Creates one row per employee_id/database according to Paylocity
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------        
-- 02/24/23    Aditya Shukla		 Added Salary and Rates
-- 05/19/23		Aditya Shukla		Excluded Adaptive Hospice Inc (33978)
-- 09/01/23    Meet Dalwadi         Updated Logic for EMPLOYEE_CATEGORY
-- 11/10/23	   Deepen Gajjar    	Added a logic for HISPANIC_OR_LATINO and update the logic for ethnicity as per ticket - IDDOX- 388.
-- 12/13/23		Saurav Purohit		Added ACQUIRED_SYSTEM field														
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.PAYLOCITY_DIM_EMPLOYEE

WITH EMPLOYEE_CHECK_DATE AS (
	SELECT COMPANYID,EMPLOYEEID AS EMPLOYEE_ID,MIN(CHECKDATE) AS FIRST_CHECK_DATE,MAX(CHECKDATE) AS LAST_CHECK_DATE
	FROM 
	DISC_${var.SF_ENVIRONMENT}.PAYLOCITY.PAY_STATEMENT_SUMMARY
	GROUP BY COMPANYID,EMPLOYEEID
)
SELECT DISTINCT
	MD5(ED.COMPANYID || ''-'' || TRIM(ED.MASTER_ID) || ''-'' || ''PAYLOCITY'') AS EMPLOYEE_KEY,
	TRIM(ED.EMPLOYEEID)  AS EMPLOYEE_ID,
	ED.COMPANYID AS SYSTEM_CODE
	,10 AS SOURCE_SYSTEM_ID ,
	CASE WHEN 
		TRIM(REGEXP_REPLACE(ED.SSN,''\\\\-|\\\\(|\\\\)|\\\\ '','''')) NOT IN (SELECT SSN FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_SSN) 
		AND TRIM(REGEXP_REPLACE(ED.SSN,''\\\\-|\\\\(|\\\\)|\\\\ '','''')) NOT LIKE ''00000%'' 
		AND LENGTH(TRIM(REGEXP_REPLACE(ED.SSN,''\\\\-|\\\\(|\\\\)|\\\\ '','''')))=9 
		THEN HEX_ENCODE(TRIM(REGEXP_REPLACE(ED.SSN,''\\\\-|\\\\(|\\\\)|\\\\ '','''')))
	END AS EMPLOYEE_PID,
	TRY_CAST(ED.EMPLOYEEID AS NUMBER) AS EMPLOYEE_NUMBER,
	TO_DATE(ED.BIRTHDATE::DATE) AS EMPLOYEE_DOB,
	NULL AS EMPLOYEE_DATE_OF_DEATH,
	TO_DATE(ED.STATUS_HIREDATE) AS EMPLOYEE_HIRE_DATE,
	TO_DATE(ED.STATUS_REHIREDATE) AS EMPLOYEE_REHIRE_DATE,
	TO_DATE(ED.BENEFITSETUP_BENEFITCLASSEFFECTIVEDATE ) AS EMPLOYEE_BENEFIT_START_DATE ,
	ECD.FIRST_CHECK_DATE AS EMPLOYEE_FIRST_CHECK_DATE,
	ECD.LAST_CHECK_DATE AS EMPLOYEE_LAST_CHECK_DATE,
	TO_DATE(ED.STATUS_TERMINATIONDATE) AS EMPLOYEE_LAST_WORKED_DATE,
	TO_DATE(ED.STATUS_TERMINATIONDATE) AS EMPLOYEE_TERMINATE_DATE,
	NULL AS REASON_TO_TERMINATE,--
	CASE WHEN ED.STATUS_STATUSTYPE = ''T'' THEN FALSE ELSE TRUE END AS ACTIVE_EMPLOYEE_FLAG,
	NULL AS ABLE_TO_REHIRE_FLAG,
	NULL AS EMPLOYEE_PREFIX ,
	UPPER( TRIM(ED.FIRSTNAME)) AS EMPLOYEE_FIRST_NAME,
	UPPER( TRIM(ED.MIDDLENAME)) AS EMPLOYEE_MIDDLE_NAME,
	UPPER( TRIM(ED.LASTNAME )) AS EMPLOYEE_LAST_NAME,
	ED.SUFFIX AS Employee_Suffix,
	CASE WHEN ED.HOMEADDRESS_ADDRESS1 <> '''' AND ED.HOMEADDRESS_ADDRESS1 IS NOT NULL THEN UPPER( TRIM(ED.HOMEADDRESS_ADDRESS1))
	ELSE NULL END AS Employee_Address1,
	UPPER( TRIM(ED.HOMEADDRESS_ADDRESS2)) AS Employee_Address2,
	CASE WHEN ED.HOMEADDRESS_CITY <> '''' AND ED.HOMEADDRESS_CITY IS NOT NULL THEN UPPER(TRIM(ED.HOMEADDRESS_CITY)) ELSE NULL END AS Employee_City,
	ED.HOMEADDRESS_STATE AS EMPLOYEE_STATE_CODE,
	ED.HOMEADDRESS_POSTALCODE AS Employee_Zip,
	CASE WHEN LENGTH(TRIM(REGEXP_REPLACE(ED.HOMEADDRESS_MOBILEPHONE,''\\\\-|\\\\(|\\\\)|\\\\ '','''')))=10 THEN TRIM(REGEXP_REPLACE(ED.HOMEADDRESS_MOBILEPHONE,''\\\\-|\\\\(|\\\\)|\\\\ '',''''))
	ELSE NULL END AS Employee_Home_Phone,
	CASE WHEN LENGTH(TRIM(REGEXP_REPLACE(ED.HOMEADDRESS_PHONE,''\\\\-|\\\\(|\\\\)|\\\\ '','''')))=10 THEN TRIM(REGEXP_REPLACE(ED.HOMEADDRESS_PHONE,''\\\\-|\\\\(|\\\\)|\\\\ '',''''))
	ELSE NULL END AS Employee_Cell_Phone,
	ED.WORKADDRESS_MOBILEPHONE AS Employee_Work_Phone
	,ED.HOMEADDRESS_EMAILADDRESS AS Employee_Personal_Email
	,ED.WORKADDRESS_EMAILADDRESS AS Employee_Work_Email
	,NULL AS Linked_In_Profile_URL
	,CASE WHEN UPPER( TRIM(ED.GENDER)) = ''M'' THEN ''MALE''
	WHEN UPPER( TRIM(ED.GENDER)) = ''F'' THEN ''FEMALE'' ELSE NULL END AS Employee_Gender,
	CASE WHEN ED.ETHNICITY=''B'' THEN UPPER(''BLACK OR AFRICAN AMERICAN'')
	WHEN ED.ETHNICITY=''W'' THEN UPPER(''White'')
	WHEN ED.ETHNICITY=''U'' THEN UPPER(''Unknown'')
	WHEN ED.ETHNICITY=''A'' THEN UPPER(''Asian'')
	--WHEN ED.ETHNICITY=''H'' THEN UPPER(''Hispanic or Latino'')
	WHEN ED.ETHNICITY=''N'' THEN UPPER(''Native Hawaiian or Other Pacific Islander'')
	WHEN ED.ETHNICITY=''T'' THEN UPPER(''Two or more'')
	WHEN ED.ETHNICITY=''I'' THEN UPPER(''American Indian or Alaska Native'')
	ELSE NULL END AS Employee_Ethnicity,--
	IFF(TRIM(ED.ETHNICITY) = ''H'', TRUE, FALSE) AS HISPANIC_OR_LATINO,
	NULL AS EMPLOYEE_LANGUAGE
	,CASE WHEN TRIM(UPPER(ED.MARITALSTATUS))=''S'' THEN ''Single''
	WHEN TRIM(UPPER(ED.MARITALSTATUS))=''M'' THEN ''Married''
	WHEN TRIM(UPPER(ED.MARITALSTATUS))=''W'' THEN ''Widowed''
	WHEN TRIM(UPPER(ED.MARITALSTATUS))=''D'' THEN ''DIVORCED''ELSE NULL
	END AS EMPLOYEE_MARITAL_STATUS
	,NULL AS EMPLOYEE_TYPE
	,CASE UPPER(ED.DEPARTMENTPOSITION_COSTCENTER2)
    WHEN ''111'' THEN ''FIELD''
	WHEN ''888'' THEN ''CORP''
	WHEN ''999'' THEN ''ADMIN''
	WHEN ''CS'' THEN ''ADMIN''
	WHEN ''NURSES'' THEN ''ADMIN''
	WHEN ''EXEC'' THEN ''CORP''
	WHEN ''PS'' THEN ''ADMIN''
	ELSE NULL END AS EMPLOYEE_CATEGORY
	,NULL AS EXEMPT_FLAG
	,ED.DEPARTMENTPOSITION_JOBTITLE AS JOB_TITLE
	,NULL AS JOB_DESCRIPTION
	,NULL AS CLASS_ID
	,NULL AS WORKERS_COMP
	,TRIM(ED.EMPLOYEEID) AS PAYROLL_ID
	,NULL AS PERCENT_401K_DEDUCTION
	,NULL AS AMOUNT_401K_DEDUCTION
	,NULL AS JAZZHR_APPLICANT_ID
	,NULL AS JAZZHR_USER_ID
	,NULL AS JAZZHR_CONTACT_ID
	,ED.WORKADDRESS_STATE AS WORK_STATE
	,ED.WORKADDRESS_STATE AS SUTA_STATE
	,NULL AS EMPLOYEE_DEPARTMENT,
	BRANCH.OFFICE_CODE AS EMPLOYEE_OFFICE_CODE,
	BRANCH.BRANCH_KEY AS PRIMARY_BRANCH_KEY,
	BRANCH.OFFICE_STATE_CODE AS PRIMARY_BRANCH_STATE,
	NVL(BRANCH.BRANCH_NAME,''Unknown (''||TRIM(ED.DEPARTMENTPOSITION_COSTCENTER1)||'')'') AS PRIMARY_BRANCH_NAME,
	BRANCH.SYSTEM_CODE AS PRIMARY_BRANCH_SYSTEM_CODE,
	NULL AS CASE_MANAGER_FLAG,
	NULL AS SUPERVISOR_FLAG,
	NULL AS COORDINATOR_FLAG,
	HEX_ENCODE(TRIM(EMP_D.PRIMARYPAYRATE_BASERATE)) AS SALARY, 
	HEX_ENCODE(TRIM(EMP_D.PRIMARYPAYRATE_ANNUALSALARY)) AS PAY_RATE,
	TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
	TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
	NULL AS MDM_DIM_EMPLOYEE_KEY,
			-1 AS ETL_TASK_KEY,
			-1 AS ETL_INSERTED_TASK_KEY,
			CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	0 AS ETL_DELETED_FLAG,
	0 AS ETL_INFERRED_MEMBER_FLAG,
	''ADAPTIVE'' AS ACQUIRED_SYSTEM
FROM  DISC_DEDUPE_${var.SF_ENVIRONMENT}.PAYLOCITY.EMPLOYEE_MASTER_LIST AS ED 
LEFT JOIN HAH.DIM_BRANCH AS BRANCH 
	ON MD5(ED.COMPANYID || ''-'' || TRIM(ED.DEPARTMENTPOSITION_COSTCENTER1) || ''-'' ||''PAYLOCITY'')=BRANCH.BRANCH_KEY
LEFT JOIN EMPLOYEE_CHECK_DATE ECD 
	ON ED.EMPLOYEEID = ECD.EMPLOYEE_ID 
	AND ED.COMPANYID = ECD.COMPANYID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.PAYLOCITY.EMPLOYEE_DETAILS EMP_D
	ON TRIM(EMP_D.EMPLOYEEID) = TRIM(ED.EMPLOYEEID)
	AND TRIM(EMP_D.COMPANYID) = TRIM(ED.COMPANYID)
WHERE ED.COMPANYID NOT IN (''33978'');
	
RETURN ''Success'';

END;

 EOT
}

