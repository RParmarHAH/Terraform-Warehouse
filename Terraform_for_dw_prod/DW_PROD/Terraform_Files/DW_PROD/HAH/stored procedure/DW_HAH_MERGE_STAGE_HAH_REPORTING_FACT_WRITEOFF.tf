resource "snowflake_procedure" "DW_HAH_MERGE_STAGE_HAH_REPORTING_FACT_WRITEOFF" {
	name ="MERGE_STAGE_HAH_REPORTING_FACT_WRITEOFF"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
  RETURN_RESULT VARCHAR(1000);
BEGIN
    MERGE INTO HAH.FACT_WRITEOFF TGT 
USING STAGE.HAH_REPORTING_FACT_WRITEOFF STAGE 
ON TGT.WRITEOFF_KEY = STAGE.WRITEOFF_KEY
WHEN MATCHED THEN 
UPDATE SET 
    TGT.REPORT_DATE= STAGE.REPORT_DATE
   ,TGT.BRANCH_KEY= STAGE.BRANCH_KEY
   ,TGT.CLIENT_KEY= STAGE.CLIENT_KEY
   ,TGT.CONTRACT_KEY= STAGE.CONTRACT_KEY
   ,TGT.SOURCE_SYSTEM_ID= STAGE.SOURCE_SYSTEM_ID
   ,TGT.PERIOD_DATE= STAGE.PERIOD_DATE
   ,TGT.WRITEOFF_DATE= STAGE.WRITEOFF_DATE
   ,TGT.BRANCH_NAME= STAGE.BRANCH_NAME
   ,TGT.CLIENT_NUMBER= STAGE.CLIENT_NUMBER
   ,TGT.CONTRACT_CODE= STAGE.CONTRACT_CODE
   ,TGT.SYSTEM_CODE= STAGE.SYSTEM_CODE
   ,TGT.SERVICE_AREA= STAGE.SERVICE_AREA
   ,TGT.WRITEOFF_TYPE= STAGE.WRITEOFF_TYPE
   ,TGT.WRITEOFF_REASON_CODE= STAGE.WRITEOFF_REASON_CODE
   ,TGT.WRITEOFF_REASON_DESCRIPTION= STAGE.WRITEOFF_REASON_DESCRIPTION
   ,TGT.WRITEOFF_AMOUNT= STAGE.WRITEOFF_AMOUNT
   ,TGT.ETL_TASK_KEY= STAGE.ETL_TASK_KEY
   ,TGT.ETL_LAST_UPDATED_DATE= STAGE.ETL_LAST_UPDATED_DATE
   ,TGT.ETL_LAST_UPDATED_BY= STAGE.ETL_LAST_UPDATED_BY
   ,TGT.ETL_DELETED_FLAG= STAGE.ETL_DELETED_FLAG
WHEN NOT MATCHED THEN 
INSERT ( 
    WRITEOFF_KEY
   ,REPORT_DATE
   ,BRANCH_KEY
   ,CLIENT_KEY
   ,CONTRACT_KEY
   ,SOURCE_SYSTEM_ID
   ,PERIOD_DATE
   ,WRITEOFF_DATE
   ,BRANCH_NAME
   ,CLIENT_NUMBER
   ,CONTRACT_CODE
   ,SYSTEM_CODE
   ,SERVICE_AREA
   ,WRITEOFF_TYPE
   ,WRITEOFF_REASON_CODE
   ,WRITEOFF_REASON_DESCRIPTION
   ,WRITEOFF_AMOUNT
   ,ETL_TASK_KEY
   ,ETL_INSERTED_TASK_KEY
   ,ETL_INSERTED_DATE
   ,ETL_INSERTED_BY
   ,ETL_LAST_UPDATED_DATE
   ,ETL_LAST_UPDATED_BY
   ,ETL_DELETED_FLAG
) 
VALUES (
    STAGE.WRITEOFF_KEY
   ,STAGE.REPORT_DATE
   ,STAGE.BRANCH_KEY
   ,STAGE.CLIENT_KEY
   ,STAGE.CONTRACT_KEY
   ,STAGE.SOURCE_SYSTEM_ID
   ,STAGE.PERIOD_DATE
   ,STAGE.WRITEOFF_DATE
   ,STAGE.BRANCH_NAME
   ,STAGE.CLIENT_NUMBER
   ,STAGE.CONTRACT_CODE
   ,STAGE.SYSTEM_CODE
   ,STAGE.SERVICE_AREA
   ,STAGE.WRITEOFF_TYPE
   ,STAGE.WRITEOFF_REASON_CODE
   ,STAGE.WRITEOFF_REASON_DESCRIPTION
   ,STAGE.WRITEOFF_AMOUNT
   ,STAGE.ETL_TASK_KEY
   ,STAGE.ETL_INSERTED_TASK_KEY
   ,STAGE.ETL_INSERTED_DATE
   ,STAGE.ETL_INSERTED_BY
   ,STAGE.ETL_LAST_UPDATED_DATE
   ,STAGE.ETL_LAST_UPDATED_BY
   ,STAGE.ETL_DELETED_FLAG
);
SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted & '',"number of rows updated",'' Rows Updated. '') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
	RETURN return_result;
END;
    
 EOT
}

