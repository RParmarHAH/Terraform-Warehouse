resource "snowflake_procedure" "DW_HAH_GET_STAGE_WORKDAY_DIM_APPLICANT" {
	name ="GET_STAGE_WORKDAY_DIM_APPLICANT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE 
	RETURN_RESULT VARCHAR(1000);
BEGIN
-------------------------------------------------------------------------------------------------------------------------------
/*
Object Type : 	Procedure
Object Name	: 	GET_STAGE_WORKDAY_DIM_APPLICANT
Author		:	Abhishek Sunil
Description :
	- This procedure populates the applicants available in Workday
	- Contains the employees who have not been preboarded
*/

--*****************************************************************************************************************************
-- CHANGE LOG :
-- Version	Date(MM/DD/YYYY)	Author				Change Description
-- --------	----------------   	------------------	---------------------------------------------------------------------------
-- 1.0		09/13/2023    		Harshala Kadam		Initial Development
-- 1.1		09/29/2023			Abhishek Sunil		Optimized and Revised code
-- 1.2		10/06/2023			Abhishek Sunil		Converted into incremental procedure
-- 1.3		10/23/2023			Abhishek Sunil		Added a condition to exclude duplicate employees
--													Categorized OTHER ethnicities as UNKNOWN
-- 1.4      10/30/2023          Jainam Shah         Added logic to exclude Employees which are in Rescinded Hire file.
-------------------------------------------------------------------------------------------------------------------------------	

INSERT OVERWRITE INTO STAGE.WORKDAY_DIM_APPLICANT

WITH ID_DATA AS ( -- 35,876
	SELECT
		EMPLOYEE_ID,
		MAX(CASE WHEN ID_TYPE = ''USA-SSN'' THEN ID END) AS SSN,
		MAX(CASE WHEN ID_TYPE = ''Drivers_License'' THEN ID END) AS DL,
		MAX(ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE 
	FROM
		DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_IDENTIFICATION_DATA
	GROUP BY EMPLOYEE_ID
)
, NAME_DATA AS (
	SELECT
		EMPLOYEE_ID,
		NULLIF(TRIM(UPPER(FIRST_NAME)),'''') AS FIRST_NAME,
		NULLIF(TRIM(UPPER(MIDDLE_NAME)),'''') AS MIDDLE_NAME,
		NULLIF(TRIM(UPPER(LAST_NAME)),'''') AS LAST_NAME,
		NULLIF(TRIM(UPPER(TITLE)),'''') AS TITLE,
		NULLIF(TRIM(UPPER(SOCIAL_SUFFIX)),'''') AS SOCIAL_SUFFIX,
		MAX(ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
	FROM
		DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_NAME_DATA
	WHERE NAME_TYPE = ''Legal''
	GROUP BY
		EMPLOYEE_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, TITLE, SOCIAL_SUFFIX
)
, EMAIL_DATA AS (
	SELECT
		EMPLOYEE_ID,
		MAX(CASE WHEN EMAIL_TYPE = ''HOME'' THEN EMAIL_ADDRESS END) AS HOME_EMAIL_ADDRESS,
		MAX(CASE WHEN EMAIL_TYPE = ''WORK'' THEN EMAIL_ADDRESS END) AS WORK_EMAIL_ADDRESS,
		MAX(ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
	FROM
		(
			SELECT 
				EMPLOYEE_ID,
				NULLIF(UPPER(TRIM(EMAIL_TYPE)),'''') AS EMAIL_TYPE,
				NULLIF(UPPER(TRIM(EMAIL_ADDRESS)),'''') AS EMAIL_ADDRESS,
				ETL_LAST_UPDATED_DATE
			FROM DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_EMAIL_DATA
			WHERE IS_PRIMARY = TRUE
		)
	GROUP BY 
		EMPLOYEE_ID
)
, HOME_ADDRESS_DATA AS (
	SELECT
		WAD.EMPLOYEE_ID,
		NULLIF(UPPER(TRIM(WAD.ADDRESS_LINE_DATA)),'''') AS ADDRESS_LINE_1,
		NULLIF(UPPER(TRIM(WAD.ADDRESS_LINE_DATA_2)),'''') AS ADDRESS_LINE_2,
		NULLIF(UPPER(TRIM(WAD.MUNICIPALITY)),'''') AS CITY,
		NULLIF(UPPER(TRIM(WAD.REGION)),'''') AS STATE,
		SC.STATE_ISO_CODE,
		NULLIF(UPPER(TRIM(WAD.POSTAL_CODE)),'''') AS ZIP,
		MAX(ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
	FROM
		DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_ADDRESS_DATA WAD
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_STATE SC 
		ON NULLIF(TRIM(UPPER(WAD.REGION)),'''') = UPPER(SC.STATE_NAME)
	WHERE WAD.ADDRESS_TYPE = ''HOME'' AND WAD.IS_PRIMARY = TRUE
	GROUP BY
		WAD.EMPLOYEE_ID, WAD.ADDRESS_LINE_DATA, WAD.ADDRESS_LINE_DATA_2, WAD.MUNICIPALITY, WAD.REGION, SC.STATE_ISO_CODE, WAD.POSTAL_CODE
)
, PHONE_DATA AS (
	SELECT
		EMPLOYEE_ID,
		MAX(CASE WHEN PHONE_TYPE = ''HOME'' THEN PHONE_TYPE END) AS HOME_PHONE_TYPE,
		MAX(CASE WHEN PHONE_TYPE = ''HOME'' THEN PHONE_${var.SF_ENVIRONMENT}ICE_TYPE END) AS HOME_PHONE_${var.SF_ENVIRONMENT}ICE_TYPE,
		MAX(CASE WHEN PHONE_TYPE = ''HOME'' THEN PHONE_AREA_CODE END) AS HOME_PHONE_AREA_CODE,
		MAX(CASE WHEN PHONE_TYPE = ''HOME'' THEN PHONE_NUMBER END) AS HOME_PHONE_NUMBER,
		MAX(CASE WHEN PHONE_TYPE = ''WORK'' THEN PHONE_TYPE END) AS WORK_PHONE_TYPE,
		MAX(CASE WHEN PHONE_TYPE = ''WORK'' THEN PHONE_${var.SF_ENVIRONMENT}ICE_TYPE END) AS WORK_PHONE_${var.SF_ENVIRONMENT}ICE_TYPE,
		MAX(CASE WHEN PHONE_TYPE = ''WORK'' THEN PHONE_AREA_CODE END) AS WORK_PHONE_AREA_CODE,
		MAX(CASE WHEN PHONE_TYPE = ''WORK'' THEN PHONE_NUMBER END) AS WORK_PHONE_NUMBER,
		MAX(ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
	FROM
		(
			SELECT 
				EMPLOYEE_ID,
				NULLIF(UPPER(TRIM(PHONE_TYPE)),'''') AS PHONE_TYPE,
				NULLIF(UPPER(TRIM(PHONE_${var.SF_ENVIRONMENT}ICE_TYPE)),'''') AS PHONE_${var.SF_ENVIRONMENT}ICE_TYPE,
				NULLIF(TRIM(PHONE_AREA_CODE),'''') AS PHONE_AREA_CODE,
				NULLIF(TRIM(PHONE_NUMBER),'''') AS PHONE_NUMBER,
				ETL_LAST_UPDATED_DATE
			FROM DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_PHONE_DATA
			WHERE IS_PRIMARY = TRUE
		)
	GROUP BY EMPLOYEE_ID
)
, EMPLOYEE_ORG_DATA AS (
    SELECT
        S.EMPLOYEE_ID,
        MAX(CASE WHEN OD.ORG_TYPE = ''Company_Hierarchy'' AND OD.ORG_SUBTYPE = ''Company Hierarchy'' THEN UPPER(TRIM(OD.ORG_NAME)) END) AS PAYROLL_SYSTEM,
        MAX(CASE WHEN OD.ORG_TYPE = ''Location_Hierarchy'' AND OD.ORG_SUBTYPE = ''Geographic_Division'' THEN UPPER(TRIM(OD.ORG_NAME)) END) AS "LOCATION",
        MAX(CASE WHEN OD.ORG_TYPE = ''Cost_Center'' AND OD.ORG_SUBTYPE = ''Cost Center'' THEN UPPER(TRIM(OD.ORG)) END) AS EMP_DEP,
        MAX(OD.ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
    FROM DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_SUMMARY S
    LEFT JOIN 
    	(
	    	SELECT
	    		EMPLOYEE_ID,
	    		NULLIF(UPPER(TRIM(ORGANIZATION)),'''') AS ORG,
				NULLIF(UPPER(TRIM(ORGANIZATION_NAME)),'''') AS ORG_NAME,
				ORGANIZATION_TYPE AS ORG_TYPE,
				ORGANIZATION_SUBTYPE AS ORG_SUBTYPE,
				ETL_LAST_UPDATED_DATE
	    	FROM DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_ORGANIZATION_DATA
    	) OD
        ON OD.EMPLOYEE_ID = S.EMPLOYEE_ID
    WHERE
        (OD.ORG_TYPE = ''Company_Hierarchy'' AND OD.ORG_SUBTYPE = ''Company Hierarchy'')
        OR (OD.ORG_TYPE = ''Location_Hierarchy'' AND OD.ORG_SUBTYPE = ''Geographic_Division'')
        OR (OD.ORG_TYPE = ''Cost_Center'' AND OD.ORG_SUBTYPE = ''Cost Center'')
    GROUP BY S.EMPLOYEE_ID
)
, HIST_APPLICANTS AS (
	SELECT
		DISTINCT EMPLOYEE_ID 
	FROM
		DISC_${var.SF_ENVIRONMENT}.WORKDAY.HIST_WORKER_ADDITIONAL_INFORMATION AD
	WHERE (TRIM(AD.PRE_BOARDING_COMPLETION)::BOOLEAN = 0 OR TRIM(AD.PRE_BOARDING_COMPLETION)::BOOLEAN IS NULL)
)
SELECT
	MD5(''WORKDAY'' || '' - '' || EM.EMPLOYEE_ID || '' - '' || ''WORKDAY'') AS APPLICANT_KEY,
	36 AS SOURCE_SYSTEM_ID,
	''WORKDAY'' AS SYSTEM_CODE,
	NULLIF(TRIM(UPPER(NM.LAST_NAME)),'''') AS LAST_NAME,
	NULLIF(TRIM(UPPER(NM.FIRST_NAME)),'''') AS FIRST_NAME,
	NULLIF(TRIM(UPPER(NM.MIDDLE_NAME)),'''') AS MIDDLE_NAME,
	EM.EMPLOYEE_ID AS APPLICANT_ID,
	HEX_ENCODE(TRIM(ID.SSN)) AS SSN,
	ED.HOME_EMAIL_ADDRESS AS EMAIL,
	CASE
		WHEN PD.HOME_PHONE_${var.SF_ENVIRONMENT}ICE_TYPE = ''MOBILE'' OR PD.WORK_PHONE_${var.SF_ENVIRONMENT}ICE_TYPE = ''Mobile'' 
			THEN NVL(
					NVL(CONCAT(PD.HOME_PHONE_AREA_CODE ,PD.HOME_PHONE_NUMBER),PD.HOME_PHONE_NUMBER),
					NVL(CONCAT(PD.WORK_PHONE_AREA_CODE ,PD.WORK_PHONE_NUMBER),PD.WORK_PHONE_NUMBER)
					)
	END AS MOBILE_PHONE,
	CASE
		WHEN PD.HOME_PHONE_${var.SF_ENVIRONMENT}ICE_TYPE = ''LANDLINE'' 
			THEN NVL(CONCAT(PD.HOME_PHONE_AREA_CODE, PD.HOME_PHONE_NUMBER),PD.HOME_PHONE_NUMBER)
	END AS HOME_PHONE,
	PER.BIRTH_DATE AS DATE_OF_BIRTH,
	HOME_AD.ADDRESS_LINE_1 AS ADDRESS,
	HOME_AD.ADDRESS_LINE_2 AS ADDRESS_LINE_2,
	HOME_AD.CITY AS CITY,
	HOME_AD.STATE AS STATE,
	HOME_AD.STATE_ISO_CODE AS STATE_CODE,
	HOME_AD.ZIP AS POSTAL,
	NULL AS REFERRER,
	NULL AS CATEGORIES,
	NULL AS REFERENCES,
	NULL AS LINKEDIN,
	NULL AS WEBSITE_BLOG_PORTFOLIO,
	NULL AS TWITTER,
	NULL AS EARLIEST_START_DATE,
	NULL AS AVAILABLE_WEEKENDS,
	NULL AS AVAILABLE_EVENINGS,
	NULL AS AVAILABLE_OVERTIME,
	NULL AS LANGUAGES,
	TRIM(ID.DL) AS DRIVERS_LICENSE,
	NULL AS COMMERCIAL_DRIVERS_LICENSE,
	NULL AS CAN_RELOCATE,
	NULL AS CITIZEN_EMPLOYMENT_STATUS,
	NULL AS HIGHEST_EDUCATION,
	NULL AS COLLEGE_UNIVERSITY,
	NULL AS GRADE_POINT_AVG,
	CASE 
        WHEN TIMESTAMPDIFF(year, PER.BIRTH_DATE, CURRENT_DATE())>=18 THEN ''YES''
        ELSE ''NO''
    END as AGE_18,
	NULL AS PILOT_FLIGHT_HOURS,
	NULL AS PILOT_GRADE_RATINGS,
	NULL AS FELONY_CONVICTION,
	NULL AS FELONY_EXPLANATION,
	NULL AS EEO_CATEGORY,
	UPPER(TRIM(PER.GENDER)) AS EEO_SEX,
	NULL AS EEO_RACE,
	CASE ETHNICITY
		WHEN ''Hispanic or Latino'' THEN ''HISPANIC OR LATINO''
		WHEN ''USA_American_Indian_or_Alaska_Native'' THEN ''AMERICAN INDIAN OR ALASKA NATIVE''
		WHEN ''USA_Asian'' THEN ''ASIAN''
		WHEN ''USA_Black_or_African_American'' THEN ''BLACK OR AFRICAN AMERICAN''
		WHEN ''USA_Declined_to_Answer'' THEN ''UNKNOWN''
		WHEN ''USA_Native_Hawaiian_or_Other_Pacific_Islander'' THEN ''NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER''
		WHEN ''USA_Other'' THEN ''UNKNOWN''
		WHEN ''USA_Two_or_More_Races'' THEN ''TWO OR MORE''
		WHEN ''USA_White'' THEN ''WHITE''
		ELSE REPLACE(REPLACE(NULLIF(UPPER(TRIM(PER.ETHNICITY)),''''),''USA_''),''_'','' '')
	END AS EEO_ETHNICITY,
	NULL AS EEO_DISABILITY,
	NULL AS EEOC_VETERAN_STATUS,
	NULL AS EEOC_DISABILITY_STATUS,
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	FALSE AS ETL_DELETED_FLAG,
	TRIM(ADINFO.PARADOX_PREHIRE_ID) AS LINKED_ID,
	ORG_D."LOCATION" AS LOCATION_HIERARCHY,
	CASE 
		WHEN TRIM(ADINFO.SEND_TO_AMS) = ''0'' THEN ''NOT IN AMS''
		WHEN TRIM(ADINFO.SEND_TO_AMS) = ''1'' THEN ''IN AMS''
	END AS STATUS
FROM
	DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_SUMMARY EM
LEFT JOIN 
	DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_ADDITIONAL_INFORMATION ADINFO
	ON EM.EMPLOYEE_ID = ADINFO.EMPLOYEE_ID
LEFT JOIN 
	NAME_DATA NM
	ON EM.EMPLOYEE_ID = NM.EMPLOYEE_ID
LEFT JOIN 
	ID_DATA ID
	ON EM.EMPLOYEE_ID = ID.EMPLOYEE_ID
LEFT JOIN
	EMAIL_DATA ED
	ON ED.EMPLOYEE_ID = EM.EMPLOYEE_ID
LEFT JOIN
	PHONE_DATA PD
	ON PD.EMPLOYEE_ID = EM.EMPLOYEE_ID
LEFT JOIN 
	DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_PERSONAL PER 
	ON PER.EMPLOYEE_ID = EM.EMPLOYEE_ID 
LEFT JOIN
	HOME_ADDRESS_DATA HOME_AD
	ON HOME_AD.EMPLOYEE_ID = EM.EMPLOYEE_ID
LEFT JOIN
	EMPLOYEE_ORG_DATA ORG_D
	ON ORG_D.EMPLOYEE_ID = EM.EMPLOYEE_ID
LEFT JOIN
	DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_STATUS ST
	ON ST.EMPLOYEE_ID = EM.EMPLOYEE_ID
LEFT JOIN
	HIST_APPLICANTS APP
	ON APP.EMPLOYEE_ID = EM.EMPLOYEE_ID
WHERE 
	(APP.EMPLOYEE_ID IS NOT NULL -- ALL APPLICANTS Historically
	OR ADINFO.EMPLOYEE_ID IS NULL)-- All workers who don''t have a additional info (Future hires)
	AND TRIM(ST.PRIMARY_TERMINATION_REASON) IS DISTINCT FROM (''Terminate Employee > Reject > Duplicate Employee Record'') -- Cleanup duplicate records FROM SOURCE
	AND EM.EMPLOYEE_ID NOT IN (SELECT "CFI INT005 Worker ID LRV" FROM DISC_${var.SF_ENVIRONMENT}.WORKDAY.WORKER_EXCLUDE_LIST)
	AND (EM.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::TIMESTAMP_NTZ OR 
		ADINFO.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::TIMESTAMP_NTZ OR
		NM.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::TIMESTAMP_NTZ OR
		ID.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::TIMESTAMP_NTZ OR
		ED.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::TIMESTAMP_NTZ OR
		PD.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::TIMESTAMP_NTZ OR
		PER.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::TIMESTAMP_NTZ OR
		HOME_AD.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::TIMESTAMP_NTZ OR
		ORG_D.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::TIMESTAMP_NTZ);

SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted.'') into :RETURN_RESULT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
	RETURN return_result;
END;

 EOT
}

