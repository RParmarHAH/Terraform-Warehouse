resource "snowflake_procedure" "DW_HAH_GET_STAGE_FACT_SURVEY_QUESTION" {
	name ="GET_STAGE_FACT_SURVEY_QUESTION"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "SURVEY_ID"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    SQL VARCHAR;
BEGIN
	DELETE FROM DW_${var.SF_ENVIRONMENT}.STAGE.FACT_SURVEY_QUESTION WHERE SURVEY_ID=:SURVEY_ID;
																	 

	INSERT INTO DW_${var.SF_ENVIRONMENT}.STAGE.FACT_SURVEY_QUESTION
WITH MAIN AS 
(SELECT f.KEY AS QUESTION_ID,
f.value:subQuestions AS SUBQUESTIONS,
f.value:questionText::STRING AS QUESTION,
f.value:questionType:type::STRING AS QUESTION_TYPE,
f.value:questionName::STRING AS QID,
f.value:questionType:selector::STRING AS SELECTOR,												  
*
FROM DISC_${var.SF_ENVIRONMENT}.QUALTRICS_SURVEYS.QUALTRICS_SURVEY_QUESTION, table(flatten(SURVEY_QUESTION_JSON:result:questions )) f
WHERE SURVEY_ID=:SURVEY_ID)
,T1 AS 
(SELECT SURVEY_ID, IFF(QUESTION_TYPE=''TE'',QUESTION_ID||''_TEXT'',QUESTION_ID) AS QUESTION_ID,
IFF(QUESTION_TYPE=''TE'',QID||''_TEXT'',QID) AS QID,
QUESTION
FROM MAIN
WHERE SUBQUESTIONS IS NULL
AND QUESTION_TYPE NOT IN (''Slider'',''SBS''))
,T2 AS 
(SELECT SURVEY_ID, QUESTION_ID||''_''||f.KEY,QID||''_''||f.KEY as QID,
MAIN.QUESTION||'' - ''||f.value:choiceText AS SUBQUESTION
FROM MAIN, table(flatten(SUBQUESTIONS)) f
WHERE QUESTION_TYPE NOT IN (''Slider'',''SBS''))
,T3 AS 
(SELECT SURVEY_ID, QUESTION_ID||''_''||f.KEY,QID||''_''||f.KEY as QID,
MAIN.QUESTION||'' - ''||f.value:choiceText AS SUBQUESTION
FROM MAIN , table(flatten(VALUE:choices)) f
WHERE QUESTION_TYPE=''Slider'')
,T4 AS
(SELECT SURVEY_ID, QUESTION_ID||''#''||f.KEY||''_1'',QID||''#''||f.KEY||''_1'' as QID,
MAIN.QUESTION||'' - ''||f.value:questionText AS SUBQUESTION
FROM MAIN, table(flatten(VALUE:columns)) f 
WHERE QUESTION_TYPE=''SBS'')
,T5 AS 
(SELECT SURVEY_ID, QUESTION_ID||''_''||f.KEY||''_TEXT'',QID||''_''||f.KEY||''_TEXT'' as QID,
MAIN.QUESTION||'' - ''||f.value:choiceText AS SUBQUESTION
FROM MAIN, table(flatten(VALUE:choices)) f 
WHERE f.value:textEntry IS NOT NULL )
,T6 AS 
(SELECT SURVEY_ID, QUESTION_ID||''_''||f.KEY,QID||''_''||f.KEY as QID,
MAIN.QUESTION||'' - ''||f.value:choiceText AS SUBQUESTION
FROM MAIN , table(flatten(VALUE:choices)) f
WHERE QUESTION_TYPE=''TE'' AND selector = ''FORM'')	   												   
,FINAL AS 
(SELECT * FROM T1
UNION 
SELECT * FROM T2
UNION
SELECT * FROM T3
UNION
SELECT * FROM T4
UNION
SELECT * FROM T5
UNION
SELECT * FROM T6)				 
,FINAL_CLEANED AS (
SELECT Q.*,
REPLACE(Q.QUESTION_ID,''#'','''') AS CLEAN_SOURCE_QUESTION_ID,
TRIM(REPLACE(Q.QUESTION,''  -'','' -'')) AS QUESTION_TEXT_0,
REPLACE(QUESTION_TEXT_0,''\\$\\{e://Field/CLIENT_FIRST_NAME\\}'',''[Field-CLIENT_FIRST_NAME]'') AS QUESTION_TEXT_1,
REGEXP_REPLACE(QUESTION_TEXT_1 , ''<[^>]*>'', ''''  ) AS QUESTION_TEXT_2,
coalesce(OLD_QTEXT,QUESTION_TEXT_2) AS CLEAN_QUESTION_TEXT
FROM FINAL Q
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.QUALTRICS_SURVEYS.QUESTION_MAPPING_EXTRACT_TO_API M ON M.OLD_SQID =REPLACE(Q.QUESTION_ID,''#'','''')
AND Q.SURVEY_ID=M.SURVEY_ID
)
SELECT 
MD5(FINAL_CLEANED.SURVEY_ID||FINAL_CLEANED.QID||CLEAN_QUESTION_TEXT) AS PRIMARY_QUESTION_KEY,
COALESCE(GSQM.GATOR_QUESTION_KEY,MD5(FINAL_CLEANED.QID||CLEAN_QUESTION_TEXT)) AS SURVEY_QUESTION_KEY,
MD5(FINAL_CLEANED.SURVEY_ID) AS SURVEY_KEY,
FINAL_CLEANED.SURVEY_ID,
26 AS SOURCE_SYSTEM_ID,
''Qualtrics'' AS SYSTEM_CODE,
CLEAN_SOURCE_QUESTION_ID AS QUESTION_ID,
FINAL_CLEANED.QID as QID,
CLEAN_QUESTION_TEXT AS QUESTION,
NULL AS QUESTION_CATEGORY,
1 AS IS_ACTIVE,
-1 AS STR_ETL_TASK_KEY,
-1 AS ETL_INSERTED_TASK_KEY,
CURRENT_TIMESTAMP ::TIMESTAMP_NTZ(9) AS ETL_INSERTED_DATE,
CURRENT_USER() AS ETL_INSERTED_BY,
CURRENT_TIMESTAMP ::TIMESTAMP_NTZ(9) AS ETL_LAST_UPDATED_DATE,
CURRENT_USER() AS ETL_LAST_UPDATED_BY,
FALSE AS ETL_DELETED_FLAG
FROM FINAL_CLEANED
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.GATOR_SURVEY_QUESTION_KEY_MAPPING GSQM ON FINAL_CLEANED.SURVEY_ID=GSQM.SURVEY_ID 
AND FINAL_CLEANED.CLEAN_SOURCE_QUESTION_ID=REPLACE(GSQM.QUESTION_ID,''_V3'','''') 
AND FINAL_CLEANED.CLEAN_QUESTION_TEXT=QUESTION_TEXT;

return ''Succeeded.'';
END;

 EOT
}

