resource "snowflake_procedure" "DW_HAH_GET_STAGE_ASR_FACT_VISIT" {
	name ="GET_STAGE_ASR_FACT_VISIT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result varchar(1000);
BEGIN
	  	 
--*****************************************************************************************************************************
-- NAME:  ASR_FACT_VISIT
--
-- PURPOSE: Creates one row per visit according to ASR
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 09/19/2022	Jashvant Patel			Initial Development
-- 10/19/2022	Abhishek Sunil			Updated Logic to bring missing visit statuses
-- 08/10/2023   Ramesh Mokariya         Updated Logic to add completed-Future-Unbilled Field
-- 09/27/2023   Sandesh Gosavi          Updated Logic to add completed-Future-Unbilled Field
-- 11/29/2023   Pooja Bagane	        Added logic to get Data from ASR_RECEIVABLES,ASR_PAYMENTSRECEIVED AND ASR_CLAIMSTATUSES
--*****************************************************************************************************************************

INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.STAGE.ASR_FACT_VISIT
WITH CLIENT AS
(
	SELECT * FROM 
	(
		SELECT MASTER_ID, CUSTOMERID, LOCATIONID -- Added LocationID to retrieve missing branches
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT MASTER_ID, CUSTOMERID, LOCATION_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MATCH_LIST 
		WHERE CLIENTID NOT IN (SELECT CLIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MASTER_LIST) 
	)
)
, EMPLOYEE AS
(
	SELECT * FROM 
	(
		SELECT MASTER_ID, EMPLOYEEID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MASTER_LIST 
	)
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT MASTER_ID, EMPLOYEEID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MATCH_LIST 
		WHERE EMPLOYEEID NOT IN (SELECT EMPLOYEEID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MASTER_LIST) 
	)
)
, SUPS AS (
	SELECT DISTINCT
		RAW.CUSTOMERID, COALESCE(RAW.SUPERVISORID, DERIVE.SUPERVISORID) AS SUPERVISORID
	FROM
		CLIENT CLI
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_CUSTOMERS RAW ON
		TRIM(CLI.CUSTOMERID) = TRIM(RAW.CUSTOMERID)
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_CUSTOMERS DERIVE ON
		TRIM(CLI.MASTER_ID) = TRIM(DERIVE.CUSTOMERID)
	WHERE COALESCE(RAW.SUPERVISORID, DERIVE.SUPERVISORID) IS NOT NULL
)
,ASR_REVENUE AS(
SELECT 
		BILLING_TRAN_ID_NUMBER AS BILLINGTRANSACTIONID,
		IFF(PAYABLE_OR_BILLIABLE_HRS IS NULL,''Unbilled'',''Billed'') AS INVOICE_STATUS
	FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_REVENUE
	WHERE TO_DATE(VISIT_DATE,''MM/DD/YYYY'') < ''2022-06-01''
	AND BILLING_TRAN_ID_NUMBER NOT IN (SELECT BILLINGTRANSACTIONID FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_RECEIVABLES)
)
,RES_PAY_CLI AS(
SELECT -- Adjusted AND Clean Invoices FOR the visits ON or AFTER June 1st 2022
		BILLINGTRANSACTIONID, 
		INVOICE_STATUS 
	FROM (
		SELECT
			RB.BILLINGTRANSACTIONID,
			TRY_TO_DATE(TRIM(RB.VISITDATE),''MM/DD/YYYY HH:MI:SS'') AS SERVICE_DATE,
			TRY_TO_DATE(TRIM(PB.PAIDDATE),''MM/DD/YYYY HH:MI:SS'') AS PAID_DATE,
			(RB.RECEIVABLEAMOUNT)  AS AMOUNT_COLLECTED,
			(RB.BILLEDAMOUNT) AS AMOUNT_RECEIVED,
			CS.REIMBURSEMENT_STATUS_NAME AS STATUS ,
			CASE
				WHEN UPPER(TRIM(STATUS)) = ''PAID'' THEN 1
				WHEN UPPER(TRIM(STATUS)) = ''PARTIAL'' THEN 2
				WHEN UPPER(TRIM(STATUS)) = ''PAYABLE'' THEN 3
				WHEN UPPER(TRIM(STATUS)) = ''DENIAL'' THEN 4
				WHEN UPPER(TRIM(STATUS)) = ''WriteOff'' THEN 5 
				WHEN UPPER(TRIM(STATUS)) = ''Pending'' THEN 6
				WHEN UPPER(TRIM(STATUS)) = ''Appealed'' THEN 7
				WHEN UPPER(TRIM(STATUS)) = ''UNKNOWN'' THEN 8
				WHEN UPPER(TRIM(STATUS)) = ''REJECTED'' THEN 9
			END AS PRECEDENCE,
		CASE
		WHEN UPPER(TRIM(STATUS)) IN (''DENIAL'') THEN ''Cancelled''
		WHEN UPPER(TRIM(STATUS)) IN (''PAID'') THEN ''Fully Paid''
		WHEN UPPER(TRIM(STATUS)) IN (''PARTIAL'',''PAYABLE'') THEN  ''Partially Paid''
		WHEN UPPER(TRIM(STATUS)) IN (''PENDING'',''Appealed'') THEN  ''Billed''
		END AS  INVOICE_STATUS
		FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_RECEIVABLES RB
	    LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_PAYMENTSRECEIVED PB
		ON RB.BILLINGTRANSACTIONID=PB.BILLINGTRANSACTIONID --AND RB.VISITDATE=PB.VISITDATE
		LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_CLAIMSTATUSES CS 
		ON CS.REIMBURSEMENT_STATUS_ID =PB.CLAIMSTATUS
		WHERE RB.BILLINGTRANSACTIONID IS NOT NULL AND RB.BILLINGDATE IS NOT NULL
		QUALIFY ROW_NUMBER() OVER (PARTITION BY RB.BILLINGTRANSACTIONID ORDER BY COALESCE (SPLIT_PART(PB.PAIDDATE,'' '',0),''12/31/1900'')::DATE   DESC) = 1 )
	 )
, BILLING_STATUS AS(
SELECT * FROM ASR_REVENUE
UNION ALL
SELECT * FROM RES_PAY_CLI
)
,DERIEVED_STATUS AS(
    	SELECT DISTINCT V.SERVICEVISITACTUALID ,
         ''PRIME'' AS SYSTEM_CODE
		,  CASE WHEN V.ISCANCELLED = ''True'' AND BS.INVOICE_STATUS IN (''Fully Paid'',''Billed'',''Partially Paid'') THEN  ''Cancelled-Billed''
			WHEN V.ISCANCELLED = ''True'' AND BS.INVOICE_STATUS IN (''Cancelled'') AND TRY_TO_DATE(TRIM(VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <= TO_DATE(GETDATE()) THEN  ''Cancelled-Did not happen-Not Billable''
				WHEN V.ISCANCELLED = ''True'' AND BS.INVOICE_STATUS IS NULL AND TRY_TO_DATE(TRIM(VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) THEN  ''Cancelled-Future-Unbilled''
				WHEN V.ISCANCELLED = ''True'' AND BS.INVOICE_STATUS IS NULL AND TRY_TO_DATE(TRIM(VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <= TO_DATE(GETDATE()) THEN  ''Cancelled-Did not happen-Unbilled''
			   WHEN V.RESCHEDULEDTO IS NOT NULL  AND TRY_TO_DATE(COALESCE(TRIM(TIMECHECKEDIN),TRIM(RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE())  AND BS.INVOICE_STATUS IN (''Fully Paid'',''Billed'',''Partially Paid'') THEN ''Rescheduled-Future-Billed''
        	   WHEN V.RESCHEDULEDTO IS NOT NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Fully Paid'',''Billed'',''Partially Paid'') THEN ''Rescheduled-Completed-Billed''
			   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IS NULL AND TRY_TO_DATE(COALESCE(TRIM(TIMECHECKEDIN),TRIM(RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) THEN ''Scheduled-Future-Unbilled''																																																									   
        	   WHEN V.RESCHEDULEDTO IS NOT NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Cancelled'') THEN ''Rescheduled-Completed-Not Billable''
			   WHEN TRY_TO_DATE(COALESCE(TRIM(TIMECHECKEDIN),TRIM(RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) AND V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Unbilled'') THEN ''Scheduled-Future-Unbilled'' 																																																													 
        	   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Cancelled'') THEN ''Scheduled-Completed-Not Billable''
			   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Unbilled'') AND TRY_TO_DATE(TRIM(VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) THEN ''Scheduled-Future-Unbilled''
        	   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Unbilled'') THEN ''Scheduled-Completed-Unbilled''
        	   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Fully Paid'',''Billed'',''Partially Paid'') THEN ''Scheduled-Completed-Billed''
			   WHEN V.RESCHEDULEDTO IS NOT NULL AND TRY_TO_DATE(COALESCE(TRIM(TIMECHECKEDIN),TRIM(RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) AND BS.INVOICE_STATUS IS NULL  THEN ''Rescheduled-Future-Unbilled''
			   WHEN V.RESCHEDULEDTO IS NOT NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IS NULL  THEN ''Rescheduled-Completed-Unbilled''
			   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IS NULL AND TRY_TO_DATE(TRIM(VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) THEN ''Scheduled-Future-Unbilled''
			   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IS NULL THEN ''Scheduled-Completed-Unbilled''	  
			END AS DERIVED_DISC_STATUS,
			   MD5(''13'' || ''-'' || ''PRIME'' || ''-'' || NVL(DERIVED_DISC_STATUS,''S'')) AS VISIT_STATUS_KEY
         FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_VISITS V
     LEFT JOIN BILLING_STATUS BS ON BS.BILLINGTRANSACTIONID = V.SERVICEVISITACTUALID
)
,ALL_SERVICES AS (
	SELECT SERVICE_TYPE_ID, SERVICE_TYPE_NAME
	FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_SERVICETYPES S
	UNION
	SELECT ''0'' AS SERVICE_TYPE_ID, ''UNKNOWN'' AS SERVICE_TYPE_NAME -- DUMMY SERVICE to retrieve orphan visits AND considered AS HomeCare
)
, 				  
AUTH AS (SELECT * FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_PLANOFSERVICE  S
QUALIFY ROW_NUMBER() OVER (PARTITION BY S.CUSTOMERID,S.WEEKDAY ,S.EMPLOYEEID ,S.HOURSASSIGNED,
CHECKINTIME,RECURRENCETYPE,SERVICETYPE,PAYERSOURCEID,BILLINGCODEID,
S.VISITSTARTDATE,S.VISITENDDATE
    ORDER BY LASTMODIFIEDON DESC)=1)
,VISITS AS (
SELECT V.SERVICEVISITACTUALID,
MD5(''PRIME'' || ''-'' || V.SERVICEVISITACTUALID || ''-'' || ''ASR'') AS VISIT_KEY,	
CASE -- WHEN the visit IS RESCHEDULED THEN the visit date IS NOT updated, TO maintain consistency picking it FROM either TIMECHECKEDIN OR RESCHEDULEDTO Date
WHEN TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <> TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
THEN TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
ELSE TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')
END AS REPORT_DATE,
MD5(''PRIME'' || ''-'' || COALESCE(TRIM(BM.NEW_LOCATION_ID),''UNKNOWN'') || ''-'' || ''ASR'') AS BRANCH_KEY, -- added UNKNOWN as Temp fix
MD5(''PRIME'' || ''-'' || TRIM(COALESCE(CLI.MASTER_ID,V.CUSTOMERID)) || ''-'' || ''ASR'') AS CLIENT_KEY,
MD5(''PRIME'' || ''-'' || TRIM(V.SERVICETYPE) || ''-'' || ''ASR'') AS CONTRACT_KEY,
MD5(''PRIME'' || ''-'' || EMP1.MASTER_ID  || ''-'' || ''ASR'') AS SCHEDULED_EMPLOYEE_KEY,
MD5(''PRIME'' || ''-'' || IFNULL(TRIM(COALESCE(EMP.MASTER_ID,V.EMPLOYEEID)),''UNKNOWN'') || ''-'' || ''ASR'') AS EMPLOYEE_KEY, -- NULL CONDITION TO BE REMOVED AFTER 25 NULLS ARE FIXED BY ASR/PHC
13 AS SOURCE_SYSTEM_ID,
MD5(''PRIME'' || ''-'' || IFNULL(TRIM(SUPS.SUPERVISORID),''UNKNOWN'') || ''-'' || ''ASR'') AS SUPERVISOR_KEY,
MD5(''PRIME'' || ''-'' || TRIM(AG.BILLINGTRANSACTIONID) || ''-'' || ''ASR'') AS INVOICE_KEY,
NULL AS PAYROLL_KEY,
CASE WHEN P.VISITSTARTDATE>=P.VISITENDDATE THEN NULL ELSE 
MD5(''PRIME'' || ''-'' || IFNULL(TRIM(P.PAYERSOURCEID),''-1'') || ''-'' || IFNULL(TRIM(P.SERVICETYPE),''-1'') || ''-'' || TRIM(COALESCE(CLI.MASTER_ID,P.CUSTOMERID)) || ''-'' || IFNULL(P.SERVICEVISITID, ''-1'') || ''-'' || ''ASR'') end  AS CLIENT_SERVICE_KEY,
--MD5(''PRIME'' || ''-'' || COALESCE(P.PAYERSOURCEID,IFNULL(TRIM(V.PAYERSOURCEID),''-1'')) || ''-'' || IFNULL(ALLS.SERVICE_TYPE_ID,0) || ''-'' || IFNULL(BILL.BILLINGCODE,''-1'') || ''-'' || ''ASR'') AS PARTNER_CONTRACT_SERVICE_KEY,
MD5(''PRIME'' || ''-'' || IFNULL(TRIM(V.PAYERSOURCEID),''-1'') || ''-'' || IFNULL(TRIM(V.SERVICETYPE),0) || ''-'' || IFNULL(BILL.BILLINGCODE,''-1'') || ''-'' || ''ASR'') AS PARTNER_CONTRACT_SERVICE_KEY,
MD5(''PRIME'' || ''-'' || IFNULL(BILL.BILLINGCODE,''-1'') || IFNULL(SM.SERVICE_TYPE_ID,''-1'') || ''-'' || ''ASR'') AS BILLING_KEY,
CASE -- WHEN the visit IS RESCHEDULED THEN the visit date IS NOT updated, TO maintain consistency picking it FROM either TIMECHECKEDIN OR RESCHEDULEDTO Date
WHEN TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <> TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
THEN TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
ELSE TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')
END AS SERVICE_DATE,
NULL AS PAYROLL_DATE, -- TO be picked FROM Invoices PHC
UPPER(TRIM(BM.NEW_LOCATION_NAME)) AS BRANCH_NAME,
CAST(COALESCE(CLI.MASTER_ID,V.CUSTOMERID) AS NUMBER)  AS CLIENT_NUMBER,
TRIM(V.SERVICETYPE) AS CONTRACT_CODE,
EMP1.MASTER_ID AS SCHEDULED_EMPLOYEE_ID,
COALESCE(EMP.MASTER_ID,V.EMPLOYEEID) AS EMPLOYEE_ID,
''PRIME'' AS SYSTEM_CODE,
IFNULL(TRIM(SUPS.SUPERVISORID),''UNKNOWN'') AS SUPERVISOR_CODE,
--.BILLINGTRANSACTIONID AS INVOICE_ID,
AG.BILLINGTRANSACTIONID AS INVOICE_ID,
NULL AS CHEQUE_NUMBER,
FALSE AS CLEAN_SHIFT_FLAG,  --FALSE AS OF NOW
	CASE WHEN V.ISCANCELLED = ''True'' THEN ''s05'' WHEN V.RESCHEDULEDTO IS NULL THEN ''s01'' WHEN V.RESCHEDULEDTO IS NOT NULL THEN ''s03'' WHEN V.EMPLOYEEID IS NULL THEN ''s02'' ELSE NULL END AS SCHEDULE_STATUS_CODE,
	CASE WHEN V.ISCANCELLED = ''True'' THEN ''Cancelled'' WHEN V.RESCHEDULEDTO IS NULL THEN ''Scheduled'' WHEN V.RESCHEDULEDTO IS NOT NULL THEN ''Rescheduled'' WHEN V.EMPLOYEEID IS NULL THEN ''Scheduled - Open'' ELSE NULL END AS SCHEDULE_STATUS_NAME,
	CASE WHEN V.ISCANCELLED = ''True'' THEN ''Cancelled'' WHEN V.RESCHEDULEDTO IS NULL THEN ''Scheduled'' WHEN V.RESCHEDULEDTO IS NOT NULL THEN ''Rescheduled'' WHEN V.EMPLOYEEID IS NULL THEN ''Scheduled - Open'' ELSE NULL END AS SCHEDULE_STATUS_DESCRIPTION,
M.SCHEDULE_STATUS_CODE AS NEW_SCHEDULE_STATUS_CODE,
M.SCHEDULE_STATUS_NAME AS NEW_SCHEDULE_STATUS_NAME,
M.SCHEDULE_STATUS_DESCRIPTION AS NEW_SCHEDULE_STATUS_DESCRIPTION,
M.VISIT_STATUS_CODE AS VISIT_STATUS_CODE,
M.VISIT_STATUS_NAME AS VISIT_STATUS_NAME,
M.VISIT_STATUS_DESCRIPTION AS VISIT_STATUS_DESCRIPTION,
M.INVOICE_STATUS_CODE AS INVOICE_STATUS_CODE,
M.INVOICE_STATUS_NAME AS INVOICE_STATUS_NAME,
M.INVOICE_STATUS_DESCRIPTION AS INVOICE_STATUS_DESCRIPTION,
M.PAYROLL_STATUS_CODE AS PAYROLL_STATUS_CODE,
M.PAYROLL_STATUS_NAME AS PAYROLL_STATUS_NAME,
M.PAYROLL_STATUS_DESCRIPTION AS PAYROLL_STATUS_DESCRIPTION,
	CASE 
		WHEN V.ISCANCELLED = ''True'' THEN ''10''
		WHEN AG.INVOICE_STATUS = ''Fully Paid'' THEN ''05''
		WHEN AG.INVOICE_STATUS = ''Billed'' THEN ''04''
		ELSE ''02''
	END AS STATUS_CODE,
	CASE 
		WHEN V.ISCANCELLED = ''True'' THEN ''Cancelled''
		WHEN AG.INVOICE_STATUS = ''Fully Paid'' THEN ''Paid''
		WHEN AG.INVOICE_STATUS = ''Billed'' THEN ''Billed''
		ELSE ''Confirmed''
	END AS STATUS_DESCRIPTION,
V.RESPONCIBLEFORCANCELATION AS CANCEL_REASON_CODE,	
	CASE 
		WHEN TRIM(V.RESPONCIBLEFORCANCELATION) = 1 THEN ''Provider''
		WHEN TRIM(V.RESPONCIBLEFORCANCELATION) = 2 THEN ''Client''
		WHEN TRIM(V.RESPONCIBLEFORCANCELATION) = 3 THEN ''COA''
		ELSE NULL 
	END AS CANCEL_REASON_DESCRIPTION,
COALESCE(TRIM(V.CANCELATIONCOMMENTS),TRIM(V.CANCELATIONCOMMENTSUSABLE)) AS CANCEL_REASON_NOTES, 
FALSE AS EXCEPTION_REASON_INDICATOR,
FALSE AS EXCEPTION_REASON_FLAG,
NULL AS RESOLUTION_CODE,
NULL AS RESOLUTION_DESCRIPTION,
NULL AS REJECTION_CODE,
NULL AS REJECTION_DESCRIPTION,
TRIM(BILL.BILLINGCODE) AS BILL_CODE,                    							
TRIM(SM.BASE_RATE)::FLOAT AS BILL_RATE,
	CASE 
		WHEN DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.TIMECHECKEDIN ,''MM/DD/YYYY HH12:MI:SS AM''), TRY_TO_TIMESTAMP(V.TIMECHECKEDOUT ,''MM/DD/YYYY HH12:MI:SS AM'')) < 0 THEN ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2) -- Negative Hours Served
		WHEN V.TIMECHECKEDIN IS NULL OR V.TIMECHECKEDOUT IS NULL THEN ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2) -- Served but forgot to check in or check out
		WHEN V.TIMECHECKEDIN IS NOT NULL AND V.TIMECHECKEDOUT IS NOT NULL THEN ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(COALESCE(V.ACTUALORSCHEDULEDCHECKIN, V.TIMECHECKEDIN) ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(COALESCE(V.ACTUALORSCHEDULEDCHECKOUT, V.TIMECHECKEDOUT) ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2) -- served
	END AS BILL_UNITS_SERVED,
''Hourly'' AS BILL_UNIT_TYPE,
NULL AS OVERHEAD_RATE, -- ??
TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM'') AS SCHEDULE_TIMEIN,
TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKOUT,''MM/DD/YYYY HH12:MI:SS AM'') AS SCHEDULE_TIMEOUT,
	CASE WHEN  ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2) < 900 THEN 
	ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2) 
	ELSE ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2)
	END AS SCHEDULE_DURATION,
TRY_TO_TIMESTAMP(V.ACTUALORSCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM'') AS ACTUAL_TIMEIN,
TRY_TO_TIMESTAMP(V.ACTUALORSCHEDULEDCHECKOUT,''MM/DD/YYYY HH12:MI:SS AM'') AS ACTUAL_TIMEOUT,
	CASE WHEN ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.ACTUALORSCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.ACTUALORSCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2) < 900  THEN 
	ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.ACTUALORSCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.ACTUALORSCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2)
	ELSE NULL END AS ACTUAL_DURATION,
NULL AS ADJUSTED_TIMEIN,
NULL AS ADJUSTED_TIMEOUT,
NULL AS ADJUSTED_DURATION,
	CASE 
		WHEN DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.TIMECHECKEDIN ,''MM/DD/YYYY HH12:MI:SS AM''), TRY_TO_TIMESTAMP(V.TIMECHECKEDOUT ,''MM/DD/YYYY HH12:MI:SS AM'')) < 0 THEN ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2) -- Negative Hours Served
		WHEN V.TIMECHECKEDIN IS NULL OR V.TIMECHECKEDOUT IS NULL THEN ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2) -- Served but forgot to check in or check out
		WHEN V.TIMECHECKEDIN IS NOT NULL AND V.TIMECHECKEDOUT IS NOT NULL THEN ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(COALESCE(V.ACTUALORSCHEDULEDCHECKIN, V.TIMECHECKEDIN) ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(COALESCE(V.ACTUALORSCHEDULEDCHECKOUT, V.TIMECHECKEDOUT) ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2) -- served
	END AS HOURS_SERVED,
NULL AS COMMENTS,
IFF(V.EVV_SEQUENCEID IS NOT NULL, ''Y'', ''N'') AS IS_EVV_FLAG,
NULL AS TIMESHEET_TYPE,
IFF(V.EVV_SEQUENCEID IS NOT NULL, V.EVV_SEQUENCEID , NULL) AS TRACKING_ID,
:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY, 
CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ as ETL_INSERTED_DATE,
CURRENT_USER as ETL_INSERTED_BY,
CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ as ETL_LAST_UPDATED_DATE,
CURRENT_USER as ETL_LAST_UPDATED_BY,
FALSE AS ETL_DELETED_FLAG,
M.CONFIRMED_FLAG  AS CONFIRMED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_VISITS V 
LEFT JOIN EMPLOYEE EMP ON V.EMPLOYEEID = EMP.EMPLOYEEID
LEFT JOIN SUPS ON V.CUSTOMERID = SUPS.CUSTOMERID
LEFT JOIN AUTH P ON V.SERVICEVISITID  = P.SERVICEVISITID
LEFT JOIN CLIENT CLI ON P.CUSTOMERID = CLI.CUSTOMERID
LEFT JOIN EMPLOYEE EMP1 ON P.EMPLOYEEID =EMP1.EMPLOYEEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.BRANCH_MAPPING BM ON V.LOCATIONID = BM.OLD_LOCATION_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_BILLINGCODES BILL ON V.BILLINGCODEID = BILL.BILLINGCODEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_SERVICE_TYPE_MAPPING SM ON P.SERVICETYPE = SM.SERVICE_TYPE_ID 
LEFT JOIN BILLING_STATUS AG ON V.SERVICEVISITACTUALID = AG.BILLINGTRANSACTIONID 
--LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_RECEIVABLES  ON V.SERVICEVISITACTUALID = .SERVICEVISITACTUALID 
LEFT JOIN DERIEVED_STATUS DS ON DS.SERVICEVISITACTUALID = V.SERVICEVISITACTUALID 
LEFT JOIN HAH.DIM_VISIT_STATUS_MAPPING M ON DS.VISIT_STATUS_KEY = M.VISIT_STATUS_KEY 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_PAYERSOURCES AS PAYS ON PAYS.PAYERSOURCEID = P.PAYERSOURCEID 
LEFT JOIN ALL_SERVICES ALLS ON P.SERVICETYPE = ALLS.SERVICE_TYPE_ID
--LEFT JOIN HAH.DIM_VISIT_STATUS_MAPPING M ON DS.DERIVED_DISC_STATUS= M.DERIVED_DISC_STATUS AND M.SYSTEM_CODE =''PRIME''
WHERE HOURS_SERVED IS NOT NULL -- just to make sure, NO RL STRUCTURE fails IN future
	AND (EMPLOYEE_ID IS NOT NULL -- these visits ARE to be ignored
 	AND EMPLOYEE_ID IN (SELECT EMPLOYEEID FROM EMPLOYEE)) -- Remnants of PHCs data manipulation - TO be ignored
 AND CLIENT_NUMBER NOT IN (SELECT CLIENT_NUMBER FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_CLIENT_NUMBER WHERE SOURCE_SYSTEM_ID = 13 AND SYSTEM_CODE = ''PRIME'')
AND NVL(BM.IS_ASR_BRANCH, TRUE) = TRUE
)
SELECT 
DISTINCT VISIT_KEY,
REPORT_DATE,
V.BRANCH_KEY,
CLIENT_KEY,
CONTRACT_KEY,
SCHEDULED_EMPLOYEE_KEY,
EMPLOYEE_KEY,
SOURCE_SYSTEM_ID,
SUPERVISOR_KEY,
INVOICE_KEY,
PAYROLL_KEY,
CLIENT_SERVICE_KEY, --
PARTNER_CONTRACT_SERVICE_KEY,
BILLING_KEY, --
SERVICE_DATE,
PAYROLL_DATES.CHECK_DATE AS PAYROLL_DATE,
BRANCH_NAME,
CLIENT_NUMBER,
CONTRACT_CODE,
SCHEDULED_EMPLOYEE_ID,
EMPLOYEE_ID,
SYSTEM_CODE,
SUPERVISOR_CODE,
INVOICE_ID,
CHEQUE_NUMBER,
CLEAN_SHIFT_FLAG,
SCHEDULE_STATUS_CODE,
SCHEDULE_STATUS_NAME,
SCHEDULE_STATUS_DESCRIPTION,
VISIT_STATUS_CODE,
VISIT_STATUS_NAME,
VISIT_STATUS_DESCRIPTION,
INVOICE_STATUS_CODE,
INVOICE_STATUS_NAME,
INVOICE_STATUS_DESCRIPTION,
PAYROLL_STATUS_CODE,
PAYROLL_STATUS_NAME,
PAYROLL_STATUS_DESCRIPTION,
CANCEL_REASON_CODE,
CANCEL_REASON_DESCRIPTION,
CANCEL_REASON_NOTES,
EXCEPTION_REASON_INDICATOR,
RESOLUTION_CODE,
RESOLUTION_DESCRIPTION,
REJECTION_CODE,
REJECTION_DESCRIPTION,
BILL_CODE,
BILL_RATE,
BILL_UNITS_SERVED,
BILL_UNIT_TYPE,
OVERHEAD_RATE,
SCHEDULE_TIMEIN,
SCHEDULE_TIMEOUT,
SCHEDULE_DURATION,
ACTUAL_TIMEIN,
ACTUAL_TIMEOUT,
ACTUAL_DURATION,
ADJUSTED_TIMEIN,
ADJUSTED_TIMEOUT,
ADJUSTED_DURATION,
HOURS_SERVED,
COMMENTS,
IS_EVV_FLAG,
TIMESHEET_TYPE,
TRACKING_ID,
V.ETL_TASK_KEY,
V.ETL_INSERTED_TASK_KEY,
V.ETL_INSERTED_DATE,
V.ETL_INSERTED_BY,
V.ETL_LAST_UPDATED_DATE,
V.ETL_LAST_UPDATED_BY,
V.ETL_DELETED_FLAG,
CONFIRMED_FLAG
FROM VISITS V
LEFT JOIN "STAGE".ASR_FACT_BRANCH_PAYROLL_PERIODS AS PAYROLL_DATES
		ON PAYROLL_DATES.BRANCH_KEY = V.BRANCH_KEY
        AND PAYROLL_DATES.PERIOD_END_DATE <= LAST_DAY(CURRENT_DATE,''WEEK'') -1
			AND V.SERVICE_DATE BETWEEN PAYROLL_DATES.PERIOD_START_DATE AND PAYROLL_DATES.PERIOD_END_DATE;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;

 EOT
}

