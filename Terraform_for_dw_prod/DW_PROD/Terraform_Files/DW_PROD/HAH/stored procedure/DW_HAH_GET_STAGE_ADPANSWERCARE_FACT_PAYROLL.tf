resource "snowflake_procedure" "DW_HAH_GET_STAGE_ADPANSWERCARE_FACT_PAYROLL" {
	name ="GET_STAGE_ADPANSWERCARE_FACT_PAYROLL"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN

--*****************************************************************************************************************************
-- NAME: ADPANSWERCARE_FACT_PAYROLL
--
-- PURPOSE: Creates one row for each PAYROLL according to ADP-ANSWERCARE
--
-- DEVELOPMENT LOG:
-- DATE				AUTHOR                					NOTES:
-- ----------		--------------------------------		-------------------------------------------------------------------
-- 18/10/2022		Aditya Shukla / Jigar Prajapati			Initial Development
--*****************************************************************************************************************************


INSERT OVERWRITE INTO STAGE.ADPANSWERCARE_FACT_PAYROLL

WITH EMPLOYEE AS (
	SELECT 
		ID, MASTER_ID, MD5(''ADP'' || ''-'' || MASTER_ID || ''ANSWERCARE'') AS EMPLOYEE_KEY
	FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ADP.ANSWERCARE_EMPLOYEE_MASTER_LIST
	UNION
	SELECT
		ID, MASTER_ID, MD5(''ADP'' || ''-'' || MASTER_ID || ''ANSWERCARE'')
	FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ADP.ANSWERCARE_EMPLOYEE_MATCH_LIST
	WHERE ID NOT IN (SELECT DISTINCT ID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ADP.ANSWERCARE_EMPLOYEE_MASTER_LIST)
)
SELECT DISTINCT
	MD5(18 || CAST(PAY_DATE AS DATE) || ''-'' || EMP.MASTER_ID || ''-'' || CHECK_VOUCHER_NUMBER || ''ANSWERCARE'') AS PAYROLL_KEY,
	PAY_DATE::DATE AS REPORT_DATE,
	COALESCE(EMP.EMPLOYEE_KEY, MD5(''ADP'' || ''-'' || EMP.MASTER_ID || ''ANSWERCARE'')) AS EMPLOYEE_KEY,
	COALESCE(CDE.PRIMARY_BRANCH_KEY, ''UNKNOWN'') AS BRANCH_KEY,
	18 AS SOURCE_SYSTEM_ID,
	PAY_DATE::DATE AS PAYROLL_DATE,
	EMP.ID AS EMPLOYEE_ID,
	COALESCE(CDE.PRIMARY_BRANCH_NAME, ''UNKNOWN'') AS BRANCH_NAME,
	COMPANY_CODE AS SYSTEM_CODE,
	PERIOD_BEGINNING_DATE::DATE AS PAY_PERIOD_START_DATE,
	PERIOD_ENDING_DATE::DATE AS PAY_PERIOD_END_DATE,
	CHECK_VOUCHER_NUMBER AS CHECK_NUMBER,
	REPLACE(TOTAL_HOURS, '','') AS PAY_HOURS,
	REPLACE(REGULAR_HOURS, '','') AS SERVICE_HOURS,
	REPLACE(OVERTIME_HOURS, '','') AS OVERTIME_HOURS,
	(COALESCE(REPLACE(ADDITIONAL_HOURS____HOL_HOLIDAY, '',''), 0) + COALESCE(REPLACE(ADDITIONAL_HOURS____PAS_PASSPORT, '',''), 0) + COALESCE(REPLACE(ADDITIONAL_HOURS____POT_PASSPORT_OT, '',''), 0)) AS NON_SERVICE_UNITS,
	NULL AS SICK_HOURS,
	NULL AS VACATION_HOURS,
	CASE WHEN RATE_TYPE = ''Salary'' AND REGULAR_HOURS IS NOT NULL AND REGULAR_EARNINGS IS NOT NULL THEN		-- salaried employees have rate = gross pay, so DERIVED  rate FOR records WHERE reg hours AND reg earninigs ARE NOT null
		REPLACE(REGULAR_EARNINGS, '','') / REPLACE(REGULAR_HOURS, '','')
		ELSE TRIM(REPLACE(REPLACE(RATE, ''$''), '','')) 
	END AS PAY_RATE,
	REPLACE(OVERTIME_EARNINGS, '','')/REPLACE(OVERTIME_HOURS, '','') AS OVERTIME_RATE,
	REPLACE(GROSS_PAY, '','') AS GROSS_PAY_AMOUNT,
	REPLACE(REGULAR_EARNINGS, '','') AS SERVICE_PAY_AMOUNT,
	REPLACE(OVERTIME_EARNINGS, '','') AS OVERTIME_PAY_AMOUNT,
	(COALESCE(REPLACE(ADDITIONAL_EARNINGS____BON_BONUS, '',''), 0) + COALESCE(REPLACE(ADDITIONAL_EARNINGS____HOL_HOLIDAY, '',''), 0) + COALESCE(REPLACE(ADDITIONAL_EARNINGS____PAS_PASSPORT, '',''), 0) + COALESCE(REPLACE(ADDITIONAL_EARNINGS____POT_PASSPORT_OT, '',''), 0)) AS NON_SERVICE_PAY_AMOUNT,
	REPLACE(TOTAL_EMPLOYEE_TAX, '','') AS TAX_AMOUNT,
	REPLACE(TAKE_HOME, '','') AS NET_PAY_AMOUNT,
	(COALESCE(REPLACE(VOLUNTARY_DEDUCTION___70_BANKRUPTCY, '',''), 0) + COALESCE(REPLACE(VOLUNTARY_DEDUCTION___73_GARNISHMENT, '',''), 0) + COALESCE(REPLACE(VOLUNTARY_DEDUCTION___75_SUPPORT, '',''), 0) + COALESCE(REPLACE(VOLUNTARY_DEDUCTION___MIS_MISCELLANEOUS, '',''), 0)) AS OTHER_DEDUCTIONS_AMOUNT,
	NULL AS UNION_DUES_AMOUNT,
	CASE WHEN TRIM(VOLUNTARY_DEDUCTION___MIL_MILEAGE_REIMB) LIKE ''-%''
			THEN REPLACE(REPLACE(TRIM(VOLUNTARY_DEDUCTION___MIL_MILEAGE_REIMB), '',''), ''-'')
		WHEN TRIM(VOLUNTARY_DEDUCTION___MIL_MILEAGE_REIMB) NOT LIKE ''-%''
			THEN ''-'' || REPLACE(TRIM(VOLUNTARY_DEDUCTION___MIL_MILEAGE_REIMB), '','')
	END AS REINBURSMENT_AMOUNT,
		-1 AS ETL_TASK_KEY,
		-1 AS ETL_INSERTED_TASK_KEY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_INSERTED_DATE,
		CURRENT_USER AS ETL_INSERTED_BY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_LAST_UPDATED_DATE,
		CURRENT_USER AS ETL_LAST_UPDATED_BY,
		FALSE AS ETL_DELETED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.ADP.ANSWERCARE_PAYROLL AP
LEFT JOIN EMPLOYEE EMP
	ON TRIM(AP.FILE_NUMBER) = TRIM(EMP.ID)
LEFT JOIN DISC_DEDUPE_${var.SF_ENVIRONMENT}.ADP.ANSWERCARE_EMPLOYEE_MASTER_LIST EML
	ON EML.EMPLOYEE_SSN = REPLACE(AP.TAX_ID, ''-'')
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_EMPLOYEE CDE
	ON CDE.SOURCE_SYSTEM_ID = 16 AND 
	CASE WHEN EML.EMPLOYEE_FIRST_NAME = ''TALISHA''
		THEN ''TALISHIA'' 
		ELSE REPLACE(EML.EMPLOYEE_FIRST_NAME, '''')
	END 
	|| 
	REPLACE(EML.EMPLOYEE_LAST_NAME, '''')
	= 
	CASE WHEN RIGHT(TRIM(UPPER(cde.EMPLOYEE_FIRST_NAME)), 3) = ''LOA'' THEN SUBSTRING(TRIM(UPPER(CDE.EMPLOYEE_FIRST_NAME)), 0, LENGTH(CDE.EMPLOYEE_FIRST_NAME) - 3) ELSE TRIM(UPPER(CDE.EMPLOYEE_FIRST_NAME)) END 
	|| 
	CASE WHEN RIGHT(TRIM(UPPER(CDE.EMPLOYEE_LAST_NAME)), 3) = ''LOA'' THEN SUBSTRING(TRIM(UPPER(CDE.EMPLOYEE_LAST_NAME)), 0, LENGTH(CDE.EMPLOYEE_LAST_NAME) - 3) ELSE TRIM(UPPER(CDE.EMPLOYEE_LAST_NAME)) END
WHERE REPLACE(GROSS_PAY, '','') <> 0;

END;

 EOT
}

