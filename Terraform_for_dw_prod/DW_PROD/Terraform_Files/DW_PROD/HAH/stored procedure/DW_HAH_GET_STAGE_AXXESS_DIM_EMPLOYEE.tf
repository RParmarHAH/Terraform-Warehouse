resource "snowflake_procedure" "DW_HAH_GET_STAGE_AXXESS_DIM_EMPLOYEE" {
	name ="GET_STAGE_AXXESS_DIM_EMPLOYEE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN
--*****************************************************************************************************************************
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 01/06/22    Abhishek Sunil        Initial Development
-- 04/25/22    Parag Gajjar          Logic Change
-- 05/04/22    Parag Gajjar          Dedup Leverage
-- 07/19/23    Deepen Gajjar         added logic to consider Jamie Back as ADMIN employee manually as requested in IDDOX-237
-- 07/24/23    Ramesh Mokariya       Updated primary branch to prefer branch with highest abs hours_served
-- 29/09/2023  Trushali Ramoliya     Added a logic for HISPANIC_OR_LATINO  as per ticket - IDDOX- 388.
-- 22/10/2023  Jigar Prajapati       leverage new data 
-- 11/28/23    Deepen Gajjar         updated primary branch key, primary branch name and primary branch state logic																												   
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.AXXESS_DIM_EMPLOYEE
WITH V1 AS (
    WITH VISITS_BRANCH_MORE_THAN_1 AS
    (
        WITH VISITS_HH AS 
        (
            SELECT
                CLINICIAN_ID,
                STATE,
                BRANCH,
                BRANCH_ID,
                SUM(COALESCE(TIMEDIFF(MINUTE, TRY_TO_TIME(PV.VISIT_TIME_IN), TRY_TO_TIME(PV.VISIT_TIME_OUT)) / 60, 0)) AS HOURS_SERVED,
                ROW_NUMBER() OVER (PARTITION BY CLINICIAN_ID, STATE ORDER BY BRANCH) AS ROWNUM
            FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.VW_AXXESS_HH_VISITS PV
            GROUP BY CLINICIAN_ID, STATE, BRANCH, BRANCH_ID
            ORDER BY CLINICIAN_ID, ROWNUM
        ),
        VISITS_HC AS 
	    (
	        SELECT 
	        	PV.CLINICIAN_ID,
	        	PV.CLIENT_STATE AS STATE,
	        	PV.BRANCH_NAME AS BRANCH,
	        	PV.BRANCH_ID,
				SUM(COALESCE(TIMEDIFF(MINUTE,COALESCE(TRY_to_TIMESTAMP(TD.VISIT_START,''DD-MM-YYYY HH:MI''),TRY_to_TIMESTAMP(TD.VISIT_START,''MM/DD/YYYY HH:MI:ss''))::TIME ,
	      	COALESCE(TRY_to_TIMESTAMP(TD.VISIT_END,''DD-MM-YYYY HH:MI''),TRY_to_TIMESTAMP(TD.VISIT_END,''MM/DD/YYYY HH:MI:ss''))::TIME 
	      	)/60,0)) AS HOURS_SERVED,
				ROW_NUMBER () OVER (PARTITION BY PV.CLINICIAN_ID,PV.CLIENT_STATE ORDER BY PV.BRANCH_NAME) AS ROWNUM
			FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.VW_AXXESS_HC_TASKDETAILS PV
			LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_TASKDETAILS TD ON TD.SCHEDULED_TASK_ID = PV.SCHEDULED_TASK_ID 
			GROUP BY PV.CLINICIAN_ID,STATE ,BRANCH ,PV.BRANCH_ID
			ORDER BY PV.CLINICIAN_ID,ROWNUM
	    )
        SELECT
            VISITS1.CLINICIAN_ID AS CLINICIAN_ID,
            VISITS1.STATE AS STATE,
            VISITS1.BRANCH AS BRANCH,
            VISITS1.BRANCH_ID AS BRANCH_ID,
            VISITS1.HOURS_SERVED AS HOURS_SERVED
        FROM VISITS_HH AS VISITS1
        LEFT JOIN VISITS_HH V1 ON V1.CLINICIAN_ID = VISITS1.CLINICIAN_ID AND V1.STATE = VISITS1.STATE
        WHERE VISITS1.HOURS_SERVED >V1.HOURS_SERVED
        UNION
        SELECT
            VISITS2.CLINICIAN_ID AS CLINICIAN_ID,
            VISITS2.STATE AS STATE,
            VISITS2.BRANCH AS BRANCH,
            VISITS2.BRANCH_ID AS BRANCH_ID,
            VISITS2.HOURS_SERVED AS HOURS_SERVED
        FROM VISITS_HC AS VISITS2
        LEFT JOIN VISITS_HC V2 ON V2.CLINICIAN_ID = VISITS2.CLINICIAN_ID AND V2.STATE = VISITS2.STATE
        WHERE VISITS2.HOURS_SERVED >V2.HOURS_SERVED
    ),
    VISITS_BRANCH_1 AS (
			WITH	VISITS_HH AS
				(
				SELECT CLINICIAN_ID,STATE,BRANCH,BRANCH_ID,HOURS_SERVED  FROM 
				(
					SELECT CLINICIAN_ID,STATE ,BRANCH ,BRANCH_ID ,
					SUM(COALESCE(TIMEDIFF(MINUTE, TRY_TO_TIME(PV.VISIT_TIME_IN),TRY_TO_TIME(PV.VISIT_TIME_OUT))/60,0)) AS HOURS_SERVED
					,ROW_NUMBER () OVER (PARTITION BY CLINICIAN_ID,STATE ORDER BY HOURS_SERVED desc) AS ROWNUM
					FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.VW_AXXESS_HH_VISITS PV
					 GROUP BY CLINICIAN_ID,STATE ,BRANCH ,BRANCH_ID
					 ORDER BY CLINICIAN_ID,ROWNUM
				)T
			WHERE ROWNUM =1),
			VISITS_HC AS (
			SELECT CLINICIAN_ID,STATE,BRANCH,BRANCH_ID,HOURS_SERVED FROM 
				(
					SELECT PV.CLINICIAN_ID,PV.CLIENT_STATE AS STATE,PV.BRANCH_NAME AS BRANCH,PV.BRANCH_ID,
					SUM(COALESCE(TIMEDIFF(MINUTE,COALESCE(TRY_to_TIMESTAMP(TD.VISIT_START,''DD-MM-YYYY HH:MI''),TRY_to_TIMESTAMP(TD.VISIT_START,''MM/DD/YYYY HH:MI:ss''))::TIME ,
		      		COALESCE(TRY_to_TIMESTAMP(TD.VISIT_END,''DD-MM-YYYY HH:MI''),TRY_to_TIMESTAMP(TD.VISIT_END,''MM/DD/YYYY HH:MI:ss''))::TIME 
		      		)/60,0)) AS HOURS_SERVED,
					ROW_NUMBER () OVER (PARTITION BY PV.CLINICIAN_ID,PV.CLIENT_STATE ORDER BY HOURS_SERVED DESC) AS ROWNUM
					FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.VW_AXXESS_HC_TASKDETAILS PV
					LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_TASKDETAILS TD ON TD.SCHEDULED_TASK_ID = PV.SCHEDULED_TASK_ID 
					GROUP BY PV.CLINICIAN_ID,STATE ,BRANCH ,PV.BRANCH_ID
					ORDER BY PV.CLINICIAN_ID,ROWNUM
				)T
				WHERE ROWNUM = 1 AND CLINICIAN_ID IS NOT null
				)
				SELECT * FROM VISITS_HC
				UNION 
				SELECT * FROM VISITS_HH) 
	SELECT
	    CLINICIAN_ID,
	    STATE,
	    BRANCH,
	    BRANCH_ID,
	    HOURS_SERVED
	FROM VISITS_BRANCH_MORE_THAN_1
	UNION
	SELECT
	    CLINICIAN_ID,
	    STATE,
	    BRANCH,
	    BRANCH_ID,
	    HOURS_SERVED
	FROM VISITS_BRANCH_1
				)
,EMP_DEDUPE AS(  SELECT * FROM    
(	SELECT MASTER_ID, EMPLOYEE_ID, SSN FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.EMPLOYEE_MASTER_LIST )
	UNION   
	SELECT * FROM (
	SELECT  MASTER_ID, EMPLOYEE_ID, SSN
    FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.EMPLOYEE_MATCH_LIST  
  	WHERE EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.EMPLOYEE_MASTER_LIST)))
,AXXESS_TO_TRUSTPOINT_MAPPING AS ( 
	SELECT DISTINCT M.MASTER_ID, TP.EMPLOYEE_NUMBER, TP.EMPLOYEE_SSN, TP.SUTA_STATE
    FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.EMPLOYEE_MASTER_LIST M
    JOIN ( SELECT  EMPLOYEE_NUMBER, EMPLOYEE_SSN, SUTA_STATE 
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.TRUSTPOINTDATA.EMPLOYEE_MASTER_LIST 
        WHERE COMPANY IN (''PRIMEMIDWAY'')) TP ON TRIM(REPLACE(M.SSN,''-'','''')) = TP.EMPLOYEE_SSN 
)
,CTE AS ( -- CTE helps TO find BRANCH_ID for Master_ID having HIGHEST HOURS_SERVED 
  SELECT
    EMP.MASTER_ID,
    V1.CLINICIAN_ID,
    BRANCH,
    BRANCH_ID,STATE,
    HOURS_SERVED
  FROM v1
  INNER JOIN EMP_DEDUPE EMP ON V1.CLINICIAN_ID = EMP.EMPLOYEE_ID
  QUALIFY ROW_NUMBER() OVER (PARTITION BY EMP.MASTER_ID ORDER BY ABS(V1.HOURS_SERVED) DESC) =1 -- QUALIFY the branch_id which have highest ABSOLUTE hours_served FOR EACH master_id  -- RaMeSh
),
EMPLOYEE_BRANCH AS (
	WITH dat AS (
	SELECT ''HH'' AS tt, *
	FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_HH_EMPLOYEE_BRANCH 
	UNION 
	SELECT ''HC'' AS tt,*
	FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_HC_EMPLOYEE_BRANCH 
	)
	SELECT
		count(DISTINCT BRANCH_ID) OVER (PARTITION BY SYSTEM_EMPLOYEE_ID) AS cnt ,
		a.*
	FROM dat a
	QUALIFY cnt =1 -- TAKING EMPLOYEE FOR WHICH SINGLE BRANCH ASSIGNED
),BRANCH_INFO AS (
	SELECT *
	FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_HC_BRANCHINFO 
	UNION 
	SELECT *
	FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_HH_BRANCHINFO
)
SELECT DISTINCT
     MD5(''PRIME'' || ''-''|| IFNULL(UPPER(TRIM(EI.MASTER_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS EMPLOYEE_KEY  --Pankti M.
	,EI.EMPLOYEE_ID AS EMPLOYEE_ID 
	,''PRIME'' AS SYSTEM_CODE
	,14 AS SOURCE_SYSTEM_ID  
	,IFF(LENGTH(REPLACE(TRIM(EI.SSN),''-'')) = 9, HEX_ENCODE(REPLACE(TRIM(EI.SSN),''-'')), NULL) AS EMPLOYEE_PID   --Pankti M.
	,EI.EMPLOYEE_ID AS EMPLOYEE_NUMBER -- WHAT TO DO OF THIS FIELD? --Can we USE EMployee_ID (its already in MD5) --Need TO Discuss WITH Frank during Review
	,TRY_TO_DATE(TRIM(EI.DATE_OF_BIRTH),''YYYY-MM-DD'')  AS EMPLOYEE_DOB  --Pankti M.
	,NULL AS EMPLOYEE_DATE_OF_DEATH
	--,TRY_TO_DATE(TRIM(EI.HIRE_DATE),''MM/DD/YYYY HH12:MI:SS AM'') AS EMPLOYEE_HIRE_DATE  --Pankti M.
	,TRY_TO_DATE(TRIM(EI.HIRE_DATE),''YYYY-MM-DD'') AS EMPLOYEE_HIRE_DATE
	,NULL AS EMPLOYEE_REHIRE_DATE
	,NULL AS EMPLOYEE_BENEFIT_START_DATE 
	,NULL AS EMPLOYEE_FIRST_CHECK_DATE
	,NULL AS EMPLOYEE_LAST_CHECK_DATE
	,NULL AS EMPLOYEE_LAST_WORKED_DATE
	--,TRY_TO_DATE(TRIM(EI.TERMINATION_DATE),''MM/DD/YYYY HH12:MI:SS AM'') AS EMPLOYEE_TERMINATE_DATE --Pankti M.
    ,TRY_TO_DATE(TRIM(EI.TERMINATION_DATE),''YYYY-MM-DD'') AS EMPLOYEE_TERMINATE_DATE --Pankti M.
	,NULL AS REASON_TO_TERMINATE
	,CASE
		WHEN TRIM(EI.ACTIVE_STATUS) = ''Active'' THEN TRUE
		WHEN TRIM(EI.ACTIVE_STATUS) IN (''Inactive'',''Terminate'') THEN FALSE
		ELSE FALSE
	END AS ACTIVE_EMPLOYEE_FLAG 
	,NULL AS ABLE_TO_REHIRE_FLAG
	,NULL AS EMPLOYEE_PREFIX  --Refer CCSI AND make same
	,EI.FIRST_NAME AS EMPLOYEE_FIRST_NAME
    ,MIDDLE_NAME AS EMPLOYEE_MIDDLE_NAME
    ,EI.LAST_NAME AS EMPLOYEE_LAST_NAME
	,NULL AS EMPLOYEE_SUFFIX
	,TRIM(EI.ADDRESS_LINE_1) AS EMPLOYEE_ADDRESS1
	,ADDRESS_LINE_2 AS EMPLOYEE_ADDRESS2
	,NVL(TRIM(EI.ADDRESS_CITY),GEO.CITY_PRIMARY_NAME) AS EMPLOYEE_CITY
	,TRIM(EI.ADDRESS_STATECODE) AS EMPLOYEE_STATE_CODE
	,TRIM(EI.ADDRESS_ZIPCODE) AS EMPLOYEE_ZIP 
	,case when PRIMARY_PHONE_TYPE = ''Home'' then  EI.PRIMARY_PHONE_NUMBER else null end  AS EMPLOYEE_HOME_PHONE
	,case when PRIMARY_PHONE_TYPE = ''Mobile'' then  EI.PRIMARY_PHONE_NUMBER else null end  AS EMPLOYEE_CELL_PHONE
	,case when PRIMARY_PHONE_TYPE = ''Work'' then  EI.PRIMARY_PHONE_NUMBER else null end  AS EMPLOYEE_WORK_PHONE
	,EMAIL AS EMPLOYEE_PERSONAL_EMAIL
	,EMAIL AS EMPLOYEE_WORK_EMAIL
	,NULL AS LINKED_IN_PROFILE_URL
	,UPPER(EI.GENDER) AS EMPLOYEE_GENDER 
	,NULL AS EMPLOYEE_ETHNICITY
	,FALSE AS HISPANIC_OR_LATINO
	,NULL AS EMPLOYEE_LANGUAGE
	,NULL AS EMPLOYEE_MARITAL_STATUS
	,EI.EMPLOYEMENT_TYPE AS EMPLOYEE_TYPE
	--,''Field'' AS EMPLOYEE_CATEGORY
	,CASE
		WHEN (TRIM(EI.TITLETYPE) ILIKE ANY (''CEO'', ''Administrator'', ''Alternate Administrator'', ''Administrative Assistant'',
	        ''Case Manager'')
		OR EI.MASTER_ID = ''0ed38489-f815-4b56-809c-d5a124c6baed'') THEN ''ADMIN'' --updating Jamie Back employee category TO Admin manually AS requested IN IDDOX-237 request
		ELSE ''FIELD''
	END AS EMPLOYEE_CATEGORY
	,NULL AS EXEMPT_FLAG
	,EI.TITLETYPE AS JOB_TITLE 
	,EI.TITLETYPE AS JOB_DESCRIPTION 
	,NULL AS CLASS_ID
	,NULL AS WORKERS_COMP
	,ATM.EMPLOYEE_NUMBER AS PAYROLL_ID
	,NULL AS PERCENT_401K_DEDUCTION
	,NULL AS AMOUNT_401K_DEDUCTION
	,NULL AS JAZZHR_APPLICANT_ID
	,NULL AS JAZZHR_USER_ID
	,NULL AS JAZZHR_CONTACT_ID
	,coalesce(EI.WORKING_LOCATION_STATECODE,''OH'') AS WORK_STATE --Can we consider OH hard coded. Need to confirm with Frank during review 
	,coalesce(ATM.SUTA_STATE,''OH'') AS SUTA_STATE
	,NULL AS EMPLOYEE_DEPARTMENT
	,o.office_code AS EMPLOYEE_OFFICE_CODE
	,MD5(''PRIME'' || ''-''|| COALESCE(UPPER(EB.BRANCH_ID),UPPER(TRIM(PV.BRANCH_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS PRIMARY_BRANCH_KEY
	,COALESCE(BI.LOCATION_ADDRESS_STATE_CODE, ''OH'') AS PRIMARY_BRANCH_STATE
	,coalesce(''OH'' || '' - ''|| COALESCE(UPPER(EB.BRANCH_NAME),UPPER(PV.BRANCH)) || '' ('' || O.OFFICE_CODE || '')'',''UNKNOWN'') AS PRIMARY_BRANCH_NAME
	,''PRIME'' AS PRIMARY_BRANCH_SYSTEM_CODE
	,NULL AS CASE_MANAGER_FLAG 
	,EI.IS_CASE_MANAGER::BOOLEAN AS SUPERVISOR_FLAG
	,NULL AS COORDINATOR_FLAG
	,NULL AS LINKED_ID,
	TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
	TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
	NULL AS MDM_DIM_EMPLOYEE_KEY,
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
   	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
   	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	0 AS ETL_DELETED_FLAG,
	0 AS ETL_INFERRED_MEMBER_FLAG
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.EMPLOYEE_MASTER_LIST EI
LEFT JOIN EMPLOYEE_BRANCH EB ON EB.SYSTEM_EMPLOYEE_ID = EI."MASTER_ID" 																	   
LEFT JOIN CTE PV ON PV.MASTER_ID = EI."MASTER_ID" 
LEFT JOIN AXXESS_TO_TRUSTPOINT_MAPPING ATM ON ATM.MASTER_ID = EI.MASTER_ID 
LEFT JOIN HAH.DIM_GEOGRAPHY GEO ON EI.ADDRESS_ZIPCODE = GEO.ZIP_CODE
left join DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_BRANCH_OFFICE_MAPPING o on COALESCE (EB.BRANCH_ID,pv.branch_id) = o.branch_id
LEFT JOIN BRANCH_INFO BI ON BI.BRANCH_ID = EB.BRANCH_ID
;
RETURN ''SUCCESS'';
end;                        

 EOT
}

