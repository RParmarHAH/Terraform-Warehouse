resource "snowflake_procedure" "DW_HAH_GET_STAGE_AXXESS_FACT_VISIT_BKCP_0525" {
	name ="GET_STAGE_AXXESS_FACT_VISIT_BKCP_0525"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 01/06/22    Abhishek Sunil        Initial Development
-- 09/23/33	   POOJA SHAH			 MODIFICATIONS AND HOME CARE ENHANCEMENTS COMPLETED
-- --------    -------------------   -----------------------------------------------------------------------------------------------
INSERT OVERWRITE INTO STAGE.AXXESS_FACT_VISIT_BKCP_0525

WITH DEDUP_LEVERAGE AS
(
	    SELECT * FROM 
	(
		SELECT MASTER_ID,PATIENT_ID 
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.CLIENT_MASTER_LIST  	
	)
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT MASTER_ID, PATIENT_ID 
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.CLIENT_MATCH_LIST  
		WHERE PATIENT_ID NOT IN (SELECT PATIENT_ID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.CLIENT_MASTER_LIST)	
	)
),
EMP_DEDUPE AS
(
  SELECT * FROM 
	(
		SELECT MASTER_ID, EMPLOYEE_ID, (FIRST_NAME || ''  '' || LAST_NAME) AS EMP_NAME
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.EMPLOYEE_MASTER_LIST  
	)	
	UNION
	SELECT * FROM 
	(
		SELECT  MASTER_ID, EMPLOYEE_ID, (FIRST_NAME || ''  '' || LAST_NAME) AS EMP_NAME
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.EMPLOYEE_MATCH_LIST  
		WHERE EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.EMPLOYEE_MASTER_LIST)		
	)
),
STATUS_MAPPING AS 
(
SELECT DISTINCT MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(VISIT_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS VISIT_KEY, VISIT_NAME  ,VISIT_TYPE,
TRY_TO_DATE(COALESCE(VISIT_DATE,''1999-12-31''), ''YYYY-MM-DD'') AS VISIT_DATE ,CLINICIAN_ID ,SCHEDULE_DATE  ,UPPER(TRIM(VISIT_STATUS)) AS VISIT_STATUS,IS_MISSED_VISIT ,VISIT_TIME_IN ,VISIT_TIME_OUT ,''HH'' AS REVENUE_CATEGORY 
,HV.FACT_AR_ID , UPPER(TRIM(AR.FINAL_OR_MANAGEDCARE_STATUS)) AS INVOICE_STATUS
FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.VW_AXXESS_HH_VISITS_UPPER HV
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_ARS AR ON HV.FACT_AR_ID =AR.ID
UNION ALL 
SELECT   DISTINCT
         VISIT_KEY                     
        ,SCHEDULED_TASK_NAME   
        ,SCHEDULED_TASK_DISCIPLINE
        ,VISIT_START
        ,CLINICIAN_ID                        
        ,SCHEDULED_TASK_STARTDATE
        ,SCHEDULED_TASK_STATUS
        ,SCHEDULED_TASK_ISMISSEDVISIT
        ,VISIT_START_TIME        
        ,VISIT_END          
        ,REVENUE_CATEGORY
        ,CLAIM_ID                            
        ,FIRST_VALUE(INVOICE_STATUS) OVER(PARTITION BY VISIT_KEY ORDER BY PRECEDENCE)
        --,PRECEDENCE
FROM 
(
SELECT DISTINCT  MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(SCHEDULED_TASK_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS VISIT_KEY, SCHEDULED_TASK_NAME , SCHEDULED_TASK_DISCIPLINE,
CAST(COALESCE(VISIT_START,''1999-12-31'') AS DATE) AS VISIT_START,CLINICIAN_ID,SCHEDULED_TASK_STARTDATE ,UPPER(TRIM(SCHEDULED_TASK_STATUS)) AS SCHEDULED_TASK_STATUS,SCHEDULED_TASK_ISMISSEDVISIT,VISIT_START AS VISIT_START_TIME,
VISIT_END,''HC'' AS REVENUE_CATEGORY,TD.CLAIM_ID ,TRIM(UPPER(FT.CLAIM_STATUS)) AS INVOICE_STATUS,
CASE WHEN TRIM(UPPER(FT.CLAIM_STATUS))=''OVER PAID'' THEN 1
       WHEN TRIM(UPPER(FT.CLAIM_STATUS))=''PAID'' THEN 2
       WHEN TRIM(UPPER(FT.CLAIM_STATUS))=''PARTIALLY PAID'' THEN 3 
       WHEN TRIM(UPPER(FT.CLAIM_STATUS))=''SUBMITTED'' THEN 4 END AS PRECEDENCE
--SELECT DISTINCT TRIM(UPPER(FT.CLAIM_STATUS))
FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.VW_AXXESS_HC_TASKDETAILS  TD 
--LEFT JOIN (SELECT CLAIM_ID, MAX(TRANSACTION_DATE) TRANSACTION_DATE FROM  DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_FINANCIALTRANSACTIONS GROUP BY CLAIM_ID) FIN  ON FIN.CLAIM_ID=TD.CLAIM_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_FINANCIALTRANSACTIONS FT ON TD.CLAIM_ID =FT.CLAIM_ID and  FT.TRANSACTION_ID IS NOT NULL--AND FT.TRANSACTION_DATE =FIN.TRANSACTION_DATE
)T
),
DERIVED_VISIT  AS
(
SELECT STATUS_MAPPING.VISIT_KEY AS VISIT_KEY,	
	CASE
			--WHEN TRY_TO_DATE(TRIM(VISIT_DATE),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) THEN ''Future''
			WHEN VISIT_DATE > TO_DATE(GETDATE()) THEN ''Future''
--			WHEN IS_MISSED_VISIT=''True''  OR  VISIT_STATUS IN (''MISSED VISIT(COMPLETE)'',''MISSED VISIT(PENDING)'')  --AND  (VISIT_TIME_IN IS  NULL AND  VISIT_TIME_OUT IS NULL )   
--			THEN ''Did not happen''
			WHEN (IS_MISSED_VISIT=''True''  OR  VISIT_STATUS IN (''MISSED VISIT(COMPLETE)'',''MISSED VISIT(PENDING)'') ) --AND  (VISIT_TIME_IN IS  NULL AND  VISIT_TIME_OUT IS NULL )   
            OR (VISIT_STATUS IN (''NOT YET DUE'',''RETURNED W/ PHYSICIAN SIGNATURE'',''COMPLETED'',''MISSED VISIT(COMPLETE)'') AND STATUS_MAPPING.CLINICIAN_ID IS NULL)
            THEN ''Did not happen''
			WHEN (VISIT_STATUS) IN (''NOTECOMPLETED'',''OASISCOMPLETEDEXPORTREADY'',''OASISEXPORTED'',''ORDERRECEIVED'',
										''EVALRETURNEDWPHYSICIANSIGNATURE'',''NOTEMISSEDVISITCOMPLETE'',''NONOASISCOMPLETED'',
										''COMPLETED'',''COMPLETED(EXPORT READY)'',''COMPLETED(NOT EXPORTED)'',''EXPORTED''
										,''COMPLETED'',''COMPLETED(EXPORT READY)'',''COMPLETED(NOT EXPORTED)'',''EXPORTED'',''RETURNED W/ PHYSICIAN SIGNATURE'',''COMPLETED (NOT EXPORTED)''
										,''COMPLETED (EXPORT READY)'',
										''OASISCOMPLETEDNOTEXPORTED'') 
										THEN ''Completed''
			WHEN (VISIT_STATUS) IN (''ORDERREOPENED'',''NOTEREOPENED'',''NOTERETURNED'',''OASISNOTYETDUE'',
										''OASISNOTSTARTED'',''ORDERTOBESENTTOPHYSICIAN'',''NOTESAVED'',''ORDERNOTYETSTARTED'',''ORDERSENTTOPHYSICIAN'',''NOTENOTYETDUE'',
										''OASISSAVED'',''OASISREOPENED'',''ORDERRETURNEDFORCLINICIANREVIEW'',''ORDERSAVED''
										,''NOT YET DUE'',''SAVED'',''RETURNED FOR REVIEW'',''TO BE SENT TO PHYSICIAN'',
							            ''SENT TO PHYSICIAN (MANUALLY)'',''RETURNED FOR CLINICIAN SIGNATURE'',''NOT YET STARTED''
							            ,''COMPLETED (PENDING QA REVIEW)'',''OASISCOMPLETEDPENDINGREVIEW'',''REOPENED'',''SUBMITTED (PENDING QA REVIEW)''
							            ,''SUBMITTED WITH SIGNATURE'',''SUBMITTED PENDING CO-SIGNATURE'',''MISSED VISIT(RETURN FOR REVIEW)'') 
										THEN ''In Review''
			WHEN (VISIT_STATUS) IN (''NOTESUBMITTEDWITHSIGNATURE'',''ORDERSUBMITTEDPENDINGREVIEW'',''NOTEMISSEDVISITPENDING'',
										''SUBMITTEDWITHSIGNATUREPENDINGOASISAPPROVAL'') 
										THEN ''Pending''
   		 ELSE ''Completed'' END AS DERIVED_VISIT_STATUS -- UNKNOWN
FROM STATUS_MAPPING
),
CONFIRMED_FLAG_CTE AS		--Added By Pinkal on 11/25/2022
(
	SELECT STATUS_MAPPING.VISIT_KEY,STATUS_MAPPING.REVENUE_CATEGORY,VIS.DERIVED_VISIT_STATUS,
	CASE WHEN NVL(VIS.DERIVED_VISIT_STATUS,'''') IN (''In Review'',''Completed'') AND STATUS_MAPPING.CLINICIAN_ID IS NOT NULL THEN ''YES'' 
	 WHEN  NVL(VIS.DERIVED_VISIT_STATUS,'''')=''Did not happen'' 	THEN ''NO''
	 ELSE ''UNKNOWN'' END AS CONFIRMED_FLAG
	FROM  STATUS_MAPPING 
	LEFT JOIN DERIVED_VISIT VIS ON VIS.VISIT_KEY=STATUS_MAPPING.VISIT_KEY
),
DERIVED_SCH AS
(
SELECT STATUS_MAPPING.VISIT_KEY AS VISIT_KEY,
		CASE WHEN 	SCHEDULE_DATE IS NOT NULL 
					 AND IS_MISSED_VISIT=''False'' 
					 AND (VISIT_TIME_IN IS NOT NULL OR  VISIT_TIME_OUT IS NOT NULL )
					 AND CLINICIAN_ID IS NOT NULL THEN ''Scheduled''
			 WHEN 	SCHEDULE_DATE IS NOT NULL AND
      			    (IS_MISSED_VISIT=''True'' ) -- ANd VISIT_TIME_IN IS  NULL
					 THEN ''Cancelled''
			 WHEN 	SCHEDULE_DATE IS NOT NULL 
					 AND IS_MISSED_VISIT=''False'' 
					 AND (CLINICIAN_ID IS NULL)  AND VISIT_STATUS IN (''NOT YET DUE'') THEN ''Scheduled - Open''
			WHEN SCHEDULE_DATE IS NOT NULL AND (IS_MISSED_VISIT=''True'' )  
				 AND (VISIT_TIME_IN IS NOT NULL OR  VISIT_TIME_OUT IS NOT NULL ) AND VISIT_STATUS NOT IN (''MISSED VISIT(COMPLETE)'',''MISSED VISIT(PENDING)'')
			THEN ''Rescheduled''
			WHEN SCHEDULE_DATE IS NOT NULL THEN ''Scheduled''
			END AS DERIVED_SCHEDULE_STATUS,
--		MD5(''14'' || ''-'' || ''AXXESS'' || ''-'' || CONCAT( UPPER(NVL(DERIVED_SCHEDULE_STATUS,'''')),''-'',NVL(STATUS_MAPPING.VISIT_STATUS,''''),''-'', NVL(DERIVED_VISIT.DERIVED_VISIT_STATUS,''''),''-'', NVL(STATUS_MAPPING.INVOICE_STATUS,'''')) ) AS VISIT_STATUS_KEY,
		MD5(''14'' || ''-'' || ''AXXESS'' || ''-'' || CONCAT( UPPER(NVL(DERIVED_SCHEDULE_STATUS,'''')),''-'',NVL(STATUS_MAPPING.VISIT_STATUS,''''),''-'', NVL(DERIVED_VISIT.DERIVED_VISIT_STATUS,''''),''-'', NVL(STATUS_MAPPING.INVOICE_STATUS,''''),''-'', NVL(CON.CONFIRMED_FLAG,'''')) ) AS VISIT_STATUS_KEY,		--Added by Pinkal
		CONCAT(  UPPER(NVL(DERIVED_SCHEDULE_STATUS,'''')),''-'', NVL(STATUS_MAPPING.VISIT_STATUS,''''),''-'',NVL(DERIVED_VISIT.DERIVED_VISIT_STATUS,'''') ,''-'', NVL(STATUS_MAPPING.INVOICE_STATUS,'''')) AS DERIVED_DISC_STATUS
FROM STATUS_MAPPING
LEFT JOIN DERIVED_VISIT ON DERIVED_VISIT.VISIT_KEY = STATUS_MAPPING.VISIT_KEY
LEFT JOIN CONFIRMED_FLAG_CTE CON ON CON.VISIT_KEY=STATUS_MAPPING.VISIT_KEY AND CON.REVENUE_CATEGORY=STATUS_MAPPING.REVENUE_CATEGORY
),
VISITS AS (
SELECT DISTINCT
		 MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(PV.VISIT_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS VISIT_KEY	-- Added by Pinkal on 24/08/22	
		,TRY_TO_DATE(COALESCE(PV.VISIT_DATE,''1999-12-31''), ''YYYY-MM-DD'') AS REPORT_DATE	-- Added by Pinkal on 24/08/22	
		,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(PV.BRANCH_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS BRANCH_KEY  --Pankti M.
 		,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(B.MASTER_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS CLIENT_KEY    --Pankti M.
--		,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(PV.EPISODE_PRIMARY_INSURANCE)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS CONTRACT_KEY  --Pankti M.
		,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(PV.EPISODE_PRIMARY_INSURANCE)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS CONTRACT_KEY -- Added by PJShah
		,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(EMP.MASTER_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS SCHEDULED_EMPLOYEE_KEY		--Pinkal
		,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(EMP.MASTER_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS EMPLOYEE_KEY   --Pankti M.
		,14 AS SOURCE_SYSTEM_ID
		,MD5(''PRIME'' || ''-'' ||  IFNULL(UPPER(TRIM(E.EMPLOYEE_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS SUPERVISOR_KEY  --Pankti M.
--		,NULL AS INVOICE_KEY		--Pinkal
		,MD5(''PRIME'' || ''-'' || UPPER(TRIM(A.ID)) || ''-'' || ''AXXESS'') AS INVOICE_KEY --Pankti M.
		,NULL AS PAYROLL_KEY		--Pinkal
		,TRY_TO_DATE(COALESCE(PV.VISIT_DATE,''1999-12-31''), ''YYYY-MM-DD'') AS SERVICE_DATE	-- Added by Pinkal on 24/08/22	
		,NULL AS PAYROLL_DATE
		,UPPER(PV.BRANCH) AS BRANCH_NAME
		,PV.PATIENT_ID AS CLIENT_NUMBER  -- ADDED BY PJSHAH ON 6/29
		,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(PV.EPISODE_PRIMARY_INSURANCE)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS CONTRACT_CODE
		,PV.CLINICIAN_ID AS SCHEDULED_EMPLOYEE_ID		--Pinkal
		,PV.CLINICIAN_ID AS EMPLOYEE_ID
		,''PRIME'' AS SYSTEM_CODE
		,E.EMPLOYEE_ID AS SUPERVISOR_CODE  -- MAPPED BY PJSHAH ON 6/29
--		,NULL AS INVOICE_ID		--Pinkal
		,A.ID AS INVOICE_ID
		,NULL AS CHEQUE_NUMBER		--Pinkal
		,FALSE AS CLEAN_SHIFT_FLAG
--	    ,NULL AS SCHEDULE_STATUS_CODE	--Pinkal
		,''s01''AS SCHEDULE_STATUS_CODE   --Pankti M.   --For Axxess all visits are scheduled  s01 only.
--		,NULL AS SCHEDULE_STATUS_NAME   --Pankti M.   --For Axxess all visits are scheduled only.
		,''Scheduled'' AS  SCHEDULE_STATUS_NAME 
		,NULL AS SCHEDULE_STATUS_DESCRIPTION
		,NULL AS VISIT_STATUS_CODE
		,NULL AS VISIT_STATUS_NAME
		,NULL AS VISIT_STATUS_DESCRIPTION 
		,NULL AS INVOICE_STATUS_CODE 
		,NULL AS INVOICE_STATUS_NAME 
		,NULL AS INVOICE_STATUS_DESCRIPTION 
		,NULL AS PAYROLL_STATUS_CODE
		,NULL AS PAYROLL_STATUS_NAME
		,NULL AS PAYROLL_STATUS_DESCRIPTION		--Pinkal
		--,VM.STATUS_CODE AS STATUS_CODE
		--,VM.VISIT_STATUS AS STATUS_DESCRIPTION 
		,NULL AS CANCEL_REASON_CODE
		,NULL AS CANCEL_REASON_DESCRIPTION
		,NULL AS CANCEL_REASON_NOTES
		,FALSE AS EXCEPTION_REASON_FLAG
		,NULL AS RESOLUTION_CODE
		,NULL AS RESOLUTION_DESCRIPTION
		,NULL AS REJECTION_CODE
		,NULL AS REJECTION_DESCRIPTION
		,NULL AS BILL_CODE
		,NULL AS BILL_RATE
		,NULL AS BILL_UNITS_SERVED		--Pinkal
--		,''Hourly'' AS BILL_UNIT_TYPE 	--Pankti M.
		,CASE WHEN UPPER(TRIM(PV.BILLED_UNIT_TYPE)) IN (''EPISODE'',''PER VISIT'') THEN ''Visit''
			WHEN UPPER(TRIM(PV.BILLED_UNIT_TYPE)) IN (''PER VISIT / PER 15 MIN'',''PER 15 MIN'',''HOURLY'',''NA'') THEN ''Hourly''
			ELSE ''Hourly''
		END AS BILL_UNIT_TYPE		-- Added on 19/01/23 by Pinkal
		,NULL AS OVERHEAD_RATE
		,NULL AS SCHEDULE_TIMEIN
		,NULL AS SCHEDULE_TIMEOUT 
		,NULL AS SCHEDULE_DURATION 
		,TRY_TO_TIME(VISIT_TIME_IN) AS ACTUAL_TIMEIN		--Pinkal
		,TRY_TO_TIME(VISIT_TIME_OUT) AS ACTUAL_TIMEOUT		--Pinkal
		,NULL AS ACTUAL_DURATION 
		,NULL AS ADJUSTED_TIMEIN 
		,NULL AS ADJUSTED_TIMEOUT 
		,NULL AS ADJUSTED_DURATION		--Pinkal
--		,COALESCE(TIMEDIFF(MINUTE, TRY_TO_TIME(PV.VISIT_TIME_IN),TRY_TO_TIME(PV.VISIT_TIME_OUT))/60,0) AS HOURS_SERVED --Modified by Pankti M.
		,NVL(iff(COALESCE(TIMEDIFF(MINUTE, TRY_TO_TIME(PV.VISIT_TIME_IN),TRY_TO_TIME(PV.VISIT_TIME_OUT))/60,0) > 0,
        COALESCE(TIMEDIFF(MINUTE, TRY_TO_TIME(PV.VISIT_TIME_IN),TRY_TO_TIME(PV.VISIT_TIME_OUT))/60,0),
        datediff(hour, to_timestamp(TO_DATE(PV.VISIT_DATE) || '' '' || TRY_TO_TIME(PV.VISIT_TIME_IN), ''YYYY-MM-DD HH:MI:ss''),
        to_timestamp(TO_DATE(DATEADD(day, 1, PV.VISIT_DATE)) || '' '' || TRY_TO_TIME(PV.VISIT_TIME_OUT), ''YYYY-MM-DD HH:MI:ss''))
    	),0) AS HOURS_SERVED --Modified by Pinkal on 03/02/23
		,''HH'' AS COMMENTS
		,NULL AS IS_EVV_FLAG
		,NULL AS TIMESHEET_TYPE
		,NULL AS TRACKING_ID,
		-- ,''HH'' AS REVENUE_CATEGORY -- Added by PJShah on 07/06 as per discussion with Mohit & Prachi
		-- ,NULL AS REVENUE_SUBCATEGORY_CODE -- Added by PJShah on 07/06 as per discussion with Mohit & Prachi
		-- ,NULL AS REVENUE_SUBCATEGORY_NAME -- Added by PJShah on 07/06 as per discussion with Mohit & Prachi	
		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
   		:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
      	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
      	,CURRENT_USER AS ETL_INSERTED_BY 
      	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
      	,CURRENT_USER AS ETL_LAST_UPDATED_BY
	    ,0 AS ETL_DELETED_FLAG	
		,NULL AS CONFIRMED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.VW_AXXESS_HH_VISITS_UPPER PV
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_ARS A ON A.ID = PV.FACT_AR_ID
LEFT JOIN DEDUP_LEVERAGE B ON B.PATIENT_ID = PV.PATIENT_ID
LEFT JOIN EMP_DEDUPE E ON E.EMPLOYEE_ID = PV.CASE_MANAGER_ID
LEFT JOIN EMP_DEDUPE EMP ON EMP.EMPLOYEE_ID=PV.CLINICIAN_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_VISIT_STATUS_MAPPING VM ON PV.VISIT_STATUS = VM.SCHEDULED_TASK_STATUS AND VM.REVENUE_CATEGORY = ''HH''
WHERE VISIT_TYPE NOT IN (''ReportsAndNotes'') AND
PV.VISIT_STATUS NOT IN (''OrderReturnedWPhysicianSignature'',''NoteNotStarted'')
--/* -- COMMENTED BY PJSHAH ON 160822
AND PV.VISIT_ID IS NOT NULL 
AND PV.VISIT_DATE IS NOT NULL 
AND PV.BRANCH_ID IS NOT NULL
AND PV.PATIENT_ID IS NOT NULL 
AND PV.CLINICIAN_ID IS NOT NULL 
AND PV.CASE_MANAGER_ID IS NOT NULL 
AND PV.VISIT_DATE IS NOT NULL
 --*/
UNION ALL  -- FOR HOMECARE DATA 
SELECT DISTINCT 
	 MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(PV.SCHEDULED_TASK_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS VISIT_KEY
--	,TRY_TO_DATE(COALESCE(PV.VISIT_START,''1999-12-31''), ''YYYY-MM-DD'') AS REPORT_DATE
	,CAST(COALESCE(PV.VISIT_START,''1999-12-31'') AS DATE) AS REPORT_DATE  -- Added by Pinkal on 31/10/22
	,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(PV.BRANCH_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS BRANCH_KEY
	,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(B.MASTER_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS CLIENT_KEY	
	,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(PV.PRIMARY_INSURANCE_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS CONTRACT_KEY -- Added by PJShah 
	,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(EMP.MASTER_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS SCHEDULED_EMPLOYEE_KEY		--Pinkal
	,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(EMP.MASTER_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS EMPLOYEE_KEY -- MODIFIED BY PJSHAH ON 09/23
	,14 AS SOURCE_SYSTEM_ID
	,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(E.EMPLOYEE_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS SUPERVISOR_KEY
--	,NULL AS INVOICE_KEY		--Pinkal
	,MD5(''PRIME'' || ''-'' || UPPER(TRIM(PV.CLAIM_ID)) || ''-'' || ''AXXESS'') AS INVOICE_KEY --Pankti M.
	,NULL AS PAYROLL_KEY		--Pinkal
--	,TRY_TO_DATE(COALESCE(PV.VISIT_START,''1999-12-31''), ''YYYY-MM-DD'') AS SERVICE_DATE
	,CAST(COALESCE(PV.VISIT_START,''1999-12-31'') AS DATE) AS SERVICE_DATE  -- Added by Pinkal on 31/10/22
	,NULL AS PAYROLL_DATE
	,UPPER(TRIM(PV.BRANCH_NAME)) AS BRANCH_NAME
	,PV.CLIENT_ID AS CLIENT_NUMBER -- CHECK FOR VARCHAR -- NEED TO MAP CLIENT_ID NUMERIC
	,MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(PV.PRIMARY_INSURANCE_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS CONTRACT_CODE
	,TRIM(PV.CLINICIAN_ID) AS SCHEDULED_EMPLOYEE_ID		--Pinkal
	,TRIM(PV.CLINICIAN_ID) AS  EMPLOYEE_ID -- ADDED BY PJSHAH ON 09/23 
	,''PRIME'' AS SYSTEM_CODE
	,UPPER(TRIM(E.EMPLOYEE_ID)) AS SUPERVISOR_CODE
--	,NULL AS INVOICE_ID		--Pinkal
	,PV.CLAIM_ID  AS INVOICE_ID    --Pankti M.
	,NULL AS CHEQUE_NUMBER		--Pinkal
	,FALSE AS CLEAN_SHIFT_FLAG
--	,NULL AS SCHEDULE_STATUS_CODE	--Pinkal
	,''s01''AS SCHEDULE_STATUS_CODE   --Pankti M.   --For Axxess all visits are scheduled  s01 only.
--	,NULL AS SCHEDULE_STATUS_NAME   --Pinkal
	,''Scheduled'' AS  SCHEDULE_STATUS_NAME --Pankti M.   --For Axxess all visits are scheduled only.
	,NULL AS SCHEDULE_STATUS_DESCRIPTION
	,NULL AS VISIT_STATUS_CODE
	,NULL AS VISIT_STATUS_NAME
	,NULL AS VISIT_STATUS_DESCRIPTION 
	,NULL AS INVOICE_STATUS_CODE 
	,NULL AS INVOICE_STATUS_NAME 
	,NULL AS INVOICE_STATUS_DESCRIPTION 
	,NULL AS PAYROLL_STATUS_CODE
	,NULL AS PAYROLL_STATUS_NAME
	,NULL AS PAYROLL_STATUS_DESCRIPTION		--Pinkal
	--,VM.STATUS_CODE AS STATUS_CODE
	--,VM.VISIT_STATUS AS STATUS_DESCRIPTION 
	,NULL AS CANCEL_REASON_CODE
	,NULL AS CANCEL_REASON_DESCRIPTION
	,NULL AS CANCEL_REASON_NOTES
	,FALSE AS EXCEPTION_REASON_FLAG
	,NULL AS RESOLUTION_CODE
	,NULL AS RESOLUTION_DESCRIPTION
	,NULL AS REJECTION_CODE
	,NULL AS REJECTION_DESCRIPTION
	,NULL AS BILL_CODE
	,NULL AS BILL_RATE
	,NULL AS BILL_UNITS_SERVED		--Pinkal
--	,''Hourly'' AS BILL_UNIT_TYPE 	--Pankti
	,CASE WHEN UPPER(TRIM(PV.BILLED_UNIT_TYPE)) IN (''EPISODE'',''PER VISIT'') THEN ''Visit''
		WHEN UPPER(TRIM(PV.BILLED_UNIT_TYPE)) IN (''PER VISIT / PER 15 MIN'',''PER 15 MIN'',''HOURLY'',''NA'') THEN ''Hourly''
		ELSE ''Hourly''
	END AS BILL_UNIT_TYPE		-- Added on 19/01/23 by Pinkal
	,NULL AS OVERHEAD_RATE
	,NULL AS SCHEDULE_TIMEIN
	,NULL AS SCHEDULE_TIMEOUT 
	,NULL AS SCHEDULE_DURATION 
	,COALESCE(TRY_to_TIMESTAMP(TD.VISIT_START,''DD-MM-YYYY HH:MI''),TRY_to_TIMESTAMP(TD.VISIT_START,''MM/DD/YYYY HH:MI:ss''))::TIME AS ACTUAL_TIMEIN		--Pinkal
	,COALESCE(TRY_to_TIMESTAMP(TD.VISIT_END,''DD-MM-YYYY HH:MI''),TRY_to_TIMESTAMP(TD.VISIT_END,''MM/DD/YYYY HH:MI:ss''))::TIME AS ACTUAL_TIMEOUT		--Pinkal
    ,NULL AS ACTUAL_DURATION    
	,NULL AS ADJUSTED_TIMEIN 
	,NULL AS ADJUSTED_TIMEOUT 
	,NULL AS ADJUSTED_DURATION		--Pinkal
--    ,COALESCE(TIMEDIFF(MINUTE,COALESCE(TRY_to_TIMESTAMP(TD.VISIT_START,''DD-MM-YYYY HH:MI''),TRY_to_TIMESTAMP(TD.VISIT_START,''MM/DD/YYYY HH:MI''))::TIME ,
--      COALESCE(TRY_to_TIMESTAMP(TD.VISIT_END,''DD-MM-YYYY HH:MI''),TRY_to_TIMESTAMP(TD.VISIT_END,''MM/DD/YYYY HH:MI''))::TIME 
--      )/60,0) AS HOURS_SERVED,
      ,NVL(iff(COALESCE(TIMEDIFF(MINUTE,COALESCE(TRY_to_TIMESTAMP(TD.VISIT_START,''DD-MM-YYYY HH:MI:ss''),TRY_to_TIMESTAMP(TD.VISIT_START,''MM/DD/YYYY HH:MI:ss''))::TIME ,
      COALESCE(TRY_to_TIMESTAMP(TD.VISIT_END,''DD-MM-YYYY HH:MI:ss''),TRY_to_TIMESTAMP(TD.VISIT_END,''MM/DD/YYYY HH:MI:ss''))::TIME 
      )/60,0) > 0,
        COALESCE(TIMEDIFF(MINUTE,COALESCE(TRY_to_TIMESTAMP(TD.VISIT_START,''DD-MM-YYYY HH:MI:ss''),TRY_to_TIMESTAMP(TD.VISIT_START,''MM/DD/YYYY HH:MI:ss''))::TIME ,
      COALESCE(TRY_to_TIMESTAMP(TD.VISIT_END,''DD-MM-YYYY HH:MI:ss''),TRY_to_TIMESTAMP(TD.VISIT_END,''MM/DD/YYYY HH:MI:ss''))::TIME 
      )/60,0),
        datediff(hour, COALESCE(TRY_to_TIMESTAMP(TD.VISIT_START,''DD-MM-YYYY HH:MI:ss''),TRY_to_TIMESTAMP(TD.VISIT_START,''MM/DD/YYYY HH:MI:ss''))::DATETIME ,
        DATEADD(day, 1,COALESCE(TRY_to_TIMESTAMP(TD.VISIT_END,''DD-MM-YYYY HH:MI:ss''),TRY_to_TIMESTAMP(TD.VISIT_END,''MM/DD/YYYY HH:MI:ss''))::DATETIME ))
    ),0) AS HOURS_SERVED		--Modified by Pinkal on 03/02/23
	,''HC'' AS COMMENTS
	,NULL AS IS_EVV_FLAG
	,NULL AS TIMESHEET_TYPE
	,NULL AS TRACKING_ID,
	-- ,''HC'' AS REVENUE_CATEGORY -- Added by PJShah on 07/06 as per discussion with Mohit & Prachi
	-- 	,NULL AS REVENUE_SUBCATEGORY_CODE -- Added by PJShah on 07/06 as per discussion with Mohit & Prachi
	-- 	,NULL AS REVENUE_SUBCATEGORY_NAME -- Added by PJShah on 07/06 as per discussion with Mohit & Prachi	
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
   	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
     ,CONVERT_TIMEZONE(''UTC'',CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
     ,CURRENT_USER AS ETL_INSERTED_BY ,CONVERT_TIMEZONE(''UTC'',CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
     ,CURRENT_USER AS ETL_LAST_UPDATED_BY
	 ,0 AS ETL_DELETED_FLAG
	,NULL AS CONFIRMED_FLAG
FROM
DISC_${var.SF_ENVIRONMENT}.AXXESS.VW_AXXESS_HC_TASKDETAILS PV
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_FINANCIALTRANSACTIONS FIN ON FIN.CLAIM_ID = PV.CLAIM_ID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_TASKDETAILS TD ON TD.SCHEDULED_TASK_ID = PV.SCHEDULED_TASK_ID 
LEFT JOIN DEDUP_LEVERAGE B ON B.PATIENT_ID = PV.CLIENT_ID
LEFT JOIN EMP_DEDUPE E ON E.EMPLOYEE_ID = PV.CAREPERIOD_CASEMANAGER_ID
LEFT JOIN EMP_DEDUPE EMP ON EMP.EMPLOYEE_ID=PV.CLINICIAN_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_VISIT_STATUS_MAPPING VM ON PV.SCHEDULED_TASK_STATUS = VM.SCHEDULED_TASK_STATUS AND VM.REVENUE_CATEGORY = ''HC''
WHERE PV.SCHEDULED_TASK_ID IS NOT NULL -- AND FIN.TRANSACTION_ID IS NOT NULL
)
SELECT VISITS.VISIT_KEY
	,VISITS.REPORT_DATE
	,VISITS.BRANCH_KEY
	,VISITS.CLIENT_KEY
	,VISITS.CONTRACT_KEY
	,VISITS.SCHEDULED_EMPLOYEE_KEY
	,VISITS.EMPLOYEE_KEY
	,VISITS.SOURCE_SYSTEM_ID
	,VISITS.SUPERVISOR_KEY
	,VISITS.INVOICE_KEY
	,VISITS.PAYROLL_KEY
	,VISITS.SERVICE_DATE
	,PAYROLL_DATES.CHECK_DATE AS PAYROLL_DATE -- TO ADD PAYROLL_DATE
	,VISITS.BRANCH_NAME
	,VISITS.CLIENT_NUMBER
	,VISITS.CONTRACT_CODE
	,VISITS.SCHEDULED_EMPLOYEE_ID
	,VISITS.EMPLOYEE_ID
	,VISITS.SYSTEM_CODE
	,VISITS.SUPERVISOR_CODE
	,VISITS.INVOICE_ID
	,VISITS.CHEQUE_NUMBER
	,VISITS.CLEAN_SHIFT_FLAG
	,VSM.SCHEDULE_STATUS_CODE
	,VSM.SCHEDULE_STATUS_NAME
	,VSM.SCHEDULE_STATUS_DESCRIPTION
	,VSM.VISIT_STATUS_CODE
	,VSM.VISIT_STATUS_NAME
	,VSM.VISIT_STATUS_DESCRIPTION 
	,VSM.INVOICE_STATUS_CODE 
	,VSM.INVOICE_STATUS_NAME 
	,VSM.INVOICE_STATUS_DESCRIPTION 
	,VSM.PAYROLL_STATUS_CODE
	,VSM.PAYROLL_STATUS_NAME
	,VSM.PAYROLL_STATUS_DESCRIPTION
	,VISITS.CANCEL_REASON_CODE
	,VISITS.CANCEL_REASON_DESCRIPTION
	,VISITS.CANCEL_REASON_NOTES
	,VISITS.EXCEPTION_REASON_FLAG
	,VISITS.RESOLUTION_CODE 
	,VISITS.RESOLUTION_DESCRIPTION
	,VISITS.REJECTION_CODE
	,VISITS.REJECTION_DESCRIPTION
	,VISITS.BILL_CODE
	,VISITS.BILL_RATE
	,VISITS.BILL_UNITS_SERVED	
	,VISITS.BILL_UNIT_TYPE 
	,VISITS.OVERHEAD_RATE
	,VISITS.SCHEDULE_TIMEIN
	,VISITS.SCHEDULE_TIMEOUT 
	,VISITS.SCHEDULE_DURATION 
	,VISITS.ACTUAL_TIMEIN 
	,VISITS.ACTUAL_TIMEOUT 
	,VISITS.ACTUAL_DURATION 
	,VISITS.ADJUSTED_TIMEIN
	,VISITS.ADJUSTED_TIMEOUT
	,VISITS.ADJUSTED_DURATION
	,VISITS.HOURS_SERVED
	,VISITS.COMMENTS
	,VISITS.IS_EVV_FLAG
	,VISITS.TIMESHEET_TYPE
	,VISITS.TRACKING_ID
    -- VISITS.REVENUE_CATEGORY,VISITS.REVENUE_SUBCATEGORY_CODE,VISITS.REVENUE_SUBCATEGORY_NAME,
    ,VISITS.ETL_TASK_KEY
    ,VISITS.ETL_INSERTED_TASK_KEY
    ,VISITS.ETL_INSERTED_DATE
    ,VISITS.ETL_INSERTED_BY
    ,VISITS.ETL_LAST_UPDATED_DATE
	,VISITS.ETL_LAST_UPDATED_BY
	,VISITS.ETL_DELETED_FLAG 
	,VSM.CONFIRMED_FLAG
FROM VISITS
LEFT JOIN "STAGE".AXXESS_FACT_BRANCH_PAYROLL_PERIODS AS PAYROLL_DATES
		ON PAYROLL_DATES.BRANCH_KEY = VISITS.BRANCH_KEY
        AND PAYROLL_DATES.PERIOD_END_DATE <= LAST_DAY(CURRENT_DATE,''WEEK'') -1
		AND VISITS.SERVICE_DATE BETWEEN PAYROLL_DATES.PERIOD_START_DATE AND PAYROLL_DATES.PERIOD_END_DATE
LEFT JOIN DERIVED_SCH AS SCH ON SCH.VISIT_KEY = VISITS.VISIT_KEY
LEFT JOIN DW_${var.SF_ENVIRONMENT}."STAGE".AXXESS_DIM_VISIT_STATUS_MAPPING VSM ON VSM.VISIT_STATUS_KEY = SCH.VISIT_STATUS_KEY
--WHERE VISITS.VISIT_KEY NOT IN (''c7797170f49fdfdeb7d13c43b9c5602f'',''938d2c5fa038a9768b5e6bd0dac7c3e3'',
--''e0e40556f3f0979ef832559fcf93606d'',''1730c52820aff30ee88102634cc045fb'',''e4b75076a980db5aa6df514fc558ea97'',
--''77e97df9bf6d436ebf4ed5bd9191c1d7'',''250c98e721c21aeb9b8b5a4797c860cf'')
;

RETURN ''SUCCESS'';
end;                        

 EOT
}

