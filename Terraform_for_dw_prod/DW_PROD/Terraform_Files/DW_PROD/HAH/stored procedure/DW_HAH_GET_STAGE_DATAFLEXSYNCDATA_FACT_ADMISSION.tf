resource "snowflake_procedure" "DW_HAH_GET_STAGE_DATAFLEXSYNCDATA_FACT_ADMISSION" {
	name ="GET_STAGE_DATAFLEXSYNCDATA_FACT_ADMISSION"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN

--***************************************************************************************************************************
-- NAME:  DATAFLEXSYNCDATA_FACT_ADMISSION
--
-- PURPOSE: Creates One Row Per Admission According to DataFlexSyncData
--
-- Development LOG:
-- DATE			AUTHOR				NOTES:
-- --------		----------------	-----------------------------------------------------------------------------------------
-- 03/24/2023	Abhishek Sunil		Initial Development
-- 06/26/2023   Sandesh Gosavi      Modification In Initial Development Logic
--***************************************************************************************************************************

INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.STAGE.DATAFLEXSYNCDATA_FACT_ADMISSION
WITH ADMISSION AS (
	SELECT 
		CC.DBNAME,
		CC.CLIENTNUMBER,
		CC.CONTRACTCODE,
		CON.REVENUESUBCATEGORY,
		CON.REVENUECATEGORY,
		CON.PAYORCODE,
		MIN(CC.BEGINSERVICEDATE) AS FIRST_ADMIT_DATE,
		MAX(CC.ENDSERVICEDATE) AS DISCHARGE_DATE
	FROM 
		DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTCONTRACTS CC
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCONTRACTS CON
		ON CON.DBNAME = CC.DBNAME
			AND CON.CONTRACTCODE = CC.CONTRACTCODE
	GROUP BY
		CC.DBNAME,
		CC.CLIENTNUMBER,
		CC.CONTRACTCODE,
		CON.REVENUESUBCATEGORY,
		CON.REVENUECATEGORY,
		CON.PAYORCODE
)

, CLIENTS AS (
	SELECT 
		CLIDIAG.DBNAME,
		CLIDIAG.CLIENTNUMBER,
		DA9.DIAGNOSIS_KEY AS DA9_KEY,
		DA9.DIAGNOSIS_CODE AS DA9_CODE,
		DA9.SHORT_DESC AS DA9_DESC,
		DA10.DIAGNOSIS_KEY AS DA10_KEY,
		DA10.DIAGNOSIS_CODE AS DA10_CODE,
		DA10.SHORT_DESC AS DA10_DESC
	FROM (
		SELECT
			CLI.DBNAME,
			CLI."NUMBER" AS CLIENTNUMBER,
			CLI.ICD9CODES,
			UPPER(REPLACE(NULLIF(TRIM(codes9.VALUE),''''),''.'','''')) AS PRIMARY_ICD9_DIAG,
			CLI.ICD10CODES,
			UPPER(REPLACE(NULLIF(TRIM(codes10.VALUE),''''),''.'','''')) AS PRIMARY_ICD10_DIAG
		FROM
			DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTS CLI
		,LATERAL SPLIT_TO_TABLE(ICD9CODES,'';'') codes9
		,LATERAL SPLIT_TO_TABLE(ICD10CODES,'';'') codes10
		WHERE CODES9.INDEX = 1 AND CODES10.INDEX = 1
	) CLIDIAG
	LEFT JOIN 
		DW_${var.SF_ENVIRONMENT}.HAH.DIM_DIAGNOSIS_2_0 DA9 
			ON CLIDIAG.PRIMARY_ICD9_DIAG = REPLACE(DA9.DIAGNOSIS_CODE,''.'','''') AND CLIDIAG.PRIMARY_ICD9_DIAG IS NOT NULL AND DA9.ICD9 = TRUE
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DIAGNOSIS_2_0 DA10 
			ON CLIDIAG.PRIMARY_ICD10_DIAG = REPLACE(DA10.DIAGNOSIS_CODE,''.'','''') AND CLIDIAG.PRIMARY_ICD10_DIAG IS NOT NULL AND DA10.ICD10 = TRUE
)

, CLIENT_DATA AS
(
	SELECT * FROM
	(
		SELECT TRIM(DBNAME) AS MASTER_DBNAME, "NUMBER" AS MASTER_CLIENT_NUMBER, TRIM(DBNAME) AS DBNAME, "NUMBER" AS CLIENT_NUMBER
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.CLIENT_MASTER_LIST
	)
	UNION
	SELECT * FROM
	(
		SELECT TRIM(MASTER.DBNAME) AS MASTER_DBNAME, MASTER."NUMBER" AS MASTER_CLIENT_NUMBER, TRIM(MATCH.DBNAME) AS DBNAME, MATCH."NUMBER" AS CLIENT_NUMBER
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.CLIENT_MATCH_LIST AS MATCH
        JOIN DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.CLIENT_MASTER_LIST AS MASTER 
            ON MASTER.MASTER_ID = MATCH.MASTER_ID
        WHERE MATCH.ID <> MATCH.MASTER_ID
	)
)

SELECT DISTINCT 
	MD5(COALESCE(CLI_D.DBNAME, ADM.DBNAME) || ''-'' || COALESCE(ADM.CLIENTNUMBER,CLI_D.MASTER_CLIENT_NUMBER) || ''-'' || ADM.CONTRACTCODE || ''-'' || ''DATAFLEXSYNCDATA'')  AS CLIENT_ADMISSION_KEY, -- Client Admissions -> Contract -> Services
	3 AS SOURCE_SYSTEM_ID,
	ADM.DBNAME AS SYSTEM_CODE,
	MD5(COALESCE(CLI_D.DBNAME, ADM.DBNAME) || ''-'' || COALESCE(CLI_D.MASTER_CLIENT_NUMBER, ADM.CLIENTNUMBER) || ''-'' || ''DATAFLEXSYNCDATA'') AS CLIENT_KEY, --md5(COALESCE(c2.MASTER_DBNAME, f.DBNAME) || ''''-'''' || COALESCE(c2.MASTER_CLIENT_NUMBER, ts.CLIENTNUMBER,-1) || ''''-''''  ||  ''''DATAFLEXSYNCDATA'''' )
	NULL AS REFERRER_KEY, -- Referral DATA NOT available IN Dataflex
	MD5(TRIM(ADM.DBNAME) || ''-'' || TRIM(ADM.REVENUESUBCATEGORY) || ''-'' || TRIM(ADM.REVENUECATEGORY) || ''-'' || ''DATAFLEXSYNCDATA'') AS SERVICE_KEY, 
	MD5(UPPER(TRIM(ADM.DBNAME)) || ''-'' || UPPER(TRIM(ADM.CONTRACTCODE)) || ''-'' || ''DATAFLEXSYNCDATA'') AS PARTNER_CONTRACT_KEY,
	CASE
		WHEN FIRST_ADMIT_DATE >= ''2014-10-01'' AND CLI.DA10_CODE IS NOT NULL THEN CLI.DA10_KEY
		ELSE CLI.DA9_KEY
	END AS PRIMARY_DIAGNOSIS_KEY,
	NULL AS REFERRAL_DATE, -- Considering Date added AS Referral Date
	NULL AS REFERRAL_INTAKE_BY_EMP_KEY, -- Who accepted the client referral (Supervisor or employee)
	NULL AS REFERRAL_ACCEPTED_SERVICES,
	NULL AS REFERRAL_CAMPAIGN,
	NULL AS PREVIOUS_PROVIDER,
	ADM.FIRST_ADMIT_DATE AS ADMISSION_DATE, -- FIRST date WHEN the client was admited FOR per contract per service
	CASE
		WHEN CURRENT_DATE() BETWEEN ADM.FIRST_ADMIT_DATE AND ADM.DISCHARGE_DATE THEN TRUE
		ELSE FALSE
	END AS STATUS, -- Admission status
	CASE
		WHEN FIRST_ADMIT_DATE >= ''2014-10-01'' AND CLI.DA10_CODE IS NOT NULL THEN CLI.DA10_CODE
		ELSE CLI.DA9_CODE
	END AS PRIMARY_DIAGNOSIS, -- ICD 9 OR ICD 10 codes based ON the admission AND discharge date (pick primary)
	CASE
		WHEN FIRST_ADMIT_DATE >= ''2014-10-01'' AND CLI.DA10_CODE IS NOT NULL THEN CLI.DA10_DESC
		ELSE CLI.DA9_DESC
	END AS DIAGNOSIS_NOTES, -- Extra notes ON the diagnosis
	ADM.DISCHARGE_DATE AS DISCHARGE_DATE,
	NULL AS DISCHARGE_REASON,
    -1 AS ETL_TASK_KEY,
	-1 AS ETL_INSERTED_TASK_KEY,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	FALSE AS ETL_DELETED_FLAG
FROM
	ADMISSION ADM
LEFT JOIN
	CLIENTS CLI 
	ON CLI.DBNAME = ADM.DBNAME
		AND CLI.CLIENTNUMBER = ADM.CLIENTNUMBER
LEFT JOIN 
	CLIENT_DATA CLI_D
	ON CLI_D.DBNAME = CLI.DBNAME
		AND CLI_D.CLIENT_NUMBER = CLI.CLIENTNUMBER;

RETURN ''SUCCESS'';
END;

 EOT
}

