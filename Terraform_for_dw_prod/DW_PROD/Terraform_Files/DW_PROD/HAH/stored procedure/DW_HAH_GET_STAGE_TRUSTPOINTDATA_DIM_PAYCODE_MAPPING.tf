resource "snowflake_procedure" "DW_HAH_GET_STAGE_TRUSTPOINTDATA_DIM_PAYCODE_MAPPING" {
	name ="GET_STAGE_TRUSTPOINTDATA_DIM_PAYCODE_MAPPING"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result varchar(1000);
BEGIN

--*****************************************************************************************************************************
-- NAME: TRUSTPOINTDATA_DIM_PAYCODE_MAPPING
--
-- PURPOSE: Creates one row for each database (DB), paycode and assigns a paycode category according to Great Plains
--
-- DEVELOPMENT LOG:
-- DATE				AUTHOR                NOTES:
-- ----------		----------------- 	  -------------------------------------------------------------------------------------        
-- 08/02/2022		Aditya Shukla 		  Initial Development
--*****************************************************************************************************************************
--

INSERT OVERWRITE INTO STAGE.TRUSTPOINTDATA_DIM_PAYCODE_MAPPING
WITH SALARY_HOURS_USAGE AS (
	SELECT
		DISTINCT 6 AS Source_System_ID,
		UPPER( TRIM( pc.$1)) AS DB,
		UPPER(TRIM( pc.$5)) AS PAY_CODE,
		(CASE WHEN UPPER( TRIM(pc.$4)) = ''BLOCK'' THEN ''FALSE'' ELSE ''TRUE'' END)::BOOLEAN AS CALC_FLAG
	FROM @DW_${var.SF_ENVIRONMENT}.Stage.AZStage/CSV_Files/DIM_PAYCODE_MAPPING_FILES/TrustPoint_Excel_PayCodes (file_format => DW_${var.SF_ENVIRONMENT}.PUBLIC.CSV_Format) pc
	UNION
	SELECT
		DISTINCT 6 AS Source_System_ID,
		UPPER( TRIM( pc.$1)) AS DB,
		UPPER(TRIM( pc.$5)) AS PAY_CODE,
		(CASE WHEN UPPER( TRIM(pc.$4)) = ''BLOCK'' THEN ''FALSE'' ELSE ''TRUE'' END)::BOOLEAN AS CALC_FLAG
	FROM @DW_${var.SF_ENVIRONMENT}.Stage.AZStage/CSV_Files/DIM_PAYCODE_MAPPING_FILES/TrustPoint_Coastal_PayCodes_20210930 (file_format => DW_${var.SF_ENVIRONMENT}.PUBLIC.CSV_Format) pc
), --same for ss
PAYCODE_USAGE_DATES AS (
	SELECT DISTINCT
		6 AS Source_System_ID, PD.COMPANY AS System_Code,--, E.WORK_STATE AS State_Code,
		UPPER(trim(PD.EDT_CODE)) AS Pay_Code ,
		MIN( PD.PAYROLL_DATE) AS First_Used_Date,
		MAX( PD.PAYROLL_DATE) AS Most_Recent_Used_Date,
		CAST( COUNT( DISTINCT PD.EMPLOYEE_ID) AS INTEGER) AS Number_Employees_Used
	FROM DISC_${var.SF_ENVIRONMENT}.TRUSTPOINTDATA.PAYROLL_DETAILS AS PD
	--INNER JOIN DISC_${var.SF_ENVIRONMENT}.TRUSTPOINTDATA.EMPLOYEES AS E ON TRIM( dtl.CheckID) = TRIM( m.CheckID)
	GROUP BY PD.COMPANY, UPPER(trim(PD.EDT_CODE))--,UPPER(trim(PD.PAY_CODE))
)
SELECT DISTINCT
	MD5( ''6'' || COMPANY|| pd.PAY_CODE || EDT_CODE || RECORD_TYPE || ''-'' || ''TRUSTPOINTDATA'' ) AS PAYCODE_MAPPING_KEY, --
	''6'' AS SOURCE_SYSTEM_ID,
	COMPANY AS SYSTEM_CODE,
	NULL AS STATE_CODE,
	UPPER( TRIM(EDT_CODE)) AS PAY_CODE,
	UPPER( TRIM(pd.PAY_CODE)) AS PAY_CODE_DESCRIPTION,
	CASE
		WHEN UPPER(TRIM(RECORD_TYPE)) LIKE ''%EARNING%'' THEN ''E''
		WHEN UPPER(TRIM(RECORD_TYPE)) LIKE ''%DEDUCTION%'' THEN ''D''
		WHEN UPPER(TRIM(RECORD_TYPE)) LIKE ''%REIMBURSEMENT%'' THEN ''R''
	END AS PAY_CODE_TYPE,
	CASE
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%VISION%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%LIFE%INS%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%401%K%'' OR UPPER(PAY_CODE_DESCRIPTION) = ''STD'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%MIN%ESSENT%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%DEDUCT%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%UNITED%HEALTH%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%LOAN%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%DISABILITY%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%HOME%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%DENTAL%'' OR UPPER(PAY_CODE_DESCRIPTION) = ''LTD'' OR UPPER(PAY_CODE_DESCRIPTION) = ''MEDICAL'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%FLEX%SPEND%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%ACCIDENT%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%FSA%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%MEDIC%INS%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%HOSP%INDEM%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%HSA%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%AD&D%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%GARNISH%'' THEN ''Benefits & Deductions''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%COVID%'' OR UPPER(PAY_CODE_DESCRIPTION)LIKE ''%ADVANCE%'' THEN ''Adjustment''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%PAID TIME OFF%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%PTO%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%BEREAV%'' THEN ''PTO''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%REIMB%'' THEN ''Reimbursement''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%HOLID%'' THEN ''Holiday''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%TRAVEL%TIME%'' OR UPPER(PAY_CODE_DESCRIPTION) = ''MILEAGE'' THEN ''Travel Time & Mileage''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%REGULAR%'' OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''RN %'' /*varify*/ OR UPPER(PAY_CODE_DESCRIPTION) LIKE ''%RESPITE%'' THEN ''Regular''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%ON%CALL%'' THEN ''On-Call''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%BONUS%'' THEN ''Bonus''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''%INSERV%'' THEN ''Training''
		WHEN UPPER(PAY_CODE_DESCRIPTION) LIKE ''OVERTIME'' THEN ''Overtime''
	END AS PAY_CODE_CATEGORY,
	NULL AS FINANCE_CATEGORY, -- NULL
	NULL AS REVENUE_CATEGORY, -- NULL
	NULL AS REVENUE_SUBCATEGORY_CODE, --NULL
	NULL AS REVENUE_SUBCATEGORY_NAME, --NULL
	pud.First_Used_Date AS FIRST_USED_DATE,
	pud.Most_Recent_Used_Date AS MOST_RECENT_USED_DATE,
	pud.Number_Employees_Used AS NUMBER_EMPLOYEES_USED,
	CAST(CASE WHEN DATEADD(''YEAR'', 1, pud.Most_Recent_Used_Date) >= CURRENT_DATE THEN ''TRUE'' ELSE FALSE END AS Boolean) AS ACTIVE_FLAG,
	NULL AS ADMIN_PAY_RATE_FLAG, -- null paycode_admin_usage -- FIELD_WORKER_FLAG CAN USE TO IDENTIFY ADMIN AND FIELD WORKER --null
	NULL AS FIELD_PAY_RATE_FLAG, -- null paycode_FIELD_usage
	(NVL(shu.CALC_FLAG, ''FALSE''))::BOOLEAN AS INCLUDE_SALARY_PAYRATE_CALC_FLAG,
	(NVL(shu.CALC_FLAG, ''FALSE''))::BOOLEAN AS INCLUDE_FULL_TIME_HOURS_CALC_FLAG, --SALARY_HOURS_USAGE -- USE TYPE COLUMN
	
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
        
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	CURRENT_USER as ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
	CURRENT_USER as ETL_LAST_UPDATED_BY,
	0 as ETL_DELETED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.TRUSTPOINTDATA.PAYROLL_DETAILS pd
LEFT OUTER JOIN PAYCODE_USAGE_DATES pud ON pud.Source_System_ID = 6 AND upper(trim(pud.PAY_CODE)) = upper(trim(pd.EDT_CODE)) AND upper(trim(pud.SYSTEM_CODE)) = upper(trim(pd.COMPANY))
LEFT OUTER JOIN SALARY_HOURS_USAGE shu ON shu.Source_System_ID = 6 AND upper(trim(shu.PAY_CODE)) = upper(trim(pd.EDT_CODE)) AND upper(trim(shu.DB)) = upper(trim(pd.COMPANY));

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;

 EOT
}

