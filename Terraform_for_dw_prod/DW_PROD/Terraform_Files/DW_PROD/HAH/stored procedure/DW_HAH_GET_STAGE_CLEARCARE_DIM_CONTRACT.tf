resource "snowflake_procedure" "DW_HAH_GET_STAGE_CLEARCARE_DIM_CONTRACT" {
	name ="GET_STAGE_CLEARCARE_DIM_CONTRACT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result VARCHAR;
BEGIN
--*****************************************************************************************************************************
-- NAME:  Clear care DIM CONTRACT
--
-- PURPOSE: Populates Stage Dim CONTRACT for Clear Care 
--			
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 10/05/22    SAM HUFF             Initial version
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.CLEARCARE_DIM_CONTRACT
SELECT DISTINCT MD5(
        ''CLEARCARE'' || ''-'' || CA.BILL_RATE_NAME || ''-'' || CA.BILL_RATE_TYPE || ''-'' || NVL(PP.SERVICE_NAME,''-1'') || ''-'' || ''CLEARCARE''
    ) AS CONTRACT_KEY,
    CASE WHEN CA.BILL_RATE_NAME = '''' AND CA.BILL_RATE_TYPE = 4 THEN ''Non-Billable''
         WHEN CA.BILL_RATE_NAME = '''' AND CA.BILL_RATE_TYPE = 3 THEN ''Live-In''
         WHEN CA.BILL_RATE_NAME = '''' AND CA.BILL_RATE_TYPE = 2 THEN ''Per-Visit''
         WHEN CA.BILL_RATE_NAME = '''' AND CA.BILL_RATE_TYPE = 1 THEN ''Hourly''
	     ELSE CA.BILL_RATE_NAME 
	END AS contract_code,
    ''CLEARCARE'' AS SYSTEM_CODE,
    16 AS SOURCE_SYSTEM_ID,
    contract_code AS CONTRACT_NAME,
    NVL(PP.SERVICE_NAME, ''-1'') AS SERVICE_CODE_ID,
    MD5(
        ''CLEARCARE'' || ''-'' || NVL(PP.SERVICE_NAME,''-1'') || ''-'' || ''CLEARCARE''
    ) AS SERVICE_KEY,
    NULL AS DEFAULT_BILL_CODE, 
    NULL AS PAYROLL_CODE,
    --NEED THESE
    ''HC'' AS REVENUE_CATEGORY,
    ''HC'' AS REVENUE_SUBCATEGORY_CODE,
    ''HOMECARE'' AS REVENUE_SUBCATEGORY_NAME,
    NULL AS PAYOR_CODE,
    NULL AS PAYOR_DESCRIPTION,
    REVENUE_CATEGORY AS SERVICE_LINE_CODE, 
    CA.BILL_RATE_NAME AS SERVICE_LINE_DESCRIPTION,
    ''OH'' AS CONTRACT_STATE_CODE,
    NULL AS TIME_TRANSLATION_CODE,
    NULL AS TIME_TRANSLATION_DIVIDER,
    NULL AS PAY_TRAVELS_CODE,
    FALSE AS MILEAGE_FLAG,
    NULL AS PAYABLE_FLAG,
    CASE WHEN CA.BILL_RATE_TYPE = 4 THEN ''FALSE''
    	ELSE ''TRUE''
    END AS BILLABLE_FLAG,
    IFF(TIME_TRANSLATION_CODE = ''.25HR'', 1, 0) AS BILLED_BY_QUARTER_HOURS,
    IFF(TIME_TRANSLATION_CODE = ''.5HR'', 1, 0) AS BILLED_BY_HALF_HOURS, 
    CASE WHEN CA.BILL_RATE_TYPE = 1 THEN ''Hourly''
         WHEN CA.BILL_RATE_TYPE = 2 THEN ''Per-Visit'' 
         WHEN CA.BILL_RATE_TYPE = 3 THEN ''Live-In'' 
         WHEN CA.BILL_RATE_TYPE = 4 THEN ''Non-Billable'' 
    END AS BILL_UNIT_TYPE,
    TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
    TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
                        
    convert_timezone(''UTC'', CURRENT_TIMESTAMP) :: timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP) :: timestamp_ntz as ETL_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG,
    0 as ETL_INFERRED_MEMBER_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.CLEARCARE.CARELOGS_CARELOG CA
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.BILLING_CLIENTAUTHORIZATION AU ON AU.ID = CA.AUTHORIZATION_ID
left join DISC_${var.SF_ENVIRONMENT}.CLEARCARE.PROFILE_PARENTPAYERSERVICE PP on pp.id = au.service_id
WHERE CA.AGENCY_ID = 2459
UNION
SELECT DISTINCT MD5(
        ''CLEARCARE'' || ''-'' || BR.NAME || ''-'' || BR.TYPE || ''-'' || NVL(PP.SERVICE_NAME,''-1'') || ''-'' || ''CLEARCARE''
    ) AS CONTRACT_KEY,
    BR.NAME as contract_code,
    ''CLEARCARE'' AS SYSTEM_CODE,
    16 AS SOURCE_SYSTEM_ID,
    BR.NAME AS CONTRACT_NAME,
    NVL(PP.SERVICE_NAME, ''-1'') AS SERVICE_CODE_ID,
    MD5(
        ''CLEARCARE'' || ''-'' || NVL(PP.SERVICE_NAME,''-1'') || ''-'' || ''CLEARCARE''
    ) AS SERVICE_KEY,
    NULL AS DEFAULT_BILL_CODE, 
    NULL AS PAYROLL_CODE,
    --NEED THESE
    ''HC'' AS REVENUE_CATEGORY,
    ''HC'' AS REVENUE_SUBCATEGORY_CODE,
    ''HOMECARE'' AS REVENUE_SUBCATEGORY_NAME,
    NULL AS PAYOR_CODE,
    NULL AS PAYOR_DESCRIPTION,
    REVENUE_CATEGORY AS SERVICE_LINE_CODE, 
    BR.NAME AS SERVICE_LINE_DESCRIPTION,
    ''OH'' AS CONTRACT_STATE_CODE,
    NULL AS TIME_TRANSLATION_CODE,
    NULL AS TIME_TRANSLATION_DIVIDER,
    NULL AS PAY_TRAVELS_CODE,
    FALSE AS MILEAGE_FLAG,
    NULL AS PAYABLE_FLAG,
    ''TRUE'' AS BILLABLE_FLAG,
    IFF(TIME_TRANSLATION_CODE = ''.25HR'', 1, 0) AS BILLED_BY_QUARTER_HOURS,
    IFF(TIME_TRANSLATION_CODE = ''.5HR'', 1, 0) AS BILLED_BY_HALF_HOURS, 
    CASE WHEN BR.TYPE = 1 THEN ''Hourly''
         WHEN BR.TYPE = 2 THEN ''Per-Visit''
         WHEN BR.TYPE = 3 THEN ''Live-In'' 
         WHEN BR.TYPE = 4 THEN ''Non-Billable'' 
    END AS BILL_UNIT_TYPE,
    TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
    TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
                        
    convert_timezone(''UTC'', CURRENT_TIMESTAMP) :: timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP) :: timestamp_ntz as ETL_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG,
    0 as ETL_INFERRED_MEMBER_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.CLEARCARE.BILLING_BILLRATE BR
left join DISC_${var.SF_ENVIRONMENT}.CLEARCARE.BILLING_CLIENTAUTHORIZATION AU on au.BILL_RATE_ID = BR.id
left join DISC_${var.SF_ENVIRONMENT}.CLEARCARE.PROFILE_PARENTPAYERSERVICE PP on pp.id = au.service_id
WHERE BR.AGENCY_ID IN (2459);
;
    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

    return return_result;
END;
    
 EOT
}

