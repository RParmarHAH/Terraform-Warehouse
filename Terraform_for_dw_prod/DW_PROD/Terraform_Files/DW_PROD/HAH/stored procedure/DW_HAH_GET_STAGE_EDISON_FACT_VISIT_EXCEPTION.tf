resource "snowflake_procedure" "DW_HAH_GET_STAGE_EDISON_FACT_VISIT_EXCEPTION" {
	name ="GET_STAGE_EDISON_FACT_VISIT_EXCEPTION"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN
--*****************************************************************************************************************************
-- NAME:  EDISON_FACT_VISIT_EXCEPTION
--
-- PURPOSE: Creates one row per visit exception according to EDISON
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR							NOTES:
-- --------		-------------------				-------------------------------------------------------------------------------
-- 8/19/2023	Diya Mistry/ Abhishek Sunil	    Initial Development
--*****************************************************************************************************************************
INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.STAGE.EDISON_FACT_VISIT_EXCEPTION
WITH CALLS AS (
	SELECT 
		V.VISITID,
		''EDISON'' AS SYSTEM_CODE,
		V.VISITDATE::DATE AS SERVICE_DATE,
		TRIM(CM.EXCEPTIONCODE) AS STATUS,
		NULLIF(TRIM(CRN.UPDATEREASONID),'''') AS REASON_CODE,
		NULLIF(TRIM(RS.REASON),'''') AS EXCEPTION_REASON,
		NULLIF(TRIM(CRN.UPDATEVISITACTIONTAKENREASON),'''') AS EXCEPTION_RESOLUTION
	FROM 
		DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.INREVIEWVISITS CM
	INNER JOIN 
		(SELECT DISTINCT AGENCYID,VISITID ,VISITDATE FROM DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.VISITS) V
		ON CM.AGENCYID = V.AGENCYID 
			AND CM.VISITID = V.VISITID	
	INNER JOIN 
		DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.TBLVISITS_REPL CRN 
		ON CRN.AGENCYID = V.AGENCYID
			AND CRN.VISITID = V.VISITID
	LEFT JOIN
		DISC_${var.SF_ENVIRONMENT}.HHAEXCHANGEEDISON.REASONS_REPL RS
		ON CRN.AGENCYID = RS.AGENCYID
			AND CRN.UPDATEREASONID = RS.REASONID)
, EXCEPTIONS AS (
SELECT
	MD5(''EDISON'' || ''-'' || CALLS.VISITID || ''-'' || UPPER(CALLS.STATUS) || ''-'' || ''EDISON'') AS VISIT_EXCEPTION_KEY,
	MD5(''EDISON'' || ''-'' || CALLS.VISITID || ''-'' || '' EDISON'') AS VISIT_KEY,
	CALLS.VISITID,
	SERVICE_DATE AS SERVICE_DATE, 
	17 AS SOURCE_SYSTEM_ID,
	SYSTEM_CODE  AS SYSTEM_CODE,
	UPPER(CALLS.STATUS) AS EXCEPTION_CODE,
	IFF(CALLS.EXCEPTION_REASON IS NOT NULL, TRUE, FALSE) AS ACKNOWLEDGED_FLAG,
	IFF(EXCEPTION_RESOLUTION IS NOT NULL, TRUE, FALSE) AS RESOLVED_FLAG,
	UPPER(CALLS.REASON_CODE) AS REASON_CODE,
	UPPER(CALLS.EXCEPTION_REASON) AS REASON_NAME,
	UPPER(EXCEPTION_RESOLUTION) AS RESOLUTION_CODE,
	UPPER(EXCEPTION_RESOLUTION) AS RESOLUTION_NAME
FROM
	CALLS
)
SELECT
	DATA.VISIT_EXCEPTION_KEY,
	DATA.VISIT_KEY,
	VE.EXCEPTION_KEY,
	DATA.SERVICE_DATE,
	DATA.SOURCE_SYSTEM_ID,
	DATA.SYSTEM_CODE,
	VE.EXCEPTION_CODE,
	DATA.ACKNOWLEDGED_FLAG,
	DATA.RESOLVED_FLAG,
	DATA.REASON_CODE,
	DATA.REASON_NAME,
	DATA.RESOLUTION_CODE,
	DATA.RESOLUTION_NAME,
	:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
	:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	FALSE AS ETL_DELETED_FLAG
FROM
	EXCEPTIONS DATA
LEFT JOIN 
	HAH.DIM_VISIT_EXCEPTION VE 
	ON VE.EXCEPTION_CODE = DATA.EXCEPTION_CODE 
	AND VE.SOURCE_SYSTEM_ID = DATA.SOURCE_SYSTEM_ID 
	AND VE.SYSTEM_CODE = DATA.SYSTEM_CODE
ORDER BY 
	DATA.SERVICE_DATE ASC;
RETURN ''SUCCESS'';
END;

 EOT
}

