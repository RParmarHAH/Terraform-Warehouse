resource "snowflake_procedure" "DW_HAH_GET_STAGE_ASR_DIM_CLIENT" {
	name ="GET_STAGE_ASR_DIM_CLIENT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

                BEGIN
--*****************************************************************************************************************************
-- NAME:  ASR_DIM_CLIENT
--
-- PURPOSE: Creates one row per client according to ASR
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 04/04/2022	Abhishek Sunil			Initial Development
-- 04/26/2022	Abhishek Sunil			Leveraged Dedupe
-- 08/31/2023  Sandesh Gosavi        Update logic of last_visit_date to avoid future date 
-- 9/27/2023  Sandesh Gosavi         Updated Logic to add completed-Future-Unbilled Field in CONFIRMED_VISITS cte
-- 11/08/2023  Trushali Ramoliya    Added the column for HISPANIC_OR_LATINO and also updated the logic for ethnicity as per IDDOX - 388
-- 11/20/2023   Sandesh	Gosavi      Added CLIENT_STATUS Field
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.ASR_DIM_CLIENT
WITH CLIENT AS
(
	SELECT * FROM 
	(
		SELECT MASTER_ID, CUSTOMERID, LOCATIONID -- Added LocationID to retrieve missing branches
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT MASTER_ID, CUSTOMERID, LOCATION_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MATCH_LIST 
		WHERE CLIENTID NOT IN (SELECT CLIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MASTER_LIST) 
	)
)
, EMPLOYEE AS
(
	SELECT * FROM 
	(
		SELECT MASTER_ID, EMPLOYEEID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MASTER_LIST 
	)
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT MASTER_ID, EMPLOYEEID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MATCH_LIST 
		WHERE EMPLOYEEID NOT IN (SELECT EMPLOYEEID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MASTER_LIST) 
	)
)
,BILLING_STATUS AS (
	SELECT 
		BILLING_TRAN_ID_NUMBER AS SERVICEVISITACTUALID, 
		IFF(PAYABLE_OR_BILLIABLE_HRS IS NULL,''Unbilled'',''Billed'') AS INVOICE_STATUS
	FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_REVENUE
	WHERE TO_DATE(VISIT_DATE,''MM/DD/YYYY'') < ''2022-06-01'' -- Invoices FROM JUNE 1st, 2022 IS processed IN the 2nd logic
	UNION 
	SELECT -- Adjusted AND Clean Invoices FOR the visits ON or AFTER June 1st 2022
		SERVICEVISITACTUALID, 
		INVOICE_STATUS 
	FROM (
		SELECT
			AG.SERVICEVISITACTUALID,
			TRY_TO_DATE(TRIM(AG.DATE_OF_SERVICE),''MM/DD/YYYY HH:MI:SS'') AS SERVICE_DATE,
			TRY_TO_DATE(TRIM(AG.PAIDDATE),''MM/DD/YYYY HH:MI:SS'') AS PAID_DATE,
			(NVL(AG.INVOICE_AMOUNT,0) + NVL(AG.ADJUSTMENT_POSITIVE,0) + NVL(AG.ADJUSTMENT_NEGATIVE,0)) AS AMOUNT_BILLED_ADJUSTED,
			NVL(AG.RECEIVED_AMOUNT,0) AS AMOUNT_RECEIVED,
			AG.STATUS,
			CASE
				WHEN UPPER(TRIM(AG.STATUS)) = ''PAID'' THEN 1
				WHEN UPPER(TRIM(AG.STATUS)) = ''PARTIAL'' THEN 2
				WHEN UPPER(TRIM(AG.STATUS)) = ''PAYABLE'' THEN 3
				WHEN UPPER(TRIM(AG.STATUS)) = ''DENIAL'' THEN 4
			END AS PRECEDENCE,
			ROW_NUMBER() OVER (PARTITION BY AG.SERVICEVISITACTUALID ORDER BY PRECEDENCE ASC, SERVICE_DATE DESC, PAID_DATE DESC NULLS LAST) AS RN, -- TEMP fix TO FILTER OUT dupes
			CASE
				WHEN UPPER(TRIM(AG.STATUS)) IN (''DENIAL'') THEN ''Cancelled''
				WHEN AMOUNT_BILLED_ADJUSTED > 0 AND AMOUNT_RECEIVED = 0 THEN ''Billed''
				WHEN AMOUNT_BILLED_ADJUSTED > 0 AND AMOUNT_RECEIVED > 0 AND (AMOUNT_BILLED_ADJUSTED - AMOUNT_RECEIVED) > 0 THEN  ''Partially Paid''
				WHEN AMOUNT_BILLED_ADJUSTED > 0 AND AMOUNT_RECEIVED > 0 AND (AMOUNT_BILLED_ADJUSTED - AMOUNT_RECEIVED) <= 0 THEN  ''Fully Paid''
				WHEN AMOUNT_BILLED_ADJUSTED < 0 AND AMOUNT_RECEIVED > 0 AND (AMOUNT_BILLED_ADJUSTED - AMOUNT_RECEIVED) <= 0 THEN  ''Fully Paid''
			END AS INVOICE_STATUS
		FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_AGINGREPORT AG
		WHERE AG.CUSTOMERID IS NOT NULL
	) WHERE RN = 1
)
--SELECT * FROM BILLING_STATUS;
,CONFIRMED_VISITS AS (
SELECT DISTINCT 
	CASE -- WHEN the visit IS RESCHEDULED THEN the visit date IS NOT updated, TO maintain consistency picking it FROM either TIMECHECKEDIN OR RESCHEDULEDTO Date
		WHEN TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <> TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
			THEN TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
		ELSE TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')
	END AS VISITDATE,
	CAST(COALESCE(CLI.MASTER_ID,V.CUSTOMERID) AS NUMBER)  AS MASTER_ID,
	CASE WHEN V.ISCANCELLED = ''True'' AND BS.INVOICE_STATUS IN (''Fully Paid'',''Billed'',''Partially Paid'') THEN  ''Cancelled-Billed''
			WHEN V.ISCANCELLED = ''True'' AND BS.INVOICE_STATUS IN (''Cancelled'') AND TRY_TO_DATE(TRIM(VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <= TO_DATE(GETDATE()) THEN  ''Cancelled-Did not happen-Not Billable''
				WHEN V.ISCANCELLED = ''True'' AND BS.INVOICE_STATUS IS NULL AND TRY_TO_DATE(TRIM(VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) THEN  ''Cancelled-Future-Unbilled''
				WHEN V.ISCANCELLED = ''True'' AND BS.INVOICE_STATUS IS NULL AND TRY_TO_DATE(TRIM(VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <= TO_DATE(GETDATE()) THEN  ''Cancelled-Did not happen-Unbilled''
			   WHEN V.RESCHEDULEDTO IS NOT NULL  AND TRY_TO_DATE(COALESCE(TRIM(TIMECHECKEDIN),TRIM(RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE())  AND BS.INVOICE_STATUS IN (''Fully Paid'',''Billed'',''Partially Paid'') THEN ''Rescheduled-Future-Billed''
        	   WHEN V.RESCHEDULEDTO IS NOT NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Fully Paid'',''Billed'',''Partially Paid'') THEN ''Rescheduled-Completed-Billed''
        	   WHEN V.RESCHEDULEDTO IS NOT NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Cancelled'') THEN ''Rescheduled-Completed-Not Billable''
			   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IS NULL AND TRY_TO_DATE(COALESCE(TRIM(TIMECHECKEDIN),TRIM(RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) THEN ''Scheduled-Future-Unbilled''																																																													   
        	   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Cancelled'') THEN ''Scheduled-Completed-Not Billable''
			   WHEN TRY_TO_DATE(COALESCE(TRIM(TIMECHECKEDIN),TRIM(RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) AND V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Unbilled'') THEN ''Scheduled-Future-Unbilled''																																																																 
			   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Unbilled'') AND TRY_TO_DATE(TRIM(VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) THEN ''Scheduled-Future-Unbilled''																																																			   
        	   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Unbilled'') THEN ''Scheduled-Completed-Unbilled''
        	   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IN (''Fully Paid'',''Billed'',''Partially Paid'') THEN ''Scheduled-Completed-Billed''
			   WHEN V.RESCHEDULEDTO IS NOT NULL AND TRY_TO_DATE(COALESCE(TRIM(TIMECHECKEDIN),TRIM(RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) AND BS.INVOICE_STATUS IS NULL  THEN ''Rescheduled-Future-Unbilled''
			   WHEN V.RESCHEDULEDTO IS NOT NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IS NULL  THEN ''Rescheduled-Completed-Unbilled''
			   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IS NULL AND TRY_TO_DATE(TRIM(VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') > TO_DATE(GETDATE()) THEN ''Scheduled-Future-Unbilled''
			   WHEN V.RESCHEDULEDTO IS NULL  AND V.ISCANCELLED = ''False'' AND BS.INVOICE_STATUS IS NULL THEN ''Scheduled-Completed-Unbilled''	  
			END AS DERIVED_DISC_STATUS
FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_VISITS V
LEFT JOIN CLIENT CLI ON V.CUSTOMERID = CLI.CUSTOMERID
LEFT JOIN EMPLOYEE EMP ON V.EMPLOYEEID = EMP.EMPLOYEEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_PLANOFSERVICE P ON V.SERVICEVISITID  = P.SERVICEVISITID
LEFT JOIN BILLING_STATUS BS ON BS.SERVICEVISITACTUALID = V.SERVICEVISITACTUALID													 
WHERE (DERIVED_DISC_STATUS IN (''Scheduled-Completed-Unbilled'',''Rescheduled-Completed-Billed'',''Scheduled-Completed-Not Billable'',''Scheduled-Completed-Billed'',''Rescheduled-Future-Billed'',''Rescheduled-Completed-Not Billable'',''Rescheduled-Completed-Unbilled'',''Cancelled-Billed'')
OR DERIVED_DISC_STATUS IS NULL)
AND (COALESCE(EMP.MASTER_ID,V.EMPLOYEEID) IS NOT NULL -- these visits ARE to be ignored
 AND COALESCE(EMP.MASTER_ID,V.EMPLOYEEID) IN (SELECT EMPLOYEEID FROM EMPLOYEE)) -- Remnants of PHCs data manipulation - TO be ignored
 AND COALESCE(CLI.MASTER_ID,V.CUSTOMERID) NOT IN (SELECT CLIENT_NUMBER FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_CLIENT_NUMBER WHERE SOURCE_SYSTEM_ID = 13 AND SYSTEM_CODE = ''PRIME'')
)--SELECT * FROM CONFIRMED_VISITS V WHERE V.MASTER_ID = 24421 ORDER BY VISITDATE DESC
,CLEANED_SUPERVISORS AS (
	SELECT 
		SUPERVISORID, 
		IFF(SUPERVISORID IN (164,165),''Oksana Aminov'',SUPERVISORNAME) AS SUPERVISORNAME -- This supervisor didnt UPDATE IN ASR, so added logic here wrt mail from Anastasiya 
	FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_SUPERVISORS
)
,SERVICE_DATE AS 
(
	SELECT 
		TRIM(C.MASTER_ID) AS MASTER_ID,
		MIN(TRIM(C.VISITDATE)) AS FIRST_SERVICE_DATE,
		MAX(TRIM(C.VISITDATE)) AS LAST_SERVICE_DATE
	FROM 
		CONFIRMED_VISITS C
	GROUP BY MASTER_ID
)
SELECT DISTINCT
     MD5(''PRIME'' || ''-'' || TRIM(C.MASTER_ID) || ''-'' || ''ASR'') AS CLIENT_KEY,
     TRIM(C.MASTER_ID) AS CLIENT_NUMBER,
     ''PRIME'' AS SYSTEM_CODE,
     13 AS SOURCE_SYSTEM_ID,
     CASE 
     	WHEN LENGTH(NULLIF(REGEXP_REPLACE(TRIM(C.SSN),''-|\\\\s|\\\\\\\\|[A-Z]''),'''')) = 9 
			AND NULLIF(REGEXP_REPLACE(TRIM(C.SSN),''-|\\\\s|\\\\\\\\|[A-Z]''),'''') NOT IN (SELECT SSN FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_SSN)
			THEN HEX_ENCODE(NULLIF(REGEXP_REPLACE(TRIM(C.SSN),''-|\\\\s|\\\\\\\\|[A-Z]''),''''))
     	ELSE NULL
     END AS CLIENT_PID,	   
     MEDICARE_BILLING_NUMBER AS CLIENT_MEDICARE_ID,
	MEDICAID_BILLING_NUMBER AS MEDICAID_ID,
     TRY_TO_DATE(TRIM(C.CLIENT_DOB),''YYYY-MM-DD'') AS CLIENT_DOB,
	 NULL AS CLIENT_DATE_OF_DEATH, 
     C.CLIENT_GENDER AS CLIENT_GENDER,
  	 NULL AS CLIENT_ETHNICITY,	
     FALSE AS HISPANIC_OR_LATINO,								 
     NULL AS CLIENT_GENDER_IDENTITY, -- NA
	 NULL AS CLIENT_SEXUAL_ORIENTATION, -- NA
	 NULL AS CLIENT_RACE, -- NA
     NULL AS CLIENT_MARITAL_STATUS,
     NULL AS CLIENT_SALUTATION,
     UPPER(TRIM(C.FIRSTNAME)) AS CLIENT_FIRST_NAME,
     NULL AS CLIENT_MIDDLE_NAME,
     UPPER(TRIM(C.LASTNAME)) AS CLIENT_LAST_NAME,
     (UPPER(TRIM(C.LASTNAME)) || '', '' || UPPER(TRIM(C.FIRSTNAME))) AS CLIENT_NAME,
     TRIM(C.ADDRESS) AS CLIENT_ADDRESS1,
     NULL AS CLIENT_ADDRESS2,
     REGEXP_SUBSTR(UPPER(C.CITY), ''[a-zA-Z0-9]+'') AS CLIENT_CITY,
     GEO.STATE_ISO_CODE AS CLIENT_STATE_CODE,
     TRIM(LEFT(C.POSTALCODE,5)) AS CLIENT_ZIP,
	 NULL AS CLIENT_CLN_ADDRESS1,
	 NULL AS CLIENT_CLN_ADDRESS2,
	 NULL AS CLIENT_CLN_CITY,
	 NULL AS CLIENT_CLN_STATE_CODE,
	 NULL AS CLIENT_CLN_ZIP,
	 NULL AS CLIENT_STD_ADDRESS1,
	 NULL AS CLIENT_STD_ADDRESS2,
	 NULL AS CLIENT_STD_CITY,
	 NULL AS CLIENT_STD_STATE_CODE,
	 NULL AS CLIENT_STD_ZIP,
     NULLIF(TRIM(REGEXP_REPLACE(UPPER(C.HOMEPHONE),''[A-Z]|\\\\(|\\\\)|:|-|\\\\s|\\\\.|\\#|\\\\*|/'')),'''') AS CLIENT_HOME_PHONE,
     NULLIF(TRIM(REGEXP_REPLACE(UPPER(C.PHONE2),''[A-Z]|\\\\(|\\\\)|:|-|\\\\s|\\\\.|\\#|\\\\*|/'')),'''') AS CLIENT_CELL_PHONE,
     NULL AS CLIENT_WORK_PHONE,
     NULL AS CLIENT_FAX_NUMBER,
	 TRIM(C.EMAIL) AS CLIENT_PERSONAL_EMAIL,
     COALESCE(TRY_TO_DATE(TRIM(C.STARTDATE),''MM/DD/YYYY HH12:MI:SS AM''), LSD.FIRST_SERVICE_DATE) AS REFERRAL_DATE, -- ASR doesnt track referral date
     CASE
		WHEN DATEDIFF(DAY, TRY_TO_DATE(TRIM(C.STARTDATE),''MM/DD/YYYY HH12:MI:SS AM''), LSD.FIRST_SERVICE_DATE) < 0 THEN 0
		ELSE DATEDIFF(DAY, TRY_TO_DATE(TRIM(C.STARTDATE),''MM/DD/YYYY HH12:MI:SS AM''), LSD.LAST_SERVICE_DATE)
	 END AS DAYS_TO_SERVICE, -- Req
	 NULL AS CONTRACT_BEGIN_DATE,
	 NULL AS CONTRACT_END_DATE,
     LSD.FIRST_SERVICE_DATE AS FIRST_SERVICE_DATE,
     LSD.LAST_SERVICE_DATE AS LAST_SERVICE_DATE,
     TRY_TO_DATE(TRIM(C.STARTDATE),''MM/DD/YYYY HH12:MI:SS AM'') AS BEGIN_DATE,
     TRY_TO_DATE(C.SERVICEENDDATE,''MM/DD/YYYY HH12:MI:SS AM'') AS END_DATE,
     IFF(TRIM(C.CUSTOMERSTATUS) IN (''1''), TRUE, FALSE) AS ACTIVE_CLIENT_FLAG,
	 CS.CUSTOMER_STATUS_NAME AS CLIENT_STATUS,										  
     NULL AS ON_HOLD_FLAG, 
     NULL AS ON_HOLD_START_DATE, 
     NULL AS ON_HOLD_END_DATE, 
	 NULL AS LINKED_ID,
	 NULL AS ACQUIRED_FROM_COMPANY_KEY,
	 NULL AS ACQUIRED_FROM_COMPANY_ID,
	 NULL AS ACQUIRED_FROM_COMPANY_FULL_NAME,
	 NULL AS ACQUISITION_DATE,
	 NULL AS ACQUISITION_FLAG,
	 NULL AS ADMISSION_DATE,
	 NULL AS ADMISSION_FLAG,
	 NULL AS CLIENT_CONVERTED_FLAG,
	 MD5(''PRIME'' || ''-''  || C.SUPERVISORID || ''-'' || ''ASR'') AS PRIMARY_SUPERVISOR_KEY, -- Shouldnt be NULL (confirm this!) (Its coming from the source itself)
	 TRIM(C.SUPERVISORID) AS PRIMARY_SUPERVISOR_CODE,
	 IFF(UPPER(TRIM(S.SUPERVISORNAME)) = '''', ''BLANK'', UPPER(TRIM(S.SUPERVISORNAME))) AS PRIMARY_SUPERVISOR_NAME, -- CHANGE this AFTER they add name to 164,165 supervisors
	 NULL AS SECONDARY_SUPERVISOR_KEY,
	 NULL AS SECONDARY_SUPERVISOR_CODE,
	 NULL AS SECONDARY_SUPERVISOR_NAME,
	 MD5(''PRIME'' || ''-'' || TRIM(BM.NEW_LOCATION_ID) || ''-'' || ''ASR'') AS PRIMARY_BRANCH_KEY,
	 ''OH'' || '' - '' ||  UPPER(TRIM(BM.NEW_LOCATION_NAME)) || '' ('' || TRIM(BM.NEW_LOCATION_ID) || '')'' AS PRIMARY_BRANCH_NAME,
	 ''OH'' AS PRIMARY_BRANCH_STATE,
	 NULL AS GUARANTOR_NAME,
	 TRIM(C.NOTES) AS NOTES,
	 NULL AS AGENCY,
	 TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
	 TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,

   :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
                        
	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
	,CURRENT_USER AS ETL_INSERTED_BY
	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
	,CURRENT_USER AS ETL_LAST_UPDATED_BY
	,FALSE AS ETL_DELETED_FLAG
	,FALSE AS ETL_INFERRED_MEMBER_FLAG
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MASTER_LIST C
LEFT JOIN CLEANED_SUPERVISORS S ON TRIM(S.SUPERVISORID) = TRIM(C.SUPERVISORID)
LEFT JOIN SERVICE_DATE LSD ON TRIM(LSD.MASTER_ID) = TRIM(C.MASTER_ID)
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_LOCATIONS L ON TRIM(C.LOCATIONID) = TRIM(L.LOCATIONID)
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.BRANCH_MAPPING BM ON L.LOCATIONID = BM.OLD_LOCATION_ID
LEFT JOIN HAH.DIM_GEOGRAPHY GEO ON TRIM(C.POSTALCODE) = GEO.ZIP_CODE
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_VISITS V ON C.CUSTOMERID = V.CUSTOMERID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_CUSTOMERSCOMMUNICATIONLOG CCL ON V.COMMLOGRECORDID = CCL.RECORDID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_CUSTOMERSTATUSES CS ON c.CUSTOMERSTATUS = CS.CUSTOMER_STATUS_ID 																						   
WHERE CLIENT_NUMBER NOT IN (SELECT CLIENT_NUMBER FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_CLIENT_NUMBER WHERE SOURCE_SYSTEM_ID = 13 AND SYSTEM_CODE = ''PRIME'')
AND NVL(BM.IS_ASR_BRANCH, TRUE) = TRUE 
ORDER BY CLIENT_NUMBER;
;
    RETURN ''SUCCESS'';
    END;

 EOT
}

