resource "snowflake_procedure" "DW_HAH_GET_STAGE_AXXESS_DIM_INVOICE" {
	name ="GET_STAGE_AXXESS_DIM_INVOICE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

 BEGIN 
-- ******************************************************************************************
-- DATE 			AUTHOR 			COMMENTS

-- 07/11/22			POOJA SHAH		INITIAL DEVELOPMENT
-- 21/04/23			PINKAL PANCHAL	ADDED INVOICE_STATUS_MAPPING FOR RCM
-- 14/06/23			ABHISHEK SUNIL	Changed SP to reflect ARS date format changes
-- ******************************************************************************************


INSERT OVERWRITE INTO STAGE.AXXESS_DIM_INVOICE

WITH DEDUPE_LEVERAGE  
AS
 (
	    SELECT * FROM 
	(
		SELECT MASTER_ID,PATIENT_ID 
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.CLIENT_MASTER_LIST  
		
	)
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT MASTER_ID, PATIENT_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.CLIENT_MATCH_LIST 
		WHERE PATIENT_ID NOT IN (SELECT PATIENT_ID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.AXXESS.CLIENT_MASTER_LIST)	
		
	)
),
FIRST_DATE_AND_NUMBER  -- BASED ON MIN INVOICE DATE
AS(
	SELECT  DISTINCT
			F.MASTER_ID, 
			F.BRANCH_ID, 
			F.FIRST_INVOICE_dATE, 
			FIRST_VALUE(A.ID) over (partition by F.FIRST_INVOICE_dATE order by F.FIRST_INVOICE_dATE) as FIRST_INVOICE_NUMBER
	FROM
		 (	SELECT 
			CLI.MASTER_ID AS MASTER_ID,
			A.BRANCH_ID AS BRANCH_ID,
			MIN(LEFT(
				NVL(TRY_to_timestamp(COALESCE(a.FINAL_OR_MANAGEDCARE_BILL_DATE,a.RAP_BILL_DATE, ''01/01/1999 12:00:00 AM +00:00''), ''mm/dd/yyyy HH12:MI:SS AM TZH:TZM''),
				TRY_to_timestamp(COALESCE(a.FINAL_OR_MANAGEDCARE_BILL_DATE,a.RAP_BILL_DATE, ''01/01/1999 12:00:00 AM +00:00''), ''YYYY-MM-DD''))
			,10)) AS FIRST_INVOICE_dATE
			FROM
			DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_ARS a	LEFT JOIN DEDUPE_LEVERAGE CLI ON	A.PATIENT_ID = CLI.PATIENT_ID
			GROUP BY MASTER_ID, BRANCH_ID
		) F
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_ARS a ON a.BRANCH_ID = F.BRANCH_ID 
	AND LEFT(
		NVL(TRY_to_timestamp(COALESCE(a.FINAL_OR_MANAGEDCARE_BILL_DATE,a.RAP_BILL_DATE, ''01/01/1999 12:00:00 AM +00:00''), ''mm/dd/yyyy HH12:MI:SS AM TZH:TZM''),
			TRY_to_timestamp(COALESCE(a.FINAL_OR_MANAGEDCARE_BILL_DATE,a.RAP_BILL_DATE, ''01/01/1999 12:00:00 AM +00:00''), ''YYYY-MM-DD''))
		,10) = F.FIRST_INVOICE_dATE
	AND a.PATIENT_ID = F.MASTER_ID
),
INVOICE_STATUS_MAPPING AS 
(
SELECT DISTINCT
	INV.FINAL_OR_MANAGEDCARE_STATUS,
	14 AS SOURCE_SYSTEM_ID,
	''PRIME'' AS SYSTEM_CODE,
	CASE WHEN UPPER(TRIM(INVOICE_STATUS)) IN (''PAID'',''OVER PAID'',''FULLY PAID'') THEN ''PAID''
		WHEN UPPER(TRIM(INVOICE_STATUS)) IN (''PARTIALLY PAID'') THEN ''PARTIAL PAY''
		WHEN UPPER(TRIM(INVOICE_STATUS)) IN (''BILL SENT'') THEN ''BILLED''
		WHEN UPPER(TRIM(INVOICE_STATUS)) IN (''CANCELLED'') THEN ''CANCELLED''
		WHEN UPPER(TRIM(INVOICE_STATUS)) IN (''DENIED'') THEN ''REJECTED''
		WHEN UPPER(TRIM(INVOICE_STATUS)) IN (''REVERSAL'',''RESUBMIT'',''PENDING'') THEN ''UNKNOWN''
	ELSE ''UNKNOWN'' END AS DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY
FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_INVOICE_STATUS_MAPPING INV
)
SELECT DISTINCT	
        MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS INVOICE_KEY,  --Pankti M.
		MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(CLI.MASTER_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS CLIENT_KEY,   --Pankti M.
		ID AS INVOICE_NUMBER,
		ID AS ALTERNATE_INVOICE_NUMBER,
		REPLACE(LEFT(
		NVL(TRY_to_timestamp(COALESCE(FINAL_OR_MANAGEDCARE_BILL_DATE,RAP_BILL_DATE,''01/01/1999 12:00:00 AM +00:00''), ''mm/dd/yyyy HH12:MI:SS AM TZH:TZM''),
			TRY_to_timestamp(COALESCE(FINAL_OR_MANAGEDCARE_BILL_DATE,RAP_BILL_DATE,''01/01/1999 12:00:00 AM +00:00''), ''YYYY-MM-DD''))
			::date ,7),''-'','''') AS PERIOD, 
		''REGULAR'' AS INVOICE_TYPE,
		1 AS NUMBER_OF_CLIENTS,
		''PRIME'' AS SYSTEM_CODE,
		14 AS SOURCE_SYSTEM_ID,
		MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(A.BRANCH_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS BRANCH_KEY, --Pankti M.
		''HH'' AS PAYOR_CODE,
		a.PAYOR_TYPE AS PAYOR_NAME,
		CASE WHEN UPPER(a.FINAL_OR_MANAGEDCARE_STATUS) IN (''PAID'',''DENIED'',''CANCELLED'',''REJECTED'',''WRITE-OFF'') THEN FALSE
			 WHEN UPPER(a.FINAL_OR_MANAGEDCARE_STATUS) IN (''SUBMITTED'',''AUTO-SUBMITTED'',''CREATED'',''PAYMENT PENDING'',''CO-PAY PENDING'',''RETURNED WITH ERRORS'',''EXECUTIVE REVIEW'') THEN TRUE 
			 ELSE FALSE 
		END	AS INVOICE_OPEN_FLAG,
		F.FIRST_INVOICE_dATE AS FIRST_INVOICE_dATE,
		NVL(TRY_to_timestamp(FINAL_CLAIM_PAYMENT_DATE, ''mm/dd/yyyy HH12:MI:SS AM TZH:TZM''),
		TRY_to_timestamp(FINAL_CLAIM_PAYMENT_DATE, ''YYYY-MM-DD''))
			::date  AS FINAL_PAYMENT_DATE,
		F.FIRST_INVOICE_NUMBER AS FIRST_INVOICE_NUMBER,
		NULL AS BILL_ITERATION,
		NULL AS BILL_REPRESENTATIVE,
		UPPER(CONCAT(e.CASE_MANAGER_FIRST_NAME,'' '',e.CASE_MANAGER_LAST_NAME )) AS BILL_SUPERVISOR,
		NULL AS BILL_MANAGER,
--		TRIM(UPPER(m.INVOICE_STATUS)) AS INVOICE_STATUS,
--		CHANGES MADE ON 21/04/23 FOR INVOICE_STATUS_MAPPING BY PINKAL
		TRIM(UPPER(ISM.DERIVED_INVOICE_STATUS)) AS INVOICE_STATUS,
		NULL AS WRITEOFF_FLAG,
		NULL AS WRITEOFF_REASON,
		NVL(RAP_AMOUNT,0) + NVL(FINAL_OR_MANAGEDCARE_AMOUNT,0) + NVL(NET_ADJUSTMENTS,0) AS AMOUNT_BILLED,
		NVL(CASH_RECEIVED,0) AS AMOUNT_COLLECTED,
		NVL(NET_RECEIVABLE,0)  AS AMOUNT_OUTSTANDING,
		''1900-01-01''::DATE AS EFFECTIVE_FROM_DATE,
		''9999-12-31''::DATE AS EFFECTIVE_TO_DATE,
		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
   		:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
        convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	    CURRENT_USER as ETL_INSERTED_BY ,
	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	    CURRENT_USER as ETL_LAST_UPDATED_BY,
	    0 as ETL_DELETED_FLAG,
	    0 as ETL_INFERRED_MEMBER_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_ARS a
--LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_INVOICE_STATUS_MAPPING M ON
--TRIM(UPPER(a.FINAL_OR_MANAGEDCARE_STATUS)) = TRIM(UPPER(m.FINAL_OR_MANAGEDCARE_STATUS))
LEFT JOIN INVOICE_STATUS_MAPPING ISM ON TRIM(UPPER(ISM.FINAL_OR_MANAGEDCARE_STATUS)) = TRIM(UPPER(a.FINAL_OR_MANAGEDCARE_STATUS))
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_EPISODESNAPSHOTS e ON a.EPISODE_ID = e.EPISODE_ID
--LEFT JOIN DEDUPE_LEVERAGE CLI ON CLI.PATIENT_ID=A.PATIENT_ID
LEFT JOIN DEDUPE_LEVERAGE CLI ON CLI.PATIENT_ID = A.PATIENT_ID
LEFT JOIN FIRST_DATE_AND_NUMBER F ON CLI.MASTER_ID = F.MASTER_ID AND A.BRANCH_ID = F.BRANCH_ID


UNION ALL
-- HOME CARE DATA

SELECT 
		INVOICE_KEY,
		CLIENT_KEY,
		INVOICE_NUMBER,
		ALTERNATE_INVOICE_NUMBER,
		PERIOD,
		INVOICE_TYPE,
		NUMBER_OF_CLIENTS,
		SYSTEM_CODE,
		SOURCE_SYSTEM_ID,
		BRANCH_KEY,
		PAYOR_CODE,
		PAYOR_NAME,
		INVOICE_OPEN_FLAG,
		FIRST_INVOICE_dATE,
		MAX(FINAL_PAYMENT_DATE),
		FIRST_INVOICE_NUMBER,
		BILL_ITERATION,
		BILL_REPRESENTATIVE,
		BILL_SUPERVISOR,
		BILL_MANAGER,
		INVOICE_STATUS,
		WRITEOFF_FLAG,
		WRITEOFF_REASON,
		SUM(AMOUNT_BILLED),
		SUM(AMOUNT_COLLECTED),
		SUM(AMOUNT_OUTSTANDING),
		EFFECTIVE_FROM_DATE,
		EFFECTIVE_TO_DATE,
		ETL_TASK_KEY,
		ETL_INSERTED_TASK_KEY,
		ETL_INSERTED_DATE,
		ETL_INSERTED_BY,
		ETL_LAST_UPDATED_DATE,
		ETL_LAST_UPDATED_BY,
		ETL_DELETED_FLAG,
		ETL_INFERRED_MEMBER_FLAG
FROM
(
WITH VISITFINANCIAL 
AS 
(
SELECT DISTINCT CLAIM_ID,CLAIM_INVOICE_NUMBER 
FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.VW_AXXESS_HC_TASKDETAILS
WHERE CLAIM_ID IS NOT NULL AND CLAIM_INVOICE_NUMBER IS NOT NULL
),
FINANCIAL_TRANSACTION AS (
SELECT CLAIM_ID,
--NVL(TRANSACTION_ID,'''') AS TRANSACTION_ID,
NVL(MAX(TRANSACTION_DATE),'''') AS TRANSACTION_DATE,
CASE			--Added on 09/02/23
		WHEN UPPER(TRIM(CLAIM_STATUS)) = ''OVER PAID'' THEN 1
		WHEN UPPER(TRIM(CLAIM_STATUS)) = ''PAID'' THEN 2
		WHEN UPPER(TRIM(CLAIM_STATUS)) = ''PARTIALLY PAID'' THEN 3
		WHEN UPPER(TRIM(CLAIM_STATUS)) = ''SUBMITTED'' THEN 4
		WHEN UPPER(TRIM(CLAIM_STATUS)) = ''RESUBMITTED'' THEN 5
		ELSE 6
END AS PRECEDENCE, CLAIM_STATUS,PAYOR_NAME,
ROW_NUMBER() OVER(PARTITION BY CLAIM_ID ORDER BY PRECEDENCE ASC NULLS LAST) AS RN
FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_FINANCIALTRANSACTIONS
GROUP BY CLAIM_ID,PRECEDENCE, CLAIM_STATUS,PAYOR_NAME
ORDER BY RN
),
FIRST_DATE_AND_NUMBER_HC 
AS
(
SELECT
	F.CLIENT_ID AS CLIENT_ID,
	F.BRANCH_ID AS BRANCH_ID,
	FIRST_VALUE(FIN.CLAIM_ID) over (partition by F.FIRST_INVOICE_dATE order by F.FIRST_INVOICE_dATE) as FIRST_INVOICE_NUMBER,
	F.FIRST_INVOICE_dATE AS FIRST_INVOICE_dATE
FROM (
	SELECT CLIENT_ID,
	BRANCH_ID,
	MIN(BILLED_DATE) AS FIRST_INVOICE_dATE
	FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_FINANCIALTRANSACTIONS
	GROUP BY CLIENT_ID, BRANCH_ID
	) F
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_FINANCIALTRANSACTIONS FIN ON F.CLIENT_ID = FIN.CLIENT_ID  AND F.BRANCH_ID = FIN.BRANCH_ID
)
SELECT DISTINCT 
		MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(FIN.CLAIM_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS INVOICE_KEY,
        MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(CLI.MASTER_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS CLIENT_KEY,
		VISIT.CLAIM_INVOICE_NUMBER AS INVOICE_NUMBER,
		VISIT.CLAIM_INVOICE_NUMBER AS ALTERNATE_INVOICE_NUMBER,
		--REPLACE(LEFT(TRY_TO_DATE(FIN.BILLED_DATE,''YYYY-MM-DD''),7),''-'','''') AS PERIOD,
		REPLACE(LEFT(FIRST_VALUE(TRY_TO_DATE(FIN.BILLED_DATE,''YYYY-MM-DD'')) OVER(ORDER BY TRY_TO_DATE(FIN.BILLED_DATE,''YYYY-MM-DD'') DESC),7),''-'','''') AS PERIOD,
		''REGULAR'' AS INVOICE_TYPE,
		1 AS NUMBER_OF_CLIENTS,
		''PRIME'' AS SYSTEM_CODE, 
		14 AS SOURCE_SYSTEM_ID,
        MD5(''PRIME'' || ''-'' || IFNULL(UPPER(TRIM(FIN.BRANCH_ID)),''UNKNOWN'') || ''-'' || ''AXXESS'') AS BRANCH_KEY,
		''HC'' AS PAYOR_CODE,
--		FIN.PAYOR_NAME AS PAYOR_NAME,
		FT.PAYOR_NAME AS PAYOR_NAME,
		CASE WHEN UPPER(FIN.CLAIM_STATUS)  IN (''PAID'',''DENIED'',''CANCELLED'',''REJECTED'',''WRITE-OFF'') THEN FALSE
			 WHEN UPPER(FIN.CLAIM_STATUS) IN (''SUBMITTED'',''AUTO-SUBMITTED'',''CREATED'',''PAYMENT PENDING'',''CO-PAY PENDING'',''RETURNED WITH ERRORS'',''EXECUTIVE REVIEW'') THEN TRUE 
			 ELSE FALSE 
		END	AS INVOICE_OPEN_FLAG,
		F.FIRST_INVOICE_dATE AS FIRST_INVOICE_dATE,
		TRY_TO_DATE(FIN.PAYMENT_DATE , ''YYYY-MM-DD'') AS FINAL_PAYMENT_DATE,
		F.FIRST_INVOICE_NUMBER AS FIRST_INVOICE_NUMBER,
		NULL AS BILL_ITERATION,
		NULL AS BILL_REPRESENTATIVE, 
		NULL AS BILL_SUPERVISOR,
		NULL AS BILL_MANAGER,
--      TRIM(UPPER(FIN.CLAIM_STATUS)) AS INVOICE_STATUS,
--		CHANGES MADE ON 21/04/23 FOR INVOICE_STATUS_MAPPING BY PINKAL
		TRIM(UPPER(ISM.DERIVED_INVOICE_STATUS)) AS INVOICE_STATUS,
		NULL AS WRITEOFF_FLAG,
		NULL AS WRITEOFF_REASON,
		NVL(FIN.CLAIM_AMOUNT,0) AS AMOUNT_BILLED,
		NVL(FIN.PAYMENT_AMOUNT,0) AS AMOUNT_COLLECTED,
		(NVL(FIN.CLAIM_AMOUNT,0) - NVL(FIN.PAYMENT_AMOUNT,0))  AS AMOUNT_OUTSTANDING,
		''1900-01-01''::DATE AS EFFECTIVE_FROM_DATE,
		''9999-12-31''::DATE AS EFFECTIVE_TO_DATE,    
		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
   		:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
        convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	    CURRENT_USER as ETL_INSERTED_BY ,
	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	    CURRENT_USER as ETL_LAST_UPDATED_BY,
	    0 as ETL_DELETED_FLAG,
	    0 as ETL_INFERRED_MEMBER_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.AXXESS.AXXESS_FINANCIALTRANSACTIONS FIN
INNER JOIN FINANCIAL_TRANSACTION FT ON FIN.CLAIM_ID = FT.CLAIM_ID 
AND NVL(FIN.TRANSACTION_DATE,'''') = FT.TRANSACTION_DATE AND FIN.CLAIM_STATUS = FT.CLAIM_STATUS
JOIN VISITFINANCIAL VISIT ON FIN.CLAIM_ID = VISIT.CLAIM_ID
LEFT JOIN DEDUPE_LEVERAGE CLI ON CLI.PATIENT_ID = FIN.CLIENT_ID 
LEFT JOIN FIRST_DATE_AND_NUMBER_HC F ON FIN.CLIENT_ID = F.CLIENT_ID AND FIN.BRANCH_ID = F.BRANCH_ID
LEFT JOIN INVOICE_STATUS_MAPPING ISM ON TRIM(UPPER(ISM.FINAL_OR_MANAGEDCARE_STATUS)) = TRIM(UPPER(FIN.CLAIM_STATUS))
WHERE FIN.TRANSACTION_ID IS NOT NULL AND FT.RN=1)
GROUP BY
		INVOICE_KEY,
		CLIENT_KEY,
		INVOICE_NUMBER,
		ALTERNATE_INVOICE_NUMBER,
		PERIOD,
		INVOICE_TYPE,
		NUMBER_OF_CLIENTS,
		SYSTEM_CODE,
		SOURCE_SYSTEM_ID,
		BRANCH_KEY,
		PAYOR_CODE,
		PAYOR_NAME,
		INVOICE_OPEN_FLAG,
		FIRST_INVOICE_dATE,
		FIRST_INVOICE_NUMBER,
		BILL_ITERATION,
		BILL_REPRESENTATIVE,
		BILL_SUPERVISOR,
		BILL_MANAGER,
		INVOICE_STATUS,
		WRITEOFF_FLAG,
		WRITEOFF_REASON,
		EFFECTIVE_FROM_DATE,
		EFFECTIVE_TO_DATE,
		ETL_TASK_KEY,
		ETL_INSERTED_TASK_KEY,
		ETL_INSERTED_DATE,
		ETL_INSERTED_BY,
		ETL_LAST_UPDATED_DATE,
		ETL_LAST_UPDATED_BY,
		ETL_DELETED_FLAG,
		ETL_INFERRED_MEMBER_FLAG
;

RETURN ''SUCCESS'';
end;                        

 EOT
}

