resource "snowflake_procedure" "DW_HAH_GET_STAGE_ADPALLIANCE_DIM_PAYCODE_MAPPING" {
	name ="GET_STAGE_ADPALLIANCE_DIM_PAYCODE_MAPPING"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN

--*****************************************************************************************************************************
-- NAME: ADPALLIANCE_DIM_PAYCODE_MAPPING
--
-- PURPOSE: Creates one row for each database (DB), paycode and assigns a paycode category according to ADP-ALLIANCE
--
-- DEVELOPMENT LOG:
-- DATE				AUTHOR                					NOTES:
-- ----------		--------------------------------		-------------------------------------------------------------------
-- 18/10/2022		Aditya Shukla / Jigar Prajapati			Initial Development
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.ADPALLIANCE_DIM_PAYCODE_MAPPING

WITH PAYCODE_USAGE_DATES AS (
	SELECT DISTINCT 
		PAYCODES,
		MIN(PAY_DATE)::DATE AS FIRST_USED_DATE,
		MAX(PAY_DATE)::DATE AS MOST_RECENT_USED_DATE,
		COUNT(FILE_NUMBER::INTEGER) AS NUMBER_EMPLOYEES_USED
	FROM DISC_${var.SF_ENVIRONMENT}.ADP.ALLIANCE_PAYROLL_DETAILS
	GROUP BY 1
)
SELECT DISTINCT
	MD5(18 || PD.PAYCODES || ''-'' || ''ALLIANCE'') AS PAYCODE_MAPPING_KEY,
	18 AS SOURCE_SYSTEM_ID,
	''ADP-ALLIANCE'' AS SYSTEM_CODE,
	NULL AS STATE_CODE,
	CASE WHEN PD.PAYCODES = ''REGULAR_EARNINGS'' THEN ''REG''
		ELSE COALESCE(HE.CODE, PS.CODE) 
	END AS PAY_CODE,
	CASE WHEN PD.PAYCODES = ''REGULAR_EARNINGS'' THEN ''EARNINGS''
		ELSE COALESCE(HE.DESCRIPTION, PS.DESCRIPTION)
	END AS PAY_CODE_DESCRIPTION,
	PS.TYPE AS PAY_CODE_TYPE,
	CASE 
		WHEN UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%CRITIC%I%'' OR  UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%VISION%'' OR UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%HEALTH%INS%'' OR UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%401%K%'' OR UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%GARNISH%'' OR UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%DENTAL%'' OR UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%HSA%'' OR UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%LIFE%INS%'' OR UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%VOL%LIFE%'' THEN ''Benefits & Deductions''
		WHEN UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%MILE%'' THEN ''Travel Time & Mileage''
		WHEN UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%TB TEST%'' THEN ''Reimbursement''
		WHEN UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%VAC%'' THEN ''PTO''
		WHEN PD.PAYCODES = ''REGULAR EARNINGS'' THEN ''Earnings''
		WHEN UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%SUPPORT%'' THEN ''Child Support''
		WHEN UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%BON%'' THEN ''Bonus''
		WHEN UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%PTO%'' THEN ''PTO''
		WHEN UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%ON%CALL%'' THEN ''On-Call''
		WHEN UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%TAX%'' THEN ''Tax''
		WHEN UPPER(REPLACE(PD.PAYCODES, ''VOLUNTARY DEDUCTION  '')) LIKE ''%SICK%'' THEN ''Sick''
	END AS PAY_CODE_CATEGORY,
	NULL AS FINANCE_CATEGORY,
	NULL AS REVENUE_CATEGORY,
	NULL AS REVENUE_SUBCATEGORY_CODE,
	NULL AS REVENUE_SUBCATEGORY_NAME,
	PUD.FIRST_USED_DATE AS FIRST_USED_DATE,
	PUD.MOST_RECENT_USED_DATE AS MOST_RECENT_USED_DATE,
	PUD.NUMBER_EMPLOYEES_USED AS NUMBER_EMPLOYEES_USED,
	IFF(DATEADD(''YEAR'', 1, PUD.MOST_RECENT_USED_DATE) >= PUD.MOST_RECENT_USED_DATE, TRUE, FALSE)::BOOLEAN AS ACTIVE_FLAG,
	NULL AS ADMIN_PAY_RATE_FLAG,
	NULL AS FIELD_PAY_RATE_FLAG,
	NULL AS INCLUDE_SALARY_PAYRATE_CALC_FLAG,
	NULL AS INCLUDE_FULL_TIME_HOURS_CALC_FLAG,
		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
		:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_INSERTED_DATE,
		CURRENT_USER AS ETL_INSERTED_BY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_LAST_UPDATED_DATE,
		CURRENT_USER AS ETL_LAST_UPDATED_BY,
		FALSE AS ETL_DELETED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.ADP.ALLIANCE_PAYROLL_DETAILS PD
LEFT JOIN PAYCODE_USAGE_DATES PUD 
	ON PUD.PAYCODES = PD.PAYCODES
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ADP.ALLIANCE_HOUSE_EARNINGS HE
	ON HE.CODE 
	=
	CASE WHEN PD.PAYCODES LIKE ''%ADDITIONAL_EARNINGS__%''
		THEN LEFT(SUBSTRING(PD.PAYCODES, LENGTH(''ADDITIONAL_EARNINGS__'') + 1), 3)
	END
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ADP.ALLIANCE_PAYCODE_SOURCE PS 
	ON PS.CODE
	=
	CASE WHEN PD.PAYCODES LIKE ''%VOLUNTARY_DEDUCTION_%''
		THEN SUBSTRING(SUBSTRING(PD.PAYCODES, LENGTH(''VOLUNTARY_DEDUCTION_'') + 1), 0, CHARINDEX(''_'', SUBSTRING(PD.PAYCODES, LENGTH(''VOLUNTARY_DEDUCTION_'') + 1)) - 1)
	END 
WHERE PD.PAYCODES IS NOT NULL;

END;

 EOT
}

