resource "snowflake_procedure" "DW_HAH_GET_STAGE_ZENDESK_FACT_CALLS" {
	name ="GET_STAGE_ZENDESK_FACT_CALLS"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
  RETURN_RESULT VARCHAR(1000);
BEGIN
    --*****************************************************************************************************************************
-- NAME:  ZENDESK_FACT_CALLS
--
-- PURPOSE: Creates one row per CALL according to ZENDESK 
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 10/04/23    MIRISHA                Initial development
-- 22/01/24    MIRISHA                Added few fields
-- 05/02/24    MIRISHA                CHANGED WH_EMPLOYEE_KEY LOGIC
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.ZENDESK_FACT_CALLS
WITH sorted_quality_issues AS (
    SELECT 
      ID,
    ARRAY_SORT(QUALITY_ISSUES,TRUE) AS sorted_quality_issues
    FROM DISC_${var.SF_ENVIRONMENT}.ZENDESK.CALLS
)
SELECT DISTINCT 
''ZENDESK_AMS'' AS SYSTEM_CODE
,MD5(''ZENDESK'' || ''-'' || C.ID  || ''-'' || C.SOURCE || ''-'' || ''ZENDESK'' ) AS CALL_KEY 
,C.ID AS CALL_ID
,25 AS SOURCE_SYSTEM_ID 
,MD5(NVL(C.AGENT_ID , ''-1'')) AS AGENT_KEY
,MD5(NVL(C.CUSTOMER_ID , ''-1'')) AS CALLER_KEY
,MD5(''ZENDESK'' || ''-'' || C.TICKET_ID  || ''-'' || C.SOURCE || ''-'' || ''ZENDESK'' ) AS TICKET_KEY
,C.TICKET_ID
,C.AGENT_ID 
,C.CUSTOMER_ID AS CALLER_ID
,CALL_GROUP_ID
,G."NAME" AS GROUP_TITLE
,G.DESCRIPTION AS GROUP_DESCRIPTION
,T.ORGANIZATION_ID
,T.BRANCH_KEY AS BRANCH_KEY
,T.OFFICE_STATE_CODE 
,CALL_CHARGE 
,COMPLETION_STATUS 
,DIRECTION 
,DURATION 
,EXCEEDED_QUEUE_WAIT_TIME 
,HOLD_TIME 
,MINUTES_BILLED 
,PHONE_NUMBER_ID 
,LPAD(REGEXP_REPLACE(PHONE_NUMBER, ''\\\\+1'', ''''), 10, ''0'') AS PHONE_NUMBER 
,TIME_TO_ANSWER 
,VOICEMAIL 
,WAIT_TIME 
,WRAP_UP_TIME 
,TALK_TIME
,C.CONSULTATION_TIME 
,C.OUTSIDE_BUSINESS_HOURS 
,CALLBACK
,DEFAULT_GROUP
,LINE_ID
,LINE_TYPE
,CALL_CHANNEL 
,INITCAP(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(ARRAY_TO_STRING(SQI.sorted_quality_issues, '',''), ''[\\\\[\\\\]\\\\s"]'', ''''), ''_'', '' ''), '','', '', '')) AS QUALITY_ISSUES  
,C.CREATED_AT,
CASE
        WHEN EXTRACT(MINUTE, C.created_at) < 30 THEN
            TO_CHAR(DATE_TRUNC(''HOUR'', C.created_at), ''HH24:MI'') || '' - '' || TO_CHAR(DATEADD(MINUTE, 30, DATE_TRUNC(''HOUR'', C.created_at)), ''HH24:MI'')
        ELSE
            TO_CHAR(DATEADD(MINUTE, 30, DATE_TRUNC(''HOUR'', C.created_at)), ''HH24:MI'') || '' - '' || TO_CHAR(DATEADD(MINUTE, 60, DATE_TRUNC(''HOUR'', C.created_at)), ''HH24:MI'')
    END AS TIME_BRACKET  
,C.UPDATED_AT ,
NULL AS DNIS,
NULL AS AA_DESTINATION,
NULL AS CALL_START_DATE,
NULL AS CALL_START_TIME,
NULL AS CALL_DISCONNECTED_DATE,
NULL AS CALL_DISCONNECTED_TIME,
NULL AS CALLEE_DISCONNECT_ON_HOLD,
NULL AS CALLER_DISCONNECT_ON_HOLD,
NULL AS CALL_ANSWERED_DATE,
NULL AS CALL_ANSWERED_TIME,
NULL AS CALL_LEG_COUNT,
NULL AS RING_DURATION,
NULL AS ABANDONED_TIME,
NULL AS DEPARTMENTS,
NULL AS BRANCHES,
NULL AS CALLER_NAME,
NULL AS CALLEE_NAME,
DEM.EMPLOYEE_KEY AS WH_EMPLOYEE_KEY,
---- ETL FIELDS ----
:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
,CURRENT_USER AS ETL_INSERTED_BY
,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
,CURRENT_USER AS ETL_LAST_UPDATED_BY
,0 AS ETL_DELETED_FLAG	
FROM DISC_${var.SF_ENVIRONMENT}.ZENDESK.CALLS C
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ZENDESK.GROUPS G
	ON TRIM(C.CALL_GROUP_ID) = TRIM(G.ID)
LEFT JOIN HAH.FACT_TICKET T ON TRIM(T.ID)=TRIM(C.TICKET_ID) AND T.SYSTEM_CODE=''ZENDESK_AMS''
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ZENDESK.USER AGENT
	ON TRIM(C.AGENT_ID) = TRIM(AGENT.ID)
LEFT JOIN INTEGRATION.DIM_EMPLOYEE_MERGED DEM 
    ON AGENT.USER_FIELDS_EMPLOYEE_KEY = DEM.ORIGINAL_EMPLOYEE_KEY
LEFT JOIN sorted_quality_issues SQI ON SQI.ID=C.ID
QUALIFY ROW_NUMBER() OVER(PARTITION BY C.ID  ORDER BY C.UPDATED_AT DESC) = 1;

SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
	RETURN return_result;
    END;
    
 EOT
}

