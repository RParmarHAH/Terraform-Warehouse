resource "snowflake_procedure" "DW_HAH_GET_STAGE_ADPANSWERCARE_DIM_EMPLOYEE" {
	name ="GET_STAGE_ADPANSWERCARE_DIM_EMPLOYEE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN

--*****************************************************************************************************************************
-- NAME: ADPANSWERCARE_DIM_EMPLOYEE
--
-- PURPOSE: Creates one row for each EMPLOYEE according to ADP-ANSWERCARE
--
-- DEVELOPMENT LOG:
-- DATE				AUTHOR                					NOTES:
-- ----------		--------------------------------		-------------------------------------------------------------------
-- 18/10/2022		Aditya Shukla / Jigar Prajapati			Initial Development
-- 10/11/2023		Shikhar Saxena							Updated employee ethnicity logic and added HISPANIC_OR_LATINO column
-- 13/12/2023		Saurav Purohit							Added ACQUIRED_SYSTEM field
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.ADPANSWERCARE_DIM_EMPLOYEE

WITH 
EMPLOYEE_CHECK_DATES AS (
	SELECT DISTINCT
		FILE_NUMBER,
		MIN(PAY_DATE)::DATE AS FIRST_CHECK_DATE,
		MAX(PAY_DATE)::DATE AS LAST_CHECK_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.ADP.ANSWERCARE_PAYROLL AP
	GROUP BY 1
),
DUP AS (
	SELECT DISTINCT 
		TRIM(FILE_NUMBER) AS ID, EMPLOYEE_DOB, CDE.ACTIVE_EMPLOYEE_FLAG, CDE.EMPLOYEE_ADDRESS1, CDE.EMPLOYEE_ADDRESS2, CDE.REASON_TO_TERMINATE, CDE.EMPLOYEE_HOME_PHONE, CDE.EMPLOYEE_CELL_PHONE, CDE.EMPLOYEE_ZIP, CDE.EMPLOYEE_GENDER, CDE.EMPLOYEE_CITY, CDE.EMPLOYEE_PERSONAL_EMAIL, CDE.EMPLOYEE_WORK_EMAIL, 
		ROW_NUMBER() OVER (PARTITION BY TRIM(FILE_NUMBER) ORDER BY CDE.EMPLOYEE_FIRST_NAME DESC NULLS LAST) AS RANK
		FROM DISC_${var.SF_ENVIRONMENT}.ADP.ANSWERCARE_PAYROLL AP
	LEFT JOIN DW_${var.SF_ENVIRONMENT}."STAGE".CLEARCARE_DIM_EMPLOYEE CDE
		ON CASE WHEN regexp_replace(TRIM(UPPER(SPLIT_PART(SPLIT_PART(AP.NAME, '','', 2), '' '', 2))), ''\\'''') = ''TALISHA'' 
		THEN ''TALISHIA'' 
		ELSE regexp_replace(TRIM(UPPER(SPLIT_PART(SPLIT_PART(AP.NAME, '','', 2), '' '', 2))), ''\\'''')
		END 
		||
		REGEXP_REPLACE(TRIM(UPPER(SPLIT_PART(AP.NAME, '','', 1))), ''-| '')
		= 
		CASE WHEN RIGHT(TRIM(UPPER(EMPLOYEE_FIRST_NAME)), 3) = ''LOA'' THEN SUBSTRING(TRIM(UPPER(EMPLOYEE_FIRST_NAME)), 0, LENGTH(EMPLOYEE_FIRST_NAME) - 3) ELSE TRIM(UPPER(EMPLOYEE_FIRST_NAME)) END 
		||
		CASE WHEN RIGHT(TRIM(UPPER(EMPLOYEE_LAST_NAME)), 3) = ''LOA'' THEN SUBSTRING(TRIM(UPPER(EMPLOYEE_LAST_NAME)), 0, LENGTH(EMPLOYEE_LAST_NAME) - 3) ELSE TRIM(UPPER(EMPLOYEE_LAST_NAME)) END
	QUALIFY RANK = 1
),
SALARY_RATE AS (
	SELECT DISTINCT
		ROW_NUMBER() OVER (PARTITION BY TRIM(FILE_NUMBER) ORDER BY PAY_DATE::DATE DESC) AS RANK,
		TRIM(FILE_NUMBER) AS ID,
		TRIM(REPLACE(REPLACE(RATE, ''$''), '','')) * 40 * 52 AS SALARY,
		TRIM(REPLACE(REPLACE(RATE, ''$''), '','')) AS RATE
	FROM DISC_${var.SF_ENVIRONMENT}.ADP.ANSWERCARE_PAYROLL QUALIFY RANK = 1
)
SELECT DISTINCT 
	MD5(''ADP'' || ''-'' || EML.MASTER_ID || ''ANSWERCARE'') AS EMPLOYEE_KEY,
	EML.ID AS EMPLOYEE_ID,
	''NYL'' AS SYSTEM_CODE,
	18 AS SOURCE_SYSTEM_ID,
	HEX_ENCODE(EML.EMPLOYEE_SSN)::NUMBER AS EMPLOYEE_PID,
	TRY_TO_NUMBER(EML.ID) AS EMPLOYEE_NUMBER,
	DUP.EMPLOYEE_DOB AS EMPLOYEE_DOB,
	CDE.EMPLOYEE_DATE_OF_DEATH AS EMPLOYEE_DATE_OF_DEATH,
	EML.EMPLOYEE_HIRE_DATE::DATE AS EMPLOYEE_HIRE_DATE,
	EML.EMPLOYEE_REHIRE_DATE::DATE AS EMPLOYEE_REHIRE_DATE,
	CDE.EMPLOYEE_BENEFIT_START_DATE AS EMPLOYEE_BENEFIT_START_DATE,
	CD.FIRST_CHECK_DATE AS EMPLOYEE_FIRST_CHECK_DATE,
	CD.LAST_CHECK_DATE AS EMPLOYEE_LAST_CHECK_DATE,
	EML.EMPLOYEE_TERMINATE_DATE::DATE AS EMPLOYEE_LAST_WORKED_DATE,
	EML.EMPLOYEE_TERMINATE_DATE::DATE AS EMPLOYEE_TERMINATE_DATE,
	DUP.REASON_TO_TERMINATE AS REASON_TO_TERMINATE,
	EML.ACTIVE_EMPLOYEE_FLAG AS ACTIVE_EMPLOYEE_FLAG,
	CDE.ABLE_TO_REHIRE_FLAG AS ABLE_TO_REHIRE_FLAG,
	CDE.EMPLOYEE_PREFIX AS EMPLOYEE_PREFIX,
	EML.EMPLOYEE_FIRST_NAME AS EMPLOYEE_FIRST_NAME,
	EML.EMPLOYEE_MIDDLE_NAME AS EMPLOYEE_MIDDLE_NAME,
	EML.EMPLOYEE_LAST_NAME AS EMPLOYEE_LAST_NAME,
	CDE.EMPLOYEE_SUFFIX AS EMPLOYEE_SUFFIX,
	DUP.EMPLOYEE_ADDRESS1 AS EMPLOYEE_ADDRESS1,
	DUP.EMPLOYEE_ADDRESS2 AS EMPLOYEE_ADDRESS2,
	DUP.EMPLOYEE_CITY AS EMPLOYEE_CITY,
	CDE.EMPLOYEE_STATE_CODE AS EMPLOYEE_STATE_CODE,
	DUP.EMPLOYEE_ZIP AS EMPLOYEE_ZIP,
	CASE 
		WHEN DUP.EMPLOYEE_HOME_PHONE = ''''
			THEN NULL 
		ELSE DUP.EMPLOYEE_HOME_PHONE
	END AS EMPLOYEE_HOME_PHONE,
	DUP.EMPLOYEE_CELL_PHONE AS EMPLOYEE_CELL_PHONE,
	CASE 
		WHEN CDE.EMPLOYEE_WORK_PHONE = '''' 
			THEN NULL 
		ELSE CDE.EMPLOYEE_WORK_PHONE 
	END AS EMPLOYEE_WORK_PHONE,
	DUP.EMPLOYEE_PERSONAL_EMAIL AS EMPLOYEE_PERSONAL_EMAIL,
	DUP.EMPLOYEE_WORK_EMAIL AS EMPLOYEE_WORK_EMAIL,
	CDE.LINKED_IN_PROFILE_URL AS LINKED_IN_PROFILE_URL,
	CASE WHEN dup.EMPLOYEE_GENDER = '''' 
		THEN NULL 
		WHEN DUP.EMPLOYEE_GENDER = ''F'' 
		THEN ''FEMALE''
		WHEN DUP.EMPLOYEE_GENDER = ''M'' 
		THEN ''MALE''
		ELSE NULL
	END AS EMPLOYEE_GENDER,
	CDE.EMPLOYEE_ETHNICITY AS EMPLOYEE_ETHNICITY,
	IFF(CDE.HISPANIC_OR_LATINO IS NULL, FALSE,CDE.HISPANIC_OR_LATINO) AS HISPANIC_OR_LATINO,
	CDE.EMPLOYEE_LANGUAGE AS EMPLOYEE_LANGUAGE,
	CDE.EMPLOYEE_MARITAL_STATUS AS EMPLOYEE_MARITAL_STATUS,
	CDE.EMPLOYEE_TYPE AS EMPLOYEE_TYPE,
	UPPER(TRIM(CDE.EMPLOYEE_CATEGORY)) AS EMPLOYEE_CATEGORY,
	CDE.EXEMPT_FLAG AS EXEMPT_FLAG,
	CDE.JOB_TITLE AS JOB_TITLE,
	CDE.JOB_DESCRIPTION AS JOB_DESCRIPTION,
	CDE.CLASS_ID AS CLASS_ID,
	CDE.WORKERS_COMP AS WORKERS_COMP,
	EML.ID AS PAYROLL_ID,
	CDE.PERCENT_401K_DEDUCTION AS PERCENT_401K_DEDUCTION,
	CDE.AMOUNT_401K_DEDUCTION AS AMOUNT_401K_DEDUCTION,
	NULL AS JAZZHR_APPLICANT_ID,
	NULL AS JAZZHR_USER_ID,
	NULL AS JAZZHR_CONTACT_ID,
	''OH'' AS WORK_STATE,
	NULL AS SUTA_STATE,
	NULL AS EMPLOYEE_DEPARTMENT,
	NULL AS EMPLOYEE_OFFICE_CODE,
	COALESCE(CDE.PRIMARY_BRANCH_KEY, ''UNKNOWN'') AS PRIMARY_BRANCH_KEY,
	COALESCE(CDE.PRIMARY_BRANCH_STATE, ''OH'') AS PRIMARY_BRANCH_STATE,
	COALESCE(CDE.PRIMARY_BRANCH_NAME, ''UNKNOWN'') AS PRIMARY_BRANCH_NAME,
	CDE.PRIMARY_BRANCH_SYSTEM_CODE AS PRIMARY_BRANCH_SYSTEM_CODE,
	NULL AS CASE_MANAGER_FLAG,
	NULL AS SUPERVISOR_FLAG,
	NULL AS COORDINATOR_FLAG,
	NULL AS LINKED_ID,
	HEX_ENCODE(SR.SALARY) AS SALARY,
	HEX_ENCODE(SR.RATE) AS PAY_RATE,
	IFF(EML.EMPLOYEE_REHIRE_DATE IS NULL, IFF(EML.EMPLOYEE_HIRE_DATE IS NULL, CAST(''1900-01-01'' AS DATE), EML.EMPLOYEE_HIRE_DATE), EML.EMPLOYEE_REHIRE_DATE)::TIMESTAMP_NTZ(9) AS EFFECTIVE_FROM_DATE,
	IFF(EML.EMPLOYEE_TERMINATE_DATE IS NULL, CAST(''2070-12-31'' AS DATE), EML.EMPLOYEE_TERMINATE_DATE)::TIMESTAMP_NTZ(9) AS EFFECTIVE_TO_DATE,
	NULL::VARCHAR(32) AS MDM_DIM_EMPLOYEE_KEY,
		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
		:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
		CURRENT_USER AS ETL_INSERTED_BY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
		CURRENT_USER AS ETL_LAST_UPDATED_BY,
		FALSE AS ETL_DELETED_FLAG,
		FALSE AS ETL_INFERRED_MEMBER_FLAG,
		''CLEARCARE'' AS ACQUIRED_SYSTEM
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ADP.ANSWERCARE_EMPLOYEE_MASTER_LIST EML
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_EMPLOYEE CDE
	ON CDE.SOURCE_SYSTEM_ID = 16 AND 
	CASE WHEN EML.EMPLOYEE_FIRST_NAME = ''TALISHA''
		THEN ''TALISHIA'' 
		ELSE REPLACE(EML.EMPLOYEE_FIRST_NAME, '''''''')
	END 
	|| 
	REPLACE(EML.EMPLOYEE_LAST_NAME, '''''''')
	= 
	CASE WHEN RIGHT(TRIM(UPPER(cde.EMPLOYEE_FIRST_NAME)), 3) = ''LOA'' THEN SUBSTRING(TRIM(UPPER(CDE.EMPLOYEE_FIRST_NAME)), 0, LENGTH(CDE.EMPLOYEE_FIRST_NAME) - 3) ELSE TRIM(UPPER(CDE.EMPLOYEE_FIRST_NAME)) END 
	|| 
	CASE WHEN RIGHT(TRIM(UPPER(CDE.EMPLOYEE_LAST_NAME)), 3) = ''LOA'' THEN SUBSTRING(TRIM(UPPER(CDE.EMPLOYEE_LAST_NAME)), 0, LENGTH(CDE.EMPLOYEE_LAST_NAME) - 3) ELSE TRIM(UPPER(CDE.EMPLOYEE_LAST_NAME)) END
LEFT JOIN EMPLOYEE_CHECK_DATES CD
	ON CD.FILE_NUMBER = EML.ID
LEFT JOIN DUP
	ON TRIM(DUP.ID) = TRIM(EML.ID)
LEFT JOIN SALARY_RATE SR
	ON SR.ID = EML.ID;

END;

 EOT
}

