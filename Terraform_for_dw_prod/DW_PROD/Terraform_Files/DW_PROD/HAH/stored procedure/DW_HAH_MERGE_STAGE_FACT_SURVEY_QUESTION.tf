resource "snowflake_procedure" "DW_HAH_MERGE_STAGE_FACT_SURVEY_QUESTION" {
	name ="MERGE_STAGE_FACT_SURVEY_QUESTION"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "SURVEY_ID"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
	RETURN_RESULT VARCHAR;
BEGIN
	
	MERGE INTO HAH.FACT_SURVEY_QUESTION FSQ
	USING (SELECT * FROM STAGE.FACT_SURVEY_QUESTION WHERE SURVEY_ID=:SURVEY_ID) STAGE
	ON FSQ.PRIMARY_QUESTION_KEY = STAGE.PRIMARY_QUESTION_KEY
	WHEN MATCHED THEN 
	UPDATE SET 
		FSQ.SURVEY_QUESTION_KEY= STAGE.SURVEY_QUESTION_KEY,
		FSQ.SURVEY_KEY=	STAGE.SURVEY_KEY,
		FSQ.SURVEY_ID=	STAGE.SURVEY_ID,
		FSQ.SOURCE_SYSTEM_ID=	STAGE.SOURCE_SYSTEM_ID,
		FSQ.SYSTEM_CODE=	STAGE.SYSTEM_CODE,
		FSQ.QUESTION_ID=	STAGE.QUESTION_ID,
		FSQ.QID=	STAGE.QID,
		FSQ.QUESTION_TEXT=	STAGE.QUESTION_TEXT,
		FSQ.QUESTION_CATEGORY=	STAGE.QUESTION_CATEGORY,
		FSQ.IS_ACTIVE=	STAGE.IS_ACTIVE,
		FSQ.ETL_TASK_KEY=	STAGE.ETL_TASK_KEY,
		FSQ.ETL_INSERTED_TASK_KEY=	STAGE.ETL_INSERTED_TASK_KEY,
		-- FSQ.ETL_INSERTED_DATE=	STAGE.ETL_INSERTED_DATE,
		-- FSQ.ETL_INSERTED_BY=	STAGE.ETL_INSERTED_BY,
		FSQ.ETL_LAST_UPDATED_DATE=	STAGE.ETL_LAST_UPDATED_DATE,
		FSQ.ETL_LAST_UPDATED_BY=	STAGE.ETL_LAST_UPDATED_BY,
		FSQ.ETL_DELETED_FLAG=	STAGE.ETL_DELETED_FLAG
	WHEN NOT MATCHED THEN 
	INSERT ( 
		PRIMARY_QUESTION_KEY,
	    SURVEY_QUESTION_KEY,
		SURVEY_KEY,
		SURVEY_ID,
		SOURCE_SYSTEM_ID,
		SYSTEM_CODE,
		QUESTION_ID,
		QID,
		QUESTION_TEXT,
		QUESTION_CATEGORY,
		IS_ACTIVE,
		ETL_TASK_KEY,
		ETL_INSERTED_TASK_KEY,
		ETL_INSERTED_DATE,
		ETL_INSERTED_BY,
		ETL_LAST_UPDATED_DATE,
		ETL_LAST_UPDATED_BY,
		ETL_DELETED_FLAG
	) 
	VALUES (
		STAGE.PRIMARY_QUESTION_KEY,
		STAGE.SURVEY_QUESTION_KEY,
		STAGE.SURVEY_KEY,
		STAGE.SURVEY_ID,
		STAGE.SOURCE_SYSTEM_ID,
		STAGE.SYSTEM_CODE,
		STAGE.QUESTION_ID,
		STAGE.QID,
		STAGE.QUESTION_TEXT,
		STAGE.QUESTION_CATEGORY,
		STAGE.IS_ACTIVE,
		STAGE.ETL_TASK_KEY,
		STAGE.ETL_INSERTED_TASK_KEY,
		STAGE.ETL_INSERTED_DATE,
		STAGE.ETL_INSERTED_BY,
		STAGE.ETL_LAST_UPDATED_DATE,
		STAGE.ETL_LAST_UPDATED_BY,
		STAGE.ETL_DELETED_FLAG
	);

	SELECT CONCAT(''Message : '',"number of rows inserted", '' Rows Inserted & '' ,"number of rows updated",'' Rows Updated.'') into :RETURN_RESULT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
    UPDATE DW_${var.SF_ENVIRONMENT}.HAH.FACT_SURVEY_QUESTION A SET A.IS_ACTIVE = FALSE WHERE A.PRIMARY_QUESTION_KEY NOT IN (SELECT PRIMARY_QUESTION_KEY FROM DW_${var.SF_ENVIRONMENT}.STAGE.FACT_SURVEY_QUESTION);
    
	return RETURN_RESULT;
END;

 EOT
}

