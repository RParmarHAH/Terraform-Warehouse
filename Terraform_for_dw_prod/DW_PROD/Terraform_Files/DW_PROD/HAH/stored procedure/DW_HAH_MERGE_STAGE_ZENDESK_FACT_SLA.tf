resource "snowflake_procedure" "DW_HAH_MERGE_STAGE_ZENDESK_FACT_SLA" {
	name ="MERGE_STAGE_ZENDESK_FACT_SLA"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
  RETURN_RESULT VARCHAR(1000);
BEGIN
    MERGE INTO HAH.FACT_SLA TGT 
	USING STAGE.ZENDESK_FACT_SLA STG 
	ON TGT.TICKET_SLA_KEY = STG.TICKET_SLA_KEY
	WHEN MATCHED THEN 
	UPDATE SET 
TGT.SYSTEM_CODE = STG.SYSTEM_CODE,
TGT.TICKET_SLA_KEY = STG.TICKET_SLA_KEY,
TGT.ID = STG.ID,
TGT.SOURCE_SYSTEM_ID = STG.SOURCE_SYSTEM_ID,
TGT.TICKET_KEY = STG.TICKET_KEY,
TGT.TICKET_ID = STG.TICKET_ID,
TGT.WH_EMPLOYEE_KEY = STG.WH_EMPLOYEE_KEY,
TGT.PRIORITY = STG.PRIORITY,
TGT.METRIC = STG.METRIC,
TGT.SLA_TARGET = STG.SLA_TARGET,
TGT.SLA_POLICY_ID = STG.SLA_POLICY_ID,
TGT.SLA_POLICY_TITLE = STG.SLA_POLICY_TITLE,
TGT.SLA_POLICY_DESCRIPTION = STG.SLA_POLICY_DESCRIPTION,
TGT.REPLY_TIME = STG.REPLY_TIME,
TGT.FULL_RESOLUTION_TIME = STG.FULL_RESOLUTION_TIME,
TGT.REQUESTER_WAIT_TIME = STG.REQUESTER_WAIT_TIME,
TGT.AGENT_WAIT_TIME = STG.AGENT_WAIT_TIME,
TGT.AGENT_WORK_TIME = STG.AGENT_WORK_TIME,
TGT.SLA_TARGET_ACHIEVED = STG.SLA_TARGET_ACHIEVED,
TGT.ETL_TASK_KEY = STG.ETL_TASK_KEY,
TGT.ETL_INSERTED_TASK_KEY = STG.ETL_INSERTED_TASK_KEY,
TGT.ETL_INSERTED_DATE = STG.ETL_INSERTED_DATE,
TGT.ETL_INSERTED_BY = STG.ETL_INSERTED_BY,
TGT.ETL_LAST_UPDATED_DATE = STG.ETL_LAST_UPDATED_DATE,
TGT.ETL_LAST_UPDATED_BY = STG.ETL_LAST_UPDATED_BY,
TGT.ETL_DELETED_FLAG = STG.ETL_DELETED_FLAG,
TGT.ETL_INFERRED_MEMBER_FLAG = STG.ETL_INFERRED_MEMBER_FLAG
	WHEN NOT MATCHED THEN 
	INSERT ( 
SYSTEM_CODE,
TICKET_SLA_KEY,
ID,
SOURCE_SYSTEM_ID,
TICKET_KEY,
TICKET_ID,
WH_EMPLOYEE_KEY,
PRIORITY,
METRIC,
SLA_TARGET,
SLA_POLICY_ID,
SLA_POLICY_TITLE,
SLA_POLICY_DESCRIPTION,
REPLY_TIME,
FULL_RESOLUTION_TIME,
REQUESTER_WAIT_TIME,
AGENT_WAIT_TIME,
AGENT_WORK_TIME,
SLA_TARGET_ACHIEVED,
ETL_TASK_KEY,
ETL_INSERTED_TASK_KEY,
ETL_INSERTED_DATE,
ETL_INSERTED_BY,
ETL_LAST_UPDATED_DATE,
ETL_LAST_UPDATED_BY,
ETL_DELETED_FLAG,
ETL_INFERRED_MEMBER_FLAG
	) 
	VALUES (
STG.SYSTEM_CODE,
STG.TICKET_SLA_KEY,
STG.ID,
STG.SOURCE_SYSTEM_ID,
STG.TICKET_KEY,
STG.TICKET_ID,
STG.WH_EMPLOYEE_KEY,
STG.PRIORITY,
STG.METRIC,
STG.SLA_TARGET,
STG.SLA_POLICY_ID,
STG.SLA_POLICY_TITLE,
STG.SLA_POLICY_DESCRIPTION,
STG.REPLY_TIME,
STG.FULL_RESOLUTION_TIME,
STG.REQUESTER_WAIT_TIME,
STG.AGENT_WAIT_TIME,
STG.AGENT_WORK_TIME,
STG.SLA_TARGET_ACHIEVED,
STG.ETL_TASK_KEY,
STG.ETL_INSERTED_TASK_KEY,
STG.ETL_INSERTED_DATE,
STG.ETL_INSERTED_BY,
STG.ETL_LAST_UPDATED_DATE,
STG.ETL_LAST_UPDATED_BY,
STG.ETL_DELETED_FLAG,
STG.ETL_INFERRED_MEMBER_FLAG
	);

SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted & '',"number of rows updated",'' Rows Updated. '') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
	RETURN return_result;
END;
    
 EOT
}

