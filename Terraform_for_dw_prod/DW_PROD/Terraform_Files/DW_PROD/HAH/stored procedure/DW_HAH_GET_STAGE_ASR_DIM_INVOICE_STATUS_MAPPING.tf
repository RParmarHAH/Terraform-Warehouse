resource "snowflake_procedure" "DW_HAH_GET_STAGE_ASR_DIM_INVOICE_STATUS_MAPPING" {
	name ="GET_STAGE_ASR_DIM_INVOICE_STATUS_MAPPING"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN
--*****************************************************************************************************************************
-- PRODELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 17/03/23    Pinkal Panchal        Initial PRODelopment
-- 29/11/23    Pooja Bagane	     Added logic to get data from ASR_RECEIVABLES,ASR_PAYMENTSRECEIVED and ASR_CLAIMSTATUSES
--*****************************************************************************************************************************



INSERT OVERWRITE INTO STAGE.ASR_DIM_INVOICE_STATUS_MAPPING
WITH ADJ_AND_CLN_INVOICES AS ( 
SELECT  * FROM(
   (
  SELECT 
RB.CUSTOMERID , 
RB.BILLINGTRANSACTIONID ,
RB.VISITDATE ,
PB.CLAIMSTATUS,
RB.INVOICENUMBER,
RB.PAYERSOURCEID,
RB.LOCATIONID,
RB.BILLEDAMOUNT,
RB.ISPAID,
PB.REIMBAMOUNT,
COALESCE (SPLIT_PART(PB.PAIDDATE,'' '',0),''12/31/1900'')::DATE AS DMY_PAID_DATE,
TRY_TO_DATE(TRIM(RB.VISITDATE),''MM/DD/YYYY HH:MI:SS'') AS PERIOD,
PB.PAIDDATE AS ACT_PAID_DATE,
CS.REIMBURSEMENT_STATUS_NAME AS STATUS,
TRY_TO_DATE(RB.BILLINGDATE,''MM/DD/YYYY HH24:MI:SS'') AS INVOICE_DATE,
        COALESCE(
            TRY_TO_DATE(RB.VISITDATE ,''MM/DD/YYYY HH24:MI:SS''),
            CASE -- WHEN the visit IS RESCHEDULED THEN the visit date IS NOT updated, TO maintain consistency picking it FROM either TIMECHECKEDIN OR RESCHEDULEDTO Date
                WHEN TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <> TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
                THEN TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
                ELSE TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')
            END
        ) AS SERVICE_DATE,
        NVL(RB.BILLEDAMOUNT,0) AS AMOUNT_BILLED,
        NVL(PB.REIMBAMOUNT,0) AS AMOUNT_RECEIVED
--ROW_NUMBER() OVER (PARTITION BY RB.BILLINGTRANSACTIONID ORDER BY COALESCE (SPLIT_PART(PB.PAIDDATE,'' '',0),''12/31/1900'')::DATE  DESC) RN
FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_RECEIVABLES  RB 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_PAYMENTSRECEIVED PB 
ON RB.BILLINGTRANSACTIONID =PB.BILLINGTRANSACTIONID  
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_CLAIMSTATUSES CS 
ON PB.CLAIMSTATUS =CS.REIMBURSEMENT_STATUS_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_VISITS V ON V.SERVICEVISITACTUALID = RB.SERVICEVISITACTUALID  
WHERE RB.BILLINGTRANSACTIONID  IS NOT NULL
QUALIFY ROW_NUMBER() OVER (PARTITION BY RB.BILLINGTRANSACTIONID ORDER BY COALESCE (SPLIT_PART(PB.PAIDDATE,'' '',0),''12/31/1900'')::DATE   DESC) = 1)
 )
),EXCLUDED_INVOICE AS (
	SELECT *
	FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_REVENUE
	WHERE TO_DATE(VISIT_DATE,''MM/DD/YYYY'') < ''2022-06-01'' -- Invoices FROM JUNE 1st, 2022 IS processed IN the 2nd logic
	AND BILLING_TRAN_ID_NUMBER NOT IN (SELECT BILLINGTRANSACTIONID FROM ADJ_AND_CLN_INVOICES)
)
SELECT 
 13 AS SOURCE_SYSTEM_ID,
''PRIME'' AS SYSTEM_CODE,
     CASE
		WHEN UPPER(TRIM(BSVR.STATUS)) IN (''DENIAL'') THEN ''CANCELLED''
		WHEN UPPER(TRIM(BSVR.STATUS)) IN (''PAID'') THEN ''PAID''
		WHEN UPPER(TRIM(BSVR.STATUS)) IN (''PARTIAL'',''PAYABLE'') THEN  ''PARTIAL PAY''
		WHEN UPPER(TRIM(BSVR.STATUS)) IN (''PENDING'',''Appealed'') THEN  ''BILLED''
		WHEN UPPER(TRIM(BSVR.STATUS)) IN (''WRITEOFF'') THEN  ''WRITEOFF''
		ELSE ''UNKNOWN''
		END AS DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY,
       ---- ETL FIELDS
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,                    
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	CURRENT_USER as ETL_INSERTED_BY,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	CURRENT_USER as ETL_LAST_UPDATED_BY
	FROM ADJ_AND_CLN_INVOICES  BSVR
UNION 
SELECT  
13 AS SOURCE_SYSTEM_ID,
''PRIME'' AS SYSTEM_CODE,
     IFF(BSVR.PAYABLE_OR_BILLIABLE_HRS IS NULL,''UNKNOWN'',''BILLED'') AS DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY,
	
       ---- ETL FIELDS
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,                    
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	CURRENT_USER as ETL_INSERTED_BY,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	CURRENT_USER as ETL_LAST_UPDATED_BY
	FROM EXCLUDED_INVOICE  BSVR

;
RETURN ''SUCCESS'';
END;

 EOT
}

