resource "snowflake_procedure" "DW_HAH_GET_STAGE_CLEARCARE_DIM_INVOICE" {
	name ="GET_STAGE_CLEARCARE_DIM_INVOICE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result VARCHAR;
BEGIN
    --*****************************************************************************************************************************
-- NAME:  CLEARCARE_DIM_INVOICE
--
-- PURPOSE: Populate Stage Dim Invoice for ClearCare
--
-- DEVELOPMENT LOG:
-- DATE         AUTHOR              NOTES:
-- --------     ------------------- -----------------------------------------------------------------------------------------------
-- 08/10/22		Ayshwarya			Initial version
-- 21/04/23 	PINKAL PANCHAL		INVOICE_STATUS_MAPPING CHANGES FOR RCM
-- 15/09/23     Pradeep Thippani    Changed invoice_status logic for PAID and PARTIAL_PAY
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.CLEARCARE_DIM_INVOICE
WITH CLIENTKEY AS
(
	SELECT
		*
	FROM
		(
		SELECT
			PATIENT_ID,
			MASTER_ID,
			AGENCY_ID,
			LAST_NAME,
			FIRST_NAME
		FROM
			DISC_DEDUPE_${var.SF_ENVIRONMENT}.CLEARCARE.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT
		*
	FROM
		(
		SELECT
			DISTINCT PATIENT_ID,
			MASTER_ID,
			AGENCY_ID,
			LAST_NAME,
			FIRST_NAME
		FROM
			DISC_DEDUPE_${var.SF_ENVIRONMENT}.CLEARCARE.CLIENT_MATCH_LIST
		WHERE
			PATIENT_ID NOT IN (
			SELECT
				PATIENT_ID
			FROM
				DISC_DEDUPE_${var.SF_ENVIRONMENT}.CLEARCARE.CLIENT_MASTER_LIST ) 
	)
),
WriteOffs AS
(SELECT  ROW_NUMBER () OVER (PARTITION BY inv.Id ORDER BY pt.DESCRIPTION DESC) AS NonNullDesc ,
inv.id, 
pt.DESCRIPTION
FROM DISC_${var.SF_ENVIRONMENT}.CLEARCARE.INVOICE_TRANSACTION INV
INNER JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.RECEIVABLES_PAYMENTDESIGNATION rpt ON rpt.INVOICE_ID = inv.id
INNER JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.PAYMENT_TRANSACTION pt ON pt.id = rpt.PAYMENT_ID 
WHERE pt.payment_type = 5
),
INVOICE_STATUS_MAPPING AS
(
SELECT DISTINCT
	INV.INVOICE_ID,
	16 AS SOURCE_SYSTEM_ID,
	''CLEARCARE'' AS SYSTEM_CODE,
	CASE WHEN INV.PAYMENTS_TOTAL = 0 THEN ''BILLED''
         WHEN INV.PAYMENTS_TOTAL > 0 AND INV.OUTSTANDING_BALANCE <= 0  THEN ''PAID''
		 WHEN INV.PAYMENTS_TOTAL > 0 AND INV.OUTSTANDING_BALANCE > 0  THEN ''PARTIAL PAY''
--		WHEN INV.OUTSTANDING_BALANCE = 0 AND INV.PAYMENTS_TOTAL <> 0 THEN ''PAID''
--		WHEN INV.TOTAL <> INV.PAYMENTS_TOTAL THEN ''PARTIAL PAY''
-- Changes made on 15/09/2023 for RCM
	ELSE ''UNKNOWN'' END AS DERIVED_INVOICE_STATUS,
	MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY
FROM DISC_${var.SF_ENVIRONMENT}.CLEARCARE.INVOICE_TRANSACTION INV
)
 SELECT
  MD5(INV.ID || ''-'' || INV.CLIENT_ID || ''-'' || INV.PAYER_ID || ''-'' || ''CLEARCARE'') AS INVOICE_KEY
, MD5(''CLEARCARE'' || ''-'' || Cl.MASTER_ID || ''-'' || ''CLEARCARE'' ) AS CLIENT_KEY 
, inv.INVOICE_ID AS INVOICE_NUMBER
, NULL AS ALTERNATE_INVOICE_NUMBER
, TO_VARCHAR(END_DATE, ''YYYYMM'')
,''Regular'' AS INVOICE_TYPE
, 1			AS NUMBER_OF_CLIENTS
, ''CLEARCARE'' AS SYSTEM_CODE
, 16 AS SOURCE_SYSTEM_ID
, MD5(AG.AGENCY_ID || ''-'' || AG.NAME || ''-'' || ''CLEARCARE'') AS BRANCH_KEY
, NULL AS PAYOR_CODE
, NULL AS PAYOR_NAME
,PAID AS INVOICE_OPEN_FLAG
,TRANSACTION_DATE AS FIRST_INVOICE_DATE
,DUE_DATE AS FINAL_PAYMENT_DATE
,NULL AS FIRST_INVOICE_NUMBER
, 1 AS BILL_ITERATION
, NULL AS BILL_REPRESENTATIVE
, NULL AS BILL_SUPERVISOR
, NULL AS BILL_MANAGER
--, CASE WHEN  inv.PAYMENTS_TOTAL = 0 THEN ''Billed''
--					   WHEN inv.OUTSTANDING_BALANCE = 0 AND inv.PAYMENTS_TOTAL <> 0 THEN ''Fully Paid''
--					   WHEN inv.TOTAL <> inv.PAYMENTS_TOTAL THEN ''Partially Paid''
--				  END INVOICE_STATUS
-- CHANGES MADE ON 21/04/23 FOR INVOICE_STATUS_MAPPING BY PINKAL
,DISM.DERIVED_INVOICE_STATUS AS INVOICE_STATUS
, CASE WHEN w.id IS NOT NULL THEN 1 ELSE 0 END  AS WRITEOFF_FLAG
, SUBSTRING(w.description,1,100) AS WRITEOFF_REASON
, TOTAL AS AMOUNT_BILLED
, inv.PAYMENTS_TOTAL AS AMOUNT_COLLECTED
, OUTSTANDING_BALANCE AS AMOUNT_OUTSTANDING
, TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
     TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
     
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
                        
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG,
    0 AS ETL_INFERRED_MEMBER_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.CLEARCARE.INVOICE_TRANSACTION INV
INNER JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.PROFILE_PROFILE p ON p.ID = INV.client_id
INNER JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.PATIENT_PATIENT pp ON pp.ID  = p.PATIENT_ID 
INNER JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.AGENCY_AGENCYLOCATION ag ON ag.id = pp.location_id
INNER JOIN CLIENTKEY cl ON cl.PATIENT_ID = p.PATIENT_ID AND cl.AGENCY_ID = p.AGENCY_ID 
LEFT JOIN (SELECT * FROM WriteOffs WHERE NonNullDesc = 1) w ON w.ID = inv.ID
LEFT JOIN INVOICE_STATUS_MAPPING ISM ON ISM.INVOICE_ID = INV.INVOICE_ID
LEFT JOIN HAH.DIM_INVOICE_STATUS_MAPPING DISM ON DISM.INVOICE_STATUS_KEY = ISM.INVOICE_STATUS_KEY
WHERE CL.AGENCY_ID IN (2459);
;
    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

    return return_result;
END;
    
 EOT
}

