resource "snowflake_procedure" "DW_HAH_GET_STAGE_CCSI_DIM_INVOICE" {
	name ="GET_STAGE_CCSI_DIM_INVOICE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "JAVASCRIPT"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

        var sql = `
    --*****************************************************************************************************************************
-- NAME:  CCSI_DIM_INVOICE
--
-- PURPOSE: Creates one row per invoice according to CCSI - MCOINV,OTHERINV
--
-- DEVELOPMENT LOG:
-- DATE         AUTHOR              NOTES:
-- --------     ------------------- -----------------------------------------------------------------------------------------------
-- 03/09/21     Shraddha Sejpal     Initial development
-- 28/04/22     Moinnawaz Saiyed    IDOA changes related RAWVRFP_Data view
-- 21/04/23     PINKAL PANCHAL      ADDED INVOICE_STATUS_MAPPING FOR RCM
-- 28/12/23     PRADEEP THIPPANI    ADDED BILLED_STATUS IN DERIVED_INVOICE_STATUS AND UPDATED AMOUNT_COLLECTED LOGIC
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO STAGE.CCSI_DIM_INVOICE
WITH DIM_CLIENT AS
(  
SELECT CLIENT_IDOA_NO,USED_FOR_AREA,MASTER_ID FROM (SELECT CLIENT_IDOA_NO ,USED_FOR_AREA,
(RECORD_NUMBER  || ''-'' ||  NVL(USED_FOR_AREA, ''CCSI'') || ''-'' || ''CCSI'') AS MASTER_ID,''MASTER'' AS TYPE,
ROW_NUMBER () OVER (PARTITION BY CLIENT_IDOA_NO ,USED_FOR_AREA ORDER BY TRY_TO_DATE(UPDATED_DATE,''MM/DD/YY'') DESC
,TRY_TO_DATE(CREATED_DATE,''MM/DD/YY'') DESC,TRY_TO_DATE(ACTION_DATE,''YYYYMMDD'') DESC,RECORD_NUMBER DESC) AS RN
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.CCSI.CLIENT_MASTER_LIST_CCSI) WHERE RN=1
UNION
SELECT CLIENT_IDOA_NO,USED_FOR_AREA,MASTER_ID FROM (SELECT CLIENT_IDOA_NO,USED_FOR_AREA,
(MASTER_ID) AS MASTER_ID,''MATCH'' AS TYPE,
ROW_NUMBER() OVER (PARTITION BY CLIENT_IDOA_NO ,USED_FOR_AREA ORDER BY TRY_TO_DATE(UPDATED_DATE,''MM/DD/YY'') DESC
,TRY_TO_DATE(CREATED_DATE,''MM/DD/YY'') DESC,TRY_TO_DATE(ACTION_DATE,''YYYYMMDD'') DESC,RECORD_NUMBER DESC) AS RN 
FROM (SELECT * FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.CCSI.CLIENT_MATCH_LIST_CCSI M WHERE NOT EXISTS (SELECT * FROM
DISC_DEDUPE_${var.SF_ENVIRONMENT}.CCSI.CLIENT_MASTER_LIST_CCSI MA WHERE M.CLIENT_IDOA_NO= MA.CLIENT_IDOA_NO AND 
M.USED_FOR_AREA = MA.USED_FOR_AREA)))
)
, RAWVRFP_Data AS
(
SELECT DISTINCT RECORD_NUMBER
                ,CLIENT_ID
                ,AREA_2
                ,TRY_TO_DATE(PERIOD_DATE, ''MMDDYY'') AS PERIOD_DATE
FROM DISC_${var.SF_ENVIRONMENT}.CCSI.RAWVRFP 
WHERE PERIOD_DATE IS NOT NULL
            AND TRY_TO_DATE(PERIOD_DATE, ''MMDDYY'') > ''2015-12-31''
            AND DAY_OF_SERVICE  IS NOT NULL
            AND CLIENT_ID IS NOT NULL
            AND SERVICE_TYPE = ''021''
)
, INVOICE_STATUS_MAPPING AS 
(
SELECT 
    MIN(RECORD_NUMBER)||''MCOINV'' AS INVOICE_NUMBER,
    C.CLIENT_IDOA_NO,C.USED_FOR_AREA,B.BRANCH_CODE,
    CASE WHEN LENGTH(SERVICE_MONTH)>6 THEN LEFT(TRIM(REGEXP_REPLACE(SERVICE_MONTH,''\\\\\\\\-|\\\\\\\\(|\\\\\\\\/|\\\\\\\\ |[a-zA-z.]'','''')),6)
    ELSE TRIM(REGEXP_REPLACE(SERVICE_MONTH,''\\\\\\\\-|\\\\\\\\(|\\\\\\\\/|\\\\\\\\ |[a-zA-z.]'','''')) END AS PERIOD,
    CASE WHEN SUM(M.DOLLAR_AMOUNT) = SUM(M.BALANCE) THEN ''BILLED''
        WHEN SUM(M.BALANCE) <= 0 THEN ''PAID''
        WHEN SUM(M.BALANCE) > 0 THEN ''PARTIAL PAY''
        ELSE ''UNKNOWN'' 
    END AS DERIVED_INVOICE_STATUS,
    ''CCSI'' AS SYSTEM_CODE,
    8 AS SOURCE_SYSTEM_ID,
    MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY
FROM DISC_${var.SF_ENVIRONMENT}.CCSI.MCOINV AS M
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CCSI.BRANCH_MAPPING B ON M.CCSI_OFFICE = B.BRANCH_CODE 
JOIN DIM_CLIENT C ON C.CLIENT_IDOA_NO = M.CLIENT_ID AND M.CCSI_OFFICE = C.USED_FOR_AREA 
GROUP BY 2,3,4,5
UNION 
SELECT
    MIN(RECORD_NUMBER)||''OTHERINV'' AS INVOICE_NUMBER,
    C.CLIENT_IDOA_NO,C.USED_FOR_AREA,B.BRANCH_CODE,
    CASE WHEN LENGTH(O.DATE_OF_SERVICE)>6 THEN LEFT(TRIM(REGEXP_REPLACE(O.DATE_OF_SERVICE,''\\\\\\\\-|\\\\\\\\(|\\\\\\\\/|\\\\\\\\ |[a-zA-z.]'','''')),6)
    ELSE TRIM(REGEXP_REPLACE(O.DATE_OF_SERVICE,''\\\\\\\\-|\\\\\\\\(|\\\\\\\\/|\\\\\\\\ |[a-zA-z.]'','''')) END AS PERIOD,
    CASE 
        WHEN SUM(O.AMOUNT_BILLED) = SUM(O.BALANCE) THEN ''BILLED'' 
        WHEN SUM(O.BALANCE) <= 0 THEN ''PAID''
        WHEN SUM(O.BALANCE) > 0 THEN ''PARTIAL PAY''
        ELSE ''UNKNOWN'' 
    END AS DERIVED_INVOICE_STATUS,
    ''CCSI'' AS SYSTEM_CODE,
    8 AS SOURCE_SYSTEM_ID,
    MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY
FROM DISC_${var.SF_ENVIRONMENT}.CCSI.OTHERINV AS O
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CCSI.BRANCH_MAPPING B ON O.AREA  = B.BRANCH_CODE 
JOIN DIM_CLIENT C ON C.CLIENT_IDOA_NO = O.CLIENT_ID AND O.AREA = C.USED_FOR_AREA
GROUP BY 2,3,4,5
UNION 
SELECT 
    (R.RECORD_NUMBER || R.CLIENT_ID) AS INVOICE_NUMBER,
    C.CLIENT_IDOA_NO,C.USED_FOR_AREA,B.BRANCH_CODE,
    TO_CHAR(PERIOD_DATE, ''YYYYMM'') AS PERIOD,
    ''UNKNOWN'' AS DERIVED_INVOICE_STATUS,
    ''CCSI'' AS SYSTEM_CODE,
    8 AS SOURCE_SYSTEM_ID,
    MD5(SOURCE_SYSTEM_ID || ''-'' || DERIVED_INVOICE_STATUS || ''-'' || SYSTEM_CODE) AS INVOICE_STATUS_KEY
FROM RAWVRFP_Data R
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CCSI.BRANCH_MAPPING B ON R.AREA_2 = B.BRANCH_CODE 
JOIN DIM_CLIENT C ON R.CLIENT_ID = C.CLIENT_IDOA_NO AND R.AREA_2 = C.USED_FOR_AREA 
)
, ALL_DATA AS
(
SELECT DISTINCT
    MD5(MIN(RECORD_NUMBER)|| ''-'' || ''MCOINV'' || ''-'' || ''CCSI'') AS INVOICE_KEY,
    MD5(C.MASTER_ID) AS CLIENT_KEY,
    MIN(RECORD_NUMBER)||''MCOINV'' AS INVOICE_NUMBER,
    CASE WHEN LENGTH(SERVICE_MONTH)>6 THEN LEFT(TRIM(REGEXP_REPLACE(SERVICE_MONTH,''\\\\\\\\-|\\\\\\\\(|\\\\\\\\/|\\\\\\\\ |[a-zA-z.]'','''')),6)
    ELSE TRIM(REGEXP_REPLACE(SERVICE_MONTH,''\\\\\\\\-|\\\\\\\\(|\\\\\\\\/|\\\\\\\\ |[a-zA-z.]'','''')) END AS PERIOD,
    ''Regular'' AS INVOICE_TYPE,
    1 AS NUMBER_OF_CLIENTS,
    ''CCSI'' AS SYSTEM_CODE,
    8 AS SOURCE_SYSTEM_ID,
    MD5(''CCSI'' || ''-'' || B.BRANCH_CODE || ''-'' || ''CCSI'') AS BRANCH_KEY,
    NULL AS PAYOR_CODE,
    NULL AS PAYOR_NAME,
    IFF(SUM(M.BALANCE) > 0, True, False) AS INVOICE_OPEN_FLAG,
    MIN(TO_DATE(TRIM(REGEXP_REPLACE(M.P_PAYMENT_DATE_1,''\\\\\\\\-|\\\\\\\\/|\\\\\\\\ '','''')),''MMDDYYYY'')) AS FIRST_INVOICE_DATE,
    IFF(SUM(M.BALANCE) <= 0, MAX(TO_DATE(TRIM(REGEXP_REPLACE(M.P_PAYMENT_DATE_1,''\\\\\\\\-|\\\\\\\\/|\\\\\\\\ '','''')),''MMDDYYYY'')), NULL) AS FINAL_PAYMENT_DATE,
    NULL AS FIRST_INVOICE_NUMBER,
    1 AS BILL_ITERATION,
    NULL AS BILL_REPRESENTATIVE,
    NULL AS BILL_SUPERVISOR,
    NULL AS BILL_MANAGER,
--  CASE WHEN SUM(M.BALANCE) <= 0 THEN ''Fully Paid''
--        WHEN SUM(M.BALANCE) > 0 THEN ''Partially Paid''
--        ELSE ''Unknown'' END AS INVOICE_STATUS,
-- CHANGES MADE ON 21/04/23 BY PINKAL
    0 AS WRITEOFF_FLAG,
    NULL AS WRITEOFF_REASON,
    SUM(M.DOLLAR_AMOUNT) AS AMOUNT_BILLED,
    SUM(NVL(M.AMOUNT_1,0))+SUM(NVL(M.AMOUNT_2,0))+SUM(NVL(M.AMOUNT_3,0))+ SUM(NVL(M.AMOUNT_NO_4,0)) AS AMOUNT_COLLECTED, 
--  SUM(NVL(M.AMOUNT_1,0))+SUM(NVL(M.AMOUNT_2,0))+SUM(NVL(M.AMOUNT_3,0)) AS AMOUNT_COLLECTED,
    SUM(M.BALANCE) AS AMOUNT_OUTSTANDING,
     TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
     TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
     
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_TASK_KEY,
        
     
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_INSERTED_TASK_KEY,
              
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG,
    0 AS ETL_INFERRED_MEMBER_FLAG
    FROM DISC_${var.SF_ENVIRONMENT}.CCSI.MCOINV AS M
    LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CCSI.BRANCH_MAPPING B ON M.CCSI_OFFICE = B.BRANCH_CODE 
    JOIN DIM_CLIENT C ON C.CLIENT_IDOA_NO = M.CLIENT_ID AND M.CCSI_OFFICE = C.USED_FOR_AREA 
    GROUP BY 2,4,9
UNION
SELECT DISTINCT
    MD5(MIN(RECORD_NUMBER)|| ''-'' || ''OTHERINV'' || ''-'' || ''CCSI'') AS INVOICE_KEY,
    MD5(C.MASTER_ID) AS CLIENT_KEY,
    MIN(RECORD_NUMBER)||''OTHERINV'' AS INVOICE_NUMBER,
    CASE WHEN LENGTH(O.DATE_OF_SERVICE)>6 THEN LEFT(TRIM(REGEXP_REPLACE(O.DATE_OF_SERVICE,''\\\\\\\\-|\\\\\\\\(|\\\\\\\\/|\\\\\\\\ |[a-zA-z.]'','''')),6)
    ELSE TRIM(REGEXP_REPLACE(O.DATE_OF_SERVICE,''\\\\\\\\-|\\\\\\\\(|\\\\\\\\/|\\\\\\\\ |[a-zA-z.]'','''')) END AS PERIOD,
    ''Regular'' AS INVOICE_TYPE,
    1 AS NUMBER_OF_CLIENTS,
    ''CCSI'' AS SYSTEM_CODE,
    8 AS SOURCE_SYSTEM_ID,
    MD5(''CCSI'' || ''-'' || B.BRANCH_CODE || ''-'' || ''CCSI'') AS BRANCH_KEY,
    NULL AS PAYOR_CODE,
    NULL AS PAYOR_NAME,
    IFF(SUM(O.BALANCE) > 0, True, False) AS INVOICE_OPEN_FLAG,
    MIN(TO_DATE(O.BILLING_DATE,''YYYYMMDD'')) AS FIRST_INVOICE_DATE ,
    IFF(SUM(O.BALANCE) <= 0, MAX(TO_DATE(O.DATE_PAID,''YYYYMMDD'')), NULL) AS FINAL_PAYMENT_DATE,
    NULL AS FIRST_INVOICE_NUMBER,
    1 AS BILL_ITERATION,
    NULL AS BILL_REPRESENTATIVE,
    NULL AS BILL_SUPERVISOR,
    --D.SUPERVISOR_INITIAL AS BILL_SUPERVISOR,
    NULL AS BILL_MANAGER,
--  CASE WHEN SUM(O.BALANCE) <= 0 THEN ''Fully Paid''
--        WHEN SUM(O.BALANCE) > 0 THEN ''Partially Paid''
--        ELSE ''Unknown'' END AS INVOICE_STATUS,
--  CHANGES MADE ON 21/04/23 BY PINKAL
    0 AS WRITEOFF_FLAG,
    NULL AS WRITEOFF_REASON,
    SUM(O.AMOUNT_BILLED) AS AMOUNT_BILLED,
    SUM(NVL(O.AMOUNT1,0))+SUM(NVL(O.AMOUNT2,0))+SUM(NVL(O.AMOUNT3,0)) AS AMOUNT_COLLECTED,
    SUM(O.BALANCE) AS AMOUNT_OUTSTANDING,
     TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
     TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
    
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_TASK_KEY,
        
    
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_INSERTED_TASK_KEY,
        
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG,
    0 AS ETL_INFERRED_MEMBER_FLAG
    FROM DISC_${var.SF_ENVIRONMENT}.CCSI.OTHERINV AS O
    LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CCSI.BRANCH_MAPPING B ON O.AREA = B.BRANCH_CODE 
    JOIN DIM_CLIENT C ON C.CLIENT_IDOA_NO = O.CLIENT_ID AND O.AREA = C.USED_FOR_AREA
    GROUP BY 2,4,9
    UNION
    SELECT DISTINCT
    MD5(R.RECORD_NUMBER|| ''-'' || R.CLIENT_ID || ''-'' || R.AREA_2 || ''-'' || ''CCSI'') AS INVOICE_KEY,--AREA & RECORD_NUMBER SHOULD USE
    MD5(C.MASTER_ID) AS CLIENT_KEY,
    (R.RECORD_NUMBER || R.CLIENT_ID) AS INVOICE_NUMBER,--DUP
    TO_CHAR(PERIOD_DATE, ''YYYYMM'') AS PERIOD,--CONVERT TO YYYYMM
    ''Regular'' AS INVOICE_TYPE,
    1 AS NUMBER_OF_CLIENTS,
    ''CCSI'' AS SYSTEM_CODE,
    8 AS SOURCE_SYSTEM_ID,
    MD5(''CCSI'' || ''-'' || B.BRANCH_CODE || ''-'' || ''CCSI'') AS BRANCH_KEY,
    NULL AS PAYOR_CODE,
    NULL AS PAYOR_NAME,
    1 AS INVOICE_OPEN_FLAG,--NEED TO CONFIRM --NEED TO CHECK FOR OTHER SOURCES FOR IDOA --NULL
    NULL AS FIRST_INVOICE_DATE,--NEED TO CONFIRM
    NULL AS FINAL_PAYMENT_DATE,--NEED TO CONFIRM
    NULL AS FIRST_INVOICE_NUMBER,--NEED TO CONFIRM
    1 AS BILL_ITERATION,--NEED TO CONFIRM
    NULL AS BILL_REPRESENTATIVE,--NEED TO CONFIRM
    NULL AS BILL_SUPERVISOR,--NEED TO CONFIRM
    NULL AS BILL_MANAGER,--NEED TO CONFIRM
--  ''Unknown'' AS INVOICE_STATUS, -- ''Fully Paid'', ''Partially Paid'' --NEED TO CONFIRM
-- CHANGES MADE ON 21/04/23 BY PINKAL
    0 AS WRITEOFF_FLAG,--NEED TO CONFIRM
    NULL AS WRITEOFF_REASON,--NEED TO CONFIRM
    0 AS AMOUNT_BILLED,--NEED TO CONFIRM
    0 AS AMOUNT_COLLECTED,--NEED TO CONFIRM
    0 AS AMOUNT_OUTSTANDING,--NEED TO CONFIRM
     TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
     TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,

  `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_TASK_KEY,
        
    
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_INSERTED_TASK_KEY,

     convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG,
    0 AS ETL_INFERRED_MEMBER_FLAG
    FROM RAWVRFP_Data R
    LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CCSI.BRANCH_MAPPING B ON R.AREA_2 = B.BRANCH_CODE 
    JOIN DIM_CLIENT C ON R.CLIENT_ID = C.CLIENT_IDOA_NO AND R.AREA_2 = C.USED_FOR_AREA
)
SELECT DISTINCT INVOICE_KEY,CLIENT_KEY,ALL_DATA.INVOICE_NUMBER,ALL_DATA.PERIOD,INVOICE_TYPE,NUMBER_OF_CLIENTS,ALL_DATA.SYSTEM_CODE,ALL_DATA.SOURCE_SYSTEM_ID,BRANCH_KEY,
    PAYOR_CODE,PAYOR_NAME,INVOICE_OPEN_FLAG,FIRST_INVOICE_DATE,FINAL_PAYMENT_DATE,FIRST_INVOICE_NUMBER,BILL_ITERATION,BILL_REPRESENTATIVE,BILL_SUPERVISOR,BILL_MANAGER,
    DISM.DERIVED_INVOICE_STATUS AS INVOICE_STATUS,WRITEOFF_FLAG,WRITEOFF_REASON,AMOUNT_BILLED,AMOUNT_COLLECTED,AMOUNT_OUTSTANDING,ALL_DATA.EFFECTIVE_FROM_DATE,ALL_DATA.EFFECTIVE_TO_DATE,
    ALL_DATA.ETL_TASK_KEY,ALL_DATA.ETL_INSERTED_TASK_KEY,ALL_DATA.ETL_INSERTED_DATE,ALL_DATA.ETL_INSERTED_BY,ALL_DATA.ETL_LAST_UPDATED_DATE,ALL_DATA.ETL_LAST_UPDATED_BY,ALL_DATA.ETL_DELETED_FLAG,ALL_DATA.ETL_INFERRED_MEMBER_FLAG
FROM ALL_DATA
LEFT JOIN INVOICE_STATUS_MAPPING ISM ON ISM.INVOICE_NUMBER = ALL_DATA.INVOICE_NUMBER 
LEFT JOIN HAH.DIM_INVOICE_STATUS_MAPPING DISM ON DISM.INVOICE_STATUS_KEY = ISM.INVOICE_STATUS_KEY
; `;
          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
          
 EOT
}

