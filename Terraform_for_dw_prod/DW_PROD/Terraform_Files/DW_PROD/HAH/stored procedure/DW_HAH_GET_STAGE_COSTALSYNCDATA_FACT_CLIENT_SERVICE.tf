resource "snowflake_procedure" "DW_HAH_GET_STAGE_COSTALSYNCDATA_FACT_CLIENT_SERVICE" {
	name ="GET_STAGE_COSTALSYNCDATA_FACT_CLIENT_SERVICE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result VARCHAR;
BEGIN
--*****************************************************************************************************************************
-- NAME:  COSTALSYNCDATA_FACT_CLIENT_SERVICE
--11/19/2023     RAJAT SAPKAL                Initial development
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.COSTALSYNCDATA_FACT_CLIENT_SERVICE
WITH CHANGED_DATA AS (
SELECT DB, ADMISSION_NUMBER 
FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_ADMISSIONS T
WHERE T.ETL_LAST_UPDATED_DATE >=:STR_CDC_START::timestamp_ntz
UNION
	SELECT DB, ADMISSION_NUMBER 
	FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_DISCIPLINES T
	WHERE T.ETL_LAST_UPDATED_DATE >=:STR_CDC_START::timestamp_ntz
UNION
	SELECT DB, ADMISSION_NUMBER 
	FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_DISCIPLINEFREQUENCIES T
	WHERE T.ETL_LAST_UPDATED_DATE >=:STR_CDC_START::timestamp_ntz
	)
,ADMISSIONS
AS 
(
SELECT 
	ADMISSIONS.DB
	,ADMISSIONS.PATIENT_NUMBER
	,ADMISSIONS.ADMISSION_NUMBER
	,ADMISSIONS.LOCATION_CODE
	,ADMISSIONS.CURRENT_PLAN_CODE AS PLAN_CODE
	,ADMISSIONS.ADMIT_DATE
	,CASE 
		WHEN ADMISSIONS.DISCHARGE_DATE  = ''1900-01-01 00:00:00'' THEN CAST(GETDATE() AS DATE) 
		ELSE ADMISSIONS.DISCHARGE_DATE 
	END AS DISCHARGE_DATE 
	--,ADMISSIONS.ADMIT_DATE AS BEGIN_SERVICE_DATE -- Added by PJShah on 19042022
	--,ADMISSIONS.DISCHARGE_DATE AS END_SERVICE_DATE -- Added by PJShah on 19042022
	,MAX(ADMISSIONS.ADMIT_DATE) OVER (PARTITION BY TRIM(ADMISSIONS.PATIENT_NUMBER), TRIM(NVL(ADMISSIONS.CURRENT_PLAN_CODE, ''''))) AS BEGIN_SERVICE_DATE -- Added by PJShah on 19042022
	,MAX(ADMISSIONS.DISCHARGE_DATE) OVER (PARTITION BY TRIM(ADMISSIONS.PATIENT_NUMBER), TRIM(NVL(ADMISSIONS.CURRENT_PLAN_CODE, ''''))) AS END_SERVICE_DATE -- Added by PJShah on 19042022
FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_ADMISSIONS ADMISSIONS
JOIN CHANGED_DATA CHANGES
	ON CHANGES.DB = ADMISSIONS.DB AND CHANGES.ADMISSION_NUMBER = ADMISSIONS.ADMISSION_NUMBER 
WHERE TRIM(NVL(ADMISSIONS.CURRENT_PLAN_CODE, '''')) <> ''''
) 
, AUTHORIZATION_BY_DAY AS (
	SELECT DATA.DB, DATA.ADMISSION_NUMBER, DATA.CALENDAR_DATE, DATA.PATIENT_NUMBER ,
	DISCIPLINE_CODE,DDL_UNITS_FREQ_TYPE,FREQUENCY_UNITS_ARR2_2,
		CASE DATA.DDL_UNITS_FREQ_TYPE -- Frequency: x hours every day vs every week, etc.
			WHEN 1 THEN DATA.FREQUENCY_UNITS_ARR2_2 -- Frequency_Units_Arr2_2 hours EVERY DAY for LengthValue days/weeks
			WHEN 2 THEN DATA.FREQUENCY_UNITS_ARR2_2 / 7.0 -- Frequency_Units_Arr2_2 hours EVERY WEEK for LengthValue days/weeks
			WHEN 3 THEN DATA.FREQUENCY_UNITS_ARR2_2 / DATA.NUMBER_OF_DAYS_IN_MONTH -- Frequency_Units_Arr2_2 hours EVERY MONTH for LengthValue days/weeks
			WHEN 4 THEN COALESCE(
				NULLIF(DATA.AGREEMENT_LENGTH_CALCULATED, 0), 
				DATA.FREQUENCY_UNITS_ARR2_2 / DATA.AGREEMENT_LENGTH_CALCULATED) -- Frequency_Units_Arr2_2 hours EVERY PRN for LengthValue days/weeks
			WHEN 5 THEN NULL -- Frequency_Units_Arr2_2 hours EVERY NONE for LengthValue days/weeks				
			ELSE NULL END AS AUTH_LIMIT_PER_DAY,
		DATA.REAUTH_DATE
	FROM (
		SELECT DISTINCT CHANGES.DB, CHANGES.ADMISSION_NUMBER,  DISCIPLINES.PATIENT_NUMBER ,
			DATE.CALENDAR_DATE,
			DAY(DATE.LAST_DAY_OF_MONTH) AS NUMBER_OF_DAYS_IN_MONTH,
			DISCIPLINES.DISCIPLINE_CODE,
			FIRST_VALUE(FREQUENCIES.DDL_VISITS_DURATION_TYPE) OVER (PARTITION BY CHANGES.DB, CHANGES.ADMISSION_NUMBER, DATE.CALENDAR_DATE,DISCIPLINES.DISCIPLINE_CODE  ORDER BY DISCIPLINES.CERT_TRAN_NUMBER DESC, FREQUENCIES.DISCIPLINE_ORDER_NUMBER DESC) AS DDL_VISITS_DURATION_TYPE,
			FIRST_VALUE(FREQUENCIES.FREQUENCY_UNITS_ARR2_2) OVER (PARTITION BY CHANGES.DB, CHANGES.ADMISSION_NUMBER, DATE.CALENDAR_DATE, DISCIPLINES.DISCIPLINE_CODE ORDER BY DISCIPLINES.CERT_TRAN_NUMBER DESC, FREQUENCIES.DISCIPLINE_ORDER_NUMBER DESC) AS FREQUENCY_UNITS_ARR2_2,
			FIRST_VALUE(FREQUENCIES.DDL_UNITS_FREQ_TYPE) OVER (PARTITION BY CHANGES.DB, CHANGES.ADMISSION_NUMBER, DATE.CALENDAR_DATE,DISCIPLINES.DISCIPLINE_CODE ORDER BY DISCIPLINES.CERT_TRAN_NUMBER DESC, FREQUENCIES.DISCIPLINE_ORDER_NUMBER DESC) AS DDL_UNITS_FREQ_TYPE,
			FIRST_VALUE(DATEDIFF(DAY, DISCIPLINES.STATRT_DATE, DISCIPLINES.END__DATE) + 1) OVER (PARTITION BY CHANGES.DB, CHANGES.ADMISSION_NUMBER, DATE.CALENDAR_DATE,DISCIPLINES.DISCIPLINE_CODE ORDER BY DISCIPLINES.CERT_TRAN_NUMBER DESC, FREQUENCIES.DISCIPLINE_ORDER_NUMBER DESC) AS AGREEMENT_LENGTH_CALCULATED,
			MAX(DISCIPLINES.STATRT_DATE) OVER(PARTITION BY CHANGES.DB, CHANGES.ADMISSION_NUMBER, DATE.FIRST_DAY_OF_MONTH) AS REAUTH_DATE
		FROM CHANGED_DATA CHANGES
		JOIN DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_DISCIPLINES DISCIPLINES
			ON DISCIPLINES.DB = CHANGES.DB AND DISCIPLINES.ADMISSION_NUMBER = CHANGES.ADMISSION_NUMBER
		JOIN HAH.DIM_DATE AS DATE ON DATE.CALENDAR_DATE BETWEEN DISCIPLINES.STATRT_DATE AND DISCIPLINES.END__DATE 
		JOIN DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_DISCIPLINEFREQUENCIES FREQUENCIES
			ON FREQUENCIES.DB = DISCIPLINES.DB AND FREQUENCIES.ADMISSION_NUMBER = DISCIPLINES.ADMISSION_NUMBER 
				AND FREQUENCIES.CERT_TRAN_NUMBER = DISCIPLINES.CERT_TRAN_NUMBER 
				AND FREQUENCIES.SEQUENCE_NUMBER = DISCIPLINES.SEQUENCE_NUMBER 
				AND FREQUENCIES.DISCIPLINE_SEQUENCE  = DISCIPLINES.DISCIPLINE_SEQUENCE
				AND FREQUENCIES.DISCIPLINE_ORDER_NUMBER = DISCIPLINES.DISCIPLINE_ORDER_NUMBER
		WHERE NULLIF(DISCIPLINES.STATRT_DATE, ''1900-01-01'') IS NOT NULL AND NULLIF(DISCIPLINES.END__DATE, ''1900-01-01'') IS NOT NULL
			AND DISCIPLINES.DDL_DISCIPLINE_TYPE = 2 -- Only select authorizations that limit by number of hours, not visits
			AND NVL(FREQUENCIES.FREQUENCY_UNITS_ARR2_2, 0) > 0
	) DATA
) 
, ADMISSION_AUTHORIZATION_DATES AS ( -- Used to determine applicable authorization date from CTE AUTHORIZATION_BY_DAY (for possible missing authorization dates between Admissions.Admit_Date and Admissions.Discharge_Date
	SELECT DISTINCT CASE ADMISSIONS.DB WHEN ''SHC_ALTRUS'' THEN 1 WHEN ''SHC_SAVANNAH'' THEN 2 END AS SOURCE_SYSTEM_ID,
		ADMISSIONS.DB,
		ADMISSIONS.PATIENT_NUMBER,
		ADMISSIONS.ADMISSION_NUMBER,
		ADMISSIONS.PLAN_CODE,
		ADMISSIONS.LOCATION_CODE,
--		ADMISSIONS.ADMIT_DATE,
--		ADMISSIONS.DISCHARGE_DATE,
		ADMISSION_DATES.FIRST_DAY_OF_MONTH AS REPORT_DATE,--date?
		ADMISSION_DATES."YEAR" AS SERVICE_YEAR,
		ADMISSION_DATES."MONTH" AS SERVICE_MONTH,
		ADMISSION_DATES.CALENDAR_DATE AS ADMISSION_CALENDAR_DATE,
		AUTHORIZATION_DATES.CALENDAR_DATE AS AUTHORIZATION_CALENDAR_DATE,
		MAX(AUTHORIZATION_DATES.CALENDAR_DATE) 
			OVER(PARTITION BY ADMISSIONS.DB, ADMISSIONS.ADMISSION_NUMBER--, ADMISSION_DATES.FIRST_DAY_OF_MONTH 
				ORDER BY ADMISSION_DATES.CALENDAR_DATE
				ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS PAST_AUTHORIZATION_DATE, 
		MIN(AUTHORIZATION_DATES.CALENDAR_DATE) 
			OVER(PARTITION BY ADMISSIONS.DB, ADMISSIONS.ADMISSION_NUMBER--, ADMISSION_DATES.FIRST_DAY_OF_MONTH 
				ORDER BY ADMISSION_DATES.CALENDAR_DATE
				ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS FUTURE_AUTHORIZATION_DATE, 
		MAX(AUTHORIZATION_DATES.REAUTH_DATE) OVER(PARTITION BY ADMISSIONS.DB
		,ADMISSIONS.ADMISSION_NUMBER ORDER BY ADMISSION_DATES.FIRST_DAY_OF_MONTH RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS REAUTH_DATE
		,ADMISSIONS.BEGIN_SERVICE_DATE -- Added By PJShah on 19042022
		,ADMISSIONS.END_SERVICE_DATE -- Added By PJShah on 19042022
FROM ADMISSIONS AS ADMISSIONS
	JOIN HAH.DIM_DATE AS ADMISSION_DATES 
		ON ADMISSION_DATES.CALENDAR_DATE BETWEEN ADMISSIONS.ADMIT_DATE AND ADMISSIONS.DISCHARGE_DATE
	LEFT JOIN AUTHORIZATION_BY_DAY AS AUTHORIZATION_DATES 
		ON AUTHORIZATION_DATES.DB = ADMISSIONS.DB AND AUTHORIZATION_DATES.ADMISSION_NUMBER = ADMISSIONS.ADMISSION_NUMBER
			AND AUTHORIZATION_DATES.CALENDAR_DATE = ADMISSION_DATES.CALENDAR_DATE
)
, AUTHORIZATIONS_BY_ADMISSIONS AS (
	SELECT AUTHORIZATION_DATES.SOURCE_SYSTEM_ID,
		AUTHORIZATION_DATES.DB,
		--AUTHORIZATION_DATES.ADMISSION_CALENDAR_DATE,
		AUTHORIZATION_DATES.REPORT_DATE,
		AUTHORIZATION_DATES.SERVICE_YEAR,
		AUTHORIZATION_DATES.SERVICE_MONTH,
		AUTHORIZATION_DATES.PATIENT_NUMBER, 
		AUTHORIZATION_DATES.ADMISSION_NUMBER,--AUTHORIZATION_DATES.ADMIT_DATE,AUTHORIZATION_DATES.DISCHARGE_DATE,
		AUTHORIZATION_BY_DAY.DDL_UNITS_FREQ_TYPE,AUTHORIZATION_BY_DAY.FREQUENCY_UNITS_ARR2_2,
		AUTHORIZATION_DATES.PLAN_CODE, 
		AUTHORIZATION_DATES.LOCATION_CODE,
		COALESCE(AUTHORIZATION_DATES.REAUTH_DATE, AUTHORIZATION_DATES.REPORT_DATE) AS REAUTH_DATE,
		AUTHORIZATION_BY_DAY.AUTH_LIMIT_PER_DAY
		,AUTHORIZATION_DATES.BEGIN_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
		,AUTHORIZATION_DATES.END_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
	FROM ADMISSION_AUTHORIZATION_DATES AUTHORIZATION_DATES
	LEFT JOIN AUTHORIZATION_BY_DAY AUTHORIZATION_BY_DAY
		ON AUTHORIZATION_BY_DAY.DB = AUTHORIZATION_DATES.DB AND AUTHORIZATION_BY_DAY.ADMISSION_NUMBER = AUTHORIZATION_DATES.ADMISSION_NUMBER
			AND AUTHORIZATION_BY_DAY.CALENDAR_DATE = COALESCE(AUTHORIZATION_DATES.PAST_AUTHORIZATION_DATE, AUTHORIZATION_DATES.FUTURE_AUTHORIZATION_DATE)
)--SELECT sum(AUTH_LIMIT_PER_DAY) FROM AUTHORIZATIONS_BY_ADMISSIONS WHERE ADMISSION_NUMBER=''0030530'';
, CLIENT_DATA AS
(
	SELECT * FROM
	(
		SELECT TRIM(DB) AS MASTER_DB, TRIM(PATIENT_NUMBER) AS MASTER_PATIENT_NUMBER, TRIM(DB) AS DB, TRIM(PATIENT_NUMBER) AS PATIENT_NUMBER
        ,MASTER_ID		
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CLIENT_MASTER_LIST
	)
	UNION
	SELECT * FROM
	(
		    SELECT DISTINCT TRIM(MASTER.DB) AS MASTER_DB,TRIM(MASTER.PATIENT_NUMBER) AS MASTER_PATIENT_NUMBER,  TRIM(MATCH.DB) AS DB, TRIM(MATCH.PATIENT_NUMBER) AS PATIENT_NUMBER
		    ,MATCH.MASTER_ID
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CLIENT_MATCH_LIST AS MATCH
        JOIN DISC_DEDUPE_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CLIENT_MASTER_LIST AS MASTER 
        ON MASTER.MASTER_ID = MATCH.MASTER_ID
       	WHERE MATCH.ID <> MATCH.MASTER_ID       	
	)
) 
-- ADDED BY PJSHAH ON 19042022 AUTH_DATES CTE
, AUTH_DATES AS
(
		SELECT distinct  PP.PATIENT_NUMBER ,PP.PLAN_CODE ,PP.SEQUENCE_NUMBER ,PP.EFFECTIVE_DATE ,PP.EXPIRATION_DATE ,PP.PRE_AUTHORIZATION_NUMBER  
		,PP.DB -- ADDED BY PJSHAH ON 16052022 ( 21 RECORDS ARE DISTINCT ONLY AD DB LEVEL)
		FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_PATIENTPLANS PP
		JOIN 
		(
				SELECT PATIENT_NUMBER , PLAN_CODE ,MAX(EFFECTIVE_DATE) MAX_EFF
				,MAX(SEQUENCE_NUMBER) MAX_SEQ_NO -- There are 406 records with same auth dates but diff preauth nos. Added by PJShah on 16052022
				FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_PATIENTPLANS
				-- WHERE TRIM(patient_number)=''3037'' AND TRIM(PLAN_CODE) =''MRCMP''
				GROUP BY PATIENT_NUMBER , PLAN_CODE 
				--ORDER BY SEQUENCE_NUMBER
		)MAX_DT 
		ON PP.PATIENT_NUMBER =MAX_DT.PATIENT_NUMBER
		AND PP.PLAN_CODE =MAX_DT.PLAN_CODE
		AND PP.SEQUENCE_NUMBER =MAX_DT.MAX_SEQ_NO
		AND PP.EFFECTIVE_DATE =MAX_DT.MAX_EFF
)
, AUTHORIZATIONS AS (
	SELECT AUTHORIZATION_DATES.SOURCE_SYSTEM_ID,
		TRIM(AUTHORIZATION_DATES.DB) AS SYSTEM_CODE,
		AUTHORIZATION_DATES.REPORT_DATE,
		AUTHORIZATION_DATES.SERVICE_YEAR,
		AUTHORIZATION_DATES.SERVICE_MONTH,
				AUTHORIZATION_DATES.ADMISSION_NUMBER,--AUTHORIZATION_DATES.ADMIT_DATE,AUTHORIZATION_DATES.DISCHARGE_DATE,
		MAX(AUTHORIZATION_DATES.DDL_UNITS_FREQ_TYPE) AS DDL_UNITS_FREQ_TYPE,
		MAX(AUTHORIZATION_DATES.FREQUENCY_UNITS_ARR2_2) AS FREQUENCY_UNITS_ARR2_2,
		coalesce(TRIM(CLIENTS.MASTER_PATIENT_NUMBER),NVL(TRY_CAST(AUTHORIZATION_DATES.PATIENT_NUMBER AS INTEGER), -1)::STRING) AS CLIENT_NUMBER,  
		coalesce(md5(CLIENTS.MASTER_DB || ''-'' ||(TRIM(regexp_replace(CLIENTS.MASTER_ID,CLIENTS.MASTER_DB))) || ''-''  ||  ''COSTALSYNCDATA''), md5(AUTHORIZATION_DATES.DB || ''-'' || NVL(TRY_CAST(AUTHORIZATION_DATES.PATIENT_NUMBER AS INTEGER), -1)::STRING || ''-'' || ''COSTALSYNCDATA'')) AS CLIENT_KEY,
		TRIM(AUTHORIZATION_DATES.PLAN_CODE) AS CONTRACT_CODE, 
		--COALESCE(CONTRACTS.CONTRACT_KEY, MD5(TRIM(AUTHORIZATION_DATES.DB) || ''-'' || TRIM(AUTHORIZATION_DATES.PLAN_CODE) || ''-'' || ''COSTALSYNCDATA'')) AS CONTRACT_KEY,
		TRIM(AUTHORIZATION_DATES.LOCATION_CODE) AS LOCATION_CODE,
		COALESCE(BRANCHES.BRANCH_NAME, TRIM(UPPER(LOCATIONS.LOCATION_NAME)), ''Unknown'') AS BRANCH_NAME,
		COALESCE(BRANCHES.BRANCH_KEY, MD5(TRIM(AUTHORIZATION_DATES.DB) || ''-'' || AUTHORIZATION_DATES.LOCATION_CODE || ''-'' || ''COSTALSYNCDATA'')) AS BRANCH_KEY,
		MAX(COALESCE(AUTHORIZATION_DATES.REAUTH_DATE, AUTHORIZATION_DATES.REPORT_DATE)) AS REAUTH_DATE,
		SUM(AUTHORIZATION_DATES.AUTH_LIMIT_PER_DAY) AS HOURS_AUTHORIZED
		,AUTHORIZATION_DATES.BEGIN_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
		,AUTHORIZATION_DATES.END_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
	FROM AUTHORIZATIONS_BY_ADMISSIONS AS AUTHORIZATION_DATES
	LEFT JOIN CLIENT_DATA AS CLIENTS
		ON TRIM(CLIENTS.DB) = TRIM(AUTHORIZATION_DATES.DB) AND CLIENTS.PATIENT_NUMBER::STRING = TRIM(AUTHORIZATION_DATES.PATIENT_NUMBER)
--	LEFT JOIN HAH.DIM_CONTRACT AS CONTRACTS
--		ON CONTRACTS.SOURCE_SYSTEM_ID = AUTHORIZATION_DATES.SOURCE_SYSTEM_ID AND CONTRACTS.CONTRACT_CODE = TRIM(AUTHORIZATION_DATES.PLAN_CODE)
	LEFT JOIN (
		SELECT DISTINCT SOURCE_SYSTEM_ID, DB, PATIENT_NUMBER, PLAN_CODE, REPORT_DATE, FIRST_VALUE(LOCATION_CODE) OVER(PARTITION BY SOURCE_SYSTEM_ID, DB, PATIENT_NUMBER, PLAN_CODE, REPORT_DATE ORDER BY SUM(AUTH_LIMIT_PER_DAY) DESC, MAX(REAUTH_DATE) DESC) AS LOCATION_CODE
		FROM AUTHORIZATIONS_BY_ADMISSIONS
		GROUP BY SOURCE_SYSTEM_ID, DB, PATIENT_NUMBER, PLAN_CODE, REPORT_DATE, LOCATION_CODE
	) ADMISSION_LOCATIONS
		ON ADMISSION_LOCATIONS.DB = AUTHORIZATION_DATES.DB AND ADMISSION_LOCATIONS.PATIENT_NUMBER = AUTHORIZATION_DATES.PATIENT_NUMBER AND ADMISSION_LOCATIONS.PLAN_CODE = AUTHORIZATION_DATES.PLAN_CODE AND ADMISSION_LOCATIONS.REPORT_DATE = AUTHORIZATION_DATES.REPORT_DATE
	LEFT JOIN HAH.DIM_BRANCH AS BRANCHES
		ON BRANCHES.SOURCE_SYSTEM_ID = ADMISSION_LOCATIONS.SOURCE_SYSTEM_ID AND BRANCHES.OFFICE_CODE = TRIM(ADMISSION_LOCATIONS.LOCATION_CODE)
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_LOCATIONS AS LOCATIONS
		ON LOCATIONS.DB = ADMISSION_LOCATIONS.DB AND LOCATIONS.LOCATION_CODE = ADMISSION_LOCATIONS.LOCATION_CODE
	GROUP BY AUTHORIZATION_DATES.SOURCE_SYSTEM_ID,
		TRIM(AUTHORIZATION_DATES.DB),
		AUTHORIZATION_DATES.REPORT_DATE,
		AUTHORIZATION_DATES.SERVICE_YEAR,
		AUTHORIZATION_DATES.SERVICE_MONTH,
			AUTHORIZATION_DATES.ADMISSION_NUMBER,--AUTHORIZATION_DATES.ADMIT_DATE,AUTHORIZATION_DATES.DISCHARGE_DATE,
		coalesce(TRIM(CLIENTS.MASTER_PATIENT_NUMBER),NVL(TRY_CAST(AUTHORIZATION_DATES.PATIENT_NUMBER AS INTEGER), -1)::STRING), 
		coalesce(md5(CLIENTS.MASTER_DB || ''-'' || CLIENTS.MASTER_PATIENT_NUMBER || ''-''  ||  ''COSTALSYNCDATA''), md5(AUTHORIZATION_DATES.DB || ''-'' || NVL(TRY_CAST(AUTHORIZATION_DATES.PATIENT_NUMBER AS INTEGER), -1)::STRING || ''-'' || ''COSTALSYNCDATA'')),
		TRIM(AUTHORIZATION_DATES.PLAN_CODE), 
		--COALESCE(CONTRACTS.CONTRACT_KEY, MD5(TRIM(AUTHORIZATION_DATES.DB) || ''-'' || TRIM(AUTHORIZATION_DATES.PLAN_CODE) || ''-'' || ''COSTALSYNCDATA'')),
		TRIM(AUTHORIZATION_DATES.LOCATION_CODE),
		COALESCE(BRANCHES.BRANCH_NAME, TRIM(UPPER(LOCATIONS.LOCATION_NAME)), ''Unknown''),
		COALESCE(BRANCHES.BRANCH_KEY, MD5(TRIM(AUTHORIZATION_DATES.DB) || ''-'' || AUTHORIZATION_DATES.LOCATION_CODE || ''-'' || ''COSTALSYNCDATA''))
		,AUTHORIZATION_DATES.BEGIN_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
		,AUTHORIZATION_DATES.END_SERVICE_DATE -- ADDED BY PJSHAH ON 19042022
         ,MASTER_DB
		,MASTER_ID
		,AUTHORIZATION_DATES.DB
		,AUTHORIZATION_DATES.PATIENT_NUMBER
), AUTHORIZATIONS_WITH_PLAN_RATES AS (
	SELECT AUTHORIZATIONS.*,
		MD5(AUTHORIZATIONS.SYSTEM_CODE || ''-'' || COALESCE(B.OFFICE_STATE_CODE,''GA'') || ''-'' ||COALESCE(TRIM(PCM.PAYOR_ID),''-1'') || ''-'' || COALESCE(TRIM(AUTHORIZATIONS.CONTRACT_CODE),''UNKNOWN'') || ''-'' || ''COSTALSYNCDATA'') AS PARTNER_CONTRACT_SERVICE_KEY,
--		COALESCE(PATIENT_PLAN_RATES.AVERAGE_BILL_RATE, PLAN_RATES.AVERAGE_BILL_RATE) * 
--			CASE WHEN CONTRACTS.BILLED_BY_QUARTER_HOURS = TRUE THEN 4
--				WHEN CONTRACTS.BILLED_BY_HALF_HOURS = TRUE THEN 2
--				ELSE 1 END
--			AS AVERAGE_BILL_RATE,
		NVL(CUTOVER.START_DATE, DATE_TRUNC(MONTH, AUTHORIZATIONS.REPORT_DATE)) AS START_DATE_ONLY_CUTOVER,
		NVL(CUTOVER.END_DATE, LAST_DAY(AUTHORIZATIONS.REPORT_DATE)) AS END_DATE_ONLY_CUTOVER,
		IFF(START_DATE_ONLY_CUTOVER > DATE_TRUNC(MONTH, AUTHORIZATIONS.REPORT_DATE), START_DATE_ONLY_CUTOVER, DATE_TRUNC(MONTH, AUTHORIZATIONS.REPORT_DATE)) AS START_DATE_WITH_CUTOVER,
		IFF(END_DATE_ONLY_CUTOVER < LAST_DAY(AUTHORIZATIONS.REPORT_DATE), END_DATE_ONLY_CUTOVER, LAST_DAY(AUTHORIZATIONS.REPORT_DATE)) AS END_DATE_WITH_CUTOVER
	FROM AUTHORIZATIONS AUTHORIZATIONS
--	LEFT JOIN HAH.DIM_CONTRACT CONTRACTS
--		ON CONTRACTS.CONTRACT_KEY = AUTHORIZATIONS.CONTRACT_KEY
	LEFT JOIN (
		SELECT DB, PLAN_CODE, AVG(CHARGE_AMOUNT) AVERAGE_BILL_RATE
		FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_PLANRATEDETAILS
		WHERE CHARGE_AMOUNT > 0
		GROUP BY DB, PLAN_CODE
	) PLAN_RATES
		ON TRIM(PLAN_RATES.DB) = AUTHORIZATIONS.SYSTEM_CODE AND TRIM(PLAN_RATES.PLAN_CODE) = AUTHORIZATIONS.CONTRACT_CODE
	LEFT JOIN (
		SELECT DB, PLAN_CODE, PATIENT_NUMBER, AVG(CHARGE_AMOUNT82) AVERAGE_BILL_RATE
		FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_PATIENTPLANRATEDETAILS 
		WHERE CHARGE_AMOUNT82 > 0
		GROUP BY DB, PLAN_CODE, PATIENT_NUMBER 
	) PATIENT_PLAN_RATES
		ON TRIM(PATIENT_PLAN_RATES.DB) = AUTHORIZATIONS.SYSTEM_CODE AND TRIM(PATIENT_PLAN_RATES.PLAN_CODE) = AUTHORIZATIONS.CONTRACT_CODE
			AND TRIM(PATIENT_PLAN_RATES.PATIENT_NUMBER) = AUTHORIZATIONS.CLIENT_NUMBER
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.PAYOR_CONTRACT_UI.PAYOR_CONTRACT_MAPPING PCM ON AUTHORIZATIONS.SYSTEM_CODE=PCM.ORIGINAL_SYSTEM_CODE 
            AND TRIM(AUTHORIZATIONS.CONTRACT_CODE)=TRIM(PCM.CONTRACT_CODE)
    LEFT JOIN HAH.DIM_BRANCH b
		ON b.BRANCH_KEY = AUTHORIZATIONS.BRANCH_KEY
	LEFT JOIN HAH.FACT_SYSTEM_CUTOVER_DATE_2_0 AS CUTOVER
		ON CUTOVER.SOURCE_SYSTEM_ID = AUTHORIZATIONS.SOURCE_SYSTEM_ID 
			AND CUTOVER.SYSTEM_CODE = AUTHORIZATIONS.SYSTEM_CODE
			AND NVL(CUTOVER.BRANCH_KEY, AUTHORIZATIONS.BRANCH_KEY) = AUTHORIZATIONS.BRANCH_KEY
			AND NVL(CUTOVER.PARTNER_CONTRACT_SERVICE_KEY,MD5(AUTHORIZATIONS.SYSTEM_CODE || ''-'' || COALESCE(B.OFFICE_STATE_CODE,''GA'') || ''-'' || COALESCE(TRIM(PCM.PAYOR_ID),''-1'') || ''-'' || COALESCE(TRIM(AUTHORIZATIONS.CONTRACT_CODE),''UNKNOWN'') || ''-'' || ''COSTALSYNCDATA'')
) 
			= 	MD5(AUTHORIZATIONS.SYSTEM_CODE || ''-'' || COALESCE(B.OFFICE_STATE_CODE,''GA'') || ''-'' || COALESCE(TRIM(PCM.PAYOR_ID),''-1'') || ''-'' || COALESCE(TRIM(AUTHORIZATIONS.CONTRACT_CODE),''UNKNOWN'') || ''-'' || ''COSTALSYNCDATA'')
) --SELECT * FROM AUTHORIZATIONS_WITH_PLAN_RATES;
, DATA AS (SELECT DISTINCT -- Added by PJShah on 16052022 ( While testing from scratch) 
			 --
MD5(AUTHORIZATIONS.SERVICE_YEAR || ''-'' || 
			AUTHORIZATIONS.SERVICE_MONTH || ''-'' || 
			AUTHORIZATIONS.CLIENT_NUMBER || ''-'' ||
			AUTHORIZATIONS.ADMISSION_NUMBER || ''-'' ||
			AUTHORIZATIONS.CONTRACT_CODE || ''-'' || 
			AUTHORIZATIONS.SYSTEM_CODE || ''-'' || AUTHORIZATIONS.LOCATION_CODE || ''-'' || ''COSTALSYNCDATA'') AS CLIENT_SERVICE_KEY,--AUTHORIZATIONS.START_DATE_WITH_CUTOVER,AUTHORIZATIONS.END_DATE_WITH_CUTOVER,
		AUTHORIZATIONS.REPORT_DATE,AUTHORIZATIONS.PARTNER_CONTRACT_SERVICE_KEY,
				AUTHORIZATIONS.ADMISSION_NUMBER,--AUTHORIZATIONS.ADMIT_DATE,AUTHORIZATIONS.DISCHARGE_DATE,
			DDL_UNITS_FREQ_TYPE,
			FREQUENCY_UNITS_ARR2_2,
		AUTHORIZATIONS.CLIENT_KEY,
		--AUTHORIZATIONS.CONTRACT_KEY,
		AUTHORIZATIONS.SOURCE_SYSTEM_ID,
		AUTHORIZATIONS.CLIENT_NUMBER,
		AUTHORIZATIONS.CONTRACT_CODE,
		AUTHORIZATIONS.SYSTEM_CODE,
		MAX(
			AUTHORIZATIONS.HOURS_AUTHORIZED * CAST(
			(DATEDIFF(DAY, AUTHORIZATIONS.START_DATE_WITH_CUTOVER, AUTHORIZATIONS.END_DATE_WITH_CUTOVER) + 1)
			/ DAY(LAST_DAY(AUTHORIZATIONS.REPORT_DATE)) AS DECIMAL(12, 5)) 
			) 
--		OVER  (PARTITION BY AUTHORIZATIONS.CLIENT_NUMBER,AUTHORIZATIONS.CONTRACT_CODE)  -- ADDED BY PJSHAH ON 16052022
OVER (PARTITION BY AUTHORIZATIONS.SERVICE_YEAR,AUTHORIZATIONS.SERVICE_MONTH,AUTHORIZATIONS.CLIENT_NUMBER,AUTHORIZATIONS.ADMISSION_NUMBER,
AUTHORIZATIONS.CONTRACT_CODE --,AUTHORIZATIONS.DDL_UNITS_FREQ_TYPE,AUTHORIZATIONS.FREQUENCY_UNITS_ARR2_2
	,AUTHORIZATIONS.BRANCH_NAME ,AUTHORIZATIONS.SYSTEM_CODE, AUTHORIZATIONS.LOCATION_CODE ) AS HOURS_AUTHORIZED,
	MAX(AUTHORIZATIONS.HOURS_AUTHORIZED) 
OVER (PARTITION BY AUTHORIZATIONS.SERVICE_YEAR,AUTHORIZATIONS.SERVICE_MONTH,AUTHORIZATIONS.CLIENT_NUMBER,AUTHORIZATIONS.ADMISSION_NUMBER,AUTHORIZATIONS.CONTRACT_CODE --,AUTHORIZATIONS.DDL_UNITS_FREQ_TYPE,AUTHORIZATIONS.FREQUENCY_UNITS_ARR2_2
	,AUTHORIZATIONS.BRANCH_NAME ,AUTHORIZATIONS.SYSTEM_CODE, AUTHORIZATIONS.LOCATION_CODE )   AS HOURS_AUTHORIZED_NON_ADJUSTED--, -- ADDED BY PJSHAH ON 16052022
	--	AUTHORIZATIONS.HOURS_AUTHORIZED AS HOURS_AUTHORIZED_NON_ADJUSTED,
		-- ETL Fields    
--       :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
--       :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,       
--        convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
--	    CURRENT_USER as ETL_INSERTED_BY ,
--	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
--	    CURRENT_USER as ETL_LAST_UPDATED_BY,
--	    0 as ETL_DELETED_FLAG
	FROM AUTHORIZATIONS_WITH_PLAN_RATES AS AUTHORIZATIONS
	LEFT JOIN AUTH_DATES AUTHDT ON AUTHORIZATIONS.CLIENT_NUMBER=TRIM(AUTHDT.PATIENT_NUMBER) 
						   AND AUTHORIZATIONS.CONTRACT_CODE=TRIM(AUTHDT.PLAN_CODE)
						   AND AUTHORIZATIONS.SYSTEM_CODE=AUTHDT.DB
	WHERE AUTHORIZATIONS.REPORT_DATE BETWEEN DATE_TRUNC(MONTH, AUTHORIZATIONS.START_DATE_WITH_CUTOVER) AND LAST_DAY(AUTHORIZATIONS.END_DATE_WITH_CUTOVER))
,final AS (SELECT DISTINCT
AUTH.CLIENT_SERVICE_KEY ,
--AUTH.SYSTEM_CODE AS S1,AUTH.CLIENT_NUMBER AS P1,AUTH.ADMISSION_NUMBER,AUTH.CONTRACT_CODE,AUTH.ADMIT_DATE,AUTH.DISCHARGE_DATE,AUTH.FREQUENCY_UNITS_ARR2_2,AUTH.DDL_UNITS_FREQ_TYPE,
AUTH.SOURCE_SYSTEM_ID,--AUTH.ADMISSION_NUMBER,
AUTH.SYSTEM_CODE,
AUTH.PARTNER_CONTRACT_SERVICE_KEY,--PCM.PAYOR_ID,AUTH.CONTRACT_CODE,
md5(TRIM(AUTH.SYSTEM_CODE) || ''-'' || NVL(TRIM(AUTH.CLIENT_NUMBER),''-1'') || ''-'' || NVL(AUTH.ADMISSION_NUMBER,''UNKNOWN'') || ''-'' || ''COSTALSYNCDATA'') AS CLIENT_ADMISSION_KEY,
AUTH.CLIENT_KEY,
md5(TRIM(AUTH.SYSTEM_CODE) || ''-'' || TRIM(AUTH.CONTRACT_CODE) || ''-''  || ''COSTALSYNCDATA'') AS SERVICE_KEY, 
null as BILL_CODE,
''UNKNOWN'' AS BILL_TYPE,
NULL AS BILL_UOM,
''UNKNOWN'' AS SCHEDULE_TYPE,
NULL AS SCHEDULE_UOM,
NULL AS AUTHORIZATION_DISCIPLINE,
AUTH.REPORT_DATE AS authorization_date,
AUTH.REPORT_DATE AS authorization_period_start_date,
IFF(AUTH.SYSTEM_CODE=''SHC_SAVANNAH'' AND LAST_DAY(AUTH.REPORT_DATE)>''2021-10-16'',''2021-10-16'',LAST_DAY(AUTH.REPORT_DATE)) AS AUTHORIZATION_PERIOD_END_DATE,
IFNULL((DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1),0) AS EFFECTIVE_DAYS,
''Hourly Authorization'' AS AUTHORIZAITON_TYPE,
CASE 
        WHEN AUTH.DDL_UNITS_FREQ_TYPE = 1 then ''Day''
        WHEN AUTH.DDL_UNITS_FREQ_TYPE = 2 then ''Weekly''
        WHEN AUTH.DDL_UNITS_FREQ_TYPE = 3 then ''Monthly''
        WHEN AUTH.DDL_UNITS_FREQ_TYPE = 4 then ''Entire Period''
        ELSE NULL 
    END AS AUTHORIZATION_UOM,
AUTH.REPORT_DATE::VARIANT AS AUTH_INFO,
AUTH.FREQUENCY_UNITS_ARR2_2 AS authorization_max_units_by_uom,
HOURS_AUTHORIZED_NON_ADJUSTED AS AUTHORIZATION_MAX_UNITS,
AUTH.FREQUENCY_UNITS_ARR2_2 AS authorization_max_units_by_uom_adjusted,
HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS_ADJUSTED,
iff(current_date() between authorization_period_start_date and AUTHORIZATION_PERIOD_END_DATE, true, false) as active_flag,
FALSE 																									AS CANCELLED_FLAG,
:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
       :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,       
        convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	    CURRENT_USER as ETL_INSERTED_BY ,
	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	    CURRENT_USER as ETL_LAST_UPDATED_BY,
	    0 as ETL_DELETED_FLAG
FROM DATA AUTH
LEFT JOIN CLIENT_DATA AS CLIENTS
		ON TRIM(CLIENTS.DB) = TRIM(AUTH.SYSTEM_CODE) AND CLIENTS.PATIENT_NUMBER::STRING = TRIM(AUTH.CLIENT_NUMBER))
--LEFT JOIN DISC_${var.SF_ENVIRONMENT}.PAYOR_CONTRACT_UI.PAYOR_CONTRACT_MAPPING PCM ON AUTH.SYSTEM_CODE=PCM.ORIGINAL_SYSTEM_CODE 
--AND TRIM(AUTH.CONTRACT_CODE)=TRIM(PCM.CONTRACT_CODE))
--LEFT JOIN (SELECT DISTINCT DB,PLAN_CODE,PROCCODE FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_PLANRATEDETAILS) B 
--ON B.DB=AUTH.DB AND TRIM(B.PLAN_CODE)=TRIM(AUTH.PLAN_CODE))
SELECT * FROM FINAL;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;

 EOT
}

