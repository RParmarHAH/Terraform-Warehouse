resource "snowflake_procedure" "DW_HAH_GET_STAGE_ASR_DIM_EMPLOYEE" {
	name ="GET_STAGE_ASR_DIM_EMPLOYEE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN
--*****************************************************************************************************************************
-- NAME:  ASR_DIM_EMPLOYEE
--
-- PURPOSE: Creates one row per employee according to ASR
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 12/29/2021	Deepen Gajjar			Initial Development
-- 04/04/2022	Abhishek Sunil			Revised Logic and Leveraged Dedupe
-- 06/07/2022   Parag Gajjar            Resoled SP execution issue
-- 09/25/2023  Trushali Ramoliya      updated the logic for PHONE_NUMBER ALL THREE FIELDS, SUBTASK OF PRIME(13) PHONE CLEANUP - IDDOX- 386 
-- 11/10/2023  Shikhar Saxena			Updated employee ethnicity logic and added HISPANIC_OR_LATINO column
--*****************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.ASR_DIM_EMPLOYEE
WITH EMPLOYEE AS
(
	SELECT * FROM 
	(
		SELECT MASTER_ID, EMPLOYEEID, SSN
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MASTER_LIST 
	)
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT MASTER_ID, EMPLOYEEID, SSN
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MATCH_LIST 
		WHERE EMPLOYEEID NOT IN (SELECT EMPLOYEEID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MASTER_LIST) 
	)
)
, ASR_TO_TRUSTPOINT_MAPPING AS (
	SELECT 
		DISTINCT EMPLOYEE.MASTER_ID, TP.EMPLOYEE_NUMBER, TP.EMPLOYEE_SSN, TP.SUTA_STATE
	FROM EMPLOYEE
	JOIN (
		SELECT 
			EMPLOYEE_NUMBER, EMPLOYEE_SSN, SUTA_STATE ,
			ROW_NUMBER ()OVER(PARTITION BY EMPLOYEE_SSN ORDER BY EMPLOYEE_HIRE_DATE DESC) AS ROW_NBR
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.TRUSTPOINTDATA.EMPLOYEE_MASTER_LIST 
		WHERE COMPANY IN (''PRIME'',''PRIMEHHA'',''PRIMEMIDWAY'')
		QUALIFY  ROW_NBR = 1
		) TP ON TRIM(REPLACE(EMPLOYEE.SSN,''-'',''''))  = TP.EMPLOYEE_SSN
) 
--, EMPLOYEE_COVID_INFO AS ( -- COVID FIELDS
--	SELECT 
--		EMPLOYEEID,
--		MAX(CASE WHEN ECERT.SPECIALTRAININGID = ''48'' THEN TRY_TO_DATE(ECERT.ISSUEDATE, ''MM/DD/YYYY HH12:MI:SS AM'') END) AS COVIDVACCINESTEP1,
--	    MAX(CASE WHEN ECERT.SPECIALTRAININGID = ''49'' THEN TRY_TO_DATE(ECERT.ISSUEDATE, ''MM/DD/YYYY HH12:MI:SS AM'') END) AS COVIDVACCINESTEP2,
--	    MAX(CASE WHEN ECERT.SPECIALTRAININGID = ''50'' THEN TRY_TO_DATE(ECERT.ISSUEDATE, ''MM/DD/YYYY HH12:MI:SS AM'') END) AS COVIDBOOSTERDOSE
--	FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_EMPLOYEETRAININGLICENSESCERTS ECERT
--	WHERE ECERT.SPECIALTRAININGID IN (''48'',''49'',''50'')
--	GROUP BY EMPLOYEEID 
--)
SELECT DISTINCT
	MD5(''PRIME'' || ''-'' || E.MASTER_ID  || ''-'' || ''ASR'') AS EMPLOYEE_KEY,
	E.MASTER_ID AS EMPLOYEE_ID,
	''PRIME'' AS SYSTEM_CODE,
	13 AS SOURCE_SYSTEM_ID,
	CASE 
		WHEN LENGTH(NULLIF(REGEXP_REPLACE(TRIM(E.SSN),''-|\\\\s|\\\\\\\\|[A-Z]''),'''')) = 9 
			AND NULLIF(REGEXP_REPLACE(TRIM(E.SSN),''-|\\\\s|\\\\\\\\|[A-Z]''),'''') NOT IN (SELECT SSN FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_SSN)
		THEN HEX_ENCODE(NULLIF(REGEXP_REPLACE(TRIM(E.SSN),''-|\\\\s|\\\\\\\\|[A-Z]''),''''))
		ELSE NULL
    END AS EMPLOYEE_PID,
	E.MASTER_ID ::NUMBER AS EMPLOYEE_NUMBER,
	TRY_TO_DATE(TRIM(E.BIRTHDATE),''MM/DD/YYYY HH12:MI:SS AM'') AS EMPLOYEE_DOB,
	NULL AS EMPLOYEE_DATE_OF_DEATH,
	TRY_TO_DATE(TRIM(E.HIREDATE),''MM/DD/YYYY HH12:MI:SS AM'') AS EMPLOYEE_HIRE_DATE, -- Confirm this (CCSI)
	NULL AS EMPLOYEE_REHIRE_DATE,
	NULL AS EMPLOYEE_BENEFIT_START_DATE, -- FIRST DAY OF WORK??
	NULL AS EMPLOYEE_FIRST_CHECK_DATE, -- NEED TO DERIVE AFTER PAYROLL IS DISCUSSED
	NULL AS EMPLOYEE_LAST_CHECK_DATE, -- NEED TO DERIVE AFTER PAYROLL IS DISCUSSED
	NULL AS EMPLOYEE_LAST_WORKED_DATE,
	TRY_TO_DATE(TRIM(E.TERMINATIONDATE),''MM/DD/YYYY HH12:MI:SS AM'') AS EMPLOYEE_TERMINATE_DATE,
	TR.TERMINATION_REASON_NAME AS REASON_TO_TERMINATE, 
--	CASE WHEN E.EMPLOYEESTATUS IN (''0'',''2'',''5'') THEN FALSE ELSE TRUE END AS ACTIVE_EMPLOYEE_FLAG, -- FAULTY, Do Not Use
	CASE 
		WHEN E.EMPLOYEESTATUS IN (''6'',''2'',''5'') THEN FALSE 
		ELSE TRUE 
	END AS ACTIVE_EMPLOYEE_FLAG, 
	NULL AS ABLE_TO_REHIRE_FLAG,
	NULL AS EMPLOYEE_PREFIX,
	UPPER(TRIM(E.FIRSTNAME)) AS EMPLOYEE_FIRST_NAME,
	NULL AS EMPLOYEE_MIDDLE_NAME,
	UPPER(TRIM(E.LASTNAME)) AS EMPLOYEE_LAST_NAME,
	NULL AS EMPLOYEE_SUFFIX,
	TRIM(E.ADDRESS) AS EMPLOYEE_ADDRESS1,
	NULL AS EMPLOYEE_ADDRESS2,
	TRIM(E.CITY) AS EMPLOYEE_CITY, -- Derive from DIM STATE
	TRIM(GEO.STATE_ISO_CODE) AS EMPLOYEE_STATE_CODE, -- Derived from POSTAL_CODE (clean it too) -- Derive from DIM STATE
	TRIM(LEFT(E.POSTALCODE,5)) AS EMPLOYEE_ZIP,
	IFF(LENGTH(REGEXP_REPLACE(TRIM(E.HOMEPHONE),''[^[:digit:]$]'')) = 10,REGEXP_REPLACE(TRIM(E.HOMEPHONE),''[^[:digit:]$]''), NULL ) AS EMPLOYEE_HOME_PHONE,
 IFF(LENGTH(REGEXP_REPLACE(TRIM(E.PHONE2),''[^[:digit:]$]'')) = 10,REGEXP_REPLACE(TRIM(E.PHONE2),''[^[:digit:]$]''), NULL )  AS EMPLOYEE_CELL_PHONE,
	NULL AS EMPLOYEE_WORK_PHONE,
	TRIM(E.EMAIL) AS EMPLOYEE_PERSONAL_EMAIL,
	NULL AS EMPLOYEE_WORK_EMAIL,
	NULL AS LINKED_IN_PROFILE_URL,
	NULL AS EMPLOYEE_GENDER,
	NULL AS EMPLOYEE_ETHNICITY,
	FALSE AS HISPANIC_OR_LATINO,
	NULL AS EMPLOYEE_LANGUAGE,
	NULL AS EMPLOYEE_MARITAL_STATUS,
	CASE 
		WHEN E.EMPLOYMENTTYPE = 0 THEN ''Full Time''
		WHEN E.EMPLOYMENTTYPE = 1 THEN ''Part Time''
		WHEN E.EMPLOYMENTTYPE = 2 THEN ''PRN'' ELSE NULL 
	END AS EMPLOYEE_TYPE,
	CASE
		WHEN TRIM(E.EMPLOYEETYPEID) IN (''2'',''4'',''10'',''16'') THEN ''ADMIN'' -- Contractors AND Marketing employees ARE included IN Admins
		WHEN TRIM(E.EMPLOYEETYPEID) IN (''1'',''3'',''5'',''6'',''7'',''8'',''9'',''11'',''12'',''13'',''14'',''15'') THEN ''FIELD'' -- Drivers, HHA/HL and Phlebotomist are included in FIELD
	END AS EMPLOYEE_CATEGORY, 
	NULL AS EXEMPT_FLAG,
	NULL AS JOB_TITLE,
	NULL AS JOB_DESCRIPTION, 
	NULL AS CLASS_ID,
	NULL AS WORKERS_COMP,
	TPM.EMPLOYEE_NUMBER AS PAYROLL_ID,
	NULL AS PERCENT_401K_DEDUCTION,
	NULL AS AMOUNT_401K_DEDUCTION,
	NULL AS JAZZHR_APPLICANT_ID,
	NULL AS JAZZHR_USER_ID,
	NULL AS JAZZHR_CONTACT_ID,
	''OH'' AS WORK_STATE, --- ''OH'' hardcoded?
	TPM.SUTA_STATE,
	NULL AS EMPLOYEE_DEPARTMENT,
	TRIM(L.LOCATIONID) AS EMPLOYEE_OFFICE_CODE,
	MD5(''PRIME'' || ''-'' || TRIM(BM.NEW_LOCATION_ID) || ''-'' || ''ASR'') AS PRIMARY_BRANCH_KEY,
	''OH'' AS PRIMARY_BRANCH_STATE,
	''OH'' || '' - '' ||  UPPER(TRIM(BM.NEW_LOCATION_NAME)) || '' ('' || TRIM(BM.NEW_LOCATION_ID) || '')'' AS PRIMARY_BRANCH_NAME,
	''PRIME'' AS PRIMARY_BRANCH_SYSTEM_CODE,
	NULL AS CASE_MANAGER_FLAG,
	NULL AS SUPERVISOR_FLAG,
	NULL AS COORDINATOR_FLAG,
--	IFF(ECERT.COVIDVACCINESTEP1 IS NOT NULL, ECERT.COVIDVACCINESTEP1, TO_DATE(''1900-01-01'', ''YYYY-MM-DD'')),
--    IFF(ECERT.COVIDVACCINESTEP2 IS NOT NULL, ECERT.COVIDVACCINESTEP2, TO_DATE(''1900-01-01'', ''YYYY-MM-DD'')),
--    IFF(ECERT.COVIDBOOSTERDOSE IS NOT NULL, ECERT.COVIDBOOSTERDOSE, TO_DATE(''1900-01-01'', ''YYYY-MM-DD'')),
	TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
	TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
	NULL AS MDM_DIM_EMPLOYEE_KEY,
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
                        
	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
	,CURRENT_USER AS ETL_INSERTED_BY
	,CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_UPDATED_DATE
	,CURRENT_USER AS ETL_LAST_UPDATED_BY
	,FALSE AS ETL_DELETED_FLAG
	,FALSE as ETL_INFERRED_MEMBER_FLAG
    ,NULL AS LINKED_ID
FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MASTER_LIST E
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_TERMINATIONREASONS TR ON TR.TERMINATION_REASON_ID = CAST(E.TERMINATIONREASON AS INT)
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_LOCATIONS L ON L.LOCATIONID = E.LOCATIONID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.BRANCH_MAPPING BM ON L.LOCATIONID = BM.OLD_LOCATION_ID
--LEFT JOIN EMPLOYEE_COVID_INFO ECERT ON E.EMPLOYEEID = ECERT.EMPLOYEEID  --To Get COVID status
LEFT JOIN HAH.DIM_GEOGRAPHY GEO ON LEFT(TRIM(E.POSTALCODE),5) = GEO.ZIP_CODE 
LEFT JOIN ASR_TO_TRUSTPOINT_MAPPING TPM ON E.MASTER_ID = TPM.MASTER_ID
WHERE (EMPLOYEE_FIRST_NAME NOT LIKE ''TEST%'') AND (UPPER(TRIM(E.LASTNAME)) NOT LIKE ''TEST%'')
 AND NVL(BM.IS_ASR_BRANCH, TRUE) = TRUE
;
    RETURN ''SUCCESS'';
    END;
 
 EOT
}

