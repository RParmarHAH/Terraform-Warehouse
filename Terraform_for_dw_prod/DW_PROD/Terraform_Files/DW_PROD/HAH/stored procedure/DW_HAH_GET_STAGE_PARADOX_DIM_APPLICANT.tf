resource "snowflake_procedure" "DW_HAH_GET_STAGE_PARADOX_DIM_APPLICANT" {
	name ="GET_STAGE_PARADOX_DIM_APPLICANT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN
--*****************************************************************************************************************************
-- NAME:  PARADOX_DIM_APPLICANT
--
-- PURPOSE: Creates one row per APPLICANT from PARADOX
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                               NOTES:
-- --------    -------------------                  ---------------------------------------------------------------------------
-- 17/02/2022  Saurav Purohit / Manmohan Soni       Initial development
-- 29/12/2023  Meet Dalwadi                         Updated logic for MOBILE_PHONE and HOME_PHONE
-- 05/01/2024  Meet Dalwadi							Updated logic for LAST_NAME
--*****************************************************************************************************************************
--

INSERT OVERWRITE INTO STAGE.PARADOX_DIM_APPLICANT
WITH CANDIDATE_FORM AS (
    SELECT 
        A.CANDIDATE_ID, 
        A.PROFILE_ID, 
        A.FORM_DATE_SENT, 
        A.PERSONAL_INFORMATION_YOUR_FULL_NAME PERSONAL_INFORMATION__YOUR_FULL_NAME, 
        A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_1 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_1, 
        A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_2 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_2, 
        A.PERSONAL_INFORMATION_ZIP_CODE PERSONAL_INFORMATION__ZIP_CODE, 
        A.PERSONAL_INFORMATION_CITY PERSONAL_INFORMATION__CITY,
        A.PERSONAL_INFORMATION_STATE PERSONAL_INFORMATION__STATE,
        A.PERSONAL_INFORMATION_SOCIAL_SECURITY_NUMBER PERSONAL_INFORMATION__SOCIAL_SECURITY_NUMBER,
        A.EQUAL_EMPLOYMENT_OPPORTUNITY_GENDER EQUAL_EMPLOYMENT_OPPORTUNITY__GENDER, 
        NULL EQUAL_EMPLOYMENT_OPPORTUNITY__RACE_ETHNICITY_SELFIDENTIFICATION_, 
        A.EQUAL_EMPLOYMENT_OPPORTUNITY_WHAT_IS_YOUR_PREFERRED_LANGUAGE_FOR_COMMUNICATION EQUAL_EMPLOYMENT_OPPORTUNITY__WHAT_IS_YOUR_PREFERRED_LANGUAGE_FOR_COMMUNICATION,
        A.PERSONAL_INFORMATION_PHONE_NUMBER MOBILE_PHONE,
        COALESCE(A.PERSONAL_INFORMATION_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, A.PERSONAL_INFORMATION_EMERGENCY_CONTACT_HOME_PHONE_NUMBER) HOME_PHONE
    FROM DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_FORM_PA A
  UNION
    SELECT
        A.CANDIDATE_ID, 
        A.PROFILE_ID, 
        A.FORM_DATE_SENT, 
        A.PERSONAL_INFORMATION_YOUR_FULL_NAME, 
        A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_1, 
        A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_2, 
        A.PERSONAL_INFORMATION_ZIP_CODE, 
        A.PERSONAL_INFORMATION_CITY,
        A.PERSONAL_INFORMATION_STATE,
        NULL PERSONAL_INFORMATION__SOCIAL_SECURITY_NUMBER,
        A.DIVERSITY_QUESTIONS_GENDER EQUAL_EMPLOYMENT_OPPORTUNITY__GENDER, 
        --A.DIVERSITY_QUESTIONS_ETHNICITY EQUAL_EMPLOYMENT_OPPORTUNITY__RACE_ETHNICITY_SELFIDENTIFICATION_, 
		CASE WHEN len(A.DIVERSITY_QUESTIONS_ETHNICITY)>400 THEN NULL ELSE DIVERSITY_QUESTIONS_ETHNICITY END AS EQUAL_EMPLOYMENT_OPPORTUNITY__RACE_ETHNICITY_SELFIDENTIFICATION_,
        NULL EQUAL_EMPLOYMENT_OPPORTUNITY__WHAT_IS_YOUR_PREFERRED_LANGUAGE_FOR_COMMUNICATION,
        COALESCE(PERSONAL_INFORMATION_CELL_PHONE_NUMBER, PERSONAL_INFORMATION_ALTERNATE_PHONE_NUMBER) MOBILE_PHONE,
        COALESCE(PERSONAL_INFORMATION_EMERGENCY_CONTACT_PHONE_NUMBER, PERSONAL_INFORMATION_EMERGENCY_CONTACT_ALTERNATE_PHONE_NUMBER) HOME_PHONE
    FROM DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_FORM_GA A
  UNION
    SELECT
      A.CANDIDATE_ID, 
      A.PROFILE_ID, 
      A.FORM_DATE_SENT, 
      A.PERSONAL_INFORMATION_YOUR_FULL_NAME PERSONAL_INFORMATION__YOUR_FULL_NAME, 
      A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_1 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_1, 
      A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_2 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_2, 
      A.PERSONAL_INFORMATION_ZIP_CODE PERSONAL_INFORMATION__ZIP_CODE, 
      A.PERSONAL_INFORMATION_CITY PERSONAL_INFORMATION__CITY,
      A.PERSONAL_INFORMATION_STATE PERSONAL_INFORMATION__STATE,
      NULL PERSONAL_INFORMATION__SOCIAL_SECURITY_NUMBER,
      NULL EQUAL_EMPLOYMENT_OPPORTUNITY__GENDER, 
      NULL EQUAL_EMPLOYMENT_OPPORTUNITY__RACE_ETHNICITY_SELFIDENTIFICATION_, 
      NULL EQUAL_EMPLOYMENT_OPPORTUNITY__WHAT_IS_YOUR_PREFERRED_LANGUAGE_FOR_COMMUNICATION,
      A.PERSONAL_INFORMATION_PHONE_NUMBER MOBILE_PHONE,
      COALESCE(A.PERSONAL_INFORMATION_EMERGENCY_CONTACT_PHONE_NUMBER, A.PERSONAL_INFORMATION_EMERGENCY_CONTACT_ALTERNATE_PHONE_NUMBER) HOME_PHONE
    FROM DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_FORM_MO A
  UNION
    SELECT
      A.CANDIDATE_ID, 
      A.PROFILE_ID, 
      A.FORM_DATE_SENT, 
      A.PERSONAL_INFORMATION_YOUR_FULL_NAME PERSONAL_INFORMATION__YOUR_FULL_NAME, 
      A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_1 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_1, 
      A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_2 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_2, 
      A.PERSONAL_INFORMATION_ZIP_CODE PERSONAL_INFORMATION__ZIP_CODE, 
      A.PERSONAL_INFORMATION_CITY PERSONAL_INFORMATION__CITY,
      A.PERSONAL_INFORMATION_STATE PERSONAL_INFORMATION__STATE,
      NULL PERSONAL_INFORMATION__SOCIAL_SECURITY_NUMBER,
      NULL EQUAL_EMPLOYMENT_OPPORTUNITY__GENDER, 
      NULL EQUAL_EMPLOYMENT_OPPORTUNITY__RACE_ETHNICITY_SELFIDENTIFICATION_, 
      NULL EQUAL_EMPLOYMENT_OPPORTUNITY__WHAT_IS_YOUR_PREFERRED_LANGUAGE_FOR_COMMUNICATION,
      A.PERSONAL_INFORMATION_PHONE_NUMBER MOBILE_PHONE,
      COALESCE(A.PERSONAL_INFORMATION_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, A.PERSONAL_INFORMATION_EMERGENCY_CONTACT_HOME_PHONE_NUMBER) HOME_PHONE
    FROM DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_FORM_OH A
  UNION
    SELECT
      A.CANDIDATE_ID, 
      A.PROFILE_ID, 
      A.FORM_DATE_SENT, 
      A.PERSONAL_INFORMATION_YOUR_FULL_NAME PERSONAL_INFORMATION__YOUR_FULL_NAME, 
      A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_1 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_1, 
      A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_2 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_2, 
      A.PERSONAL_INFORMATION_ZIP_CODE PERSONAL_INFORMATION__ZIP_CODE, 
      A.PERSONAL_INFORMATION_CITY PERSONAL_INFORMATION__CITY,
      A.PERSONAL_INFORMATION_STATE PERSONAL_INFORMATION__STATE,
      NULL PERSONAL_INFORMATION__SOCIAL_SECURITY_NUMBER,
      EQUAL_EMPLOYMENT_OPPORTUNITY_GENDER EQUAL_EMPLOYMENT_OPPORTUNITY__GENDER, 
      EQUAL_EMPLOYMENT_OPPORTUNITY_RACEETHNICITY_SELFIDENTIFICATION EQUAL_EMPLOYMENT_OPPORTUNITY__RACE_ETHNICITY_SELFIDENTIFICATION_, 
      EQUAL_EMPLOYMENT_OPPORTUNITY_WHAT_IS_YOUR_PREFERRED_LANGUAGE_FOR_COMMUNICATION EQUAL_EMPLOYMENT_OPPORTUNITY__WHAT_IS_YOUR_PREFERRED_LANGUAGE_FOR_COMMUNICATION,
      A.PERSONAL_INFORMATION_PHONE_NUMBER MOBILE_PHONE,
      A.PERSONAL_INFORMATION_EMERGENCY_CONTACT_PHONE_NUMBER HOME_PHONE
    FROM DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_FORM_IN_ADAPTIVE A
  UNION
    SELECT
      A.CANDIDATE_ID, 
      A.PROFILE_ID, 
      A.FORM_DATE_SENT, 
      A.PERSONAL_INFORMATION_YOUR_FULL_NAME PERSONAL_INFORMATION__YOUR_FULL_NAME, 
      A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_1 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_1, 
      A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_2 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_2, 
      A.PERSONAL_INFORMATION_ZIP_CODE PERSONAL_INFORMATION__ZIP_CODE, 
      A.PERSONAL_INFORMATION_CITY PERSONAL_INFORMATION__CITY,
      A.PERSONAL_INFORMATION_STATE PERSONAL_INFORMATION__STATE,
      NULL PERSONAL_INFORMATION__SOCIAL_SECURITY_NUMBER,
      NULL EQUAL_EMPLOYMENT_OPPORTUNITY__GENDER, 
      NULL EQUAL_EMPLOYMENT_OPPORTUNITY__RACE_ETHNICITY_SELFIDENTIFICATION_, 
      EQUAL_EMPLOYMENT_OPPORTUNITY_WHAT_IS_YOUR_PREFERRED_LANGUAGE_FOR_COMMUNICATION EQUAL_EMPLOYMENT_OPPORTUNITY__WHAT_IS_YOUR_PREFERRED_LANGUAGE_FOR_COMMUNICATION,
      A.PERSONAL_INFORMATION_PHONE_NUMBER MOBILE_PHONE,
      A.PERSONAL_INFORMATION_EMERGENCY_CONTACT_PHONE_NUMBER HOME_PHONE
    FROM DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_FORM_IN A
  UNION
    SELECT
      A.CANDIDATE_ID, 
      A.PROFILE_ID, 
      A.FORM_DATE_SENT, 
      A.PERSONAL_INFORMATION_YOUR_FULL_NAME PERSONAL_INFORMATION__YOUR_FULL_NAME, 
      A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_1 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_1, 
      A.PERSONAL_INFORMATION_STREET_ADDRESS_LINE_2 PERSONAL_INFORMATION__STREET_ADDRESS_LINE_2, 
      A.PERSONAL_INFORMATION_ZIP_CODE PERSONAL_INFORMATION__ZIP_CODE, 
      A.PERSONAL_INFORMATION_CITY PERSONAL_INFORMATION__CITY,
      A.PERSONAL_INFORMATION_STATE PERSONAL_INFORMATION__STATE,
      NULL PERSONAL_INFORMATION__SOCIAL_SECURITY_NUMBER,
      NULL EQUAL_EMPLOYMENT_OPPORTUNITY__GENDER, 
      NULL EQUAL_EMPLOYMENT_OPPORTUNITY__RACE_ETHNICITY_SELFIDENTIFICATION_, 
      EQUAL_EMPLOYMENT_OPPORTUNITY_WHAT_IS_YOUR_PREFERRED_LANGUAGE_FOR_COMMUNICATION EQUAL_EMPLOYMENT_OPPORTUNITY__WHAT_IS_YOUR_PREFERRED_LANGUAGE_FOR_COMMUNICATION,
      A.PERSONAL_INFORMATION_PHONE_NUMBER MOBILE_PHONE,
      A.PERSONAL_INFORMATION_EMERGENCY_CONTACT_PHONE_NUMBER HOME_PHONE
    FROM DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_FORM_AL A
) -- SELECT * FROM CANDIDATE_FORM;
,UNIQUE_APPLICANTS AS (
    SELECT
      PROFILE_ID, CANDIDATE_ID, CAPTURE_START_DATE, CURRENT_CANDIDATE_JOURNEY_STATUS,
      ROW_NUMBER() OVER 
        (
         PARTITION BY PROFILE_ID 
         ORDER BY  
          CASE WHEN CURRENT_CANDIDATE_JOURNEY_STATUS IN (''Hire: Hired'', ''Orientation/ Hired: Hired'') THEN 1 ELSE 0 END DESC,
          CAPTURE_START_DATE DESC 
        ) RANK
    FROM DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_SPECIFIC
    QUALIFY RANK = 1
)
,FINAL AS (SELECT
    DISTINCT
    --A.CANDIDATE_ID,
    MD5( TRIM( A.PROFILE_ID) || ''-'' || ''PARADOX'') as APPLICANT_KEY ,
    12 as SOURCE_SYSTEM_ID ,
    ''PARADOX'' as SYSTEM_CODE ,
    A.CANDIDATE_LAST_NAME as LAST_NAME,
    A.CANDIDATE_FIRST_NAME as FIRST_NAME,
    COALESCE(
        IFF(TRIM(GA_ADMIN.EMERGENCY_CONTACT_YOUR_FULL_NAME) <> '''', REPLACE(SPLIT(TRIM(GA_ADMIN.EMERGENCY_CONTACT_YOUR_FULL_NAME), '', '')[1], ''middle: '', ''''), NULL), 
        IFF(TRIM(GA_DIRECT_CARE.EMERGENCY_CONTACT_YOUR_FULL_NAME) <> '''', REPLACE(SPLIT(TRIM(GA_DIRECT_CARE.EMERGENCY_CONTACT_YOUR_FULL_NAME), '', '')[1], ''middle: '', ''''), NULL),
		IFF(TRIM(F.PERSONAL_INFORMATION__YOUR_FULL_NAME) <> '''', REPLACE(SPLIT(TRIM(F.PERSONAL_INFORMATION__YOUR_FULL_NAME), '', '')[1], ''middle: '', ''''), NULL), 
        NULL 
    ) as MIDDLE_NAME,
    A.PROFILE_ID as APPLICANT_ID,
    CASE 
        WHEN TRIM(REGEXP_REPLACE(A.SSN,''\\\\-|\\\\(|\\\\)|\\\\ '','''')) NOT IN (SELECT SSN FROM Data_Management.Data_Quality.Invalid_SSN) 
            AND TRIM(REGEXP_REPLACE(A.SSN,''\\\\-|\\\\(|\\\\)|\\\\ '','''')) NOT LIKE ''00000%'' AND LENGTH(TRIM(REGEXP_REPLACE(A.SSN,''\\\\-|\\\\(|\\\\)|\\\\ '','''')))=9 
            THEN HEX_ENCODE(TRIM(REGEXP_REPLACE(A.SSN,''\\\\-|\\\\(|\\\\)|\\\\ '',''''))) 
        WHEN TRIM(REGEXP_REPLACE(F.PERSONAL_INFORMATION__SOCIAL_SECURITY_NUMBER,''\\\\-|\\\\(|\\\\)|\\\\ '','''')) NOT IN (SELECT SSN FROM Data_Management.Data_Quality.Invalid_SSN) 
            AND TRIM(REGEXP_REPLACE(F.PERSONAL_INFORMATION__SOCIAL_SECURITY_NUMBER,''\\\\-|\\\\(|\\\\)|\\\\ '','''')) NOT LIKE ''00000%'' AND LENGTH(TRIM(REGEXP_REPLACE(F.PERSONAL_INFORMATION__SOCIAL_SECURITY_NUMBER,''\\\\-|\\\\(|\\\\)|\\\\ '','''')))=9 
            THEN HEX_ENCODE(TRIM(REGEXP_REPLACE(F.PERSONAL_INFORMATION__SOCIAL_SECURITY_NUMBER,''\\\\-|\\\\(|\\\\)|\\\\ '',''''))) 
        ELSE NULL 
    END AS SSN,
    A.CANDIDATE_EMAIL as EMAIL ,
    CASE 
        -- A.CANDIDATE_PHONE
        WHEN 
            TRIM(REGEXP_REPLACE(A.CANDIDATE_PHONE,''[^0-9]'','''')) 
                NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) 
                AND A.CANDIDATE_PHONE NOT LIKE ''%0000000%'' 
                AND LENGTH( TRIM( REGEXP_REPLACE(A.CANDIDATE_PHONE,''[^0-9]'',''''))) = 10 
            THEN TRIM( REGEXP_REPLACE(A.CANDIDATE_PHONE,''[^0-9]'',''''))
        WHEN 
            TRIM(REGEXP_REPLACE(A.CANDIDATE_PHONE,''[^0-9]'','''')) 
                NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) 
                AND A.CANDIDATE_PHONE NOT LIKE ''%0000000%'' 
                AND TRIM( REGEXP_REPLACE(A.CANDIDATE_PHONE,''[^0-9]'','''')) LIKE ''1%'' AND LENGTH( TRIM( REGEXP_REPLACE(A.CANDIDATE_PHONE,''[^0-9]'',''''))) = 11 
            THEN SUBSTR(TRIM( REGEXP_REPLACE(A.CANDIDATE_PHONE,''[^0-9]'','''')),2)
        -- A.PHONE_NUMBER
        WHEN 
            TRIM(REGEXP_REPLACE( A.PHONE_NUMBER,''[^0-9]'','''')) 
                NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) 
                AND  A.PHONE_NUMBER NOT LIKE ''%0000000%'' 
                AND LENGTH( TRIM( REGEXP_REPLACE( A.PHONE_NUMBER,''[^0-9]'',''''))) = 10 
            THEN TRIM( REGEXP_REPLACE( A.PHONE_NUMBER,''[^0-9]'',''''))
        WHEN 
            TRIM(REGEXP_REPLACE( A.PHONE_NUMBER,''[^0-9]'','''')) 
                NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) 
                AND A.PHONE_NUMBER NOT LIKE ''%0000000%'' 
                AND TRIM( REGEXP_REPLACE( A.PHONE_NUMBER,''[^0-9]'','''')) LIKE ''1%'' AND LENGTH( TRIM( REGEXP_REPLACE( A.PHONE_NUMBER,''[^0-9]'',''''))) = 11 
            THEN SUBSTR(TRIM( REGEXP_REPLACE( A.PHONE_NUMBER,''[^0-9]'','''')),2)
        -- F.MOBILE_PHONE
        WHEN 
            TRIM(REGEXP_REPLACE( F.MOBILE_PHONE,''[^0-9]'','''')) 
                NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) 
                AND  F.MOBILE_PHONE NOT LIKE ''%0000000%'' 
                AND LENGTH( TRIM( REGEXP_REPLACE( F.MOBILE_PHONE,''[^0-9]'',''''))) = 10 
            THEN TRIM( REGEXP_REPLACE( F.MOBILE_PHONE,''[^0-9]'',''''))
        WHEN 
            TRIM(REGEXP_REPLACE( F.MOBILE_PHONE,''[^0-9]'','''')) 
                NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) 
                AND F.MOBILE_PHONE NOT LIKE ''%0000000%'' 
                AND TRIM( REGEXP_REPLACE( F.MOBILE_PHONE,''[^0-9]'','''')) LIKE ''1%'' AND LENGTH( TRIM( REGEXP_REPLACE( F.MOBILE_PHONE,''[^0-9]'',''''))) = 11 
            THEN SUBSTR(TRIM( REGEXP_REPLACE( F.MOBILE_PHONE,''[^0-9]'','''')),2)
    END as MOBILE_PHONE,
    CASE 
        -- PHONE FROM GA ONBOARDING FORM 
        WHEN 
            TRIM(REGEXP_REPLACE(COALESCE(GA_ADMIN.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_ADMIN.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER),''[^0-9]'','''')) 
                NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) 
                AND COALESCE(GA_ADMIN.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_ADMIN.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER) NOT LIKE ''%0000000%'' 
                AND LENGTH( TRIM( REGEXP_REPLACE(COALESCE(GA_ADMIN.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_ADMIN.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER),''[^0-9]'',''''))) = 10 
            THEN TRIM( REGEXP_REPLACE(COALESCE(GA_ADMIN.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_ADMIN.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER),''[^0-9]'',''''))
        WHEN 
            TRIM(REGEXP_REPLACE(COALESCE(GA_ADMIN.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_ADMIN.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER),''[^0-9]'','''')) 
                NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) 
                AND COALESCE(GA_ADMIN.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_ADMIN.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER) NOT LIKE ''%0000000%'' 
                AND TRIM( REGEXP_REPLACE(COALESCE(GA_ADMIN.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_ADMIN.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER),''[^0-9]'','''')) LIKE ''1%'' AND LENGTH( TRIM( REGEXP_REPLACE(COALESCE(GA_ADMIN.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_ADMIN.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER),''[^0-9]'',''''))) = 11 
            THEN SUBSTR(TRIM( REGEXP_REPLACE(COALESCE(GA_ADMIN.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_ADMIN.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_PRIMARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER, GA_DIRECT_CARE.EMERGENCY_CONTACT_SECONDARY_EMERGENCY_CONTACT_CELL_PHONE_NUMBER),''[^0-9]'','''')),2)
        -- PHONE FROM CANDIDATE FORM
        WHEN 
            TRIM(REGEXP_REPLACE( F.HOME_PHONE,''[^0-9]'','''')) 
                NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) 
                AND  F.HOME_PHONE NOT LIKE ''%0000000%'' 
                AND LENGTH( TRIM( REGEXP_REPLACE( F.HOME_PHONE,''[^0-9]'',''''))) = 10 
            THEN TRIM( REGEXP_REPLACE( F.HOME_PHONE,''[^0-9]'',''''))
        WHEN 
            TRIM(REGEXP_REPLACE( F.HOME_PHONE,''[^0-9]'','''')) 
                NOT IN (SELECT Phone_Number FROM Data_Management.Data_Quality.Invalid_Phone_Number) 
                AND F.HOME_PHONE NOT LIKE ''%0000000%'' 
                AND TRIM( REGEXP_REPLACE( F.HOME_PHONE,''[^0-9]'','''')) LIKE ''1%'' AND LENGTH( TRIM( REGEXP_REPLACE( F.HOME_PHONE,''[^0-9]'',''''))) = 11 
            THEN SUBSTR(TRIM( REGEXP_REPLACE( F.HOME_PHONE,''[^0-9]'','''')),2)
    END as HOME_PHONE,
    NULL AS DATE_OF_BIRTH,
    COALESCE(GA_ADMIN.EMERGENCY_CONTACT_STREET_ADDRESS_LINE_1, GA_DIRECT_CARE.EMERGENCY_CONTACT_STREET_ADDRESS_LINE_1, F.PERSONAL_INFORMATION__STREET_ADDRESS_LINE_1, A.STREET_ADDRESS) as ADDRESS ,
    COALESCE(GA_ADMIN.EMERGENCY_CONTACT_STREET_ADDRESS_LINE_2, GA_DIRECT_CARE.EMERGENCY_CONTACT_STREET_ADDRESS_LINE_2, F.PERSONAL_INFORMATION__STREET_ADDRESS_LINE_2, A.STREET_ADDRESS_LINE_2) as ADDRESS_LINE_2 ,
    COALESCE(GA_ADMIN.EMERGENCY_CONTACT_CITY, GA_DIRECT_CARE.EMERGENCY_CONTACT_CITY, F.PERSONAL_INFORMATION__CITY) as CITY ,
    COALESCE(GA_ADMIN.EMERGENCY_CONTACT_STATE, GA_DIRECT_CARE.EMERGENCY_CONTACT_STATE, F.PERSONAL_INFORMATION__STATE) as STATE ,
    G.STATE_ISO_CODE as STATE_CODE ,
    COALESCE(GA_ADMIN.EMERGENCY_CONTACT_ZIP_CODE, GA_DIRECT_CARE.EMERGENCY_CONTACT_ZIP_CODE, F.PERSONAL_INFORMATION__ZIP_CODE, A.ZIP_CODE) as POSTAL ,
    null as REFERRER ,
    null as CATEGORIES ,    
    null as REFERENCES ,
    null as LINKEDIN ,
    null as WEBSITE_BLOG_PORTFOLIO ,
    null as TWITTER ,
    null as EARLIEST_START_DATE ,
    null as AVAILABLE_WEEKENDS ,
    null as AVAILABLE_EVENINGS ,
    null as AVAILABLE_OVERTIME ,
    A.CANDIDATE_LANGUAGE as LANGUAGES ,
    null as DRIVERS_LICENSE ,
    null as COMMERCIAL_DRIVERS_LICENSE ,
    null as CAN_RELOCATE ,
    null as CITIZEN_EMPLOYMENT_STATUS ,
    null as HIGHEST_EDUCATION ,
    null as COLLEGE_UNIVERSITY ,
    null as GRADE_POINT_AVG ,
    null as AGE_18,
    null as PILOT_FLIGHT_HOURS ,
    null as PILOT_GRADE_RATINGS ,
    null as FELONY_CONVICTION ,
    null as FELONY_EXPLANATION ,
    null as EEO_CATEGORY ,
    COALESCE( F.EQUAL_EMPLOYMENT_OPPORTUNITY__GENDER, A.EEO_GENDER) as EEO_SEX ,
    A.EEO_RACE as EEO_RACE,
    COALESCE(F.EQUAL_EMPLOYMENT_OPPORTUNITY__RACE_ETHNICITY_SELFIDENTIFICATION_, A.EEO_ETHNICITY) as EEO_ETHNICITY ,
    A.EEO_DISABILITY as EEO_DISABILITY ,
    A.EEO_VETERAN as EEOC_VETERAN_STATUS ,
    EEO_DISABILITY as EEOC_DISABILITY_STATUS,
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
    CURRENT_USER AS ETL_INSERTED_BY,
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_UPDATED_DATE,
    CURRENT_USER AS ETL_LAST_UPDATED_BY,
    0 AS ETL_DELETED_FLAG
from DISC_${var.SF_ENVIRONMENT}.PARADOX.CANDIDATE_SPECIFIC A
    INNER JOIN UNIQUE_APPLICANTS B ON A.CANDIDATE_ID = B.CANDIDATE_ID
    LEFT JOIN CANDIDATE_FORM F ON F.CANDIDATE_ID = A.CANDIDATE_ID
    LEFT JOIN DISC_${var.SF_ENVIRONMENT}.PARADOX.GA_ONBOARDING_ADMIN GA_ADMIN ON A.CANDIDATE_ID = GA_ADMIN.CANDIDATE_ID
    LEFT JOIN DISC_${var.SF_ENVIRONMENT}.PARADOX.GA_ONBOARDING_DIRECT_CARE GA_DIRECT_CARE ON A.CANDIDATE_ID = GA_DIRECT_CARE.CANDIDATE_ID
    LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_GEOGRAPHY G ON COALESCE(GA_ADMIN.EMERGENCY_CONTACT_ZIP_CODE, GA_DIRECT_CARE.EMERGENCY_CONTACT_ZIP_CODE, F.PERSONAL_INFORMATION__ZIP_CODE, A.ZIP_CODE) = G.ZIP_CODE
WHERE A.PROFILE_ID IS NOT NULL)
SELECT APPLICANT_KEY ,
SOURCE_SYSTEM_ID ,
SYSTEM_CODE ,
CASE WHEN LOWER(MIDDLE_NAME) = MIDDLE_NAME AND array_contains(LOWER(MIDDLE_NAME)::variant,SPLIT(LOWER(LAST_NAME),'' '')) = TRUE
THEN
TRIM(REGEXP_REPLACE(LAST_NAME,''\\\\b''||(MIDDLE_NAME) || '' ''||''\\\\b'','''',1,1,''i''))
WHEN UPPER(MIDDLE_NAME) = MIDDLE_NAME AND array_contains(UPPER(MIDDLE_NAME)::variant,SPLIT(UPPER(LAST_NAME),'' '')) = TRUE
THEN
TRIM(REGEXP_REPLACE(LAST_NAME,''\\\\b''||UPPER(MIDDLE_NAME) || '' '' ||''\\\\b'','''',1,1,''i''))
WHEN array_contains(LOWER(MIDDLE_NAME)::variant,SPLIT(LOWER(LAST_NAME),'' '')) = FALSE
OR MIDDLE_NAME IS NULL OR MIDDLE_NAME = '''' THEN  TRIM(LAST_NAME)
END AS LAST_NAME,
TRIM(FIRST_NAME) AS FIRST_NAME,
NULLIF(TRIM(MIDDLE_NAME),'''') AS MIDDLE_NAME,
APPLICANT_ID,
SSN,	
EMAIL ,
MOBILE_PHONE,
HOME_PHONE,
DATE_OF_BIRTH,
ADDRESS ,
ADDRESS_LINE_2 ,
CITY ,
STATE ,
STATE_CODE ,
POSTAL ,
REFERRER ,
CATEGORIES ,    
REFERENCES ,
LINKEDIN ,
WEBSITE_BLOG_PORTFOLIO ,
TWITTER ,
EARLIEST_START_DATE ,
AVAILABLE_WEEKENDS ,
AVAILABLE_EVENINGS ,
AVAILABLE_OVERTIME ,
LANGUAGES ,
DRIVERS_LICENSE ,
COMMERCIAL_DRIVERS_LICENSE ,
CAN_RELOCATE ,
CITIZEN_EMPLOYMENT_STATUS ,
HIGHEST_EDUCATION ,
COLLEGE_UNIVERSITY ,
GRADE_POINT_AVG ,
AGE_18,
PILOT_FLIGHT_HOURS ,
PILOT_GRADE_RATINGS ,
FELONY_CONVICTION ,
FELONY_EXPLANATION ,
EEO_CATEGORY ,
EEO_SEX ,
EEO_RACE,
EEO_ETHNICITY ,
EEO_DISABILITY ,
EEOC_VETERAN_STATUS ,
EEOC_DISABILITY_STATUS,
ETL_TASK_KEY,
ETL_INSERTED_TASK_KEY,
ETL_INSERTED_DATE,
ETL_INSERTED_BY,
ETL_UPDATED_DATE,
ETL_LAST_UPDATED_BY,
ETL_DELETED_FLAG FROM FINAL;

    RETURN ''SUCCESS'';
END;

 EOT
}

