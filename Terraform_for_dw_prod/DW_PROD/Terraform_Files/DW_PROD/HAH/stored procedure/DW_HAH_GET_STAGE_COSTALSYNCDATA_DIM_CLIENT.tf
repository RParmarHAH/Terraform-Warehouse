resource "snowflake_procedure" "DW_HAH_GET_STAGE_COSTALSYNCDATA_DIM_CLIENT" {
	name ="GET_STAGE_COSTALSYNCDATA_DIM_CLIENT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result VARCHAR;
BEGIN
    --*****************************************************************************************************************************
-- NAME:  COSTALSYNCDATA_DIM_CLIENT
--
-- PURPOSE: Creates one row per client according to CoastalSnyc (combination of SHC_ALTRUS and SHC_SAVANNAH)
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 01/06/20     Greg Marsh           Initial development hello
-- 03/10/20     Rachel Stewart       Updated Active Client Flag
-- 03/19/20    Rachel Stewart        Fixed overwrite issue
-- 05/11/20     Frank Noordover      Updated logic for PID, DOB, Gender and Address
-- 06/05/20		Mir Ali				 Added DB as part of join clause
-- 10/23/20     Devansh Patel		 Changing design to use new raw table from carevoyant - CV_PATIENTS
-- 12/02/20     Devansh Patel 		 Matching fields to production version of DIM_CLIENT as of 12/02/2020
-- 07/04/21     jigar Prajapati      change DDL to add fields and cast null
-- 05/14/21		Mir Ali				 Added logic for Primary_Branch attributes
-- 07/07/21		Mir Ali				 Added new attributes including email, fax number, salutation, and marital status
-- 12/20/21		Abhishek Sunil		 Added Logic to pick up correct Service Date
-- 02/17/22     Prateek Bhatt		 Leveraged client dedupe structures
-- 03/01/22     Mir Ali              Updated/corrected First_Service_Date CTE
-- 08/31/23   Sandesh Gosavi        Update logic of last_visit_date to avoid future date 
-- 11/08/2023 Trushali Ramoliya     Added the column for HISPANIC_OR_LATINO and also updated the logic for ethnicity as per IDDOX - 388
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO STAGE.COSTALSYNCDATA_DIM_CLIENT
WITH CLIENT_DATA AS
(
	SELECT * FROM
	(
		SELECT TRIM(DB) AS MASTER_DB, TRIM(PATIENT_NUMBER) AS MASTER_PATIENT_NUMBER, TRIM(DB) AS DB, TRIM(PATIENT_NUMBER) AS PATIENT_NUMBER
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CLIENT_MASTER_LIST
	)
	UNION
	SELECT * FROM
	(
		SELECT TRIM(MASTER.DB) AS MASTER_DB, TRIM(MASTER.PATIENT_NUMBER) AS MASTER_PATIENT_NUMBER, TRIM(MATCH.DB) AS DB, TRIM(MATCH.PATIENT_NUMBER) AS PATIENT_NUMBER
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CLIENT_MATCH_LIST AS MATCH
        JOIN DISC_DEDUPE_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CLIENT_MASTER_LIST AS MASTER 
            ON MASTER.MASTER_ID = MATCH.MASTER_ID
        WHERE MATCH.ID <> MATCH.MASTER_ID
	)
)
, FIRST_SERVICE_DATES AS 
(
	SELECT DISTINCT CLIENTS.MASTER_DB AS DB, CLIENTS.MASTER_PATIENT_NUMBER AS PATIENT_NUMBER, 
        MIN(SCHEDULE_DATE) AS FirstDateOfService, MAX(SCHEDULE_DATE) AS LatestDateOfService,
        MAX(SCHEDULES.ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_SCHEDULES AS SCHEDULES
    JOIN CLIENT_DATA AS CLIENTS
        ON CLIENTS.DB = TRIM(SCHEDULES.DB) AND CLIENTS.PATIENT_NUMBER = TRIM(SCHEDULES.PATIENT_NUMBER)
    WHERE SCHEDULES.db =''SHC_ALTRUS'' AND TRIM(SCHEDULES.SCHEDULE_STATUS_CODE)IN (''B'',''BP'',''C'',''P'',''V'',''VB'',''VP'')
    AND (try_cast(LEFT(trim(SCHEDULES.Confirmed_Duration ),2) AS INTEGER) +try_cast(RIGHT(trim(SCHEDULES.Confirmed_Duration),2) AS INTEGER)/60)> 0
    GROUP BY CLIENTS.MASTER_DB, CLIENTS.MASTER_PATIENT_NUMBER
	UNION ALL
	SELECT DISTINCT CLIENTS.MASTER_DB AS DB, CLIENTS.MASTER_PATIENT_NUMBER AS PATIENT_NUMBER, 
        MIN(SCHEDULE_DATE) AS FirstDateOfService, MAX(SCHEDULE_DATE) AS LatestDateOfService,
        MAX(SCHEDULES.ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CV_SCHEDULES AS SCHEDULES
    JOIN CLIENT_DATA AS CLIENTS
        ON CLIENTS.DB = TRIM(SCHEDULES.DB) AND CLIENTS.PATIENT_NUMBER = TRIM(SCHEDULES.PATIENT_NUMBER)
    WHERE SCHEDULES.db =''SHC_SAVANNAH'' AND SCHEDULE_DATE <=''2021-10-16'' ----CUTOVER DATE FOR SHC_SAVANNAH IS 2021-10-16
    AND TRIM(SCHEDULES.SCHEDULE_STATUS_CODE)IN (''B'',''BP'',''C'',''P'',''V'',''VB'',''VP'')
    AND (try_cast(LEFT(trim(SCHEDULES.Confirmed_Duration ),2) AS INTEGER) +try_cast(RIGHT(trim(SCHEDULES.Confirmed_Duration),2) AS INTEGER)/60)> 0
	GROUP BY CLIENTS.MASTER_DB, CLIENTS.MASTER_PATIENT_NUMBER
	
), ADMISSIONS AS (
    SELECT CLIENTS.MASTER_DB AS DB, CLIENTS.MASTER_PATIENT_NUMBER AS PATIENT_NUMBER, 
        MIN(A.ADMIT_DATE) AS REFERRAL_DATE,
        MAX(A.ETL_LAST_UPDATED_DATE) AS ETL_LAST_UPDATED_DATE
    FROM "DISC_${var.SF_ENVIRONMENT}"."COSTALSYNCDATA"."CV_ADMISSIONS" A
    JOIN CLIENT_DATA AS CLIENTS
        ON TRIM(CLIENTS.PATIENT_NUMBER) = TRIM(A.PATIENT_NUMBER) AND TRIM(CLIENTS.DB)=TRIM(A.DB)
    GROUP BY CLIENTS.MASTER_DB, CLIENTS.MASTER_PATIENT_NUMBER
)
  SELECT DISTINCT
      md5(TRIM(f.DB) || ''-'' ||cast(TRIM(regexp_replace(MASTER_ID,f.DB)) AS NUMBER) || ''-''  ||  ''COSTALSYNCDATA'') AS CLIENT_KEY,
      TRIM(f.PATIENT_NUMBER) AS CLIENT_NUMBER, --BK
	  TRIM(f.DB) AS SYSTEM_CODE, --BK
      case when TRIM(f.DB) = ''SHC_ALTRUS'' then 1 else 2 end AS SOURCE_SYSTEM_ID, --BK
      CASE WHEN DQSSN.SSN = F.SOCIAL_SECURITY_NUMBER THEN NULL ELSE MD5(F.SOCIAL_SECURITY_NUMBER) END AS Client_PID,
	   NULL AS CLIENT_MEDICARE_ID,
	  NULL AS MEDICAID_ID,
      CASE WHEN DQDOB.DOB=F.BIRTH_DATE THEN NULL ELSE F.BIRTH_DATE END AS Client_DOB,
      NULL AS CLIENT_DATE_OF_DEATH,
--      P.SEX AS Client_Gender,
      CASE WHEN TRIM( F.Sex) = ''2'' THEN ''FEMALE''
           WHEN TRIM( F.Sex) = ''1'' THEN ''MALE''
           ELSE NULL
      END AS Client_Gender, 
--      NULL AS CLIENT_ETHNICITY,
      UPPER(CASE WHEN TRIM( F.Race_Code) = ''1'' THEN ''American Indian or Alaska Native''
           WHEN TRIM( F.Race_Code) = ''2'' THEN ''Asian''
           WHEN TRIM( F.Race_Code) = ''3'' THEN ''Black or African American''
           WHEN TRIM( F.Race_Code) = ''4'' THEN  NULL
           WHEN TRIM( F.Race_Code) = ''5'' THEN ''Native Hawaiian or Other Pacific Islander''
           WHEN TRIM( F.Race_Code) = ''6'' THEN ''White''
           ELSE NULL
      END) AS Client_Ethnicity,
      IFF(TRIM(F.Race_Code) = ''4'', TRUE, FALSE) AS HISPANIC_OR_LATINO,
	NULL AS CLIENT_GENDER_IDENTITY, -- NA
      NULL AS CLIENT_SEXUAL_ORIENTATION, -- NA
	  NULL AS CLIENT_RACE, -- NA
      CASE UPPER(TRIM(F.MARITALSTATS_CODE)) 
			WHEN ''D'' THEN ''Divorced''
			WHEN ''S'' THEN ''Single''
			WHEN ''W'' THEN ''Widowed''
			WHEN ''X'' THEN ''Separated''
			ELSE IFF(CHARINDEX(''M'', UPPER(TRIM(F.MARITALSTATS_CODE))) = 1, ''Married'', NULL) END AS CLIENT_MARITAL_STATUS,
	  CASE F.SEX WHEN 0 THEN NULL WHEN 1 THEN ''MR.'' WHEN 2 THEN ''MS.'' WHEN 3 THEN NULL END AS CLIENT_SALUTATION,
      TRIM(NVL(F.FIRST_NAME, '''')) AS Client_First_Name,
      TRIM(NVL(F.MIDDLE_INITIAL, '''')) AS Client_Middle_Name,
      TRIM(NVL(F.LAST_NAME, '''')) AS Client_Last_Name,
      CONCAT(TRIM(NVL(F.LAST_NAME, '''')), '' '', TRIM(NVL(F.FIRST_NAME, ''''))) AS CLIENT_NAME,
      F.ADDRESS AS Client_Address1, 
      F.STREET_NAME AS Client_Address2,
      F.CITY AS Client_City,
      CASE WHEN S.STATE_ISO_CODE IS NOT NULL THEN S.STATE_ISO_CODE 
      	ELSE 
      		CASE WHEN Z.STATE_ISO_CODE IS NOT NULL THEN Z.STATE_ISO_CODE
      			ELSE ''GA'' END 
      				END AS CLIENT_STATE_CODE,
      F.ZIPCODE AS Client_Zip,
      NULL AS CLIENT_CLN_ADDRESS1,
      NULL AS CLIENT_CLN_ADDRESS2,
      NULL AS CLIENT_CLN_CITY,
      NULL AS CLIENT_CLN_STATE_CODE,
      NULL AS CLIENT_CLN_ZIP,
      NULL AS CLIENT_STD_ADDRESS1,
      NULL AS CLIENT_STD_ADDRESS2,
      NULL AS CLIENT_STD_CITY,
      NULL AS CLIENT_STD_STATE_CODE,
      NULL AS CLIENT_STD_ZIP,
      F.PHONE AS Client_Home_Phone,
      F.CELL_PHONE AS Client_Cell_Phone, 
      CAST( NULL AS VARCHAR(20)) AS Client_Work_Phone,
      NULLIF(TRIM(F.FAX_NUMBER), '''') AS CLIENT_FAX_NUMBER,
      NULLIF(TRIM(F.EMAIL), '''') AS CLIENT_PERSONAL_EMAIL,
      CASE WHEN A.Referral_Date=DQRD.REFERRAL_DATE THEN NULL ELSE A.Referral_Date END AS REFERRAL_DATE,
      datediff(day, A.Referral_Date, FSD.FirstDateOfService) AS DAYS_TO_SERVICE, -- CHANGE sequence 
      NULL AS CONTRACT_BEGIN_DATE,
      NULL AS CONTRACT_END_DATE,
      FSD.FirstDateOfService AS FIRST_SERVICE_DATE,
      FSD.LatestDateOfService AS LAST_SERVICE_DATE,
      NULL AS BEGIN_DATE,
      NULL AS END_DATE,
      CASE WHEN FSD.LatestDateOfService BETWEEN DATEADD(DAYS,-30,CURRENT_DATE) AND CURRENT_DATE THEN 1 ELSE 0 END AS ACTIVE_CLIENT_FLAG,
      CAST( NULL AS BOOLEAN) AS On_Hold_Flag,
      CAST( NULL AS DATE) AS On_Hold_Start_Date, 
      CAST( NULL AS DATE) AS On_Hold_End_Date,
      NULL AS ACQUIRED_FROM_COMPANY_KEY,
      NULL AS ACQUIRED_FROM_COMPANY_ID,
      NULL AS ACQUIRED_FROM_COMPANY_FULL_NAME,
      NULL AS ACQUISITION_DATE,
      NULL AS ACQUISITION_FLAG,
      NULL AS ADMISSION_DATE,
      NULL AS ADMISSION_FLAG,
      CASE WHEN datediff(day, A.Referral_Date, FSD.FirstDateOfService) <= 60 THEN 1 ELSE 0 END AS CLIENT_CONVERTED_FLAG,
      MD5(TRIM(F.DB) || ''-'' || TRIM(F.DEPARTMENT__CODE) || ''-'' || ''COSTALSYNCDATA'')  AS PRIMARY_SUPERVISOR_KEY,
      TRIM(F.DEPARTMENT__CODE) AS PRIMARY_SUPERVISOR_CODE,
      D.DEPARTMENT_NAME AS PRIMARY_SUPERVISOR_NAME,
      NULL AS SECONDARY_SUPERVISOR_KEY,
      NULL AS SECONDARY_SUPERVISOR_CODE,
      NULL AS SECONDARY_SUPERVISOR_NAME,
      MD5(TRIM(F.DB) || ''-'' || TRIM(F.LOCATION_CODE) || ''-'' || ''COSTALSYNCDATA'') AS PRIMARY_BRANCH_KEY,
      UPPER(L.LOCATION_NAME) AS PRIMARY_BRANCH_NAME,
      ST.STATE_ISO_CODE AS PRIMARY_BRANCH_STATE,
      NULL AS GUARANTOR_NAME,
      NULL AS NOTES,
      NULL AS AGENCY,
      TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
      TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
      :STR_ETL_TASK_KEY AS ETL_TASK_KEY,			 
      :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
      convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	  CURRENT_USER as ETL_INSERTED_BY ,
	  convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
	  CURRENT_USER as ETL_LAST_UPDATED_BY,
	  0 as ETL_DELETED_FLAG,
	  0 as ETL_INFERRED_MEMBER_FLAG
  FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.CLIENT_MASTER_LIST F 
  LEFT JOIN FIRST_SERVICE_DATES AS FSD
    ON TRIM(FSD.DB) = TRIM(F.DB) AND TRIM(FSD.PATIENT_NUMBER) = TRIM(F.PATIENT_NUMBER)
  LEFT JOIN "DISC_${var.SF_ENVIRONMENT}"."COSTALSYNCDATA"."CV_LOCATIONS" L ON TRIM(F.DB) = TRIM(L.DB) AND TRIM(F.LOCATION_CODE) = TRIM(L.LOCATION_CODE)
  LEFT JOIN HAH.DIM_STATE ST ON ST.STATE_ISO_CODE = NULLIF(TRIM(L.STATE_CODE), '''')
  LEFT JOIN "DISC_${var.SF_ENVIRONMENT}"."COSTALSYNCDATA"."CV_DEPARTMENTS" D ON TRIM(F.DB) = TRIM(D.DB) AND TRIM(F.DEPARTMENT__CODE) = TRIM(D.DEPARTMENT__CODE)
  LEFT JOIN ADMISSIONS A ON TRIM(A.DB) = TRIM(F.DB) AND TRIM(A.PATIENT_NUMBER) = TRIM(F.PATIENT_NUMBER)
  LEFT JOIN "DATA_MANAGEMENT"."DATA_QUALITY"."INVALID_CLIENT_NUMBER" DQCN 
            ON TRIM(F.PATIENT_NUMBER,'' '') = TRIM(DQCN.CLIENT_NUMBER,'' '')
            AND TRIM(F.DB) = TRIM(DQCN.SYSTEM_CODE)
  LEFT JOIN "DATA_MANAGEMENT"."DATA_QUALITY"."INVALID_PHONE_NUMBER" DQP ON F.PHONE=DQP.PHONE_NUMBER
  LEFT JOIN "DATA_MANAGEMENT"."DATA_QUALITY"."INVALID_SSN" DQSSN ON F.SOCIAL_SECURITY_NUMBER=DQSSN.SSN
  LEFT JOIN "DATA_MANAGEMENT"."DATA_QUALITY"."INVALID_DATE" DQDOB ON F.BIRTH_DATE = DQDOB.DOB
  LEFT JOIN "DATA_MANAGEMENT"."DATA_QUALITY"."INVALID_DATE" DQRD ON A.Referral_date = DQRD.REFERRAL_DATE
  LEFT JOIN HAH.DIM_ZIP_CODE Z ON Z.ZIP_CODE=TRIM(F.ZIPCODE)
  LEFT JOIN HAH.DIM_STATE S ON S.STATE_ISO_CODE=UPPER(TRIM(F.STATE_CODE))
  WHERE DQCN.CLIENT_NUMBER IS NULL;

    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
    return return_result;
END;
    
 EOT
}

