resource "snowflake_procedure" "DW_HAH_GET_STAGE_COASTALGP_FACT_PAYROLL_DETAILS" {
	name ="GET_STAGE_COASTALGP_FACT_PAYROLL_DETAILS"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT


BEGIN

--******************************************************************************************************************************************
-- NAME:  COSTALSYNCDATA_FACT_PAYROLL_DETAILS
--
-- PURPOSE: Creates one row per pay code per pay check per employee
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -------------------------------------------------------------------------------------------------------        
-- 21/03/22    Aditya Shukla		 Initial development
--******************************************************************************************************************************************

INSERT OVERWRITE INTO STAGE.COASTALGP_FACT_PAYROLL_DETAILS

WITH PAYROLLDETAILS AS
(
	SELECT DISTINCT 
		UPPER(TRIM(GP.DB)) as db,
		TRIM(GP.STATECODE) AS STATECODE,
		COALESCE(CB.DEPARTMENT,GP.DEPARTMENT) AS DEPARTMENT,
		TRIM(GP.CHECKDATE) AS PAYROLL_DATE,
		TRIM(GP.EMPLOYEEID) AS EMPLOYEE_ID,
		TRIM(GP.PAYPERIODBEGINDATE) AS PAY_PERIOD_START_DATE,
		TRIM(GP.PAYPERIODENDDATE) AS PAY_PERIOD_END_DATE,
		CASE UPPER(TRIM(GP.DB)) WHEN ''ALTRU'' THEN ''ALTRU'' WHEN ''SHC'' THEN ''SHC'' END  AS SYSTEM_CODE,
		TRIM(GP.CHECKNUMBER) AS CHECK_NUMBER,
		UPPER(TRIM(GP.PAYCODE)) AS PAY_CODE,
		UPPER(TRIM(GP.PAYCODETYPE)) AS PAY_CODE_TYPE,
		SUM(GP.UNITS) AS NUMBER_OF_UNITS,
		SUM(GP.RATE) AS RATE,
		SUM(GP.AMOUNT) AS AMOUNT
	FROM (SELECT * FROM DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.GPALLPAYCHECKDETAILSBASE WHERE AMOUNT <> 0) GP 
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.GPALLPAYCHECKSBASE CB
		ON TRIM(CB.EMPLOYEEID) = TRIM(GP.EMPLOYEEID)
		AND CB.CHECKNUMBER = GP.CHECKNUMBER
		AND CB.CHECKDATE = GP.CHECKDATE
	WHERE GP.AUDITTRAILNUMBER NOT LIKE ''%ABANDONED%''															-- removes "abandoned" batches
	group by 1,2,3,4,5,6,7,8,9,10,11
) --SELECT * FROM PAYROLLDETAILS WHERE TRIM(DEPARTMENT) = '''' OR DEPARTMENT IS NULL;
SELECT DISTINCT
	MD5(''6'' || TRIM(PD.PAY_CODE) || TRIM(PD.PAY_CODE_TYPE) || PD.PAY_PERIOD_START_DATE || PD.PAY_PERIOD_END_DATE || TRIM(PD.EMPLOYEE_ID) || TRIM(PD.CHECK_NUMBER) || ''-'' || ''COSTALSYNCDATA'') AS PAYROLL_DETAIL_KEY,
	MD5( CAST( PD.PAYROLL_DATE AS VARCHAR) || CAST( PD.EMPLOYEE_ID AS varchar) || PD.SYSTEM_CODE || PD.CHECK_NUMBER ) AS PAYROLL_KEY,
	PD.PAYROLL_DATE::DATE AS REPORT_DATE,
	COALESCE(emp.Employee_Key, MD5(TRIM(PD.SYSTEM_CODE) || ''-'' || UPPER(TRIM(PD.EMPLOYEE_ID)) || ''-'' || ''COSTALSYNCDATA'')) AS EMPLOYEE_KEY,
	BRANCH.BRANCH_KEY AS BRANCH_KEY,
	11 AS SOURCE_SYSTEM_ID,
	PD.PAYROLL_DATE::DATE AS PAYROLL_DATE,
	PD.EMPLOYEE_ID AS EMPLOYEE_ID,
	BRANCH.DETAILED_OFFICE_NAME AS BRANCH_NAME,
	PD.SYSTEM_CODE  AS SYSTEM_CODE,
	PD.PAY_PERIOD_START_DATE::DATE AS PAY_PERIOD_START_DATE,
	PD.PAY_PERIOD_END_DATE::DATE AS PAY_PERIOD_END_DATE,
	PD.CHECK_NUMBER AS CHECK_NUMBER,
	PD.PAY_CODE AS PAY_CODE,
	TRIM(CD.DESCRIPTION) AS PAY_CODE_DESCRIPTION,
	PD.PAY_CODE_TYPE AS PAY_CODE_TYPE,
	NULL AS PAY_CODE_TYPE_DESCRIPTION,
	PC.PAY_CODE_CATEGORY AS PAY_CODE_CATEGORY,
	PD.NUMBER_OF_UNITS AS NUMBER_OF_UNITS,
	CASE WHEN PAY_CODE_CATEGORY IN (''REIMBURSEMENT'') THEN ''R''
			WHEN PAY_CODE_CATEGORY IN (''DAILY'') THEN ''D''
			WHEN PAY_CODE_CATEGORY IN (''TRAVEL TIME & MILAGE'') THEN ''M''
			ELSE ''H'' END
			AS UNIT_TYPE_CODE,																		-- need TO confirm
	CASE WHEN PAY_CODE_CATEGORY IN (''REIMBURSEMENT'', ''DAILY'') THEN PAY_CODE_CATEGORY
			WHEN PAY_CODE_CATEGORY IN (''TRAVEL TIME & MILAGE'') THEN ''Mileage''
			ELSE ''Hourly'' END
			AS UNIT_TYPE_DESCRIPTION,																-- need TO confirm
	PD.RATE AS RATE,
	PD.AMOUNT AS AMOUNT,
		-1 AS ETL_TASK_KEY,
		-1 AS ETL_INSERTED_TASK_KEY,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	CURRENT_USER as ETL_INSERTED_BY,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	CURRENT_USER as ETL_LAST_UPDATED_BY,
	0 as ETL_DELETED_FLAG
FROM PAYROLLDETAILS PD
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_EMPLOYEE emp
	ON trim(emp.SYSTEM_CODE) = trim(PD.SYSTEM_CODE)
	AND trim(emp.EMPLOYEE_ID) = trim(PD.EMPLOYEE_ID)
LEFT JOIN DISC_${var.SF_ENVIRONMENT}."STAGE".COASTAL_OFFICE_MAPPING_PAYROLL AS BRANCH_MAPPING
	ON BRANCH_MAPPING.DB = TRIM(PD.DB)
	AND TRIM(BRANCH_MAPPING.DEPARTMENT) = TRIM(PD.DEPARTMENT)
--LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_PAYCODE_MAPPING BRANCH_MAPPING
--	ON BRANCH_MAPPING.SOURCE_SYSTEM_ID = 11
--	AND BRANCH_MAPPING.PAYCODE_MAPPING_KEY = MD5(''11'' || PD.DB || STATECODE || PD.PAY_CODE || PD.PAY_CODE_TYPE || ''-'' || ''COSTALGP'')
LEFT JOIN HAH.DIM_BRANCH AS BRANCH
	ON BRANCH.SYSTEM_CODE = BRANCH_MAPPING.SYSTEM_CODE
	AND BRANCH.OFFICE_CODE = BRANCH_MAPPING.OFFICE_CODE
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.GPALLPAYCODESBASE CD
	ON TRIM(CD.PAY_CODE) = TRIM(PD.PAY_CODE)
	AND CD.DB = PD.DB
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.COSTALSYNCDATA.PAYCODE_CATEGORY PC
	ON TRIM(UPPER(PC.DESCRIPTION)) = TRIM(UPPER(CD.DESCRIPTION));

RETURN ''SUCCESS'';

END;

 EOT
}

