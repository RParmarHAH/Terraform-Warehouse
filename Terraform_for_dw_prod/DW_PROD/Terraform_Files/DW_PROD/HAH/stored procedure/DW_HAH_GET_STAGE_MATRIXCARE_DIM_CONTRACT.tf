resource "snowflake_procedure" "DW_HAH_GET_STAGE_MATRIXCARE_DIM_CONTRACT" {
	name ="GET_STAGE_MATRIXCARE_DIM_CONTRACT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

                BEGIN
    --*****************************************************************************************************************************
-- NAME:  MATRIXCARE_DIM_CONTRACT
--
-- PURPOSE: Creates one row per contract according to MatrixCare-MyData
--
-- DEVELOPMENT LOG:
-- DATE         AUTHOR              NOTES:
-- --------     ------------------- -----------------------------------------------------------------------------------------------
-- 04/30/21		Mir Ali				Initial development
-- 12/20/21     Jay Prajapati       Added CONTRACT_STATE_CODE Logic
-- 03/31/23     Deepen Gajjar       Modified logic for BILLABLE_FLAG & loaded new data in FACT_REVENUE_SUBCATEGORY_CONTRACT_MAPPING table
--*****************************************************************************************************************************
--
INSERT OVERWRITE INTO STAGE.MATRIXCARE_DIM_CONTRACT (
	CONTRACT_KEY, CONTRACT_CODE, SYSTEM_CODE, SOURCE_SYSTEM_ID, CONTRACT_NAME, SERVICE_CODE_ID, SERVICE_KEY,
	DEFAULT_BILL_CODE, PAYROLL_CODE, REVENUE_CATEGORY, REVENUE_SUBCATEGORY_CODE, REVENUE_SUBCATEGORY_NAME, PAYOR_CODE, PAYOR_DESCRIPTION,
	SERVICE_LINE_CODE, SERVICE_LINE_DESCRIPTION, CONTRACT_STATE_CODE, TIME_TRANSLATION_CODE, TIME_TRANSLATION_DIVIDER, PAY_TRAVELS_CODE,
	MILEAGE_FLAG, PAYABLE_FLAG, BILLABLE_FLAG, BILLED_BY_QUARTER_HOURS, BILLED_BY_HALF_HOURS, EFFECTIVE_FROM_DATE, EFFECTIVE_TO_DATE,
	ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE, ETL_INSERTED_BY, ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG, ETL_INFERRED_MEMBER_FLAG)
WITH PAYER_SERVICES AS (
	SELECT DISTINCT FINAL_LIST.PAYERID, FINAL_LIST.SERVICECODEID, 
		IFF(MAX(FINAL_LIST.UNITFLAG_RANK) OVER (PARTITION BY FINAL_LIST.PAYERID, FINAL_LIST.SERVICECODEID) = 1, FIRST_VALUE(FINAL_LIST.UNITFLAG) OVER (PARTITION BY FINAL_LIST.PAYERID, FINAL_LIST.SERVICECODEID ORDER BY 1), NULL) AS UNITFLAG, -- Take the UnitFlag only if there is one unique value for all payer + service combinations
		IFF(MAX(FINAL_LIST.SERVICECODE_RANK) OVER (PARTITION BY FINAL_LIST.PAYERID) = 1, TRUE, FALSE) AS HAS_SINGLE_SERVICE_CODE,
		MAX(FINAL_LIST.ETL_LAST_UPDATED_DATE) OVER (PARTITION BY FINAL_LIST.PAYERID, FINAL_LIST.SERVICECODEID) AS ETL_LAST_UPDATED_DATE
	FROM (
		SELECT DISTINCT LIST.PAYERID, LIST.SERVICECODEID, LIST.UNITFLAG,
			DENSE_RANK() OVER (PARTITION BY LIST.PAYERID, LIST.SERVICECODEID ORDER BY LIST.UNITFLAG) AS UNITFLAG_RANK,
			DENSE_RANK() OVER (PARTITION BY LIST.PAYERID ORDER BY LIST.SERVICECODEID) AS SERVICECODE_RANK, -- Used to determine if there are multiple services
			MAX(LIST.ETL_LAST_UPDATED_DATE) OVER (PARTITION BY LIST.PAYERID, LIST.SERVICECODEID) AS ETL_LAST_UPDATED_DATE
		FROM (
			-- PayerServices setup
			SELECT PAYERSERVICES.PAYSVC_PAYERID AS PAYERID, 
				PAYERSERVICES.PAYSVC_SERVICECODEID AS SERVICECODEID,
				NULLIF(PAYERSERVICES.PAYSVC_DEFAULTBILLRATEUNITFLAG, 0) AS UNITFLAG,
				NVL(MAX(PAYERSERVICES.ETL_LAST_UPDATED_DATE), ''1/1/1900'') AS ETL_LAST_UPDATED_DATE
			FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_PAYERSERVICES AS PAYERSERVICES
			GROUP BY PAYERSERVICES.PAYSVC_PAYERID, PAYERSERVICES.PAYSVC_SERVICECODEID, NULLIF(PAYERSERVICES.PAYSVC_DEFAULTBILLRATEUNITFLAG, 0)
			UNION
			-- Schedules: This logic is coming from MatrixCare_Fact_Visit
			SELECT COALESCE(
					SCHEDULEPAYERS.SCHCP_PAYERID, 
					CLIENTPAYERS.CLIPAY_PAYERID, 
					INVOICEDETAILS.INVD_PAYERID,
					AUTHORIZATIONS.AUTH_PAYERID,
					PAYERBRANCHES.PAYBR_PAYERID) AS PAYERID,
				SCHEDULES.SCH_SERVICECODEID AS SERVICECODEID,
				NULLIF(SCHEDULES.SCH_BILLRATEUNITFLAG, 0) AS UNITFLAG,
				GREATEST(
					NVL(MAX(SCHEDULES.ETL_LAST_UPDATED_DATE), ''1/1/1900''), 
					NVL(MAX(CLIENTPAYERS.ETL_LAST_UPDATED_DATE), ''1/1/1900''),
					NVL(MAX(INVOICEDETAILS.ETL_LAST_UPDATED_DATE), ''1/1/1900''),
					NVL(MAX(AUTHORIZATIONS.ETL_LAST_UPDATED_DATE), ''1/1/1900''),
					NVL(MAX(PAYERBRANCHES.ETL_LAST_UPDATED_DATE), ''1/1/1900'')) AS ETL_LAST_UPDATED_DATE
			FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SCHEDULES AS SCHEDULES
			LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SCHEDULEPAYERS AS SCHEDULEPAYERS
				ON SCHEDULEPAYERS.SCHCP_SCHEDULEID = SCHEDULES.SCH_ID
			LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_CLIENTPAYERS AS CLIENTPAYERS
				ON SCHEDULEPAYERS.SCHCP_ID IS NULL 
					AND CLIENTPAYERS.CLIPAY_CLIENTID = SCHEDULES.SCH_CLIENTID 
			LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_INVOICEDETAILS AS INVOICEDETAILS
				ON SCHEDULEPAYERS.SCHCP_ID IS NULL 
					AND CLIENTPAYERS.CLIPAY_ID IS NULL
					AND INVOICEDETAILS.INVD_SCHEDULEID = SCHEDULES.SCH_ID
			LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_AUTHORIZATION AS AUTHORIZATIONS
				ON SCHEDULEPAYERS.SCHCP_ID IS NULL 
					AND CLIENTPAYERS.CLIPAY_ID IS NULL 
					AND INVOICEDETAILS.INVD_ID IS NULL
					AND AUTHORIZATIONS.AUTH_ADMISSIONID = SCHEDULES.SCH_ADMISSIONID 
			LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_PAYERBRANCHES AS PAYERBRANCHES
				ON SCHEDULEPAYERS.SCHCP_ID IS NULL 
					AND CLIENTPAYERS.CLIPAY_ID IS NULL 
					AND INVOICEDETAILS.INVD_ID IS NULL 
					AND AUTHORIZATIONS.AUTH_ID IS NULL
					AND PAYERBRANCHES.PAYBR_BRANCH_ID = SCHEDULES.SCH_BRANCHID 
			GROUP BY 1, 2, 3
			UNION
			-- Invoices
			SELECT INVOICEHEADER.INVH_PAYERID AS PAYERID, 
				INVOICEDETAILS.INVD_SERVICECODEID AS SERVICECODEID,
				NULLIF(INVOICEDETAILS.INVD_CHARGEUNITFLAG, 0) AS UNITFLAG,
				GREATEST(NVL(MAX(INVOICEHEADER.ETL_LAST_UPDATED_DATE), ''1/1/1900''), NVL(MAX(INVOICEDETAILS.ETL_LAST_UPDATED_DATE), ''1/1/1900'')) AS ETL_LAST_UPDATED_DATE		
			FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_INVOICEHEADER AS INVOICEHEADER
			JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_INVOICEDETAILS AS INVOICEDETAILS
				ON INVOICEDETAILS.INVD_INVHID = INVOICEHEADER.INVH_ID
			GROUP BY INVOICEHEADER.INVH_PAYERID, INVOICEDETAILS.INVD_SERVICECODEID, NULLIF(INVOICEDETAILS.INVD_CHARGEUNITFLAG, 0)
			UNION 
			-- Authorizations
			SELECT AUTHORIZATIONS.AUTH_PAYERID AS PAYERID, 
				AUTHORIZATIONS.AUTH_SERVICECODEID AS SERVICECODEID,
				NULLIF(AUTHORIZATIONS.AUTH_UNITFLAG, 0) AS UNITFLAG,
				NVL(MAX(AUTHORIZATIONS.ETL_LAST_UPDATED_DATE), ''1/1/1900'') AS ETL_LAST_UPDATED_DATE				
			FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_AUTHORIZATION AS AUTHORIZATIONS
			GROUP BY AUTHORIZATIONS.AUTH_PAYERID, AUTHORIZATIONS.AUTH_SERVICECODEID, NULLIF(AUTHORIZATIONS.AUTH_UNITFLAG, 0)
		) AS LIST
	) AS FINAL_LIST
), RESULTS AS (
	SELECT DISTINCT MD5(''MATRIXCARE'' || ''-'' || PAYERS.PAY_ID::STRING || ''-'' || NVL(PAYER_SERVICES.SERVICECODEID::STRING, '''') || ''-'' || ''MATRIXCARE'') AS CONTRACT_KEY,
		PAYERS.PAY_ID::STRING AS CONTRACT_CODE,
		''MATRIXCARE'' AS SYSTEM_CODE,
		7 AS SOURCE_SYSTEM_ID,
		NVL(PAYERTYPES.PAYTYP_NAME, ''Unknown'') || '' - '' || NVL(NULLIF(TRIM(PAYERS.PAY_NAME), ''''), ''Unknown'') AS CONTRACT_NAME,
		PAYER_SERVICES.SERVICECODEID::STRING AS SERVICE_CODE_ID,
		MD5(''MATRIXCARE'' || ''-'' || PAYER_SERVICES.SERVICECODEID::STRING || ''-'' || ''MATRIXCARE'') AS SERVICE_KEY, -- Can be null
		IFF(PAYER_SERVICES.HAS_SINGLE_SERVICE_CODE = TRUE, PAYER_SERVICES.SERVICECODEID::STRING, NULL) AS DEFAULT_BILL_CODE,
		NULL AS PAYROLL_CODE,
		COALESCE(CONTRACT_MAPPING.REVENUE_CATEGORY, SERVICE_MAPPING.SERVICE_LINE) AS REVENUE_CATEGORY,
		COALESCE(CONTRACT_MAPPING.REVENUE_SUBCATEGORY_CODE, SERVICE_MAPPING.SERVICE_LINE_SUBCATEGORY) AS REVENUE_SUBCATEGORY_CODE,
		COALESCE(CONTRACT_MAPPING.REVENUE_SUBCATEGORY_NAME, SERVICE_MAPPING.SERVICE_LINE_SUBCATEGORY_NAME) AS REVENUE_SUBCATEGORY_NAME,
		--''IN'' AS CONTRACT_STATE_CODE, -- Payers have their own state but it''s like FL, MA, KY
		COALESCE(MI_CODE.STATE, ''IN'') AS CONTRACT_STATE_CODE,
		CASE PAYER_SERVICES.UNITFLAG 
			WHEN 60 THEN ''1HR''
			WHEN 30 THEN ''.5HR''
			WHEN 15 THEN ''.25HR'' END AS TIME_TRANSLATION_CODE,
		CASE PAYER_SERVICES.UNITFLAG 
			WHEN 60 THEN 1
			WHEN 30 THEN 2
			WHEN 15 THEN 4 END AS TIME_TRANSLATION_DIVIDER,
		NULL AS PAY_TRAVELS_CODE,
		COALESCE(CONTRACT_MAPPING.MILEAGE_FLAG, SERVICE_MAPPING.MILEAGE_FLAG) AS MILEAGE_FLAG,
		COALESCE(CONTRACT_MAPPING.PAYABLE_FLAG, SERVICE_MAPPING.PAYABLE_FLAG) AS PAYABLE_FLAG,
		--COALESCE(CONTRACT_MAPPING.BILLABLE_FLAG, SERVICE_MAPPING.BILLABLE_FLAG) AS BILLABLE_FLAG,
		CASE WHEN SERVICES.SVCC_REVENUECODE IN (''0'',''1'',''2'') THEN TRUE 
		WHEN SERVICES.SVCC_REVENUECODE = ''3'' THEN FALSE END AS BILLABLE_FLAG,
		CASE PAYER_SERVICES.UNITFLAG 
			WHEN 60 THEN FALSE
			WHEN 30 THEN FALSE
			WHEN 15 THEN TRUE END AS BILLED_BY_QUARTER_HOURS,
		CASE PAYER_SERVICES.UNITFLAG 
			WHEN 60 THEN FALSE
			WHEN 30 THEN TRUE
			WHEN 15 THEN FALSE END AS BILLED_BY_HALF_HOURS,
		TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
	    TO_DATE(''9999-12-31'', ''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_PAYERS AS PAYERS
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_PAYERTYPE AS PAYERTYPES
		ON PAYERTYPES.PAYTYP_ID = PAYERS.PAY_PAYERTYPEID 
	LEFT JOIN PAYER_SERVICES AS PAYER_SERVICES
		ON PAYER_SERVICES.PAYERID = PAYERS.PAY_ID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SERVICECODE AS SERVICES
		ON SERVICES.SVCC_ID = PAYER_SERVICES.SERVICECODEID
	LEFT JOIN HAH.FACT_REVENUE_SUBCATEGORY_CONTRACT_MAPPING AS CONTRACT_MAPPING
		ON CONTRACT_MAPPING.SOURCE_SYSTEM_ID = 7 AND CONTRACT_MAPPING.SYSTEM_CODE = ''MATRIXCARE''
			AND CONTRACT_MAPPING.CONTRACT_CODE = PAYER_SERVICES.PAYERID::STRING AND CONTRACT_MAPPING.SERVICE_CODE = PAYER_SERVICES.SERVICECODEID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}."STAGE".MATRIXCARE_SERVICE_REVENUE_CATEGORY_MAPPING AS SERVICE_MAPPING
		ON SERVICE_MAPPING.SVCC_ID = PAYER_SERVICES.SERVICECODEID 
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}."STAGE".ADAPTIVE_CONTRACTCODE_MAPPING_MI MI_CODE 
		ON MI_CODE.PAYOR_ID = PAYERS.PAY_ID  AND MI_CODE.SERVICE_CODE = COALESCE (SERVICES.SVCC_NAME,SERVICES.SVCC_PAYROLLCODE) 
	WHERE PAYERS.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
		OR PAYERTYPES.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
		OR PAYER_SERVICES.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
		OR SERVICES.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
		OR CONTRACT_MAPPING.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
		OR SERVICE_MAPPING.ETL_LAST_UPDATED_DATE >=  
:STR_CDC_START::timestamp_ntz
)
	SELECT RESULTS.CONTRACT_KEY,
		RESULTS.CONTRACT_CODE,
		RESULTS.SYSTEM_CODE,
		RESULTS.SOURCE_SYSTEM_ID,
		RESULTS.CONTRACT_NAME,
		RESULTS.SERVICE_CODE_ID,
		RESULTS.SERVICE_KEY,
		RESULTS.DEFAULT_BILL_CODE,
		RESULTS.PAYROLL_CODE,
		RESULTS.REVENUE_CATEGORY,
		RESULTS.REVENUE_SUBCATEGORY_CODE,
		RESULTS.REVENUE_SUBCATEGORY_NAME,
		RESULTS.REVENUE_CATEGORY AS PAYOR_CODE,
		RESULTS.REVENUE_CATEGORY || '' - '' || RESULTS.REVENUE_SUBCATEGORY_NAME AS PAYOR_DESCRIPTION,
		RESULTS.REVENUE_CATEGORY AS SERVICE_LINE_CODE,
		RESULTS.REVENUE_CATEGORY || '' - '' || RESULTS.REVENUE_SUBCATEGORY_NAME AS SERVICE_LINE_DESCRIPTION,
		RESULTS.CONTRACT_STATE_CODE,
		RESULTS.TIME_TRANSLATION_CODE,
		RESULTS.TIME_TRANSLATION_DIVIDER,
		RESULTS.PAY_TRAVELS_CODE,
		RESULTS.MILEAGE_FLAG,
		RESULTS.PAYABLE_FLAG,
		RESULTS.BILLABLE_FLAG,
		RESULTS.BILLED_BY_QUARTER_HOURS,
		RESULTS.BILLED_BY_HALF_HOURS,
		RESULTS.EFFECTIVE_FROM_DATE,
		RESULTS.EFFECTIVE_TO_DATE,
		---- ETL FIELDS ----
	    
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
                        
	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	    CURRENT_USER as ETL_INSERTED_BY ,
	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	    CURRENT_USER as ETL_LAST_UPDATED_BY,
	    0 as ETL_DELETED_FLAG,
	    0 AS ETL_INFERRED_MEMBER_FLAG
    FROM RESULTS AS RESULTS;
;
    RETURN ''SUCCESS'';
    END;
    
 EOT
}

