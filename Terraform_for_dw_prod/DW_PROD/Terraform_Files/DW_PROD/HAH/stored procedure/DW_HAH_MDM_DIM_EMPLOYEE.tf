resource "snowflake_procedure" "DW_HAH_MDM_DIM_EMPLOYEE" {
	name ="MDM_DIM_EMPLOYEE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "JAVASCRIPT"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

        var sql = `
    INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.HAH.MDM_DIM_EMPLOYEE
with employee_gp as 
(SELECT *
, RANK() OVER (PARTITION BY emp.ssn,DB
ORDER BY IFF(emp.LAST_DAY_WORKED::date = ''1900-01-01'', ''9999-12-31'', emp.LAST_DAY_WORKED::date) DESC
, emp.LAST_CHECK_DATE DESC, emp.HIRE_DATE DESC, emp.FIRST_CHECK_DATE DESC, ETL_LAST_UPDATED_DATE DESC, ETL_INSERTED_DATE DESC) 
as rnk_ssn
, RANK() OVER (PARTITION BY emp.EMPLOYEE_ID,DB
ORDER BY IFF(emp.LAST_DAY_WORKED::date = ''1900-01-01'', ''9999-12-31'', emp.LAST_DAY_WORKED::date) DESC
, emp.LAST_CHECK_DATE DESC, emp.HIRE_DATE DESC, emp.FIRST_CHECK_DATE DESC, ETL_LAST_UPDATED_DATE DESC, ETL_INSERTED_DATE DESC) 
as rnk_pay
FROM DISC_${var.SF_ENVIRONMENT}.DATA_VAULT.VW_SAT_EMPLOYEE_GP emp),
dataflex_already_in_gp AS
(
    SELECT DFEMP.*,
    ROW_NUMBER() OVER (PARTITION BY DFEMP.HASH_EMPLOYEE_KEY ORDER BY DFEMP.NUMBER DESC,
					DFEMP.UPDATEDTIME DESC,DFEMP.LASTCHECKDATE DESC, DFEMP.DATEADDED DESC) AS rnk_ssn
    FROM DISC_${var.SF_ENVIRONMENT}.DATA_VAULT.VW_SAT_EMPLOYEE_DATAFLEX DFEMP
    INNER JOIN DISC_${var.SF_ENVIRONMENT}.DATA_VAULT.LINK_EMPLOYEE LNKEMP
    ON DFEMP.HASH_EMPLOYEE_KEY = LNKEMP.HASH_EMPLOYEE_KEY
    AND LNKEMP.source_system_id = 5
),
dataflex AS
(
 
    SELECT DFEMP.*,
    ROW_NUMBER() OVER (PARTITION BY HASH_EMPLOYEE_KEY ORDER BY NUMBER DESC,
					UPDATEDTIME DESC,LASTCHECKDATE DESC, DATEADDED DESC) AS rnk_ssn
    FROM DISC_${var.SF_ENVIRONMENT}.DATA_VAULT.VW_SAT_EMPLOYEE_DATAFLEX DFEMP
    WHERE HASH_EMPLOYEE_KEY NOT IN (
      SELECT HASH_EMPLOYEE_KEY FROM DISC_${var.SF_ENVIRONMENT}.DATA_VAULT.LINK_EMPLOYEE LNKEMP
       WHERE LNKEMP.source_system_id = 5)
  
)
SELECT 
    EMP_HUB.HASH_EMPLOYEE_KEY AS EMPLOYEE_KEY,
    EMP_HUB.EMPLOYEE_SID,
	EMP_HUB.RECORD_SOURCE_SYSTEM_ID,	
    CASE WHEN EMP.DOB >= CAST( ''1901-01-01'' AS DATE) AND EMP.DOB <= DATEADD( YEAR, -12, CURRENT_DATE) THEN EMP.DOB
         WHEN CAST(dataflex_gp.DOB AS DATE) >= CAST( ''1901-01-01'' AS DATE) AND CAST(dataflex_gp.DOB AS DATE) 
            <= DATEADD( YEAR, -12, CURRENT_DATE) THEN CAST(dataflex_gp.DOB AS DATE)
    ELSE NULL
    END AS EMPLOYEE_DOB,
    CASE WHEN EMP.HIRE_DATE >= CAST( ''1960-01-01'' AS DATE) AND EMP.HIRE_DATE <= DATEADD( YEAR, +1, CURRENT_DATE) 
              AND EMP.HIRE_DATE >= DATEADD( YEAR, 12, NVL( EMPLOYEE_DOB, CAST(''1948-01-01'' AS DATE))) THEN EMP.HIRE_DATE
         WHEN dataflex_gp.HIREDATE >= CAST( ''1960-01-01'' AS DATE) AND 
         dataflex_gp.HIREDATE <= DATEADD( YEAR, +1, CURRENT_DATE) AND 
         dataflex_gp.HIREDATE >= DATEADD( YEAR, 12, NVL( Employee_DOB, CAST(''1948-01-01'' AS DATE))) 
         THEN CAST( dataflex_gp.HIREDATE AS DATE)
         ELSE NULL END AS EMPLOYEE_HIRE_DATE,
    CASE WHEN  COALESCE(EMP.TERMINATE_DATE,DATAFLEX_GP.TERMINATEDATE) < EMPLOYEE_HIRE_DATE 
    THEN EMPLOYEE_HIRE_DATE ELSE NULL END AS EMPLOYEE_REHIRE_DATE,
    CASE WHEN CAST( EMP.BENEFIT_START_DATE AS DATE) >= CAST( ''1960-01-01'' AS DATE) 
         AND CAST( EMP.Benefit_Start_Date AS DATE) <= DATEADD( YEAR, +1, CURRENT_DATE) AND 
         CAST(EMP.BENEFIT_START_DATE AS DATE) >= DATEADD( YEAR, 12, NVL( Employee_DOB, CAST(''1948-01-01'' AS DATE))) 
         THEN CAST(EMP.BENEFIT_START_DATE AS DATE) ELSE NULL END AS Employee_Benefit_Start_Date,
    CASE WHEN CAST(EMP.FIRST_CHECK_DATE AS DATE) >= CAST( ''1960-01-01'' AS DATE) 
                AND EMP.First_Check_Date <= DATEADD( YEAR, +1, CURRENT_DATE) AND 
                EMP.First_Check_Date >= DATEADD( YEAR, 12, NVL( Employee_DOB, CAST(''1948-01-01'' AS DATE))) 
                THEN CAST( EMP.FIRST_CHECK_DATE AS DATE)
         ELSE NULL
    END AS EMPLOYEE_FIRST_CHECK_DATE,
    CASE WHEN EMP.Last_Check_Date >= CAST( ''1960-01-01'' AS DATE) AND EMP.Last_Check_Date <= DATEADD( YEAR, +1, CURRENT_DATE) AND 
    EMP.Last_Check_Date >= DATEADD( YEAR, 12, NVL( Employee_DOB, CAST(''1948-01-01'' AS DATE))) THEN EMP.Last_Check_Date
         WHEN CAST(dataflex_gp.LastCheckDate AS DATE) >= CAST( ''1960-01-01'' AS DATE) AND 
         CAST( dataflex_gp.LastCheckDate AS DATE) <= DATEADD( YEAR, +1, CURRENT_DATE) AND 
         dataflex_gp.LastCheckDate >= DATEADD( YEAR, 12, NVL( Employee_DOB, CAST(''1948-01-01'' AS DATE))) 
         THEN CAST( dataflex_gp.LastCheckDate AS DATE)
         ELSE NULL
    END AS EMPLOYEE_LAST_CHECK_DATE,
    NULL AS EMPLOYEE_PREFIX,
    CASE WHEN UPPER(TRIM(EMP.FIRST_NAME)) <> '''' AND EMP.FIRST_NAME IS NOT NULL THEN UPPER( TRIM( EMP.FIRST_NAME))
         WHEN UPPER(TRIM(dataflex_gp.FIRSTNAME)) <> '''' THEN UPPER( TRIM(dataflex_gp.FIRSTNAME))
         ELSE NULL
    END AS EMPLOYEE_FIRST_NAME,
    CASE WHEN UPPER( TRIM(EMP.LAST_NAME)) <> '''' AND EMP.LAST_NAME IS NOT NULL THEN UPPER( TRIM(EMP.LAST_NAME))
         WHEN UPPER( TRIM(dataflex_gp.LASTNAME)) <> '''' THEN UPPER( TRIM(dataflex_gp.LASTNAME))
         ELSE NULL
    END AS EMPLOYEE_LAST_NAME,
  CASE WHEN UPPER( TRIM(EMP.MIDDLE_NAME)) <> '''' AND EMP.MIDDLE_NAME IS NOT NULL THEN UPPER( TRIM(EMP.MIDDLE_NAME))
         WHEN UPPER( TRIM(dataflex_gp.MIDDLENAME)) <> '''' THEN UPPER( TRIM(dataflex_gp.MIDDLENAME))
         ELSE NULL
    END AS EMPLOYEE_MIDDLE_NAME,
    NULL AS EMPLOYEE_SUFFIX,
    UPPER(COALESCE(EMP.DEPARTMENT,dataflex_gp.DEPARTMENT)) AS EMPLOYEE_DEPARTMENT,
    SUBSTRING(TRIM(COALESCE(EMP.STATE,EMP.OFFICE_STATE,dataflex_gp.STATE)),1,2) AS EMPLOYEE_STATE_CODE,
    COALESCE(EMP.ZIP,dataflex_gp.ZIP) AS EMPLOYEE_ZIP,
    SUBSTRING(TRIM(COALESCE(EMP.SUTA_STATE,dataflex_gp.STATE)),1,2) AS SUTA_STATE,
    SUBSTRING(TRIM(COALESCE(EMP.WORK_STATE,dataflex_gp.STATE)),1,2) AS WORK_STATE,
    CASE WHEN UPPER(EMP.GENDER_TEXT) IN (''FEMALE'', ''MALE'') THEN UPPER( TRIM(EMP.Gender_Text))
         WHEN dataflex_gp.GENDER = ''F'' THEN ''FEMALE''
         WHEN UPPER(dataflex_gp.Gender) = ''M'' THEN ''MALE''
         ELSE NULL
    END AS EMPLOYEE_GENDER,
    CASE 
         WHEN UPPER( TRIM(EMP.Ethics)) NOT IN ( ''N/A'', '''') THEN TRIM(EMP.Ethics)
         WHEN dataflex_gp.Ethics = ''W'' THEN ''White''
         WHEN dataflex_gp.Ethics = ''B'' THEN ''Black or African American''
         WHEN dataflex_gp.Ethics = ''H'' THEN ''Hispanic or Latino''
         WHEN dataflex_gp.Ethics = ''A'' THEN ''Asian''
         ELSE NULL END AS EMPLOYEE_ETHNICITY,
    CASE WHEN UPPER(TRIM(EMP.EMPLOYMENT_TYPE_TEXT)) <> ''UNKNOWN (         6)'' THEN TRIM(EMP.EMPLOYMENT_TYPE_TEXT)
            ELSE NULL END AS EMPLOYEMENT_TYPE,
    CASE WHEN UPPER( TRIM(EMP.MARITAL_STATUS_TEXT)) NOT IN ( ''N/A'', '''') THEN EMP.MARITAL_STATUS_TEXT
         ELSE NULL
    END AS EMPLOYEE_MARITAL_STATUS,
    CASE WHEN COALESCE(EMP.INACTIVE,TRUE) = TRUE THEN TRUE ELSE 
    CASE WHEN dataflex_gp.ISACTIVE = TRUE 
    AND dataflex_gp.TERMINATEDATE > Employee_Hire_Date THEN TRUE ELSE FALSE END END AS ACTIVE_EMPLOYEE_FLAG,
    CASE WHEN CAST(EMP.Last_Day_Worked AS DATE) >= CAST( ''1960-01-01'' AS DATE) 
    AND CAST(EMP.Last_Day_Worked AS DATE) > Employee_Hire_Date 
    AND CAST(EMP.Last_Day_Worked AS DATE) >= NVL(Employee_Hire_Date, CAST( ''1960-01-01'' AS DATE)) 
    THEN CAST(EMP.Last_Day_Worked AS DATE)
    WHEN dataflex_gp.TerminateDate >= CAST( ''1960-01-01'' AS DATE) 
    AND dataflex_gp.TerminateDate > Employee_Hire_Date 
    AND dataflex_gp.TerminateDate >= NVL( Employee_Hire_Date, CAST( ''1960-01-01'' AS DATE)) THEN dataflex_gp.TerminateDate
         ELSE NULL
    END AS EMPLOYEE_LAST_WORKED_DATE,
    CASE WHEN EMP.TERMINATE_DATE >= CAST( ''1960-01-01'' AS DATE) 
            AND EMP.TERMINATE_DATE > Employee_Hire_Date AND 
                EMP.TERMINATE_DATE >= NVL( Employee_Hire_Date, CAST( ''1960-01-01'' AS DATE)) THEN EMP.TERMINATE_DATE
         WHEN CAST(dataflex_gp.TERMINATEDATE AS DATE) >= CAST( ''1960-01-01'' AS DATE) 
         AND CAST( dataflex_gp.TERMINATEDATE AS DATE) > Employee_Hire_Date AND 
         CAST( dataflex_gp.TERMINATEDATE AS DATE) >= NVL( Employee_Hire_Date, CAST( ''1960-01-01'' AS DATE)) 
         THEN CAST( dataflex_gp.TERMINATEDATE AS DATE)
         ELSE NULL
    END AS EMPLOYEE_TERMINATE_DATE,
    UPPER( TRIM(EMP.REASON_TO_TERM)) AS REASON_TO_TERMINATE,
    TRIM(EMP.JOB_TITLE) AS JOB_TITLE,
    TRIM(EMP.JOB_DESCRIPTION) AS JOB_DESCRIPTION,
    TRIM(EMP.CLASS_ID) AS CLASS_ID,
    TRIM(EMP.WORKERS_COMP) AS WORKERS_COMP,
    case when emp.db = ''HAHIL'' THEN FALSE ELSE COALESCE(CASE WHEN EMP.IS_ADMIN =1 THEN FALSE ELSE TRUE END,TRUE) END AS FIELD_WORKER_FLAG,
    case when emp.db = ''HAHIL'' THEN ''CORPORATE'' WHEN EMP.IS_ADMIN = 0 THEN ''FIELD'' ELSE ''ADMIN'' END AS Employee_Category, --CORPORATE LOGIC ON DB
    case when emp.db = ''HAHIL'' THEN crp_brnch.BRANCH_KEY ELSE brnch.Branch_Key END AS PRIMARY_BRANCH_KEY,
    dataflex_gp.AbleToRehire AS ABLE_TO_REHIRE_FLAG,
    NULL AS PREVIOUS_WORKER_EMPLOYEE_KEY,
    NULL AS PREVIOUS_WORKER_EMPLOYEE_ID,
    NULL AS PREVIOUS_WORKER_TYPE,
    NULL AS PREVIOUS_WORKER_EFFECTIVE_FROM,
    NULL AS PREVIOUS_WORKER_EFFECTIVE_TO,
    `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_TASK_KEY,
        
         
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_INSERTED_TASK_KEY,
        
         convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
         CURRENT_USER as ETL_INSERTED_BY ,
         convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
         CURRENT_USER as ETL_LAST_UPDATED_BY,
         0 as ETL_DELETED_FLAG,
         0 AS ETL_INFERRED_MEMBER_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.DATA_VAULT.HUB_EMPLOYEE EMP_HUB
LEFT JOIN employee_gp EMP
ON EMP.HASH_EMPLOYEE_KEY = EMP_HUB.HASH_EMPLOYEE_KEY
AND EMP.DB = EMP_HUB.RECORD_SYSTEM_CODE 
and EMP.rnk_ssn = 1 and EMP.rnk_pay =1
LEFT JOIN dataflex_already_in_gp dataflex_gp
on dataflex_gp.HASH_EMPLOYEE_KEY = EMP_HUB.HASH_EMPLOYEE_KEY 
and dataflex_gp.rnk_ssn = 1
LEFT OUTER JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_Branch AS brnch ON UPPER( TRIM(dataflex_gp.DBName)) = brnch.System_Code 
AND 3 = brnch.Source_System_ID AND dataflex_gp.OfficeNumber = brnch.Office_Number
LEFT OUTER JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_BRANCH AS crp_brnch on 1 =1 and crp_brnch.branch_name = ''CORPORATE'' and crp_brnch.Source_System_ID=5
WHERE EMP_HUB.RECORD_SOURCE_SYSTEM_ID = 5

UNION ALL

SELECT 
    EMP_HUB.HASH_EMPLOYEE_KEY AS EMPLOYEE_KEY,
    EMP_HUB.EMPLOYEE_SID,
	EMP_HUB.RECORD_SOURCE_SYSTEM_ID,	
    CASE WHEN CAST(dataflex.DOB AS DATE) >= CAST( ''1901-01-01'' AS DATE) AND CAST(dataflex.DOB AS DATE) 
            <= DATEADD( YEAR, -12, CURRENT_DATE) THEN CAST(dataflex.DOB AS DATE)
    ELSE NULL
    END AS EMPLOYEE_DOB,
    CASE WHEN dataflex.HIREDATE >= CAST( ''1960-01-01'' AS DATE) AND 
         dataflex.HIREDATE <= DATEADD( YEAR, +1, CURRENT_DATE) AND 
         dataflex.HIREDATE >= DATEADD( YEAR, 12, NVL( Employee_DOB, CAST(''1948-01-01'' AS DATE))) 
         THEN CAST( dataflex.HIREDATE AS DATE)
         ELSE NULL END AS EMPLOYEE_HIRE_DATE,
    CASE WHEN DATAFLEX.TERMINATEDATE < EMPLOYEE_HIRE_DATE 
    THEN EMPLOYEE_HIRE_DATE ELSE NULL END AS EMPLOYEE_REHIRE_DATE,
    NULL AS Employee_Benefit_Start_Date,
    NULL AS EMPLOYEE_FIRST_CHECK_DATE,
    CASE WHEN CAST(DATAFLEX.LastCheckDate AS DATE) >= CAST( ''1960-01-01'' AS DATE) AND 
         CAST( DATAFLEX.LastCheckDate AS DATE) <= DATEADD( YEAR, +1, CURRENT_DATE) AND 
         DATAFLEX.LastCheckDate >= DATEADD( YEAR, 12, NVL( Employee_DOB, CAST(''1948-01-01'' AS DATE))) 
         THEN CAST( DATAFLEX.LastCheckDate AS DATE)
         ELSE NULL
    END AS EMPLOYEE_LAST_CHECK_DATE,
    NULL AS EMPLOYEE_PREFIX,
    CASE WHEN UPPER(TRIM(DATAFLEX.FIRSTNAME)) <> '''' THEN UPPER( TRIM(DATAFLEX.FIRSTNAME))
         ELSE NULL
    END AS EMPLOYEE_FIRST_NAME,
    CASE WHEN UPPER( TRIM(DATAFLEX.LASTNAME)) <> '''' THEN UPPER( TRIM(DATAFLEX.LASTNAME))
         ELSE NULL
    END AS EMPLOYEE_LAST_NAME,
  CASE WHEN UPPER( TRIM(DATAFLEX.MIDDLENAME)) <> '''' THEN UPPER( TRIM(DATAFLEX.MIDDLENAME))
         ELSE NULL
    END AS EMPLOYEE_MIDDLE_NAME,
    NULL AS EMPLOYEE_SUFFIX,
    UPPER(DATAFLEX.DEPARTMENT) AS EMPLOYEE_DEPARTMENT,
    SUBSTRING(TRIM(DATAFLEX.STATE),1,2) AS EMPLOYEE_STATE_CODE,
    DATAFLEX.ZIP AS EMPLOYEE_ZIP,
    SUBSTRING(TRIM(DATAFLEX.STATE),1,2) AS SUTA_STATE,
    SUBSTRING(TRIM(DATAFLEX.STATE),1,2) AS WORK_STATE,
    CASE WHEN DATAFLEX.GENDER = ''F'' THEN ''FEMALE''
         WHEN UPPER(DATAFLEX.Gender) = ''M'' THEN ''MALE''
         ELSE NULL
    END AS EMPLOYEE_GENDER,
    CASE 
         WHEN DATAFLEX.Ethics = ''W'' THEN ''White''
         WHEN DATAFLEX.Ethics = ''B'' THEN ''Black or African American''
         WHEN DATAFLEX.Ethics = ''H'' THEN ''Hispanic or Latino''
         WHEN DATAFLEX.Ethics = ''A'' THEN ''Asian''
         ELSE NULL END AS EMPLOYEE_ETHNICITY,
    NULL AS EMPLOYEMENT_TYPE,
    NULL AS EMPLOYEE_MARITAL_STATUS,
    DATAFLEX.ISACTIVE AS ACTIVE_EMPLOYEE_FLAG,
    
    CASE 
    WHEN DATAFLEX.TerminateDate >= CAST( ''1960-01-01'' AS DATE) 
    AND DATAFLEX.TerminateDate > Employee_Hire_Date 
    AND DATAFLEX.TerminateDate >= NVL( Employee_Hire_Date, CAST( ''1960-01-01'' AS DATE)) THEN DATAFLEX.TerminateDate
         ELSE NULL
    END AS EMPLOYEE_LAST_WORKED_DATE,
    CASE 
         WHEN CAST(DATAFLEX.TERMINATEDATE AS DATE) >= CAST( ''1960-01-01'' AS DATE) 
         AND CAST( DATAFLEX.TERMINATEDATE AS DATE) > Employee_Hire_Date AND 
         CAST( DATAFLEX.TERMINATEDATE AS DATE) >= NVL( Employee_Hire_Date, CAST( ''1960-01-01'' AS DATE)) 
         THEN CAST( DATAFLEX.TERMINATEDATE AS DATE)
         ELSE NULL
    END AS EMPLOYEE_TERMINATE_DATE,
    NULL AS REASON_TO_TERMINATE,
    NULL AS JOB_TITLE,
    NULL AS JOB_DESCRIPTION,
    NULL AS CLASS_ID,
    NULL AS WORKERS_COMP,
    TRUE AS FIELD_WORKER_FLAG, -- by DEFAULT TRUE???
    ''Field'' AS Employee_Category,
    brnch.Branch_Key AS PRIMARY_BRANCH_KEY,
    DATAFLEX.AbleToRehire AS ABLE_TO_REHIRE_FLAG,
   NULL AS PREVIOUS_WORKER_EMPLOYEE_KEY,
    NULL AS PREVIOUS_WORKER_EMPLOYEE_ID,
    NULL AS PREVIOUS_WORKER_TYPE,
    NULL AS PREVIOUS_WORKER_EFFECTIVE_FROM,
    NULL AS PREVIOUS_WORKER_EFFECTIVE_TO,
    `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_TASK_KEY,
        
         
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_INSERTED_TASK_KEY,
        
         convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
         CURRENT_USER as ETL_INSERTED_BY ,
         convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
         CURRENT_USER as ETL_LAST_UPDATED_BY,
         0 as ETL_DELETED_FLAG,
         0 AS ETL_INFERRED_MEMBER_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.DATA_VAULT.HUB_EMPLOYEE EMP_HUB 
LEFT JOIN dataflex dataflex
on dataflex.HASH_EMPLOYEE_KEY = EMP_HUB.HASH_EMPLOYEE_KEY 
and dataflex.rnk_ssn = 1
LEFT OUTER JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_Branch AS brnch ON UPPER( TRIM(dataflex.DBName)) = brnch.System_Code 
AND 3 = brnch.Source_System_ID AND dataflex.OfficeNumber = brnch.Office_Number
WHERE EMP_HUB.RECORD_SOURCE_SYSTEM_ID = 3;
`;
          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                  // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
	sql = `UPDATE DW_${var.SF_ENVIRONMENT}.HAH.MDM_DIM_EMPLOYEE MDM 
SET PREVIOUS_WORKER_EMPLOYEE_KEY = GP_DATA.EMPLOYEE_KEY,
PREVIOUS_WORKER_EMPLOYEE_ID = GP_DATA.EMPLOYEE_ID,
PREVIOUS_WORKER_TYPE = GP_DATA.Employee_Category,
PREVIOUS_WORKER_EFFECTIVE_FROM = GP_DATA.HIRE_DATE,
PREVIOUS_WORKER_EFFECTIVE_TO = GP_DATA.TERMINATE_DATE
FROM
(
SELECT
HASH_EMPLOYEE_KEY,
MD5(EMPLOYEE_ID || ''-'' || DB || ''-'' || ''5'') AS EMPLOYEE_KEY,
EMPLOYEE_ID,
CASE WHEN IS_ADMIN = 0 THEN ''Field'' ELSE ''Admin'' END AS Employee_Category,
HIRE_DATE,
TERMINATE_DATE
FROM DISC_${var.SF_ENVIRONMENT}.DATA_VAULT.SAT_EMPLOYEE_GP
WHERE SSN IN (SELECT SSN FROM  DISC_${var.SF_ENVIRONMENT}.DATA_VAULT.SAT_EMPLOYEE_GP WHERE DB = ''HAHIL'')
AND DB <> ''HAHIL'') GP_DATA
WHERE GP_DATA.HASH_EMPLOYEE_KEY = MDM.EMPLOYEE_KEY;
`;
	          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
          
 EOT
}

