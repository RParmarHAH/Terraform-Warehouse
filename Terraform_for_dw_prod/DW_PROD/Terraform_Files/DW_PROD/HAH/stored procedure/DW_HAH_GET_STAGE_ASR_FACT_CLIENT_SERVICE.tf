resource "snowflake_procedure" "DW_HAH_GET_STAGE_ASR_FACT_CLIENT_SERVICE" {
	name ="GET_STAGE_ASR_FACT_CLIENT_SERVICE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result VARCHAR;
BEGIN
--*****************************************************************************************************************************
-- NAME:  ASR FACT CLIENT SERVICE
--
-- PURPOSE: Populates Stage ASR FACT CLIENT SERVICE
--
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 05/09/23    VIJAY SHARMA          Initial version
--07/17/23     Nutan Jagnade         effective days logic
--*****************************************************************************************************************************

INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.STAGE.ASR_FACT_CLIENT_SERVICE
WITH DEDUPE AS (SELECT * FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_PLANOFSERVICE  S
QUALIFY ROW_NUMBER() OVER (PARTITION BY S.CUSTOMERID,S.WEEKDAY ,S.EMPLOYEEID ,S.HOURSASSIGNED,
CHECKINTIME,RECURRENCETYPE,SERVICETYPE,PAYERSOURCEID,BILLINGCODEID,
S.VISITSTARTDATE,S.VISITENDDATE
    ORDER BY LASTMODIFIEDON DESC)=1),   --DEDUPE LOGIC TO HANDLE DUPLICATES COMING FROM SOURCE 
 MIN_MAX_VISIT AS (
	SELECT 
		V.SERVICEVISITID, 
		MIN(TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')) AS STARTPOINT, 
		MAX(TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')) AS ENDPOINT 
	FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_VISITS V
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.BRANCH_MAPPING BR ON V.LOCATIONID = BR.OLD_LOCATION_ID
	WHERE NVL(BR.IS_ASR_BRANCH,TRUE) = TRUE
	GROUP BY SERVICEVISITID
) 
-- FOR WEEKLY AND BY_REQUEST RECURRENCE  CALCULATION
,WEEKLY_AUTHS AS (
	SELECT 
      PL.SERVICEVISITID	
	 , D.CALENDAR_DATE	
     ,D.DAY_NAME		 
     ,COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE
	 ,COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE
     , PL.CUSTOMERID   	 
     ,PL.VISITSTARTDATE
	 ,PL.VISITENDDATE		 
     ,PL.SERVICETYPE  
	 ,PL.HOURSASSIGNED
   	 , PL.WEEKDAY
   	 ,PL.RECURRENCETYPE  
     ,NULL AS PICKER
   	 ,NULL AS SKIPPER
   	 , (CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END) AS WEEK_DAYS
	  , CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN PL.HOURSASSIGNED ELSE 0 END AS AUTH_HOURS_PER_DAY
   	  , CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN IFF(PL.HOURSASSIGNED>0,1,0) ELSE 0 END AS DAYS
	  , AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED 
	  ,AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED_NON_ADJUSTED
	  ,IFF(AUTH_HOURS_PER_DAY >24,TRUE,FALSE) AS FLAG
FROM 
DEDUPE PL
	LEFT JOIN
		MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID
 JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
		D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
								ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''t generate INTAKES
							END
		AND D.CALENDAR_DATE <= CASE 
									WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
									WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 14 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 2 weeks ago THEN LOOKUP TILL 14days FOR a possible visit
									ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
								END
		AND CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END = D.DAY_OF_WEEK
	WHERE
		PL.RECURRENCETYPE IN (0,1,7)
)
-- FOR BIWEEKLY, Every 14 Days, Every 3 Weeks, Every 4 Weeks RECURRENCE CALCULATION
, BIWEEKLY_TO_EVERY4WEEK_AUTHS AS (
	SELECT
		PL.SERVICEVISITID,
		D.CALENDAR_DATE,
		D.DAY_NAME,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
		PL.CUSTOMERID,
		PL.VISITSTARTDATE,
		PL.VISITENDDATE,
		PL.SERVICETYPE,
		PL.HOURSASSIGNED,
		PL.WEEKDAY,
		(CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END) AS WEEK_DAYS,
		PL.RECURRENCETYPE,
		CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN PL.HOURSASSIGNED ELSE 0 END AS AUTH_HOURS_PER_DAY,
   	  CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN IFF(PL.HOURSASSIGNED>0,1,0) ELSE 0 END AS DAYS,
	   AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED ,
	  AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED_NON_ADJUSTED,
	 IFF(AUTH_HOURS_PER_DAY >24,TRUE,FALSE) AS FLAG,
		ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
		DEDUPE PL
	LEFT JOIN
		MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
	JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
		D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
								ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
							END
		AND D.CALENDAR_DATE <= CASE 
									WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
									WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 31 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
									ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
								END
		AND CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END = D.DAY_OF_WEEK
	WHERE
		PL.RECURRENCETYPE IN (2,6,9,13)
)
-- FOR MONTHLY RECURRENCE CALCULATION
, MONTHLY_AUTHS AS (
	SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY,WEEK_DAYS, RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED,PICKER FROM (
		SELECT
			PL.SERVICEVISITID,
			D.CALENDAR_DATE,
			D.DAY_NAME,
			--COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
			--COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
			PL.CUSTOMERID,
			PL.VISITSTARTDATE,
			PL.VISITENDDATE,
			PL.SERVICETYPE,
			PL.HOURSASSIGNED,
			PL.WEEKDAY,
			(CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END) AS WEEK_DAYS,
			PL.RECURRENCETYPE,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
			CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN PL.HOURSASSIGNED ELSE 0 END AS AUTH_HOURS_PER_DAY,
		    CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN IFF(PL.HOURSASSIGNED>0,1,0) ELSE 0 END AS DAYS,
			 AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED ,
	     AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED_NON_ADJUSTED,
	        IFF(AUTH_HOURS_PER_DAY >24,TRUE,FALSE) AS FLAG	,  
			ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID, DATE_TRUNC(MONTH,D.CALENDAR_DATE) ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
			DEDUPE PL
		LEFT JOIN
			MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
		JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
			D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
									ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
								END
			AND D.CALENDAR_DATE <= CASE 
										WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
										WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 31 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
										ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
									END
			AND CASE
					WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
					WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
					WHEN PL.WEEKDAY IS NULL THEN 1
					ELSE PL.WEEKDAY
				END = D.DAY_OF_WEEK
		WHERE
			PL.RECURRENCETYPE = 3)
	WHERE PICKER = 1
)
-- FOR BIMONTHLY RECURRENCE CALCULATION
, BIMONTHLY_AUTHS AS (
	SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY,WEEK_DAYS, RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED,PICKER, SKIPPER FROM (
		SELECT
			PL.SERVICEVISITID,
			D.CALENDAR_DATE,
			D.DAY_NAME,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
			PL.CUSTOMERID,
			PL.VISITSTARTDATE,
			PL.VISITENDDATE,
			PL.SERVICETYPE,
			PL.HOURSASSIGNED,
			PL.WEEKDAY,
			PL.RECURRENCETYPE,
			(CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END) AS WEEK_DAYS,
				CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN PL.HOURSASSIGNED ELSE 0 END AS AUTH_HOURS_PER_DAY,
   	  CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN IFF(PL.HOURSASSIGNED>0,1,0) ELSE 0 END AS DAYS,
	   AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED ,
	  AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED_NON_ADJUSTED,
	 IFF(AUTH_HOURS_PER_DAY >24,TRUE,FALSE) AS FLAG,
			ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID, DATE_TRUNC(MONTH,D.CALENDAR_DATE) ORDER BY D.CALENDAR_DATE) AS PICKER,
			DENSE_RANK() OVER (PARTITION BY PL.SERVICEVISITID ORDER BY D.YEAR_MONTH) AS SKIPPER
		FROM
			DEDUPE PL
		LEFT JOIN
			MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
		JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
			D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
									ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
								END
			AND D.CALENDAR_DATE <= CASE 
										WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
										WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 90 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
										ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
									END
			AND CASE
					WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
					WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
					WHEN PL.WEEKDAY IS NULL THEN 1
					ELSE PL.WEEKDAY
				END = D.DAY_OF_WEEK
		WHERE
			PL.RECURRENCETYPE = 8)
	WHERE PICKER = 1 AND SKIPPER % 2 = 1
)
-- FOR SEMI-ANNUAL and Every 6 MONTHS RECURRENCE CALCULATION (Based on assumption, there''s no data to verify this!)
, SEMI_ANNUAL_AUTHS AS (
	SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY,WEEK_DAYS, RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED,PICKER FROM (
		SELECT
			PL.SERVICEVISITID,
			D.CALENDAR_DATE,
			D.DAY_NAME,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
			PL.CUSTOMERID,
			PL.VISITSTARTDATE,
			PL.VISITENDDATE,
			PL.SERVICETYPE,
			PL.HOURSASSIGNED,
			PL.WEEKDAY,
			(CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END) AS WEEK_DAYS,
			PL.RECURRENCETYPE,
			CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN PL.HOURSASSIGNED ELSE 0 END AS AUTH_HOURS_PER_DAY,
   	  CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN IFF(PL.HOURSASSIGNED>0,1,0) ELSE 0 END AS DAYS,
	   AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED ,
	  AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED_NON_ADJUSTED,
	 IFF(AUTH_HOURS_PER_DAY >24,TRUE,FALSE) AS FLAG,
			ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID, DATE_TRUNC(MONTH,D.CALENDAR_DATE) ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
			DEDUPE PL
		LEFT JOIN
			MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
		JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
			D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
									ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
								END
			AND D.CALENDAR_DATE <= CASE 
										WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
										WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(MONTH,V.ENDPOINT,LAST_DAY(GETDATE())) >= 12 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
										ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
									END
			AND CASE
					WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
					WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
					WHEN PL.WEEKDAY IS NULL THEN 1
					ELSE PL.WEEKDAY
				END = D.DAY_OF_WEEK
		WHERE
			PL.RECURRENCETYPE IN (4,15))
	WHERE PICKER % 6 = 1
) 
-- FOR ANNUAL RECURRENCE CALCULATION  (Based on assumption, there''s no data to verify this!)
, ANNUAL_AUTHS AS ( 
	SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY,WEEK_DAYS, RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED,PICKER FROM (
		SELECT
			PL.SERVICEVISITID,
			D.CALENDAR_DATE,
			D.DAY_NAME,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
			PL.CUSTOMERID,
			PL.VISITSTARTDATE,
			PL.VISITENDDATE,
			PL.SERVICETYPE,
			PL.HOURSASSIGNED,
			PL.WEEKDAY,
			(CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END) AS WEEK_DAYS,
			PL.RECURRENCETYPE,
			CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN PL.HOURSASSIGNED ELSE 0 END AS AUTH_HOURS_PER_DAY,
   	  CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN IFF(PL.HOURSASSIGNED>0,1,0) ELSE 0 END AS DAYS,
	  AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED ,
	  AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED_NON_ADJUSTED,
	 IFF(AUTH_HOURS_PER_DAY >24,TRUE,FALSE) AS FLAG,
			ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID, DATE_TRUNC(YEAR,D.CALENDAR_DATE) ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
			DEDUPE PL
		LEFT JOIN
			MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
		JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
			D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
									ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
								END
			AND D.CALENDAR_DATE <= CASE 
										WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
										WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(MONTH,V.ENDPOINT,LAST_DAY(GETDATE())) >= 24 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
										ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
									END
			AND CASE
					WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
					WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
					WHEN PL.WEEKDAY IS NULL THEN 1
					ELSE PL.WEEKDAY
				END = D.DAY_OF_WEEK
		WHERE
			PL.RECURRENCETYPE =5)
	WHERE PICKER % 12 = 1
)
--FOR Every 5 WEEKS and Every 6 WEEKS RECURRENCE CALCULATION
, EVERY_FIVE_TO_SIX_WEEKS_AUTHS AS (
	SELECT
		PL.SERVICEVISITID,
		D.CALENDAR_DATE,
		D.DAY_NAME,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
		PL.CUSTOMERID,
		PL.VISITSTARTDATE,
		PL.VISITENDDATE,
		PL.SERVICETYPE,
		PL.HOURSASSIGNED,
		PL.WEEKDAY,
		(CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END) AS WEEK_DAYS,
		PL.RECURRENCETYPE,
		CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN PL.HOURSASSIGNED ELSE 0 END AS AUTH_HOURS_PER_DAY,
   	  CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN IFF(PL.HOURSASSIGNED>0,1,0) ELSE 0 END AS DAYS,
	   AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED ,
	  AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED_NON_ADJUSTED,
	 IFF(AUTH_HOURS_PER_DAY >24,TRUE,FALSE) AS FLAG,
		ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID ORDER BY D.CALENDAR_DATE) AS PICKER
	FROM
		DEDUPE PL
	LEFT JOIN
		MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
	JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
		D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
								ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
							END
		AND D.CALENDAR_DATE <= CASE 
									WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
									WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 50 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
									ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
								END
		AND CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END = D.DAY_OF_WEEK
	WHERE
		PL.RECURRENCETYPE IN (10,11)
)
--FOR PLANS RECURRING ONCE
, ONE_TIME_AUTHS AS (
	SELECT DISTINCT 
		PL.SERVICEVISITID,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
		COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
		DERIVED_VISIT_START_DATE AS CALENDAR_DATE,
		DAYNAME(CALENDAR_DATE) AS DAY_NAME,
		PL.CUSTOMERID,
		PL.VISITSTARTDATE,
		PL.VISITENDDATE,
		PL.SERVICETYPE,
		PL.HOURSASSIGNED,
		PL.WEEKDAY,
		NULL AS PICKER,
		NULL AS SKIPPER,
		(CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END) AS WEEK_DAYS,
		PL.RECURRENCETYPE,
		CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN PL.HOURSASSIGNED ELSE 0 END AS AUTH_HOURS_PER_DAY,
   	  CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN IFF(PL.HOURSASSIGNED>0,1,0) ELSE 0 END AS DAYS,
		--1 AS DAYS,
	   AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED ,
	  AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED_NON_ADJUSTED,
	 IFF(AUTH_HOURS_PER_DAY >24,TRUE,FALSE) AS FLAG
		--NULL AS PICKER
	FROM
		DEDUPE PL
--	LEFT JOIN
--		MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
--	INNER JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D
--    ON D.CALENDAR_DATE BETWEEN COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT)
--    	AND COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT)
		LEFT JOIN
		MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
	JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
		D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
								ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
							END
		AND D.CALENDAR_DATE <= CASE 
									WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
									WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 50 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 1 month ago THEN LOOKUP TILL 1 month FOR a possible visit
									ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
								END
		AND CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END = D.DAY_OF_WEEK
	WHERE
		PL.RECURRENCETYPE IN (12)
)
-- FOR Every 90 Days RECURRENCE CALCULATION
, EVERY_NINETY_DAYS_AUTHS AS (
	SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY,WEEK_DAYS, RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED,PICKER FROM (
		SELECT
			PL.SERVICEVISITID,
			D.CALENDAR_DATE,
			D.DAY_NAME,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.STARTPOINT) AS DERIVED_VISIT_START_DATE,
			COALESCE(TRY_TO_DATE(TRIM(PL.VISITENDDATE),''MM/DD/YYYY HH12:MI:SS AM''),V.ENDPOINT) AS DERIVED_VISIT_END_DATE,
			PL.CUSTOMERID,
			PL.VISITSTARTDATE,
			PL.VISITENDDATE,
			PL.SERVICETYPE,
			PL.HOURSASSIGNED,
			PL.WEEKDAY,
			(CASE
				WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
				WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
				WHEN PL.WEEKDAY IS NULL THEN 1
				ELSE PL.WEEKDAY
			END) AS WEEK_DAYS,
			PL.RECURRENCETYPE,
			CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN PL.HOURSASSIGNED ELSE 0 END AS AUTH_HOURS_PER_DAY,
   	  CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = WEEK_DAYS THEN IFF(PL.HOURSASSIGNED>0,1,0) ELSE 0 END AS DAYS,
	   AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED ,
	  AUTH_HOURS_PER_DAY AS HOURS_AUTHORIZED_NON_ADJUSTED,
	 IFF(AUTH_HOURS_PER_DAY >24,TRUE,FALSE) AS FLAG,
			ROW_NUMBER() OVER (PARTITION BY PL.SERVICEVISITID ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
			DEDUPE PL
		LEFT JOIN
			MIN_MAX_VISIT V ON PL.SERVICEVISITID = V.SERVICEVISITID -- TO CHECK AND CORRECT DATA ENTRIES AND DERIVE VALUABLE CORRECT INTAKES
		JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
			D.CALENDAR_DATE >= CASE WHEN TRIM(PL.VISITSTARTDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(PL.VISITSTARTDATE),''MM/DD/YYYY HH12:MI:SS AM'')
									ELSE V.STARTPOINT -- IF START DATE IS NOT SPECIFIC, CHECK VISITS TO PUT A LATEST ONE, ELSE, don''T generate INTAKES
								END
			AND D.CALENDAR_DATE <= CASE 
										WHEN TRIM(VISITENDDATE) IS NOT NULL THEN TRY_TO_DATE(TRIM(VISITENDDATE), ''MM/DD/YYYY HH12:MI:SS AM'')
										WHEN TRIM(VISITENDDATE) IS NULL AND DATEDIFF(DAY,V.ENDPOINT,LAST_DAY(GETDATE())) >= 190 THEN V.ENDPOINT -- IF END DATE NOT SPECIFIC AND latest visit was 2 weeks ago THEN LOOKUP TILL 14days FOR a possible visit
										ELSE LAST_DAY(GETDATE()) -- IF END DATE NOT SPECIFIC AND LATEST VISIT was performed under 14days, generate auth till END OF running month
									END
			AND CASE
					WHEN PL.WEEKDAY = 0 THEN 1 -- 0 means ANY which can refer TO FIRST Monday OF the week
					WHEN PL.WEEKDAY = 7 THEN 0 -- 7 means Sunday which IS 0 IN snowflake
					WHEN PL.WEEKDAY IS NULL THEN 1
					ELSE PL.WEEKDAY
				END = D.DAY_OF_WEEK
		WHERE
			PL.RECURRENCETYPE IN (14))
	WHERE PICKER % 90 = 1
)
,TOTAL_AUTHS AS (
	SELECT * FROM (
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY,WEEK_DAYS, RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER 
		FROM WEEKLY_AUTHS -- 0, 1 AND 7
		UNION ALL
		SELECT  SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, WEEK_DAYS,RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER
		FROM BIWEEKLY_TO_EVERY4WEEK_AUTHS WHERE RECURRENCETYPE IN (2,13) AND PICKER % 2 = 1 --2 ,13
		UNION ALL 
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY,WEEK_DAYS, RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER
		FROM BIWEEKLY_TO_EVERY4WEEK_AUTHS WHERE RECURRENCETYPE IN (9) AND PICKER % 4 = 1 --13
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, WEEK_DAYS,RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER 
		FROM BIWEEKLY_TO_EVERY4WEEK_AUTHS WHERE RECURRENCETYPE IN (6) AND PICKER % 3 = 1 --9
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY,WEEK_DAYS, RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER
		FROM MONTHLY_AUTHS --3
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, WEEK_DAYS,RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER
		FROM BIMONTHLY_AUTHS --8
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, WEEK_DAYS,RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER
		FROM SEMI_ANNUAL_AUTHS --4 AND 15
		UNION ALL
		SELECT  SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY,WEEK_DAYS, RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER 
		FROM ANNUAL_AUTHS --5
		UNION ALL
		SELECT  SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, WEEK_DAYS,RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER
		FROM EVERY_FIVE_TO_SIX_WEEKS_AUTHS WHERE RECURRENCETYPE IN (10) AND PICKER % 5 = 1 --10
		UNION ALL
		SELECT  SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY, WEEK_DAYS,RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER 
		FROM EVERY_FIVE_TO_SIX_WEEKS_AUTHS WHERE RECURRENCETYPE IN (11) AND PICKER % 6 = 1 --11
		UNION ALL
		SELECT SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY,WEEK_DAYS, RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER
		FROM ONE_TIME_AUTHS --12
		UNION ALL
		SELECT  SERVICEVISITID, CALENDAR_DATE, DAY_NAME, DERIVED_VISIT_START_DATE, DERIVED_VISIT_END_DATE, CUSTOMERID, VISITSTARTDATE, VISITENDDATE, SERVICETYPE, HOURSASSIGNED, WEEKDAY,WEEK_DAYS, RECURRENCETYPE, 
	AUTH_HOURS_PER_DAY,DAYS,HOURS_AUTHORIZED,HOURS_AUTHORIZED_NON_ADJUSTED ,PICKER
		FROM EVERY_NINETY_DAYS_AUTHS --14
	) WHERE DERIVED_VISIT_START_DATE >= ''2011-01-01'' -- ASR in Prime was started IN 2011-01-01
) ,
CLIENT AS
(
	SELECT * FROM 
	(
		SELECT MASTER_ID, CUSTOMERID, LOCATIONID 
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT * FROM 
	(
		SELECT DISTINCT MASTER_ID, CUSTOMERID, LOCATION_ID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MATCH_LIST 
		WHERE CLIENTID NOT IN (SELECT CLIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MASTER_LIST) 
	)
),
TEMP_SUM_AUTHS AS (
SELECT DISTINCT SERVICEVISITID,
RECURRENCETYPE,
DAY_NAME,
		COALESCE(TRIM(CLIENT.MASTER_ID), TRIM(P.CUSTOMERID)) :: NUMBER AS CLIENT_NUMBER,P.CUSTOMERID,
		WEEKDAY,
		WEEK_DAYS,
		P.CALENDAR_DATE AS REPORT_DATE,
		IFNULL(TRIM(BR.NEW_LOCATION_ID),''UNKNOWN'') AS BRANCH_ID,
		IFNULL(TRIM(BR.NEW_LOCATION_NAME),''UNKNOWN'') AS BRANCH_NAME,
		TRIM(P.SERVICETYPE) AS SERVICE_TYPE,
		SUM(P.HOURSASSIGNED) AS HOURS_ASSIGNED,
		SUM(DAYS) AS DAYS,
   		 SUM(HOURS_AUTHORIZED) AS HOURS_AUTHORIZED,
   		 SUM(HOURS_AUTHORIZED_NON_ADJUSTED) AS HOURS_AUTHORIZED_NON_ADJUSTED,
		MAX(P.DERIVED_VISIT_START_DATE) AS AUTH_START_DATE,
		MAX(P.DERIVED_VISIT_END_DATE) AS AUTH_END_DATE
	FROM TOTAL_AUTHS P
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_CUSTOMERS CUST ON TRIM(P.CUSTOMERID) = TRIM(CUST.CUSTOMERID)
	LEFT JOIN CLIENT ON TRIM(CUST.CUSTOMERID) = TRIM(CLIENT.CUSTOMERID)
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_LOCATIONS LOC ON TRIM(CUST.LOCATIONID) = TRIM(LOC.LOCATIONID)
	JOIN DISC_${var.SF_ENVIRONMENT}.ASR.BRANCH_MAPPING BR ON LOC.LOCATIONID = BR.OLD_LOCATION_ID 
	WHERE P.DERIVED_VISIT_START_DATE IS NOT NULL AND NVL(BR.IS_ASR_BRANCH,TRUE) = TRUE 
	AND CLIENT_NUMBER NOT IN (SELECT CLIENT_NUMBER FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_CLIENT_NUMBER WHERE SOURCE_SYSTEM_ID = 13 AND SYSTEM_CODE = ''PRIME'')
	GROUP BY SERVICEVISITID,RECURRENCETYPE,DAY_NAME,CLIENT_NUMBER,P.CUSTOMERID,WEEKDAY,WEEK_DAYS,REPORT_DATE, BRANCH_ID, BRANCH_NAME, SERVICE_TYPE
)
,
SUM_AUTHS AS (
/*SELECT DISTINCT SERVICEVISITID,CLIENT_NUMBER,BRANCH_ID,BRANCH_NAME,SERVICE_TYPE,
		SUM(HOURS_ASSIGNED) AS HOURS_ASSIGNED,
		AUTH_START_DATE,AUTH_END_DATE
	FROM TEMP_SUM_AUTHS 
	GROUP BY SERVICEVISITID,CLIENT_NUMBER, BRANCH_ID, BRANCH_NAME, SERVICE_TYPE,AUTH_START_DATE,AUTH_END_DATE*/
	SELECT AO.SERVICEVISITID, AO.CUSTOMERID,AO.SERVICE_TYPE,AO.WEEKDAY,AO.WEEK_DAYS,AO.RECURRENCETYPE 
   		 , SUM(DAYS) AS DAYS
   		 , SUM(HOURS_AUTHORIZED) AS HOURS_AUTHORIZED
   		 , SUM(HOURS_AUTHORIZED_NON_ADJUSTED) AS HOURS_AUTHORIZED_NON_ADJUSTED
   		 ,SUM(HOURS_ASSIGNED) AS HOURS_ASSIGNED
   		 ,  AO.Auth_START_Date
    		 ,AO.Auth_END_Date
    FROM TEMP_SUM_AUTHS AO
--    INNER JOIN DEDUPE PL
--   	 ON PL.SERVICEVISITID = AO.SERVICEVISITID 
--   	 AND PL.SERVICETYPE =  AO.SERVICE_TYPE
--   	 AND  PL.CUSTOMERID =  AO.CUSTOMERID
--   	 AND PL.WEEKDAY = AO.WEEKDAY
--	 AND PL.RECURRENCETYPE = AO.RECURRENCETYPE 
    GROUP BY AO.SERVICEVISITID, AO.CUSTOMERID,AO.SERVICE_TYPE,AO.WEEKDAY,AO.WEEK_DAYS,AO.RECURRENCETYPE ,AO.DAY_NAME
,AO.Auth_START_Date,AO.Auth_END_Date
) 
SELECT  DISTINCT 
MD5(''PRIME'' || ''-'' || IFNULL(TRIM(S.PAYERSOURCEID),''-1'') || ''-'' || IFNULL(TRIM(S.SERVICETYPE),''-1'') || ''-'' || TRIM(COALESCE(C.MASTER_ID,S.CUSTOMERID)) || ''-'' || IFNULL(S.SERVICEVISITID, ''-1'') || ''-'' || ''ASR'') AS CLIENT_SERVICE_KEY,
--S.SERVICEVISITID AS SERVICEVISITID ,
--S.RECURRENCETYPE AS RECURRENCETYPE,
--TI.DAY_NAME AS DAY_NAME,
	''13'' AS SOURCE_SYSTEM_ID,
	''PRIME'' AS SYSTEM_CODE,
	MD5(''PRIME'' || ''-'' || IFNULL(TRIM(S.PAYERSOURCEID),''-1'') || ''-'' || IFNULL(TRIM(S.SERVICETYPE),0) || ''-'' || 
	IFNULL(B.BILLINGCODE,''-1'') || ''-'' || ''ASR'') AS PARTNER_CONTRACT_SERVICE_KEY,
	''-1'' AS CLIENT_ADMISSION_KEY, -- Right now, did not find any admission we taken -1
	MD5(''PRIME'' || ''-'' || TRIM(C.MASTER_ID) || ''-'' || ''ASR'') AS CLIENT_KEY,
	MD5(''PRIME'' || ''-'' || IFNULL(SER.SERVICE_TYPE_ID,''0'') || ''-'' || ''ASR'') AS SERVICE_KEY,
	IFNULL(B.BILLINGCODE,''-1'') AS BILL_CODE,
	''Hourly'' AS BILL_TYPE, --??
	NULL AS BILL_UOM,  --??
	''Hourly'' AS SCHEDULE_TYPE, --??
	NULL AS SCHEDULE_UOM, --??
	SER.SERVICE_TYPE_NAME AS AUTHORIZATION_DISCIPLINE,
	COALESCE(TI.AUTH_START_DATE, TO_DATE(S.VISITSTARTDATE,''MM/DD/YYYY HH12:MI:SS AM'')) AS AUTHORIZATION_DATE,
	--TO_DATE(S.VISITSTARTDATE,''MM/DD/YYYY HH12:MI:SS AM'') AS AUTHORIZATION_PERIOD_START_DATE,
	--TO_DATE(S.VISITENDDATE,''MM/DD/YYYY HH12:MI:SS AM'') AS AUTHORIZATION_PERIOD_END_DATE,
	COALESCE(TI.AUTH_START_DATE, TO_DATE(S.VISITSTARTDATE,''MM/DD/YYYY HH12:MI:SS AM'')) AS AUTHORIZATION_PERIOD_START_DATE,
	COALESCE(TI.AUTH_END_DATE, TO_DATE(S.VISITENDDATE,''MM/DD/YYYY HH12:MI:SS AM'')) AS AUTHORIZATION_PERIOD_END_DATE,
    DAYS AS EFFECTIVE_DAYS,
	--
	''Hourly Authorization'' AS AUTHORIZAITON_TYPE,
	CASE WHEN S.RECURRENCETYPE = 0 THEN ''Weekly''
WHEN S.RECURRENCETYPE = 1 THEN ''Weekly''
WHEN S.RECURRENCETYPE = 2 THEN ''BiWeekly''
WHEN S.RECURRENCETYPE = 3 THEN ''Monthly''
WHEN S.RECURRENCETYPE = 4 THEN ''Semi - Annual''
WHEN S.RECURRENCETYPE = 6 THEN ''Every 3 Weeks''
WHEN S.RECURRENCETYPE = 9 THEN ''Every 4 Weeks''
WHEN S.RECURRENCETYPE = 13 THEN ''Every 14 Days''
WHEN S.RECURRENCETYPE = 8 THEN ''BiMonthly''
WHEN S.RECURRENCETYPE = 15 THEN ''Every 6 Months''
WHEN S.RECURRENCETYPE = 5 THEN ''Annual''
WHEN S.RECURRENCETYPE = 10 THEN ''Every 5 Weeks''
WHEN S.RECURRENCETYPE = 11 THEN ''Every 6 Weeks''
WHEN S.RECURRENCETYPE = 12 THEN ''One Time''
WHEN S.RECURRENCETYPE = 14 THEN ''Every 90 Days''
WHEN S.RECURRENCETYPE = 7 THEN ''By Request (Weekly)''
	ELSE NULL 
	END AS  AUTHORIZATION_UOM,
	WEEK_DAYS::VARIANT AS AUTH_INFO,
	S.HOURSASSIGNED AS AUTHORIZATION_MAX_UNITS_BY_UOM, 
	TI.HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS,
    S.HOURSASSIGNED AS AUTHORIZATION_MAX_UNITS_ADJUSTED_BY_UOM, 
    TI.HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS_ADJUSTED,
	iff(current_date() between TO_DATE(S.VISITSTARTDATE,''MM/DD/YYYY HH12:MI:SS AM'') 
	and TO_DATE(S.VISITENDDATE,''MM/DD/YYYY HH12:MI:SS AM''), true, false) AS ACTIVE_FLAG,
	FALSE AS CANCELLED_FLAG,
	 :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
     :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
     convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
     CURRENT_USER  as ETL_INSERTED_BY,
     convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
     CURRENT_USER  as ETL_LAST_UPDATED_BY,
	 0 AS ETL_DELETED_FLAG
	FROM DEDUPE S
    LEFT JOIN SUM_AUTHS TI ON TI.SERVICEVISITID = S.SERVICEVISITID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_PAYERSOURCES AS P ON S.PAYERSOURCEID = P.PAYERSOURCEID 
	LEFT JOIN CLIENT AS C ON C.CUSTOMERID = S.CUSTOMERID 
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_SERVICETYPES SER ON SER.SERVICE_TYPE_ID = S.SERVICETYPE 
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_BILLINGCODES B ON B.BILLINGCODEID = S.BILLINGCODEID;
	
	SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
RETURN return_result;

END;

 EOT
}

