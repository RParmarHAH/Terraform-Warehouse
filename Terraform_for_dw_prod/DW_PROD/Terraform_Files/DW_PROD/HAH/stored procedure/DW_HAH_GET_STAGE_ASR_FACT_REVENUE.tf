resource "snowflake_procedure" "DW_HAH_GET_STAGE_ASR_FACT_REVENUE" {
	name ="GET_STAGE_ASR_FACT_REVENUE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
  RETURN_RESULT VARCHAR(1000);
BEGIN
--****************************************************************************************************************************
-- NAME:  ASR_FACT_REVENUE
--
-- PURPOSE: Creates one row per revenue according to ASR
--
-- PRODELOPMENT LOG:
-- DATE         AUTHOR                  NOTES:
-- --------     -------------------     ---------------------------------------------------------------------------------------
-- 07/04/2022   Jashvant Patel          Initial PRODelopment
-- 07/04/2022   Abhishek Sunil          Revised logic, resolved errors
--13/09/2023    Pooja Bagane            Added logic to get data from ASR_RECEIVABLES,ASR_PAYMENTSRECEIVED and ASR_CLAIMSTATUSES
--22/11/23      Pradeep Thippani        Added bill_unit_type column for RCM(Requested By Natalie)
--*****************************************************************************************************************************


INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.STAGE.ASR_FACT_REVENUE 
WITH CLIENT AS
(
    SELECT * FROM
    (
        SELECT MASTER_ID, CUSTOMERID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MASTER_LIST
    )
    UNION
    SELECT * FROM
    (
        SELECT DISTINCT MASTER_ID, CUSTOMERID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MATCH_LIST
        WHERE CLIENTID NOT IN (SELECT CLIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.CLIENT_MASTER_LIST)
    )
)
, EMPLOYEE AS
(
    SELECT * FROM
    (
        SELECT MASTER_ID, EMPLOYEEID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MASTER_LIST
    )
    UNION
    SELECT * FROM
    (
        SELECT DISTINCT MASTER_ID, EMPLOYEEID
        FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MATCH_LIST
        WHERE EMPLOYEEID NOT IN (SELECT EMPLOYEEID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.ASR.EMPLOYEE_MASTER_LIST)
    )
)
, SUPS AS (
    SELECT DISTINCT
        RAW.CUSTOMERID, COALESCE(RAW.SUPERVISORID, DERIVE.SUPERVISORID) AS SUPERVISORID
    FROM
        CLIENT CLI
    LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_CUSTOMERS RAW ON
        TRIM(CLI.CUSTOMERID) = TRIM(RAW.CUSTOMERID)
    LEFT JOIN DISC_${var.SF_ENVIRONMENT}.ASR.ASR_CUSTOMERS DERIVE ON
        TRIM(CLI.MASTER_ID) = TRIM(DERIVE.CUSTOMERID)
    WHERE COALESCE(RAW.SUPERVISORID, DERIVE.SUPERVISORID) IS NOT NULL
)
,ALL_CONTRACTS AS (
    SELECT SERVICE_TYPE_ID, SERVICE_TYPE_NAME FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_SERVICETYPES S 
    UNION
    SELECT ''0'' AS SERVICE_TYPE_ID, ''UNKNOWN'' AS SERVICE_TYPE_NAME -- DUMMY CONTRACT to retrieve orphan visits
)
, REVENUE_DATA AS (
    SELECT *, EMP.EMPLOYEEID AS DIM_EMP_ID
    FROM
         DISC_${var.SF_ENVIRONMENT}.ASR.ASR_REVENUE PR
    LEFT JOIN 
        DISC_${var.SF_ENVIRONMENT}.ASR.ASR_EMPLOYEES EMP ON EMP.EMPLOYEEPUBLICID = PR.EMPLOYEE_ID
    WHERE BILLING_TRAN_ID_NUMBER NOT IN (SELECT BILLINGTRANSACTIONID FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_RECEIVABLES)
   AND TO_DATE(PR.VISIT_DATE,''MM/DD/YYYY'') < ''2022-06-01'' 
)
, CLEANED_REVENUE AS ( 
    SELECT * FROM 
    (
        SELECT  
            RB.SERVICEVISITACTUALID AS ID,
            RB.EMPLOYEEID,
            RB.INVOICENUMBER,
            RB.CUSTOMERID,
            RB.PAYERSOURCEID,
            RB.LOCATIONID,
            --RB.BILLINGDATE,
            PB.PAID_DATE,
            RB.ISPAID,
            RB.VISITDATE,
            RB.BILLINGTRANSACTIONID,
            RB.BILLEDAMOUNT,
            RB.BILLINGCODEID,
            RB.RATE,
            PB.REIMBAMOUNT,
            RB.SERVICETYPE,
            RB.RATETYPE,
            RB.SERVICEVISITACTUALID,            
            TRY_TO_DATE(TRIM(COALESCE(RB.DATECHECKEDIN,RB.VISITDATE)),''MM/DD/YYYY HH12:MI:SS AM'') AS SERVICE_DATE,
            TRY_TO_DATE(TRIM(PB.PAID_DATE),''MM/DD/YYYY HH:MI:SS AM'') AS PAID_DATE_1
        FROM DISC_${var.SF_ENVIRONMENT}.ASR.ASR_RECEIVABLES RB
        LEFT JOIN (SELECT
PYMT_REC.BILLINGTRANSACTIONID,
max(SPLIT_PART(PYMT_REC.PAIDDATE,'' '',0))::DATE AS PAID_DATE,
sum(REIMBAMOUNT) AS REIMBAMOUNT
from  DISC_${var.SF_ENVIRONMENT}.ASR.ASR_PAYMENTSRECEIVED PYMT_REC
GROUP BY 1) PB
        ON RB.BILLINGTRANSACTIONID=PB.BILLINGTRANSACTIONID --AND RB.VISITDATE=PB.VISITDATE
        WHERE RB.BILLINGTRANSACTIONID IS NOT NULL
    ) 
)
SELECT
    MD5(''PRIME'' || ''-'' || BSVR.BILLING_TRAN_ID_NUMBER || ''-'' || IFNULL(TRIM(COALESCE(EMP.MASTER_ID,BSVR.EMPLOYEE_ID)),''UNKNOWN'') || ''-'' || TRIM(COALESCE(CLI.MASTER_ID,BSVR.CUSTOMER_ID)) || ''-'' || ''ASR'') AS REVENUE_KEY,
    TRY_TO_DATE(TRIM(VISIT_DATE),''MM/DD/YYYY'') AS REPORT_DATE, 
    MD5(''PRIME'' || ''-'' || IFNULL(TRIM(BM.NEW_LOCATION_ID),''UNKNOWN'') || ''-'' || ''ASR'') AS BRANCH_KEY,
    MD5(''PRIME'' || ''-'' || IFNULL(TRIM(COALESCE(EMP.MASTER_ID,BSVR.EMPLOYEE_ID)),''UNKNOWN'') || ''-'' || ''ASR'') AS EMPLOYEE_KEY,
    MD5(''PRIME'' || ''-'' || TRIM(COALESCE(CLI.MASTER_ID,BSVR.CUSTOMER_ID)) || ''-'' || ''ASR'') AS CLIENT_KEY,
    MD5(''PRIME'' || ''-'' || TRIM(ST.SERVICE_TYPE_ID) || ''-'' || ''ASR'') AS CONTRACT_KEY,
    MD5(''PRIME'' || ''-'' || TRIM(BSVR.BILLING_TRAN_ID_NUMBER) || ''-'' || ''ASR'') AS INVOICE_KEY,
    13 AS SOURCE_SYSTEM_ID,
    MD5(''PRIME'' || ''-'' || IFNULL(TRIM(SUPS.SUPERVISORID),''UNKNOWN'') || ''-'' || ''ASR'') AS SUPERVISOR_KEY,
    TO_DATE(BSVR.VISIT_DATE,''MM/DD/YYYY'') AS REVENUE_DATE, 
    NULL AS PAYMENT_DATE, --NEED TO CONFIRM
    IFNULL(TRIM(BM.NEW_LOCATION_NAME),''UNKNOWN'') AS BRANCH_NAME,
    COALESCE(EMP.MASTER_ID,BSVR.EMPLOYEE_ID) AS EMPLOYEE_ID,
    COALESCE(CLI.MASTER_ID,BSVR.CUSTOMER_ID) AS CLIENT_NUMBER,
    ST.SERVICE_TYPE_ID  AS CONTRACT_CODE,
    BSVR.BILLING_TRAN_ID_NUMBER AS INVOICE_NUMBER,
    ''Regular'' AS INVOICE_TYPE,
    CASE WHEN BSVR.BILLING_RATE LIKE ''%hr%''  THEN ''HOURLY''
         WHEN BSVR.BILLING_RATE LIKE ''%vi%'' THEN ''VISIT''
         ELSE NULL END AS BILL_UNIT_TYPE,
    1 AS NUMBER_OF_CLIENTS,
    ''PRIME'' AS SYSTEM_CODE,
    IFNULL(TRIM(SUPS.SUPERVISORID),''UNKNOWN'') AS SUPERVISOR_CODE,
    BSVR.BILLING_CODE AS BILL_CODE,
    TRIM(BSVR.PAYABLE_OR_BILLIABLE_HRS) AS INVOICE_HOURS,
    NULLIF(TRIM(SUBSTRING(BSVR.BILLING_RATE,0,POSITION(''/'',BSVR.BILLING_RATE)-2)),NULL)  AS INVOICE_RATE,
    TRIM(BSVR.BILLING_AMOUNT)  AS AMOUNT_BILLED, 
    IFF(BSVR.IS_PAID = ''TRUE'', BSVR.BILLING_AMOUNT, NULL) AS AMOUNT_COLLECTED,
    (AMOUNT_BILLED - AMOUNT_COLLECTED) AS AMOUNT_OUTSTANDING,
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
    CURRENT_USER AS ETL_INSERTED_BY,
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
    CURRENT_USER AS ETL_LAST_UPDATED_BY,
    FALSE AS ETL_DELETED_FLAG
FROM
    REVENUE_DATA BSVR
LEFT JOIN
    CLIENT CLI ON BSVR.CUSTOMER_ID = CLI.CUSTOMERID
LEFT JOIN
    EMPLOYEE EMP ON BSVR.DIM_EMP_ID = EMP.EMPLOYEEID
LEFT JOIN
    SUPS ON BSVR.CUSTOMER_ID = SUPS.CUSTOMERID
JOIN
    DISC_${var.SF_ENVIRONMENT}.ASR.BRANCH_MAPPING BM ON TRIM(UPPER(BM.OLD_LOCATION_NAME)) = TRIM(UPPER(BSVR.LOCATION))
JOIN 
    ALL_CONTRACTS ST ON IFF(UPPER(TRIM(BSVR.SERVICE_TYPE)) = ''0'',''UNKNOWN'',UPPER(TRIM(BSVR.SERVICE_TYPE)))= UPPER(TRIM(ST.SERVICE_TYPE_NAME))
WHERE  NVL(BM.IS_ASR_BRANCH, TRUE) = TRUE AND TRIM(COALESCE(CLI.MASTER_ID,BSVR.CUSTOMER_ID))
NOT IN (SELECT CLIENT_NUMBER FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_CLIENT_NUMBER WHERE SOURCE_SYSTEM_ID = 13 AND SYSTEM_CODE = ''PRIME'')
UNION 
SELECT 
    MD5(''PRIME'' || ''-'' || RSB.BILLINGTRANSACTIONID || ''-'' || IFNULL(TRIM(COALESCE(EMP.MASTER_ID,RSB.EMPLOYEEID)),''UNKNOWN'') || ''-'' || TRIM(COALESCE(CLI.MASTER_ID,RSB.CUSTOMERID)) || ''-'' || ''ASR'') AS REVENUE_KEY,
    COALESCE (
        TRY_TO_DATE(TRIM(RSB.VISITDATE)), 
        CASE -- WHEN the visit IS RESCHEDULED THEN the visit date IS NOT updated, TO maintain consistency picking it FROM either TIMECHECKEDIN OR RESCHEDULEDTO Date
            WHEN TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'') <> TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
            THEN TRY_TO_DATE(COALESCE(TRIM(V.TIMECHECKEDIN),TRIM(V.RESCHEDULEDTO)),''MM/DD/YYYY HH12:MI:SS AM'')
            ELSE TRY_TO_DATE(TRIM(V.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')
        END,
        TRY_TO_DATE(RSB.VISITDATE ,''MM/DD/YYYY HH12:MI:SS AM'')
    ) AS REPORT_DATE, 
    MD5(''PRIME'' || ''-'' || IFNULL(TRIM(BM.NEW_LOCATION_ID),''UNKNOWN'') || ''-'' || ''ASR'') AS BRANCH_KEY,
    MD5(''PRIME'' || ''-'' || IFNULL(TRIM(COALESCE(EMP.MASTER_ID,RSB.EMPLOYEEID)),''UNKNOWN'') || ''-'' || ''ASR'') AS EMPLOYEE_KEY,
    MD5(''PRIME'' || ''-'' || TRIM(COALESCE(CLI.MASTER_ID,RSB.CUSTOMERID)) || ''-'' || ''ASR'') AS CLIENT_KEY,
    MD5(''PRIME'' || ''-'' || TRIM(ST.SERVICE_TYPE_ID) || ''-'' || ''ASR'') AS CONTRACT_KEY,
    MD5(''PRIME'' || ''-'' || TRIM(RSB.BILLINGTRANSACTIONID) || ''-'' || ''ASR'') AS INVOICE_KEY,
    13 AS SOURCE_SYSTEM_ID,
    MD5(''PRIME'' || ''-'' || IFNULL(TRIM(SUPS.SUPERVISORID),''UNKNOWN'') || ''-'' || ''ASR'') AS SUPERVISOR_KEY,
    TO_DATE((RSB.VISITDATE),''MM/DD/YYYY HH12:MI:SS AM'')  AS REVENUE_DATE, 
    TO_DATE((RSB.PAID_DATE)) AS PAYMENT_DATE, 
    IFNULL(TRIM(BM.NEW_LOCATION_NAME),''UNKNOWN'') AS BRANCH_NAME,
    COALESCE(EMP.MASTER_ID,RSB.EMPLOYEEID) AS EMPLOYEE_ID,
    COALESCE(CLI.MASTER_ID,RSB.CUSTOMERID) AS CLIENT_NUMBER,
    ST.SERVICE_TYPE_ID  AS CONTRACT_CODE,
    RSB.BILLINGTRANSACTIONID AS INVOICE_NUMBER,
    ''Regular'' AS INVOICE_TYPE,
    CASE WHEN RSB.RATETYPE LIKE ''%hr%''  THEN ''HOURLY''
         WHEN RSB.RATETYPE LIKE ''%vi%'' THEN ''VISIT''
         ELSE NULL END AS BILL_UNIT_TYPE,
    1 AS NUMBER_OF_CLIENTS,
    ''PRIME'' AS SYSTEM_CODE,
    IFNULL(TRIM(SUPS.SUPERVISORID),''UNKNOWN'') AS SUPERVISOR_CODE,
    RSB.BILLINGCODEID AS BILL_CODE,
    CASE 
        WHEN DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.TIMECHECKEDIN ,''MM/DD/YYYY HH12:MI:SS AM''), TRY_TO_TIMESTAMP(V.TIMECHECKEDOUT ,''MM/DD/YYYY HH12:MI:SS AM'')) < 0 THEN ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2) -- Negative Hours Served
        WHEN V.TIMECHECKEDIN IS NULL OR V.TIMECHECKEDOUT IS NULL THEN ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.SCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2) 
        WHEN V.TIMECHECKEDIN IS NOT NULL AND V.TIMECHECKEDOUT IS NOT NULL THEN ROUND(DATEDIFF(MINUTE , TRY_TO_TIMESTAMP(V.ACTUALORSCHEDULEDCHECKIN ,''MM/DD/YYYY HH12:MI:SS AM''),TRY_TO_TIMESTAMP(V.ACTUALORSCHEDULEDCHECKOUT ,''MM/DD/YYYY HH12:MI:SS AM''))/60, 2)
    END AS INVOICE_HOURS,
    RSB.RATE  AS INVOICE_RATE,
    RSB.BILLEDAMOUNT AS AMOUNT_BILLED,  
    COALESCE (RSB.REIMBAMOUNT,0) AS AMOUNT_COLLECTED,
    (AMOUNT_BILLED - AMOUNT_COLLECTED) AS AMOUNT_OUTSTANDING, 
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
    CURRENT_USER AS ETL_INSERTED_BY,
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
    CURRENT_USER AS ETL_LAST_UPDATED_BY,
    FALSE AS ETL_DELETED_FLAG
FROM
    CLEANED_REVENUE RSB
LEFT JOIN
    CLIENT CLI ON RSB.CUSTOMERID = CLI.CUSTOMERID
LEFT JOIN
    EMPLOYEE EMP ON RSB.EMPLOYEEID = EMP.EMPLOYEEID
LEFT JOIN
    SUPS ON RSB.CUSTOMERID = SUPS.CUSTOMERID
LEFT JOIN
    DISC_${var.SF_ENVIRONMENT}.ASR.BRANCH_MAPPING BM ON TRIM(UPPER(BM.OLD_LOCATION_ID)) = TRIM(UPPER(RSB.LOCATIONID))
LEFT JOIN
 --ALL_CONTRACTS ST ON IFF(UPPER(TRIM(RSB.SERVICETYPE)) = ''0'',''UNKNOWN'',UPPER(TRIM(RSB.SERVICETYPE)))= UPPER(TRIM(ST.SERVICE_TYPE_NAME))
   ALL_CONTRACTS ST ON RSB.SERVICETYPE = ST.SERVICE_TYPE_ID
LEFT JOIN 
DISC_${var.SF_ENVIRONMENT}.ASR.ASR_SERVICE_TYPE_MAPPING SM ON SM.SERVICE_TYPE_NAME = RSB.SERVICETYPE 
LEFT JOIN 
DISC_${var.SF_ENVIRONMENT}.ASR.ASR_VISITS V ON V.SERVICEVISITACTUALID = RSB.SERVICEVISITACTUALID
WHERE RSB.BILLINGTRANSACTIONID IS NOT NULL AND TRIM(COALESCE(CLI.MASTER_ID,RSB.CUSTOMERID)) NOT IN (SELECT CLIENT_NUMBER FROM DATA_MANAGEMENT.DATA_QUALITY.INVALID_CLIENT_NUMBER WHERE SOURCE_SYSTEM_ID = 13 AND SYSTEM_CODE = ''PRIME'')
AND NVL(BM.IS_ASR_BRANCH, TRUE) = TRUE;

SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
    RETURN return_result;
    END;
    
 EOT
}

