resource "snowflake_view" "DW_HAH_CLONE_CURRENT_VIEW_DF_FACT_VISIT" {
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	name = "CLONE_CURRENT_VIEW_DF_FACT_VISIT"
	statement = <<-SQL
	 with SD_Visits as (
    SELECT
           f.DATE,
           (CASE WHEN try_to_numeric(f.ClientOtherID) is null THEN -1 ELSE f.ClientOtherID END)::INTEGER AS DF_Client_Number,
           CASE WHEN f.agencyID = '38004' THEN 'IN'
                WHEN f.agencyID = '8380' THEN 'IL'
                WHEN f.agencyID = '8463' THEN 'MO'
            ELSE 'UK' END AS DF_SYSTEM_CODE,
           MIN(f.REASONCODE) AS EXCEPTION_REASON_CODE,
           MAX(f.MANUALCONFIRMATION) AS MANUALCONFIRMATION,
           SUM(CASE WHEN (sch.STATUS IN ('02', '03', '04') AND sch.VERIFICATIONTYPE = 'Auto') THEN 1 ELSE 0 END) AS autoconfirm_cnt
    FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_VISITS f
    JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES sch ON f.AGENCYID = sch.AGENCYID AND f.SCHEDULEID = sch.SCHEDULEID
    WHERE f.agencyID IN ('38004','8380','8463' ) --IL,IN,MO
      and f.DATE IS NOT NULL
    group by 1,2,3
),
  code_desc as (
      select REASONCODE, MAX(REASONCODEDESCRIPTION) as EXCEPTION_REASON_DESCRIPTION
      from DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_VISITS
      where REASONCODE <> ''
      group by 1
), CLIENT_DATA AS
(
	SELECT * FROM
	(
		SELECT TRIM(DBNAME) AS MASTER_DBNAME, "NUMBER" AS MASTER_CLIENT_NUMBER, TRIM(DBNAME) AS DBNAME, "NUMBER" AS CLIENT_NUMBER
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.CLIENT_MASTER_LIST
	)
	UNION
	SELECT * FROM
	(
		SELECT TRIM(MASTER.DBNAME) AS MASTER_DBNAME, MASTER."NUMBER" AS MASTER_CLIENT_NUMBER, TRIM(MATCH.DBNAME) AS DBNAME, MATCH."NUMBER" AS CLIENT_NUMBER
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.CLIENT_MATCH_LIST AS MATCH
        JOIN DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.CLIENT_MASTER_LIST AS MASTER 
            ON MASTER.MASTER_ID = MATCH.MASTER_ID
        WHERE MATCH.ID <> MATCH.MASTER_ID
	)
)
, EMPLOYEES AS 
(
	SELECT *,TO_DATE('1900-01-01', 'YYYY-MM-DD') AS EFFECTIVE_FROM_DATE, TO_DATE('9999-12-31', 'YYYY-MM-DD') AS EFFECTIVE_TO_DATE 
	FROM 
	(
		SELECT 
			TRIM(DBNAME) AS MASTER_DBNAME, 
			"NUMBER" AS MASTER_EMPLOYEE_NUMBER,
			TRIM(DBNAME) AS DBNAME, 
			"NUMBER" AS EMPLOYEE_NUMBER 
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.EMPLOYEE_MASTER_LIST
	) 
	UNION
	SELECT *,TO_DATE('1900-01-01', 'YYYY-MM-DD') AS EFFECTIVE_FROM_DATE, TO_DATE('9999-12-31', 'YYYY-MM-DD') AS EFFECTIVE_TO_DATE 
	FROM 
	(
		SELECT 
            TRIM(MASTER.DBNAME) AS MASTER_DBNAME, 
            MASTER."NUMBER" AS MASTER_EMPLOYEE_NUMBER, 
            TRIM(MATCH.DBNAME) AS DBNAME, 
            MATCH."NUMBER" AS EMPLOYEE_NUMBER
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.EMPLOYEE_MATCH_LIST AS MATCH
        JOIN DISC_DEDUPE_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.EMPLOYEE_MASTER_LIST AS MASTER
            ON MASTER.MASTER_ID = MATCH.MASTER_ID
        WHERE MATCH.ID <> MATCH.MASTER_ID
	)
)
SELECT L.*
FROM (
	SELECT
	    --md5(NVL(f.SERVICEDATE::string, '') || '-' || NVL(ts.CLIENTNUMBER::string, '') || '-' || NVL(ts.CONTRACTCODE, '') || '-' || UPPER(NVL(TRIM(ts.EMPLOYEENUMBER), '')) || '-' || NVL(f.DBNAME,'') || '-' || NVL(ts.SUPERVISORCODE::string,'') ) AS VISIT_KEY,
	    MD5(f.DBNAME || '-' || f.REFERENCENO || '-' || f.WEEKENDDATE || '-' || f.SERVICEDATE || '-' || 'DATAFLEXSYNCDATA') AS VISIT_KEY,
	    f.SERVICEDATE AS REPORT_DATE,
	    nvl(b2.BRANCH_KEY, md5(f.DBNAME || '-' || COALESCE(ts.OffceNo, -1) || '-' ||  'DATAFLEXSYNCDATA')) AS BRANCH_KEY,
	    md5(COALESCE(c2.MASTER_DBNAME, f.DBNAME) || '-' || COALESCE(c2.MASTER_CLIENT_NUMBER, ts.CLIENTNUMBER,-1) || '-'  ||  'DATAFLEXSYNCDATA' ) AS CLIENT_KEY,
	    nvl(n2.CONTRACT_KEY, md5(f.DBNAME || '-' || nvl(ts.CONTRACTCODE,'Unknown') || '-'  ||  'DATAFLEXSYNCDATA')) AS CONTRACT_KEY,
	    md5(COALESCE(e.MASTER_DBNAME, f.DBNAME) || '-' || UPPER(COALESCE(e.MASTER_EMPLOYEE_NUMBER, ts.EMPLOYEENUMBER, -1)) || '-'  ||  '1900-01-01' || '-' || 'DATAFLEXSYNCDATA') AS EMPLOYEE_KEY,
	    3 AS SOURCE_SYSTEM_ID,
	    nvl(s2.SUPERVISOR_KEY, md5(f.DBNAME || '-'  || nvl(ts.SUPERVISORCODE,'Unknown-' || f.DBNAME) || '-'  || 'DATAFLEXSYNCDATA')) AS SUPERVISOR_KEY,
	    f.SERVICEDATE AS SERVICE_DATE,
		ts.payrolldate AS PAYROLL_DATE,
	    COALESCE(b.OfficeName, 'Unknown') AS BRANCH_NAME,
	--    ts.CLIENTNUMBER AS CLIENT_NUMBER,
	    COALESCE(c2.MASTER_CLIENT_NUMBER,ts.CLIENTNUMBER, -1) AS CLIENT_NUMBER,
	    ts.CONTRACTCODE AS CONTRACT_CODE,
	--    UPPER(NVL(TRIM(ts.EMPLOYEENUMBER), '')) as EMPLOYEE_ID,
	    UPPER(COALESCE(e.MASTER_EMPLOYEE_NUMBER,ts.EMPLOYEENUMBER, -1)) as EMPLOYEE_ID,
	    f.DBNAME AS SYSTEM_CODE, --BK
	    nvl(ts.SUPERVISORCODE,'-1') AS SUPERVISOR_CODE,
	--     CASE WHEN TRIM(coalesce(sdv.EXCEPTION_REASON_CODE,'')) <> '' OR sdv.MANUALCONFIRMATION = 'Y' THEN 0 ELSE 1 END
	    NVL(autoconfirm_cnt,0) AS CLEAN_SHIFT_FLAG,
	    CASE WHEN f.PAID THEN '05'
	        WHEN f.BILLED THEN '04'
	        ELSE '02' END AS STATUS_CODE,
	    CASE WHEN f.PAID THEN 'Paid'
	        WHEN f.BILLED THEN 'Billed'
	        ELSE 'Confirmed' END AS STATUS_DESCRIPTION,
		SV.REASONCODE as CANCEL_REASON_CODE ,     --    COMMENT 'Reason code for schedule cancellation', 	-- comes from Sandata
		SV.REASONCODEDESCRIPTION as CANCEL_REASON_DESCRIPTION ,
		sch.CANCELREASONNOTES as CANCEL_REASON_NOTES, 
		0 AS EXCEPTION_REASON_FLAG,
		NULL AS RESOLUTION_CODE,
	    NULL AS RESOLUTION_DESCRIPTION,
		sch.REJECTIONCODE AS REJECTION_CODE,							-- comes from Sandata
		r.DESCRIPTION as REJECTION_DESCRIPTION, 
		TS.BILLCODE as BILL_CODE,
		COALESCE(Billrate_Contract.BILL_RATE,Billrate_Contract_Client.BILL_RATE,Billrate_Contract_billcode.BILL_RATE) AS BILL_RATE,
		(SUM(Billrate_Contract_overheadrate.BILL_RATE)/COUNT(1) OVER (PARTITION BY f.DBNAME,COALESCE(c2.MASTER_CLIENT_NUMBER,ts.CLIENTNUMBER, -1),ts.CONTRACTCODE,DATE_TRUNC('DAY',f.SERVICEDATE)))
	   AS Overhead_Rate,
	      SUM( f.SERVICEHOURS) AS HOURS_SERVED,
		SV.COMMENTS AS COMMENTS,                     						-- comes from Sandata
		TS.ISEVV as IS_EVV_FLAG,                  --COMMENT 'Record came from EVV feed',			-- comes from DFTimeSheets
		TS.TIMESHEETTYPE as TIMESHEET_TYPE, 
		TS.TRACKINGID as TRACKING_ID , 
	    -1 AS ETL_TASK_KEY,
	    -1 AS ETL_INSERTED_TASK_KEY,
	    convert_timezone('UTC', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	    CURRENT_USER as ETL_INSERTED_BY ,
	    convert_timezone('UTC', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	    CURRENT_USER as ETL_LAST_UPDATED_BY,
	    0 as ETL_DELETED_FLAG
	FROM DISC_${var.SF_ENVIRONMENT}.DataFlexSyncData.DfTimeSheetHours f
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES sch ON f.DbName = sch.AGENCYID AND f.ReferenceNo = sch.SCHEDULEID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_VISITS SV ON f.DbName = SV.AGENCYID AND f.ReferenceNo = SV.SCHEDULEID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_REJECTIONCODES r ON sch.REJECTIONCODE = r.code AND sch.agencyid = r.AGENCYID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DataFlexSyncData.DfTimeSheets ts
	ON f.DbName = ts.DbName
	    AND f.ReferenceNo = ts.ReferenceNo
	    AND f.WeekendDate = ts.WeekendDate
	LEFT JOIN SD_Visits sdv
	ON f.DBNAME = sdv.DF_SYSTEM_CODE
	    AND ts.CLIENTNUMBER = sdv.DF_Client_Number
	    AND f.SERVICEDATE::date = sdv.DATE
	LEFT JOIN code_desc cd
	ON sdv.EXCEPTION_REASON_CODE = cd.REASONCODE
	LEFT JOIN EMPLOYEES e
	ON TRIM(ts.EMPLOYEENUMBER) = e.EMPLOYEE_NUMBER
		AND ts.DBNAME = e.DBNAME
	    AND f.SERVICEDATE >= e.EFFECTIVE_FROM_DATE
	    AND f.SERVICEDATE < e.EFFECTIVE_TO_DATE
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DataFlexSyncData.DfOffices b
	ON ts.OFFCENO = b.OfficeNumber
		AND ts.DBNAME = b.DBNAME
	LEFT JOIN HAH.DIM_BRANCH b2
	ON b2.BRANCH_NAME = COALESCE(b.OfficeName, 'Unknown')
	    AND b2.SYSTEM_CODE = b.DBNAME
	LEFT JOIN CLIENT_DATA c2
	ON c2.CLIENT_NUMBER = ts.CLIENTNUMBER
	    AND c2.DBNAME = ts.DBNAME
	LEFT JOIN HAH.DIM_CONTRACT n2
	ON n2.CONTRACT_CODE = ts.CONTRACTCODE
	    AND n2.SYSTEM_CODE = ts.DBNAME
	LEFT JOIN HAH.DIM_SUPERVISOR s2
	ON s2.SUPERVISOR_CODE = ts.SUPERVISORCODE
	    AND s2.SYSTEM_CODE = ts.DBNAME
	LEFT OUTER JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DERIVED_BILLRATE Billrate_Contract
	on Billrate_Contract.dbname = f.dbname
	and ts.CONTRACTCODE = Billrate_Contract.CONTRACT_CODE
	and f.SERVICEDATE between Billrate_Contract.EFFECTIVE_FROM_DATE and NVL(Billrate_Contract.EFFECTIVE_TO_DATE,CURRENT_DATE)
	and Billrate_Contract.BILL_RATE_LEVEL = 'contract'
	LEFT OUTER JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DERIVED_BILLRATE Billrate_Contract_Client
	on Billrate_Contract_Client.dbname = f.dbname
	and ts.CONTRACTCODE = Billrate_Contract_Client.CONTRACT_CODE
	and ts.CLIENTNUMBER = Billrate_Contract_Client.CLIENT_NUMBER
	and ts.BILLCODE = Billrate_Contract_Client.Bill_Code
	and f.SERVICEDATE  between Billrate_Contract_Client.EFFECTIVE_FROM_DATE 
	and NVL(Billrate_Contract_Client.EFFECTIVE_TO_DATE,CURRENT_DATE)
	and Billrate_Contract_Client.BILL_RATE_LEVEL = 'clientnumber'
	LEFT OUTER JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DERIVED_BILLRATE Billrate_Contract_billcode
	on Billrate_Contract_billcode.dbname = f.dbname
	and ts.CONTRACTCODE = Billrate_Contract_billcode.CONTRACT_CODE
	and ts.BILLCODE  = Billrate_Contract_billcode.Bill_Code
	and f.SERVICEDATE between Billrate_Contract_billcode.EFFECTIVE_FROM_DATE 
	and NVL(Billrate_Contract_billcode.EFFECTIVE_TO_DATE,CURRENT_DATE)
	and Billrate_Contract_billcode.BILL_RATE_LEVEL = 'BILLCODE'
	LEFT OUTER JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DERIVED_BILLRATE Billrate_Contract_overheadrate
	on Billrate_Contract_overheadrate.dbname = f.dbname
	and ts.CONTRACTCODE = Billrate_Contract_overheadrate.CONTRACT_CODE
	and f.SERVICEDATE between Billrate_Contract_overheadrate.EFFECTIVE_FROM_DATE 
	and NVL(Billrate_Contract_overheadrate.EFFECTIVE_TO_DATE,CURRENT_DATE)
	and Billrate_Contract_overheadrate.BILL_RATE_LEVEL = 'OVERHEADRATE'
	where f.SERVICEHOURS <> 0 AND F.SERVICEDATE>='2018-01-01'
	GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,33,34,35
) L
LEFT JOIN HAH.FACT_SYSTEM_CUTOVER_DATE AS CUTOVER
	ON CUTOVER.SOURCE_SYSTEM_ID = L.SOURCE_SYSTEM_ID 
		AND CUTOVER.SYSTEM_CODE = L.SYSTEM_CODE
		AND NVL(CUTOVER.BRANCH_KEY, L.BRANCH_KEY) = L.BRANCH_KEY
		AND NVL(CUTOVER.CONTRACT_KEY, L.CONTRACT_KEY) = L.CONTRACT_KEY
WHERE L.SERVICE_DATE BETWEEN NVL(CUTOVER.START_DATE, L.SERVICE_DATE) AND NVL(CUTOVER.END_DATE, L.SERVICE_DATE);
SQL
	or_replace = true 
	is_secure = false 
}

