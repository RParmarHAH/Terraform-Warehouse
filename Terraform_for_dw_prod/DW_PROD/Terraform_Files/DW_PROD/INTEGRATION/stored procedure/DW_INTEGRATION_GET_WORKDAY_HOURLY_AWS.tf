resource "snowflake_procedure" "DW_INTEGRATION_GET_WORKDAY_HOURLY_AWS" {
	name ="GET_WORKDAY_HOURLY_AWS"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "INTEGRATION"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN
	/*****************************************************************************************************************************
	NAME:  	 GET_WORKDAY_HOURLY_AWS

	DATE           AUTHOR                			NOTES:
	---------- 	   -------------------   			----------------------------------------------------------------------------------------------- 
	08/12/2023     Komal Dhokai/Ravi Suthar    		Initial development for AWS Workday Execution
	*****************************************************************************************************************************/

--ALTER REPLICATION GROUP AWS_LANDING_${var.SF_ENVIRONMENT}_REPL REFRESH;

-----HIST AND CURRENT LOAD-------- (IN AZURE)

CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_AUDIT(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_QUALIFICATIONS_CERTIFICATION_ACHIEVEMENT(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_RELATED_PERSON(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_RELATED_PERSON_ADDRESS_DATA(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_RELATED_PERSON_EMAIL_DATA(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_RELATED_PERSON_NAME_DATA(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_RELATED_PERSON_PHONE_DATA(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_ADDITIONAL_INFORMATION(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_ADDRESS_DATA(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_COMPENSATION(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_EMAIL_DATA(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_IDENTIFICATION_DATA(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_LEAVE_OF_ABSENCE(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_NAME_DATA(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_ORGANIZATION_DATA(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_PERSONAL(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_PHONE_DATA(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_POSITION_DATA(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_STATUS(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_SUMMARY(:STR_ETL_TASK_KEY);
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_SUPERVISOR(:STR_ETL_TASK_KEY);

CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_REMOTE_LOCATIONS_POST_PROCESSING();
CALL DISC_${var.SF_ENVIRONMENT}.WORKDAY.GET_WORKER_EXCLUDE_LIST_POST_PROCESSING();


------Business Layer ------------------ (IN AZURE)


CALL DW_${var.SF_ENVIRONMENT}.HAH.GET_STAGE_WORKDAY_DIM_EMPLOYEE(:STR_ETL_TASK_KEY, ''1900-01-01'', ''9999-01-01'');
CALL DW_${var.SF_ENVIRONMENT}.HAH.MERGE_STAGE_WORKDAY_DIM_EMPLOYEE();
CALL DW_${var.SF_ENVIRONMENT}.HAH.DELETE_STAGE_WORKDAY_DIM_EMPLOYEE();
CALL DW_${var.SF_ENVIRONMENT}.HAH.GET_STAGE_WORKDAY_DIM_APPLICANT(:STR_ETL_TASK_KEY, ''1900-01-01'', ''9999-01-01'');
CALL DW_${var.SF_ENVIRONMENT}.HAH.MERGE_STAGE_WORKDAY_DIM_APPLICANT();
CALL DW_${var.SF_ENVIRONMENT}.HAH.DELETE_STAGE_WORKDAY_DIM_APPLICANT();




--- snowflake dedupe process to compare applicant with crosswalk data (IN AZURE)
CALL DW_${var.SF_ENVIRONMENT}.INTEGRATION."WORKDAY_CROSSWALK_DEDUPE"(''APPLICANT_CROSSWALK_EMPLOYEE'',    --- rules
                                                   ''DW_${var.SF_ENVIRONMENT}.INTEGRATION.VW_APPLICANT_CROSSWALK_INPUT'',  --input view
                                                   ''DW_${var.SF_ENVIRONMENT}.INTEGRATION.VW_APPLICANT_CROSSWALK_OUTPUT'', --output view
                                                   ''DW_${var.SF_ENVIRONMENT}.INTEGRATION.APPLICANT_CROSSWALK_DEDUPE_OUTPUT''     --output table 
                                                  );  


-- create mapping table for applicant  and crosswalk data  (IN AZURE)
call DW_${var.SF_ENVIRONMENT}.INTEGRATION.GET_APPLICANT_CROSSWALK_MAPPING(:STR_ETL_TASK_KEY,1,1);

--- snowflake dedupe process to compare employee with crosswalk data  (IN AZURE)
CALL DW_${var.SF_ENVIRONMENT}.INTEGRATION."WORKDAY_CROSSWALK_DEDUPE"(''WORKDAY_CROSSWALK_EMPLOYEE'',    --- rules
                                                   ''DW_${var.SF_ENVIRONMENT}.INTEGRATION.VW_WORKDAY_CROSSWALK_DEDUPE_INPUT'',  --input view
                                                   ''DW_${var.SF_ENVIRONMENT}.INTEGRATION.VW_WORKDAY_CROSSWALK_DEDUPE_OUTPUT'', --output view
                                                   ''DW_${var.SF_ENVIRONMENT}.INTEGRATION.WORKDAY_CROSSWALK_DEDUPE_OUTPUT''     --output table 
                                                  );  

-- create mapping table for workday and crosswalk data  (IN AZURE)
call DW_${var.SF_ENVIRONMENT}.INTEGRATION.GET_WORKDAY_CROSSWALK_MAPPING(:STR_ETL_TASK_KEY,1,1);




------UPDATE DATA INTO CROSSWALK ------------------ (IN AZURE)

CALL DW_${var.SF_ENVIRONMENT}.INTEGRATION.UPDATE_EMPLOYEE_CROSS_WALK_HOURLY(''PROD'',:STR_ETL_TASK_KEY);

RETURN ''SUCCESSFUL'';
END;

 EOT
}

