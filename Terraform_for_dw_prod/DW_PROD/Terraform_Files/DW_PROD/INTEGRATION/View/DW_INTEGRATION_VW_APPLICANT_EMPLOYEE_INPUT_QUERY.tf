resource "snowflake_view" "DW_INTEGRATION_VW_APPLICANT_EMPLOYEE_INPUT_QUERY" {
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "INTEGRATION"
	name = "VW_APPLICANT_EMPLOYEE_INPUT_QUERY"
	statement = <<-SQL
	 
select distinct ID,
EMPLOYEE_KEY,
EMPLOYEE_ID,
SYSTEM_CODE,
SOURCE_SYSTEM_ID,
case when SSN is null then random() else REGEXP_REPLACE(SSN,'-','')::NUMBER end SSN,
case when DATE_OF_BIRTH::varchar is null then randstr(5,random()) else DATE_OF_BIRTH::varchar end as  DOB,
APPLIED_DATE,
HIRED_DATE,
HIRED_DATE_MONTH,
NAME,
FIRST_NAME,
LAST_NAME,
case when PHONE is null then randstr(5,random()) else PHONE end PHONE,
case when EMAIL is null then randstr(5,random()) else EMAIL end EMAIL,
case when ADDRESS is null then randstr(5,random()) else ADDRESS end ADDRESS,
CITY,
STATE,
POSTAL,
BRANCH_KEY,
BRANCH_NAME,
ETL_INSERTED_DATE,
EMPLOYEE_LAST_CHECK_DATE,EMPLOYEE_FIRST_CHECK_DATE,EMPLOYEE_LAST_WORKED_DATE,EMPLOYEE_HIRE_DATE,SOURCE_SYSTEM
from (
SELECT distinct D.APPLICANT_KEY AS ID, D.APPLICANT_KEY AS EMPLOYEE_KEY, APPLICANT_ID as EMPLOYEE_ID,D.SYSTEM_CODE,D.SOURCE_SYSTEM_ID,HEX_DECODE_STRING(SSN) as SSN ,DATE_OF_BIRTH ,
null as APPLIED_DATE, null as HIRED_DATE,MONTH(TO_DATE(F.HIRED_DATETIME)) HIRED_DATE_MONTH,FIRST_NAME || LAST_NAME AS NAME,
FIRST_NAME,LAST_NAME,MOBILE_PHONE AS PHONE,
EMAIL,ADDRESS,CITY,STATE,POSTAL,BRANCH_KEY,BRANCH_NAME,D.ETL_INSERTED_DATE,NULL AS EMPLOYEE_LAST_CHECK_DATE,NULL AS EMPLOYEE_FIRST_CHECK_DATE,
NULL AS EMPLOYEE_LAST_WORKED_DATE, NULL AS EMPLOYEE_HIRE_DATE,'APPLICANT' AS SOURCE_SYSTEM 
FROM  DW_${var.SF_ENVIRONMENT}.HAH.DIM_APPLICANT  D
LEFT JOIN  DW_${var.SF_ENVIRONMENT}.HAH.FACT_APPLICANT_STATUS F ON D.APPLICANT_KEY = F.APPLICANT_KEY  -- 27
WHERE D.SYSTEM_CODE  = 'WORKDAY' AND D.LINKED_ID IS NULL and APPLICANT_STATUS_KEY <> 'ba82094d90356a2d233637dd65d4dce0'
union all
SELECT distinct ID,EMPLOYEE_KEY,EMPLOYEE_ID,SYSTEM_CODE,SOURCE_SYSTEM_ID,SSN as SSN,DOB,APPLIED_DATE,HIRED_DATE,HIRED_DATE_MONTH,FIRST_NAME || LAST_NAME AS NAME,
FIRST_NAME,LAST_NAME,PHONE,EMAIL,ADDRESS,CITY,STATE,POSTAL,BRANCH_KEY,BRANCH_NAME,ETL_INSERTED_DATE,EMPLOYEE_LAST_CHECK_DATE,EMPLOYEE_FIRST_CHECK_DATE,
EMPLOYEE_LAST_WORKED_DATE,EMPLOYEE_HIRE_DATE,SOURCE_SYSTEM FROM 
	(SELECT ID,EMPLOYEE_KEY,EMPLOYEE_ID,VW.SYSTEM_CODE,VW.SOURCE_SYSTEM_ID,NVL(HEX_DECODE_STRING(APP.SSN), VW.SSN) AS SSN, NVL(APP.DATE_OF_BIRTH, VW.DOB) AS DOB,APPLIED_DATE,
	HIRED_DATE,HIRED_DATE_MONTH,NVL(APP.FIRST_NAME, VW.FIRST_NAME) AS FIRST_NAME , NVL(APP.LAST_NAME, VW.LAST_NAME) AS LAST_NAME,PHONE,NVL(APP.EMAIL, VW.EMAIL) AS EMAIL ,
		NVL(APP.ADDRESS,VW.ADDRESS) AS ADDRESS  ,NVL(APP.CITY, VW.CITY) AS CITY,NVL(APP.STATE, VW.STATE) AS STATE,NVL(APP.POSTAL, VW.POSTAL) AS POSTAL ,BRANCH_KEY,BRANCH_NAME,VW.ETL_INSERTED_DATE,EMPLOYEE_LAST_CHECK_DATE,
	EMPLOYEE_FIRST_CHECK_DATE,EMPLOYEE_LAST_WORKED_DATE,EMPLOYEE_HIRE_DATE,'APPLICANT' AS SOURCE_SYSTEM 
	FROM DW_${var.SF_ENVIRONMENT}.INTEGRATION.VW_JAZZHR_PARADOX_MASTER_LIST VW 
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.VW_WORKDAY_PARADOX_APPLICANT_MAPPING PWM
		ON VW.EMPLOYEE_KEY = PWM.PARADOX_APPLICANT_KEY 
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_APPLICANT APP 
		ON APP.APPLICANT_KEY = PWM.WORKDAY_APPLICANT_KEY  
	)
UNION ALL 
SELECT DISTINCT EMPLOYEE_KEY AS ID,EMPLOYEE_KEY,EMPLOYEE_ID,SYSTEM_CODE,SOURCE_SYSTEM_ID,HEX_DECODE_STRING(EMPLOYEE_PID) AS SSN,TRY_TO_DATE(EMPLOYEE_DOB) DOB,
NULL AS APPLIED_DATE,TRY_TO_DATE(EMPLOYEE_HIRE_DATE) HIRED_DATE,MONTH(TRY_TO_DATE(EMPLOYEE_HIRE_DATE)) HIRED_DATE_MONTH,EMPLOYEE_FIRST_NAME || EMPLOYEE_LAST_NAME AS NAME,
UPPER(REGEXP_REPLACE(EMPLOYEE_FIRST_NAME, '[^A-ZA-Z]','')) FIRST_NAME,
UPPER(REGEXP_REPLACE(EMPLOYEE_LAST_NAME, '[^A-ZA-Z]','')) LAST_NAME,
TRIM(REGEXP_REPLACE(REPLACE(COALESCE(EMPLOYEE_HOME_PHONE,EMPLOYEE_CELL_PHONE,EMPLOYEE_WORK_PHONE), '+1',''), '[^0-9]','')) PHONE,
UPPER(TRIM(COALESCE(EMPLOYEE_PERSONAL_EMAIL,EMPLOYEE_WORK_EMAIL))) EMAIL,UPPER(TRIM(COALESCE(EMPLOYEE_ADDRESS1,EMPLOYEE_ADDRESS2))) ADDRESS,
UPPER(TRIM(EMPLOYEE_CITY)) CITY,COALESCE(PRIMARY_BRANCH_STATE, WORK_STATE) STATE,TRIM(REGEXP_REPLACE(EMPLOYEE_ZIP, '[^0-9]', '')) POSTAL,PRIMARY_BRANCH_KEY BRANCH_KEY,
PRIMARY_BRANCH_NAME BRANCH_NAME,ETL_INSERTED_DATE,EMPLOYEE_LAST_CHECK_DATE,EMPLOYEE_FIRST_CHECK_DATE,EMPLOYEE_LAST_WORKED_DATE,EMPLOYEE_HIRE_DATE,
'EMPLOYEE' AS SOURCE_SYSTEM FROM DW_${var.SF_ENVIRONMENT}.INTEGRATION.DIM_EMPLOYEE_AMS_MERGED 
 WHERE COALESCE(EMPLOYEE_HIRE_DATE,CURRENT_dATE) >= '2019-11-21' and employee_key not in ('8a060032368b0b38711dcf37a92a9f4c')
AND FIRST_NAME <> 'TEST'    
UNION
SELECT FAS.APPLICANT_STATUS_KEY AS ID,
       FAS.APPLICANT_KEY AS EMPLOYEE_KEY,APP.APPLICANT_ID AS EMPLOYEE_ID,FAS.SYSTEM_CODE,FAS.SOURCE_SYSTEM_ID,
       DE.EMPLOYEE_PID AS SSN, APP_WDAY.DATE_OF_BIRTH AS DOB, FAS.DATE_APPLIED  AS APPLIED_DATE,
       DE.EMPLOYEE_HIRE_DATE  AS HIRED_DATE, MONTH(TRY_TO_DATE( DE.EMPLOYEE_HIRE_DATE)) AS HIRED_DATE_MONTH,
       APP.FIRST_NAME || APP.LAST_NAME AS NAME,APP.FIRST_NAME AS EMPLOYEE_FIRST_NAME,APP.LAST_NAME AS EMPLOYEE_LAST_NAME,
       APP_WDAY.MOBILE_PHONE AS PHONE,APP_WDAY.EMAIL AS EMAIL, APP_WDAY.ADDRESS AS ADDRESS,APP_WDAY.CITY AS CITY,APP_WDAY.STATE AS STATE,APP_WDAY.POSTAL AS       
       POSTAL,FAS.BRANCH_KEY,FAS.BRANCH_NAME,APP.ETL_INSERTED_DATE,DE.EMPLOYEE_LAST_CHECK_DATE,DE.EMPLOYEE_FIRST_CHECK_DATE,
       DE.EMPLOYEE_LAST_WORKED_DATE,DE.EMPLOYEE_HIRE_DATE,'APPLICANT' AS SOURCE_SYSTEM
FROM DW_${var.SF_ENVIRONMENT}.HAH.FACT_APPLICANT_STATUS FAS
LEFT JOIN  DW_${var.SF_ENVIRONMENT}.HAH.DIM_APPLICANT APP
    ON APP.APPLICANT_KEY  = FAS.APPLICANT_KEY    
LEFT JOIN  DW_${var.SF_ENVIRONMENT}.HAH.DIM_APPLICANT APP_WDAY
    ON FAS.CANDIDATE_ID = APP_WDAY.LINKED_ID 
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_EMPLOYEE DE
    ON DE.EMPLOYEE_ID = APP_WDAY.APPLICANT_ID
WHERE FAS.SOURCE_SYSTEM_ID = 12 
    AND FAS.HIRED_DATETIME ::DATE IS NULL
    AND DE.EMPLOYEE_HIRE_DATE IS NOT NULL
QUALIFY ROW_NUMBER() OVER(PARTITION BY FAS.APPLICANT_KEY, FAS.SOURCE_SYSTEM_ID ORDER BY FAS.ETL_INSERTED_DATE DESC) = 1
 );
SQL
	or_replace = true 
	is_secure = false 
}

