resource "snowflake_procedure" "DW_REPORT_GET_REPORT_TOP_OFFENDERS_EXCEPTION_DETAILS_BY_WEEK" {
	name ="GET_REPORT_TOP_OFFENDERS_EXCEPTION_DETAILS_BY_WEEK"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT


--*****************************************************************************************************************************
-- NAME:  TOP_OFFENDERS_EXCEPTION_DETAILS_BY_WEEK
--
-- PURPOSE: Creates top offender exception summary by week
-- DESCRIPTION: Provides a detailed summary of Exceptions per employee, per branch, weekly for the past 1 year
-- 				to capture top offender per branch
--
-- DEVELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 19/05/2023	Naresha Bhat 		    Initial Development
-- 22/09/2023	Diya Mistry		        Added Category_key and Category field 
--*****************************************************************************************************************************

DECLARE
    return_result VARCHAR;
BEGIN

INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.REPORT.TOP_OFFENDERS_EXCEPTION_DETAILS_BY_WEEK
WITH FILTERED_VISITS AS (
	SELECT
		DT.HAH_CURRENT_WEEK_FIRST_DAY AS SERVICE_WEEK,
		VISIT_EXCEPTION_KEY,
		VISIT_KEY,
		EXCEPTION_KEY,
		SERVICE_DATE,
		EXCEPTION_CODE
	FROM
		DW_${var.SF_ENVIRONMENT}.HAH.FACT_VISIT_EXCEPTION FVE
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE DT 
		ON FVE.SERVICE_DATE = DT.CALENDAR_DATE
	WHERE SERVICE_WEEK >= DATE_TRUNC(''WEEK'',DATEADD(''YEAR'',-1,CURRENT_DATE))
)
, VISITS AS (
	SELECT 
		VISIT_KEY,
		BRANCH_KEY,
		EMPLOYEE_KEY,
		EMPLOYEE_ID
	FROM 
		DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_VISIT_MERGED
)
, BRANCH AS (
	SELECT
		ORIGINAL_BRANCH_KEY,
		BRANCH_NAME
	FROM 
		DW_${var.SF_ENVIRONMENT}.INTEGRATION.DIM_BRANCH_MERGED
)
, EXCEPTIONS AS (
	SELECT
		FVE.SERVICE_WEEK,
		FVM.BRANCH_KEY,
		DBM.BRANCH_NAME,
		FVM.EMPLOYEE_KEY,
		FVM.EMPLOYEE_ID,
		NULLIF(COALESCE(DEM.EMPLOYEE_FIRST_NAME, '''') || '' '' || COALESCE(DEM.EMPLOYEE_LAST_NAME, ''''),'''') AS EMPLOYEE_NAME,
		DVE.EXCEPTION_CODE, 
		DVE.EXCEPTION_DESC, 
		COUNT(DISTINCT FVE.VISIT_KEY) AS TOTAL_VISITS_WITH_EXCEPTIONS,
		DVE.CATEGORY_KEY,
		DVEML."LEVEL 1" AS CATEGORY
	FROM 
		FILTERED_VISITS FVE
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_VISIT_EXCEPTION DVE 
		ON FVE.EXCEPTION_KEY = DVE.EXCEPTION_KEY 
	LEFT JOIN
		VISITS FVM
		ON FVM.VISIT_KEY = FVE.VISIT_KEY
	LEFT JOIN
		BRANCH DBM
		ON FVM.BRANCH_KEY = DBM.ORIGINAL_BRANCH_KEY
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.DIM_EMPLOYEE_MERGED DEM 
		ON DEM.EMPLOYEE_KEY = FVM.EMPLOYEE_KEY
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_VISIT_EXCEPTION_MAPPING_LEVELS DVEML 
		ON DVEML.CATEGORY_KEY = DVE.CATEGORY_KEY  	  
	WHERE DEM.EMPLOYEE_CATEGORY = ''FIELD''
--	WHERE EXCEPTION_CODE <> ''VISIT_CANCELLED''
	GROUP BY
		SERVICE_WEEK,
		FVM.BRANCH_KEY,
		DBM.BRANCH_NAME,
		FVM.EMPLOYEE_KEY,
		FVM.EMPLOYEE_ID,
		DVE.EXCEPTION_CODE,
		DVE.EXCEPTION_DESC,
		EMPLOYEE_NAME,
		DVE.CATEGORY_KEY,
		DVEML."LEVEL 1"
	--HAVING  TOTAL_VISITS_WITH_EXCEPTIONS > 10
)
SELECT
	*
FROM
	EXCEPTIONS
ORDER BY 
		SERVICE_WEEK ASC,
		BRANCH_NAME ASC,
		TOTAL_VISITS_WITH_EXCEPTIONS DESC;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

return return_result;
END;

 EOT
}

