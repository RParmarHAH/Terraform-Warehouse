resource "snowflake_procedure" "DW_REPORT_GET_REPORT_HOURS_AND_CENSUS_BY_PAYROLL_DATE_DAILY" {
	name ="GET_REPORT_HOURS_AND_CENSUS_BY_PAYROLL_DATE_DAILY"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result VARCHAR;
BEGIN

-- *****************************************************************************************************************************
 -- NAME: HOURS_AND_CENSUS_BY_PAYROLL_DATE_DAILY

 -- 02/22/21			Devansh Patel 		Added superviosr key
 -- 06/14/21			Mir Ali				Changed date span range (done by Amelia)
 -- 07/06/21           Prateek				Added SSID AND ORIGINAL SSID
 -- 08/10/21           Jashvant				Used table instead view for : FACT_BRANCH_PAYROLL_PERIODS_MERGED
-- *****************************************************************************************************************************
INSERT OVERWRITE INTO REPORT.HOURS_AND_CENSUS_BY_PAYROLL_DATE_DAILY 
WITH CONTRACTS_CLIENTS AS 
(
	SELECT C.CONTRACT_KEY,
		C.CONTRACT_CODE, 
		C.CONTRACT_NAME, 
		C.REVENUE_CATEGORY,
		INCLUDE_FOR_EXEC_OPS_CLIENTS AS INCLUDE_FOR_CLIENTS,
		--INCLUDE_FOR_EXEC_OPS_HOURS AS INCLUDE_FOR_HOURS,
		INCLUDE_FOR_OPS_PERF_HOURS
	FROM REPORT.VW_DASHBOARD_CONTRACTS C
	WHERE INCLUDE_FOR_EXEC_OPS_CLIENTS = TRUE --OR INCLUDE_FOR_EXEC_OPS_HOURS = TRUE 
), UNIQUE_CONTRACTS AS
(
	SELECT CONTRACT_KEY ,BILL_UNIT_TYPE 
	FROM HAH.FACT_VISIT
	GROUP BY CONTRACT_KEY ,BILL_UNIT_TYPE
)
, CONTRACTS AS 
(
	SELECT DISTINCT C.CONTRACT_KEY,
		C.CONTRACT_CODE, 
		C.CONTRACT_NAME, 
		C.REVENUE_CATEGORY,
		--INCLUDE_FOR_EXEC_OPS_CLIENTS AS INCLUDE_FOR_CLIENTS,
		INCLUDE_FOR_EXEC_OPS_HOURS AS INCLUDE_FOR_HOURS,
		INCLUDE_FOR_OPS_PERF_HOURS
	FROM REPORT.VW_DASHBOARD_CONTRACTS C
	LEFT JOIN UNIQUE_CONTRACTS V ON C.CONTRACT_KEY = V.CONTRACT_KEY
	WHERE NVL(V.BILL_UNIT_TYPE,''Hourly'') =''Hourly'' AND --(INCLUDE_FOR_EXEC_OPS_CLIENTS = TRUE OR
	INCLUDE_FOR_EXEC_OPS_HOURS = TRUE 
),
 VISIT_DATA AS
    (
        SELECT DISTINCT
        COALESCE(P.CHECK_DATE,PAYROLL_NEXTCHECKDATE.CHECK_DATE) AS PAYROLL_DATE,
        COALESCE(P.PERIOD_START_DATE,PAYROLL_NEXTCHECKDATE.PERIOD_START_DATE) AS PAY_PERIOD_START_DATE,
        COALESCE(P.PERIOD_END_DATE,PAYROLL_NEXTCHECKDATE.PERIOD_END_DATE) AS PAY_PERIOD_END_DATE,
        VISIT.SERVICE_DATE,
        VISIT.CLIENT_KEY,
        VISIT.CONTRACT_KEY,
        VISIT.ORIGINAL_SOURCE_SYSTEM_ID,
        VISIT.SOURCE_SYSTEM_ID,
		VISIT.BRANCH_KEY,
		VISIT.SUPERVISOR_KEY,
		SUM(VISIT.HOURS_SERVED) AS HOURS_SERVED
   FROM INTEGRATION.FACT_VISIT_MERGED VISIT
        Left JOIN INTEGRATION.FACT_BRANCH_PAYROLL_PERIODS_MERGED  P ON VISIT.PAYROLL_DATE = P.CHECK_DATE
        AND P.ORIGINAL_BRANCH_KEY =VISIT.ORIGINAL_BRANCH_KEY 
        LEFT JOIN (SELECT BRANCH_KEY,PERIOD_START_DATE,PERIOD_END_DATE,CHECK_DATE,ORIGINAL_BRANCH_KEY,
        lag(check_date) over (partition by BRANCH_KEY ORDER BY CHECK_DATE ASC) AS PreviousCheckDate
        FROM INTEGRATION.FACT_BRANCH_PAYROLL_PERIODS_MERGED) PAYROLL_NEXTCHECKDATE ON VISIT.PAYROLL_DATE < PAYROLL_NEXTCHECKDATE.CHECK_DATE
        AND VISIT.PAYROLL_DATE >= PAYROLL_NEXTCHECKDATE.PreviousCheckDate AND PAYROLL_NEXTCHECKDATE.ORIGINAL_BRANCH_KEY =VISIT.ORIGINAL_BRANCH_KEY 
   WHERE VISIT.CONFIRMED_FLAG = ''YES''
	--VISIT.STATUS_CODE IN (''02'', ''03'', ''04'', ''05'') -- Only confirmed visits
   GROUP BY
        VISIT.SERVICE_DATE,
		VISIT.CLIENT_KEY,
		VISIT.CONTRACT_KEY,
		VISIT.ORIGINAL_SOURCE_SYSTEM_ID,
		VISIT.SOURCE_SYSTEM_ID,
		VISIT.BRANCH_KEY,
		VISIT.SUPERVISOR_KEY,
        COALESCE(P.CHECK_DATE,PAYROLL_NEXTCHECKDATE.CHECK_DATE),
        COALESCE(P.PERIOD_START_DATE,PAYROLL_NEXTCHECKDATE.PERIOD_START_DATE),
        COALESCE(P.PERIOD_END_DATE,PAYROLL_NEXTCHECKDATE.PERIOD_END_DATE)
    )
      SELECT
            DATA.PAYROLL_DATE,
            DATA.PAY_PERIOD_START_DATE,
            DATA.PAY_PERIOD_END_DATE,
            DATA.SERVICE_DATE,
            LAST_DAY(DATA.SERVICE_DATE,"WEEK") AS SERVICE_END_OF_WEEK,
			DATA.BRANCH_KEY,
			DATA.SUPERVISOR_KEY,
			DATA.CLIENT_KEY AS CLIENT_KEY_DATA,
			DATA.CONTRACT_KEY,
			DATA.ORIGINAL_SOURCE_SYSTEM_ID,
        	DATA.SOURCE_SYSTEM_ID,
			CASE WHEN CC.INCLUDE_FOR_CLIENTS = 1 THEN DATA.CLIENT_KEY END CLIENT_KEY,
			NVL(CASE WHEN CONTRACT.INCLUDE_FOR_HOURS = 1 THEN DATA.HOURS_SERVED END, 0) HOURS_SERVED_ALL,
            :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
			:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
        	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
			CURRENT_USER as ETL_INSERTED_BY ,
			convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
			CURRENT_USER as ETL_LAST_UPDATED_BY,
			0 as ETL_DELETED_FLAG,
			0 AS ETL_INFERRED_MEMBER_FLAG
            FROM VISIT_DATA AS DATA
	INNER JOIN CONTRACTS_CLIENTS CC 
	ON CC.CONTRACT_KEY = DATA.CONTRACT_KEY
	LEFT JOIN CONTRACTS CONTRACT
	ON CONTRACT.CONTRACT_KEY = DATA.CONTRACT_KEY   
	WHERE NVL(DATA.HOURS_SERVED, 0) > 0
        AND SERVICE_DATE <= LAST_DAY(CURRENT_DATE,"WEEK")
ORDER BY DATA.SERVICE_DATE
;

return return_result;
END;


 EOT
}

