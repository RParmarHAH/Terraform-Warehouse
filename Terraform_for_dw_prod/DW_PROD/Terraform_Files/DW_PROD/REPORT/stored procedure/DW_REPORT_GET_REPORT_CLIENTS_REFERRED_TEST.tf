resource "snowflake_procedure" "DW_REPORT_GET_REPORT_CLIENTS_REFERRED_TEST" {
	name ="GET_REPORT_CLIENTS_REFERRED_TEST"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result varchar(1000);
BEGIN

CREATE OR REPLACE TEMPORARY TABLE DW_${var.SF_ENVIRONMENT}."PUBLIC".CONFIRMED_VISITS_DATA
as
SELECT 
DISTINCT v.client_key
FROM INTEGRATION.FACT_VISIT_MERGED v 
WHERE NVL(CONFIRMED_FLAG,''YES'')=''YES''
QUALIFY MAX(v.report_date) OVER (PARTITION BY v.CLIENT_KEY ) >= ''2017-01-01'';


CREATE OR REPLACE TEMPORARY TABLE DW_${var.SF_ENVIRONMENT}."PUBLIC".CLIENTS_SERVICE_DATES
AS
SELECT V.CLIENT_KEY 
, MIN(V.REPORT_DATE) AS FIRST_SERVICE_DATE
, MAX(V.REPORT_DATE) AS LAST_SERVICE_DATE
, MIN(CASE WHEN FPS.BILLABLE_FLAG =TRUE AND S.REVENUE_CATEGORY  NOT IN (''CLS'',''NA'',''CC'') THEN  V.REPORT_DATE END ) AS FIRST_BILLABLE_SERVICE
, MAX(CASE WHEN FPS.BILLABLE_FLAG =TRUE AND S.REVENUE_CATEGORY  NOT IN (''CLS'',''NA'',''CC'') THEN  V.REPORT_DATE END ) AS LAST_BILLABLE_SERVICE
FROM DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_VISIT_MERGED V
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.FACT_PARTNER_CONTRACT_SERVICE FPS ON FPS.PARTNER_CONTRACT_SERVICE_KEY = V.PARTNER_CONTRACT_SERVICE_KEY 
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_SERVICES S ON FPS.SERVICE_KEY = S.SERVICE_KEY 
JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.DIM_CLIENT_MERGED C ON V.ORIGINAL_CLIENT_KEY = C.ORIGINAL_CLIENT_KEY
WHERE CONFIRMED_FLAG =''YES''
--AND V.CLIENT_KEY IN (SELECT CLIENT_KEY FROM CONFIRMED_VISITS_DATA)
GROUP BY ALL;


CREATE OR REPLACE TEMPORARY TABLE DW_${var.SF_ENVIRONMENT}.PUBLIC.CLIENT_METRIC
AS
SELECT DISTINCT A.*,V.SUPERVISOR_KEY , V.BRANCH_KEY 
,FIRST_VALUE(V2.ORIGINAL_BRANCH_KEY) OVER (PARTITION BY A.CLIENT_KEY ORDER BY IFF(V.CLIENT_KEY=V2.ORIGINAL_CLIENT_KEY ,0,1)) AS ORIGINAL_BRANCH_KEY
FROM DW_${var.SF_ENVIRONMENT}."PUBLIC".CLIENTS_SERVICE_DATES A
JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_VISIT_MERGED V ON A.CLIENT_KEY  = V.CLIENT_KEY AND A.FIRST_SERVICE_DATE = V.REPORT_DATE 
JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_VISIT_MERGED V2 ON A.CLIENT_KEY  = V2.CLIENT_KEY ;



CREATE OR REPLACE  TEMPORARY  TABLE DW_${var.SF_ENVIRONMENT}."PUBLIC".auth_test
as
--with AUTHORIZATION AS (
	SELECT SOURCE_SYSTEM_ID,FIRST_DAY_OF_MONTH AS MONTH, PARTNER_CONTRACT_SERVICE_KEY, CLIENT_KEY,ATYPE,--INVALID_FLAG,
	sum(PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED) AS HOURS_AUTHORIZED_NON_ADJUSTED,
	sum(PERIOD_HOURS_AUTHORIZED) AS HOURS_AUTHORIZED
    ,min(AUTH_START_DATE) AS amindate,
	max(AUTH_END_DATE) AS amaxdate
	FROM DW_${var.SF_ENVIRONMENT}.REPORT.CLIENT_SERVICE_MONTHLY_AUTHORIZATION 
--	WHERE CLIENT_KEY IN (SELECT CLIENT_KEY FROM CONFIRMED_VISITS_DATA)
	GROUP BY 1,2,3,4,5;
--)

	
CREATE OR REPLACE  TEMPORARY  TABLE DW_${var.SF_ENVIRONMENT}."PUBLIC".FUTURE_VISITS 
as
--, FUTURE_VISITS AS 
--(
SELECT
	CLIENT_KEY,
	MIN(REPORT_DATE) AS NEXT_SCHEDULED_VISIT_DATE
FROM
	INTEGRATION.FACT_VISIT_MERGED FVM
--LEFT JOIN HAH.DIM_CONTRACT DC ON
--	DC.CONTRACT_KEY = FVM.CONTRACT_KEY
LEFT JOIN HAH.FACT_PARTNER_CONTRACT_SERVICE PC ON FVM.PARTNER_CONTRACT_SERVICE_KEY  = PC.PARTNER_CONTRACT_SERVICE_KEY  
WHERE
	FVM.REPORT_DATE>CURRENT_DATE
	AND PC.BILLABLE_FLAG = ''TRUE''
--	AND ORIGINAL_SOURCE_SYSTEM_ID IN (4,7,17,9,13,3)
--	AND FVM.CLIENT_KEY IN (SELECT CLIENT_KEY FROM CONFIRMED_VISITS_DATA)
GROUP BY
	CLIENT_KEY;
--)
--SELECT * FROM FUTURE_VISITS;
	
	

CREATE OR REPLACE TEMPORARY  TABLE DW_${var.SF_ENVIRONMENT}."PUBLIC".FUTURE_VISITS_EVV 
as
--, FUTURE_VISITS_EVV AS 
--(
SELECT
	CLIENT_KEY,
	MIN(REPORT_DATE) AS NEXT_SCHEDULED_VISIT_DATE
FROM
	HAH.FACT_EVV_VISIT FE
LEFT JOIN HAH.DIM_CONTRACT DC ON
	DC.CONTRACT_KEY = FE.CONTRACT_KEY
WHERE
	FE.REPORT_DATE>CURRENT_DATE
	AND DC.BILLABLE_FLAG = ''TRUE''
--	AND FE.SOURCE_SYSTEM_ID IN (4,7,17,9,13,3)
--	AND FE.CLIENT_KEY IN (SELECT CLIENT_KEY FROM CONFIRMED_VISITS_DATA)
GROUP BY
	CLIENT_KEY;
--)
--SELECT * FROM FUTURE_VISITS_EVV;
	
	
CREATE OR REPLACE TEMPORARY  TABLE DW_${var.SF_ENVIRONMENT}."PUBLIC".BILLABLE_VISITS 
as
--, BILLABLE_VISITS AS (
SELECT
	CLIENT_KEY,
	MIN(REPORT_DATE) AS FIRST_BILLABLE_VISIT,
	MAX(REPORT_DATE) AS LATEST_BILLABLE_VISIT
FROM
	INTEGRATION.FACT_VISIT_MERGED FVME
--LEFT JOIN HAH.DIM_CONTRACT DCO ON
--	FVME.CONTRACT_KEY = DCO.CONTRACT_KEY
LEFT JOIN HAH.FACT_PARTNER_CONTRACT_SERVICE PC ON FVME.PARTNER_CONTRACT_SERVICE_KEY  = PC.PARTNER_CONTRACT_SERVICE_KEY  
WHERE PC.BILLABLE_FLAG = ''TRUE''
--	AND ORIGINAL_SOURCE_SYSTEM_ID IN (4,7,17,9,13,3)
--	AND FVME.CLIENT_KEY IN (SELECT CLIENT_KEY FROM CONFIRMED_VISITS_DATA)
GROUP BY
	CLIENT_KEY ;
--)
	

	
CREATE OR REPLACE TABLE DW_${var.SF_ENVIRONMENT}."PUBLIC".CLIENTS_REFER_2
AS
WITH CLIENT_INFO AS 
(
	SELECT DISTINCT  auth.partner_contract_service_key AS FIRST_CONTRACT_KEY
					, C.REFERRALS 
--					, I.HOURS_AUTHORIZED_NON_ADJUSTED AS FIRST_NON_ADJUSTED_AUTH_HOURS
--					, I.HOURS_AUTHORIZED AS FIRST_ADJUSTED_AUTH_HOURS
					, auth.HOURS_AUTHORIZED_NON_ADJUSTED AS FIRST_NON_ADJUSTED_AUTH_HOURS
					, auth.HOURS_AUTHORIZED AS FIRST_ADJUSTED_AUTH_HOURS
					, COALESCE(FEV.NEXT_SCHEDULED_VISIT_DATE,FV.NEXT_SCHEDULED_VISIT_DATE) NEXT_SCHEDULED_VISIT_DATE
					, C.CLIENT_NUMBER
					, C.CLIENT_KEY
					, C.SOURCE_SYSTEM_ID
					, FIRST_VALUE(COALESCE(c.Original_Source_System_Id, -1)) OVER (PARTITION BY c.Client_Key ORDER BY IFF(c.Original_Source_System_ID <> c.Source_System_ID, 0, 1)) AS Original_Source_System_ID
					, C.CLIENT_NAME
					, C.CLIENT_HOME_PHONE
					, C.CLIENT_WORK_PHONE
--					, COALESCE(FIRST_VALUE(V.SUPERVISOR_KEY) OVER(PARTITION BY C.CLIENT_KEY ORDER BY MIN(V.REPORT_DATE)) , FIRST_VALUE(COALESCE(C.PRIMARY_SUPERVISOR_KEY,C.SECONDARY_SUPERVISOR_KEY)) OVER (PARTITION BY C.CLIENT_KEY ORDER BY MIN(V.REPORT_DATE))) AS SUPERVISOR_KEY
					, COALESCE(CM.SUPERVISOR_KEY,C.PRIMARY_SUPERVISOR_KEY,C.SECONDARY_SUPERVISOR_KEY) AS SUPERVISOR_KEY
--					, FIRST_VALUE(I.BRANCH_KEY) OVER(PARTITION BY C.CLIENT_KEY ORDER BY MIN(I.REPORT_DATE)) AS BRANCH_KEY
--					, FIRST_VALUE(V.BRANCH_KEY) OVER(PARTITION BY C.CLIENT_KEY ORDER BY MIN(V.REPORT_DATE)) AS BRANCH_KEY
					,CM.BRANCH_KEY
--					, FIRST_VALUE(I.ORIGINAL_BRANCH_KEY) OVER (PARTITION BY C.CLIENT_KEY ORDER BY CASE WHEN C.CLIENT_KEY = C.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END, MIN(I.REPORT_DATE)) AS ORIGINAL_BRANCH_KEY
--					, FIRST_VALUE(v.ORIGINAL_BRANCH_KEY) OVER (PARTITION BY C.CLIENT_KEY ORDER BY CASE WHEN C.CLIENT_KEY = C.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END, MIN(v.REPORT_DATE)) AS ORIGINAL_BRANCH_KEY
					,CM.ORIGINAL_BRANCH_KEY
--					, FIRST_VALUE(FV2.FIRST_BILLABLE_VISIT) IGNORE NULLS OVER(PARTITION BY C.CLIENT_KEY ORDER BY FV2.FIRST_BILLABLE_VISIT DESC) AS FIRST_VISIT_DATE
					,CM.FIRST_SERVICE_DATE AS FIRST_VISIT_DATE
--					, FIRST_VALUE(FV2.LATEST_BILLABLE_VISIT) IGNORE NULLS OVER(PARTITION BY C.CLIENT_KEY ORDER BY FV2.LATEST_BILLABLE_VISIT DESC) AS LATEST_VISIT_DATE
					,CM.LAST_SERVICE_DATE AS LATEST_VISIT_DATE
--					, MIN(MIN(C.DERIVED_REFERRAL_DATE)) OVER (PARTITION BY C.CLIENT_KEY) AS REFERRED_DATE
					,C.DERIVED_REFERRAL_DATE AS REFERRED_DATE
--					, CASE WHEN (FIRST_VISIT_DATE IS NOT NULL AND MAX(C.DAYS_TO_SERVICE) IS NOT NULL) THEN DATEDIFF(''DAY'',REFERRED_DATE,FIRST_VISIT_DATE) 
--  						   ELSE NULL END AS DAYS_TO_SERVICE
					, CASE WHEN (FIRST_VISIT_DATE IS NOT NULL AND C.DAYS_TO_SERVICE IS NOT NULL) THEN DATEDIFF(''DAY'',REFERRED_DATE,FIRST_VISIT_DATE) 
  						   ELSE NULL END AS DAYS_TO_SERVICE
					, CASE WHEN C.END_DATE IS NOT NULL 
							THEN CASE WHEN FIRST_VISIT_DATE IS NULL AND LATEST_VISIT_DATE IS NULL AND C.END_DATE>=CURRENT_DATE THEN 1 ELSE 0 END
						   ELSE CASE WHEN FIRST_VISIT_DATE IS NULL AND LATEST_VISIT_DATE IS NULL THEN 1 ELSE 0 END
					  END AS OPEN_REFERRAL
					, CASE WHEN OPEN_REFERRAL=1 THEN DATEDIFF(''DAY'',REFERRED_DATE,CURRENT_DATE) ELSE NULL END AS REFERRAL_AGE
FROM INTEGRATION.DIM_CLIENT_MERGED C
LEFT JOIN CLIENT_METRIC CM ON CM.CLIENT_KEY = C.CLIENT_KEY
LEFT JOIN DW_${var.SF_ENVIRONMENT}."PUBLIC".auth_test auth ON auth.client_key = c.client_key
LEFT JOIN DW_${var.SF_ENVIRONMENT}."PUBLIC".FUTURE_VISITS FV 
	ON FV.CLIENT_KEY=C.CLIENT_KEY
LEFT JOIN DW_${var.SF_ENVIRONMENT}."PUBLIC".FUTURE_VISITS_EVV FEV 
	ON FEV.CLIENT_KEY=C.CLIENT_KEY
QUALIFY DENSE_RANK() OVER (PARTITION BY C.CLIENT_KEY ORDER BY auth.month) = 1
)
SELECT DISTINCT FIRST_CONTRACT_KEY
				, FIRST_ADJUSTED_AUTH_HOURS
				, FIRST_NON_ADJUSTED_AUTH_HOURS
				, NEXT_SCHEDULED_VISIT_DATE
				, CLIENT_NUMBER
				, CLIENT_KEY
				, SOURCE_SYSTEM_ID
				, ORIGINAL_SOURCE_SYSTEM_ID
				, CLIENT_NAME
				, CLIENT_HOME_PHONE
				, CLIENT_WORK_PHONE
				, SUPERVISOR_KEY
				, BRANCH_KEY
				, ORIGINAL_BRANCH_KEY
				, REFERRED_DATE
				, DAYS_TO_SERVICE
				, OPEN_REFERRAL
				, REFERRALS 
--				, -1 AS ETL_TASK_KEY
--				, -1 ETL_INSERTED_TASK_KEY
--				, ETL_INSERTED_DATE
--				, ETL_INSERTED_BY
--				, ETL_LAST_UPDATED_DATE
--				, ETL_LAST_UPDATED_BY
--				, ETL_DELETED_FLAG
FROM CLIENT_INFO ;
--WHERE CLIENT_KEY =''3906f134dba00195c7c74cd38a4e60ce'';

--SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
--return return_result;
END;

 EOT
}

