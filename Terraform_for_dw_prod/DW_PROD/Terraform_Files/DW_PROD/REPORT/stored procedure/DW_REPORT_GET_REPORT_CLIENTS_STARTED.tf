resource "snowflake_procedure" "DW_REPORT_GET_REPORT_CLIENTS_STARTED" {
	name ="GET_REPORT_CLIENTS_STARTED"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result VARCHAR;
BEGIN

        INSERT OVERWRITE INTO REPORT.CLIENTS_STARTED
	(PERIOD_BEGIN_DATE, CLIENT_KEY, ORIGINAL_CLIENT_KEY, CONTRACT_KEY, FIRST_SERVICE_DATE, FIRST_BRANCH_KEY, ORIGINAL_FIRST_BRANCH_KEY, FIRST_SUPERVISOR_KEY, HOURS_SERVED,
		ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE, ETL_INSERTED_BY, ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG)
WITH VISITS AS (
	SELECT DISTINCT DATE_TRUNC(MONTH, VISIT.REPORT_DATE) PERIOD_BEGIN_DATE, -- Using all visits (not DATES CTE) to get accurate Reactivation count 
		VISIT.CLIENT_KEY, 
		FIRST_VALUE(VISIT.ORIGINAL_CLIENT_KEY) OVER(PARTITION BY VISIT.CLIENT_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END) AS ORIGINAL_CLIENT_KEY,
		VISIT.CONTRACT_KEY,
		MIN(MIN(VISIT.REPORT_DATE)) OVER(PARTITION BY VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY) AS FIRST_SERVICE_DATE,
		FIRST_VALUE(VISIT.BRANCH_KEY) OVER(PARTITION BY VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY ORDER BY MIN(VISIT.REPORT_DATE), SUM(VISIT.HOURS_SERVED) DESC) AS FIRST_BRANCH_KEY,
		FIRST_VALUE(VISIT.ORIGINAL_BRANCH_KEY) OVER(PARTITION BY VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END, MIN(VISIT.REPORT_DATE), SUM(VISIT.HOURS_SERVED) DESC) AS ORIGINAL_FIRST_BRANCH_KEY,
		FIRST_VALUE(VISIT.SUPERVISOR_KEY) OVER(PARTITION BY VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY ORDER BY MIN(VISIT.REPORT_DATE), SUM(VISIT.HOURS_SERVED) DESC) AS FIRST_SUPERVISOR_KEY,
		SUM(SUM(VISIT.HOURS_SERVED)) OVER(PARTITION BY VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY) AS HOURS_SERVED
	FROM INTEGRATION.FACT_VISIT_MERGED VISIT
	WHERE VISIT.CONFIRMED_FLAG = ''YES'' --VISIT.STATUS_CODE IN (''02'', ''03'', ''04'', ''05'') -- Only confirmed visits
	GROUP BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), 
		VISIT.CLIENT_KEY, 
		VISIT.ORIGINAL_CLIENT_KEY,
		VISIT.CONTRACT_KEY,
		VISIT.BRANCH_KEY,
		VISIT.ORIGINAL_BRANCH_KEY,
		VISIT.SUPERVISOR_KEY 
), CLIENTS_STARTED_BY_PERIOD AS (
	SELECT VISITS.*
	FROM VISITS VISITS
	WHERE DATE_TRUNC(MONTH, VISITS.FIRST_SERVICE_DATE) = DATE_TRUNC(MONTH, VISITS.PERIOD_BEGIN_DATE)
)
	SELECT RESULTS.PERIOD_BEGIN_DATE,
		RESULTS.CLIENT_KEY,
		RESULTS.ORIGINAL_CLIENT_KEY,
		RESULTS.CONTRACT_KEY,
		RESULTS.FIRST_SERVICE_DATE,
		RESULTS.FIRST_BRANCH_KEY,
		RESULTS.ORIGINAL_FIRST_BRANCH_KEY,
		RESULTS.FIRST_SUPERVISOR_KEY,
		RESULTS.HOURS_SERVED,
		-- ETL Fields
		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
        convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
		CURRENT_USER as ETL_INSERTED_BY ,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
		CURRENT_USER as ETL_LAST_UPDATED_BY,
		0 as ETL_DELETED_FLAG
	FROM CLIENTS_STARTED_BY_PERIOD RESULTS;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

return return_result;
END;


 EOT
}

