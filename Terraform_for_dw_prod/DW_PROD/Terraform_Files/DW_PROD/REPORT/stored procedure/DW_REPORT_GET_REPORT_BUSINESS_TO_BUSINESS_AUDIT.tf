resource "snowflake_procedure" "DW_REPORT_GET_REPORT_BUSINESS_TO_BUSINESS_AUDIT" {
	name ="GET_REPORT_BUSINESS_TO_BUSINESS_AUDIT"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result varchar(1000);
BEGIN
    INSERT INTO REPORT.BUSINESS_TO_BUSINESS_AUDIT
WITH CURR_RECORDS AS 
( 
SELECT ''DIM_CLIENT''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''DATAFLEX'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(CLIENT_KEY) AS ROW_COUNT FROM  DW_${var.SF_ENVIRONMENT}.HAH.DIM_CLIENT WHERE SOURCE_SYSTEM_ID IN (3)
UNION
SELECT ''DIM_CLIENT''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''COSTAL'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(CLIENT_KEY) AS ROW_COUNT  FROM  DW_${var.SF_ENVIRONMENT}.HAH.DIM_CLIENT WHERE SOURCE_SYSTEM_ID IN (1,2) 
UNION
SELECT ''DIM_CLIENT''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''SANDATA'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(CLIENT_KEY) AS ROW_COUNT FROM  DW_${var.SF_ENVIRONMENT}.HAH.DIM_CLIENT WHERE SOURCE_SYSTEM_ID IN (4)
UNION
SELECT ''DIM_BRANCH''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''DATAFLEX'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(BRANCH_KEY) AS ROW_COUNT FROM  DW_${var.SF_ENVIRONMENT}.HAH.DIM_BRANCH WHERE SOURCE_SYSTEM_ID IN (3)
UNION
SELECT ''DIM_BRANCH''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''COSTAL'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(BRANCH_KEY) AS ROW_COUNT  FROM  DW_${var.SF_ENVIRONMENT}.HAH.DIM_BRANCH WHERE SOURCE_SYSTEM_ID IN (1,2) 
UNION
SELECT ''DIM_BRANCH''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''SANDATA'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(BRANCH_KEY) AS ROW_COUNT FROM  DW_${var.SF_ENVIRONMENT}.HAH.DIM_BRANCH WHERE SOURCE_SYSTEM_ID IN (4)
UNION 
SELECT ''FACT_VISIT''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''DATAFLEX'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(VISIT_KEY) AS ROW_COUNT FROM  DW_${var.SF_ENVIRONMENT}.HAH.FACT_VISIT WHERE SOURCE_SYSTEM_ID IN (3)
UNION
SELECT ''FACT_VISIT''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''COSTAL'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(VISIT_KEY) AS ROW_COUNT  FROM  DW_${var.SF_ENVIRONMENT}.HAH.FACT_VISIT WHERE SOURCE_SYSTEM_ID IN (1,2) 
UNION
SELECT ''FACT_VISIT''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''SANDATA'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(VISIT_KEY) AS ROW_COUNT FROM  DW_${var.SF_ENVIRONMENT}.HAH.FACT_VISIT WHERE SOURCE_SYSTEM_ID IN (4)
UNION
SELECT ''FACT_INTAKE''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''DATAFLEX'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(INTAKE_KEY) AS ROW_COUNT FROM  DW_${var.SF_ENVIRONMENT}.HAH.FACT_INTAKE WHERE SOURCE_SYSTEM_ID IN (3)
UNION
SELECT ''FACT_INTAKE''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''COSTAL'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(INTAKE_KEY) AS ROW_COUNT  FROM  DW_${var.SF_ENVIRONMENT}.HAH.FACT_INTAKE WHERE SOURCE_SYSTEM_ID IN (1,2) 
UNION
SELECT ''FACT_INTAKE''  AS TABLE_NAME,''DW_${var.SF_ENVIRONMENT}''  AS DB,''SANDATA'' AS DW_${var.SF_ENVIRONMENT}_SOURCE,COUNT(INTAKE_KEY) AS ROW_COUNT FROM  DW_${var.SF_ENVIRONMENT}.HAH.FACT_INTAKE WHERE SOURCE_SYSTEM_ID IN (4)
) 
SELECT J.TABLE_NAME,J.DB,J.DW_${var.SF_ENVIRONMENT}_SOURCE,J.CURRENT_DAY_COUNT AS PREVIOUS_DAY_COUNT,C.ROW_COUNT AS CURRENT_DAY_COUNT,
(C.ROW_COUNT - J.CURRENT_DAY_COUNT) AS COUNT_DIFF, floor(100 * (C.ROW_COUNT - J.CURRENT_DAY_COUNT ) / J.CURRENT_DAY_COUNT,4) As PercentageDiff, --
CURRENT_DATE AS INSERT_DAY
FROM DATA_MANAGEMENT.SNOWFLAKE.BUSINESS_TO_BUSINESS_AUDIT J 
inner JOIN CURR_RECORDS C ON J.TABLE_NAME = C.TABLE_NAME AND J.DW_${var.SF_ENVIRONMENT}_SOURCE = C.DW_${var.SF_ENVIRONMENT}_SOURCE 
WHERE J.INSERT_DATE = (SELECT max(INSERT_DATE) FROM DATA_MANAGEMENT.SNOWFLAKE.BUSINESS_TO_BUSINESS_AUDIT) ORDER BY J.TABLE_NAME;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;

 EOT
}

