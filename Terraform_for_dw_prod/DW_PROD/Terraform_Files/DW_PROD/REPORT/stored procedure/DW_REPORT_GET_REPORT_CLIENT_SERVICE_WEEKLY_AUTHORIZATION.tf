resource "snowflake_procedure" "DW_REPORT_GET_REPORT_CLIENT_SERVICE_WEEKLY_AUTHORIZATION" {
	name ="GET_REPORT_CLIENT_SERVICE_WEEKLY_AUTHORIZATION"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result varchar(1000);
BEGIN

--*****************************************************************************************************************************
-- NAME:  CLIENT_SERVICE_WEEKLY_AUTHORIZATION
--
-- PURPOSE: Creates one row per Month for clients authorization
-- DD/mm/yy
-- 26/09/23    NUTAN JAGNADE         Initial development
-- 05/12/23	   SHRADDHA SEJPAL	     Added weekly logic for Alliance
-- 26/12/23	   RAJAT SAPKAL			 Added weekly logic for Coastal
-- 15/02/24	   Sanket Jain			 Modified logic in other system CTE related to IDDOX-627
--*****************************************************************************************************************************
INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.REPORT.CLIENT_SERVICE_WEEKLY_AUTHORIZATION
WITH ASR_WEEKLY AS (
-- FOR WEEKLY AND BY_REQUEST RECURRENCE  CALCULATION
WITH WEEKLY_AUTHS AS (
	SELECT 	
      PL.CLIENT_SERVICE_KEY
	 ,D.CALENDAR_DATE	
	 ,D.HAH_CURRENT_WEEK_FIRST_DAY
	 ,D.HAH_CURRENT_WEEK_LAST_DAY
	 ,PL.CLIENT_KEY
	 ,PL.PARTNER_CONTRACT_SERVICE_KEY	 
     ,PL.AUTHORIZATION_DISCIPLINE  
   	 ,PL.AUTHORIZATION_UOM
     ,NULL AS PICKER
  	 ,NULL AS SKIPPER
   	 ,PL.AUTH_INFO::NUMBER
	  , CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN AUTHORIZATION_MAX_UNITS_BY_UOM ELSE 0 END AS HOURS_AUTHORIZED
  	  , CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN IFF(PL.AUTHORIZATION_MAX_UNITS_BY_UOM>0,1,0) ELSE 0 END AS EFFECTIVE_DAYS 
  	  ,PL.AUTHORIZATION_PERIOD_START_DATE
     ,PL.AUTHORIZATION_PERIOD_END_DATE
	  ,HOURS_AUTHORIZED AS HOURS_AUTHORIZED_NON_ADJUSTED
	  ,PL.SOURCE_SYSTEM_ID
	 ,PL.ORIGINAL_SOURCE_SYSTEM_ID
	 ,IFNULL(TRIM(REPLACE(TRIM(REPLACE(PL.AUTHORIZATION_TYPE,''Authorization'')),''UNKNOWN'')),''Hourly'') AS ATYPE
	 ,IFF(PL.AUTHORIZATION_PERIOD_START_DATE <= D.HAH_CURRENT_WEEK_FIRST_DAY, D.HAH_CURRENT_WEEK_FIRST_DAY, PL.AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE
	 ,IFF(PL.AUTHORIZATION_PERIOD_END_DATE >= D.HAH_CURRENT_WEEK_LAST_DAY, D.HAH_CURRENT_WEEK_LAST_DAY, PL.AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE
	 ,NULL AS PERIOD_ONHOLD_BEGIN_DATE
	 ,NULL AS PERIOD_ONHOLD_END_DATE
	 ,DATEDIFF(''DAY'',PERIOD_BEGIN_SERVICE_DATE,PERIOD_BEGIN_SERVICE_DATE)+1 AS ACTUALWEEKDAYS
	 ,NULL AS WEEKDAYSWOH
	 ,HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED
	 ,HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED
	 ,IFF(PL.AUTHORIZATION_MAX_UNITS >24,TRUE,FALSE) AS FLAG
FROM 
integration.FACT_CLIENT_SERVICE_MERGED PL
 JOIN  DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON		
	PL.AUTHORIZATION_PERIOD_START_DATE <=D.CALENDAR_DATE AND PL.AUTHORIZATION_PERIOD_END_DATE >=D.CALENDAR_DATE	
	AND AUTH_INFO::NUMBER=D.DAY_OF_WEEK
	WHERE
 PL.ORIGINAL_SOURCE_SYSTEM_ID =13
	AND PL.AUTHORIZATION_UOM IN(''Weekly'' ,''By Request (Weekly)'')
)--SELECT * FROM WEEKLY_AUTHS WHERE EFFECTIVE_DAYS>1;
-- FOR BIWEEKLY, Every 14 Days, Every 3 Weeks, Every 4 Weeks RECURRENCE CALCULATION
,   BIWEEKLY_TO_EVERY4WEEK_AUTHS AS (
	SELECT
	     PL.CLIENT_SERVICE_KEY,
		D.CALENDAR_DATE,
		D.HAH_CURRENT_WEEK_FIRST_DAY,
		D.HAH_CURRENT_WEEK_LAST_DAY,
		PL.CLIENT_KEY,
	    PL.PARTNER_CONTRACT_SERVICE_KEY,
	    PL.AUTHORIZATION_DISCIPLINE  ,
   	    PL.AUTHORIZATION_UOM,
		PL.AUTH_INFO::NUMBER,
		CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN AUTHORIZATION_MAX_UNITS_BY_UOM ELSE 0 END AS HOURS_AUTHORIZED,
  	    CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN IFF(PL.AUTHORIZATION_MAX_UNITS_BY_UOM>0,1,0) ELSE 0 END AS EFFECTIVE_DAYS,
  	    PL.AUTHORIZATION_PERIOD_START_DATE,
        PL.AUTHORIZATION_PERIOD_END_DATE,
	  HOURS_AUTHORIZED AS HOURS_AUTHORIZED_NON_ADJUSTED,
	  PL.SOURCE_SYSTEM_ID,
	 PL.ORIGINAL_SOURCE_SYSTEM_ID,
	 IFNULL(TRIM(REPLACE(TRIM(REPLACE(PL.AUTHORIZATION_TYPE,''Authorization'')),''UNKNOWN'')),''Hourly'') AS ATYPE,
	 IFF(PL.AUTHORIZATION_PERIOD_START_DATE <= D.HAH_CURRENT_WEEK_FIRST_DAY, D.HAH_CURRENT_WEEK_FIRST_DAY, PL.AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE,
	 IFF(PL.AUTHORIZATION_PERIOD_END_DATE >= D.HAH_CURRENT_WEEK_LAST_DAY, D.HAH_CURRENT_WEEK_LAST_DAY, PL.AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE,
	 NULL AS PERIOD_ONHOLD_BEGIN_DATE,
	 NULL AS PERIOD_ONHOLD_END_DATE,
	 DATEDIFF(''DAY'',PERIOD_BEGIN_SERVICE_DATE,PERIOD_BEGIN_SERVICE_DATE)+1 AS ACTUALWEEKDAYS,
	 NULL AS WEEKDAYSWOH,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED,
	 IFF(PL.AUTHORIZATION_MAX_UNITS >24,TRUE,FALSE) AS FLAG,
	ROW_NUMBER() OVER (PARTITION BY PL.CLIENT_SERVICE_KEY ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
		integration.FACT_CLIENT_SERVICE_MERGED PL
	JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
	PL.AUTHORIZATION_PERIOD_START_DATE <=D.CALENDAR_DATE AND PL.AUTHORIZATION_PERIOD_END_DATE >=D.CALENDAR_DATE	
	AND TRY_TO_NUMBER(replace(AUTH_INFO ,''"'', ''''))=D.DAY_OF_WEEK
	WHERE
	PL.ORIGINAL_SOURCE_SYSTEM_ID =13
	AND PL.AUTHORIZATION_UOM IN(''BiWeekly'',''Every 4 Weeks'',''Every 3 Weeks'') 
)--SELECT * FROM BIWEEKLY_TO_EVERY4WEEK_AUTHS
-- FOR MONTHLY RECURRENCE CALCULATION
, MONTHLY_AUTHS AS (
		SELECT
		 PL.CLIENT_SERVICE_KEY,
		D.CALENDAR_DATE,
		D.HAH_CURRENT_WEEK_FIRST_DAY,
		D.HAH_CURRENT_WEEK_LAST_DAY,
		 PL.CLIENT_KEY,
	   PL.PARTNER_CONTRACT_SERVICE_KEY,	
			 PL.AUTHORIZATION_DISCIPLINE,
			 PL.AUTHORIZATION_UOM,
			PL.AUTH_INFO::NUMBER,
	   CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN AUTHORIZATION_MAX_UNITS_BY_UOM ELSE 0 END AS HOURS_AUTHORIZED,
  	   CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN IFF(PL.AUTHORIZATION_MAX_UNITS_BY_UOM>0,1,0) ELSE 0 END AS EFFECTIVE_DAYS,
	  PL.AUTHORIZATION_PERIOD_START_DATE,
        PL.AUTHORIZATION_PERIOD_END_DATE,
  	   HOURS_AUTHORIZED AS HOURS_AUTHORIZED_NON_ADJUSTED,
	  PL.SOURCE_SYSTEM_ID,
	  PL.ORIGINAL_SOURCE_SYSTEM_ID,
	  IFNULL(TRIM(REPLACE(TRIM(REPLACE(PL.AUTHORIZATION_TYPE,''Authorization'')),''UNKNOWN'')),''Hourly'') AS ATYPE,
	 IFF(PL.AUTHORIZATION_PERIOD_START_DATE <= D.HAH_CURRENT_WEEK_FIRST_DAY, D.HAH_CURRENT_WEEK_FIRST_DAY, PL.AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE,
	 IFF(PL.AUTHORIZATION_PERIOD_END_DATE >= D.HAH_CURRENT_WEEK_LAST_DAY, D.HAH_CURRENT_WEEK_LAST_DAY, PL.AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE,
	 NULL AS PERIOD_ONHOLD_BEGIN_DATE,
	 NULL AS PERIOD_ONHOLD_END_DATE,
	 DATEDIFF(''DAY'',PERIOD_BEGIN_SERVICE_DATE,PERIOD_BEGIN_SERVICE_DATE)+1 AS ACTUALWEEKDAYS,
	 NULL AS WEEKDAYSWOH,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED,
	  IFF(PL.AUTHORIZATION_MAX_UNITS >24,TRUE,FALSE) AS FLAG,
	ROW_NUMBER() OVER (PARTITION BY PL.CLIENT_SERVICE_KEY, DATE_TRUNC(MONTH,D.CALENDAR_DATE) ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
			integration.FACT_CLIENT_SERVICE_MERGED PL
		JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
		D.CALENDAR_DATE BETWEEN PL.AUTHORIZATION_PERIOD_START_DATE AND PL.AUTHORIZATION_PERIOD_END_DATE
	AND AUTH_INFO::NUMBER=D.DAY_OF_WEEK
		WHERE
		PL.ORIGINAL_SOURCE_SYSTEM_ID =13
	AND PL.AUTHORIZATION_UOM IN(''Monthly'')
)
-- FOR BIMONTHLY RECURRENCE CALCULATION
, BIMONTHLY_AUTHS AS (
		SELECT
		PL.CLIENT_SERVICE_KEY,
		D.CALENDAR_DATE,
		D.HAH_CURRENT_WEEK_FIRST_DAY,
		D.HAH_CURRENT_WEEK_LAST_DAY,
		 PL.CLIENT_KEY,
	   PL.PARTNER_CONTRACT_SERVICE_KEY,		
			PL.AUTHORIZATION_DISCIPLINE,
			PL.AUTHORIZATION_UOM,
			PL.AUTH_INFO::NUMBER,
	 CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN AUTHORIZATION_MAX_UNITS_BY_UOM ELSE 0 END AS HOURS_AUTHORIZED,
  	   CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN IFF(PL.AUTHORIZATION_MAX_UNITS_BY_UOM>0,1,0) ELSE 0 END AS EFFECTIVE_DAYS,
	  PL.AUTHORIZATION_PERIOD_START_DATE,
        PL.AUTHORIZATION_PERIOD_END_DATE,
  	   HOURS_AUTHORIZED AS HOURS_AUTHORIZED_NON_ADJUSTED,
	   PL.SOURCE_SYSTEM_ID,
	  PL.ORIGINAL_SOURCE_SYSTEM_ID,
	  IFNULL(TRIM(REPLACE(TRIM(REPLACE(PL.AUTHORIZATION_TYPE,''Authorization'')),''UNKNOWN'')),''Hourly'') AS ATYPE,
	 IFF(PL.AUTHORIZATION_PERIOD_START_DATE <= D.HAH_CURRENT_WEEK_FIRST_DAY, D.HAH_CURRENT_WEEK_FIRST_DAY, PL.AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE,
	 IFF(PL.AUTHORIZATION_PERIOD_END_DATE >= D.HAH_CURRENT_WEEK_LAST_DAY, D.HAH_CURRENT_WEEK_LAST_DAY, PL.AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE,
	 NULL AS PERIOD_ONHOLD_BEGIN_DATE,
	 NULL AS PERIOD_ONHOLD_END_DATE,
	 DATEDIFF(''DAY'',PERIOD_BEGIN_SERVICE_DATE,PERIOD_BEGIN_SERVICE_DATE)+1 AS ACTUALWEEKDAYS,
	 NULL AS WEEKDAYSWOH,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED,
	 IFF(PL.AUTHORIZATION_MAX_UNITS >24,TRUE,FALSE) AS FLAG,
	 ROW_NUMBER() OVER (PARTITION BY PL.CLIENT_SERVICE_KEY, DATE_TRUNC(MONTH,D.CALENDAR_DATE) ORDER BY D.CALENDAR_DATE) AS PICKER,
	 DENSE_RANK() OVER (PARTITION BY PL.CLIENT_SERVICE_KEY ORDER BY D.YEAR_MONTH) AS SKIPPER
		FROM
			integration.FACT_CLIENT_SERVICE_MERGED PL
		JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
		D.CALENDAR_DATE BETWEEN PL.AUTHORIZATION_PERIOD_START_DATE AND PL.AUTHORIZATION_PERIOD_END_DATE
	AND AUTH_INFO::NUMBER=D.DAY_OF_WEEK
		WHERE
		PL.ORIGINAL_SOURCE_SYSTEM_ID =13
	AND PL.AUTHORIZATION_UOM IN(''BiMonthly'')
)
-- FOR SEMI-ANNUAL and Every 6 MONTHS RECURRENCE CALCULATION (Based on assumption, there is no data to verify this!)
-- FOR ANNUAL RECURRENCE CALCULATION  (Based on assumption, there is no data to verify this!)
--
--FOR Every 5 WEEKS and Every 6 WEEKS RECURRENCE CALCULATION
, EVERY_FIVE_TO_SIX_WEEKS_AUTHS AS (
	SELECT
	    PL.CLIENT_SERVICE_KEY,
		D.CALENDAR_DATE,
		D.HAH_CURRENT_WEEK_FIRST_DAY,
		D.HAH_CURRENT_WEEK_LAST_DAY,
		 PL.CLIENT_KEY,
	   PL.PARTNER_CONTRACT_SERVICE_KEY,	
		PL.AUTHORIZATION_DISCIPLINE,
		PL.AUTHORIZATION_UOM,
		PL.auth_info::NUMBER,
	 CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN AUTHORIZATION_MAX_UNITS_BY_UOM ELSE 0 END AS HOURS_AUTHORIZED,
  	   CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN IFF(PL.AUTHORIZATION_MAX_UNITS_BY_UOM>0,1,0) ELSE 0 END AS EFFECTIVE_DAYS,
	PL.AUTHORIZATION_PERIOD_START_DATE,
        PL.AUTHORIZATION_PERIOD_END_DATE,
  	   HOURS_AUTHORIZED AS HOURS_AUTHORIZED_NON_ADJUSTED,
	 PL.SOURCE_SYSTEM_ID,
	  PL.ORIGINAL_SOURCE_SYSTEM_ID,
	  IFNULL(TRIM(REPLACE(TRIM(REPLACE(PL.AUTHORIZATION_TYPE,''Authorization'')),''UNKNOWN'')),''Hourly'') AS ATYPE,
	 IFF(PL.AUTHORIZATION_PERIOD_START_DATE <= D.HAH_CURRENT_WEEK_FIRST_DAY, D.HAH_CURRENT_WEEK_FIRST_DAY, PL.AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE,
	 IFF(PL.AUTHORIZATION_PERIOD_END_DATE >= D.HAH_CURRENT_WEEK_LAST_DAY, D.HAH_CURRENT_WEEK_LAST_DAY, PL.AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE,
	 NULL AS PERIOD_ONHOLD_BEGIN_DATE,
	 NULL AS PERIOD_ONHOLD_END_DATE,
	 DATEDIFF(''DAY'',PERIOD_BEGIN_SERVICE_DATE,PERIOD_BEGIN_SERVICE_DATE)+1 AS ACTUALWEEKDAYS,
	 NULL AS WEEKDAYSWOH,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED,
	 IFF(PL.AUTHORIZATION_MAX_UNITS >24,TRUE,FALSE) AS FLAG,
	 ROW_NUMBER() OVER (PARTITION BY PL.CLIENT_SERVICE_KEY ORDER BY D.CALENDAR_DATE) AS PICKER
	FROM
		integration.FACT_CLIENT_SERVICE_MERGED PL
	JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
	D.CALENDAR_DATE BETWEEN PL.AUTHORIZATION_PERIOD_START_DATE AND PL.AUTHORIZATION_PERIOD_END_DATE
	AND AUTH_INFO::NUMBER=D.DAY_OF_WEEK
	WHERE
	PL.ORIGINAL_SOURCE_SYSTEM_ID =13
	AND PL.AUTHORIZATION_UOM IN(''Every 5 Weeks'',''Every 6 Weeks'')
)
--FOR PLANS RECURRING ONCE
,  ONE_TIME_AUTHS AS (
	SELECT DISTINCT 
	PL.CLIENT_SERVICE_KEY,
		D.HAH_CURRENT_WEEK_FIRST_DAY,
		D.HAH_CURRENT_WEEK_LAST_DAY,
		D.CALENDAR_DATE,
		 PL.CLIENT_KEY,
	   PL.PARTNER_CONTRACT_SERVICE_KEY,
		PL.AUTHORIZATION_DISCIPLINE,
		PL.AUTHORIZATION_UOM,
		PL.auth_info::NUMBER,
		NULL AS PICKER,
		NULL AS SKIPPER,
		 CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN AUTHORIZATION_MAX_UNITS_BY_UOM ELSE 0 END AS HOURS_AUTHORIZED,
  	   CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN IFF(PL.AUTHORIZATION_MAX_UNITS_BY_UOM>0,1,0) ELSE 0 END AS EFFECTIVE_DAYS,
	  PL.AUTHORIZATION_PERIOD_START_DATE,
        PL.AUTHORIZATION_PERIOD_END_DATE,
  	   HOURS_AUTHORIZED AS HOURS_AUTHORIZED_NON_ADJUSTED,
	  PL.SOURCE_SYSTEM_ID,
	  PL.ORIGINAL_SOURCE_SYSTEM_ID,
	  IFNULL(TRIM(REPLACE(TRIM(REPLACE(PL.AUTHORIZATION_TYPE,''Authorization'')),''UNKNOWN'')),''Hourly'') AS ATYPE,
	 IFF(PL.AUTHORIZATION_PERIOD_START_DATE <= D.HAH_CURRENT_WEEK_FIRST_DAY, D.HAH_CURRENT_WEEK_FIRST_DAY, PL.AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE,
	 IFF(PL.AUTHORIZATION_PERIOD_END_DATE >= D.HAH_CURRENT_WEEK_LAST_DAY, D.HAH_CURRENT_WEEK_LAST_DAY, PL.AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE,
	 NULL AS PERIOD_ONHOLD_BEGIN_DATE,
	 NULL AS PERIOD_ONHOLD_END_DATE,
	 DATEDIFF(''DAY'',PERIOD_BEGIN_SERVICE_DATE,PERIOD_BEGIN_SERVICE_DATE)+1 AS ACTUALWEEKDAYS,
	 NULL AS WEEKDAYSWOH,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED,
	  IFF(PL.AUTHORIZATION_MAX_UNITS >24,TRUE,FALSE) AS FLAG
	FROM
		integration.FACT_CLIENT_SERVICE_MERGED PL
	INNER JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D
    ON 
    D.CALENDAR_DATE BETWEEN PL.AUTHORIZATION_PERIOD_START_DATE AND PL.AUTHORIZATION_PERIOD_END_DATE
	AND AUTH_INFO::NUMBER=D.DAY_OF_WEEK
		WHERE
		PL.ORIGINAL_SOURCE_SYSTEM_ID =13
	AND PL.AUTHORIZATION_UOM IN(''One Time'')
)
-- FOR Every 90 Days RECURRENCE CALCULATION
, EVERY_NINETY_DAYS_AUTHS AS (
		SELECT
		PL.CLIENT_SERVICE_KEY,
		D.CALENDAR_DATE,
		D.HAH_CURRENT_WEEK_FIRST_DAY,
		D.HAH_CURRENT_WEEK_LAST_DAY,
		PL.CLIENT_KEY,
	    PL.PARTNER_CONTRACT_SERVICE_KEY,		
		PL.AUTHORIZATION_DISCIPLINE,
		PL.AUTHORIZATION_UOM,
		PL.AUTH_INFO::NUMBER,
		CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN AUTHORIZATION_MAX_UNITS_BY_UOM ELSE 0 END AS HOURS_AUTHORIZED,
  	  CASE WHEN DAYOFWEEK(D.CALENDAR_DATE) = AUTH_INFO::NUMBER THEN IFF(PL.AUTHORIZATION_MAX_UNITS_BY_UOM>0,1,0) ELSE 0 END AS EFFECTIVE_DAYS,
	  PL.AUTHORIZATION_PERIOD_START_DATE,
        PL.AUTHORIZATION_PERIOD_END_DATE,
  	  HOURS_AUTHORIZED AS HOURS_AUTHORIZED_NON_ADJUSTED,
	  PL.SOURCE_SYSTEM_ID,
	  PL.ORIGINAL_SOURCE_SYSTEM_ID,
	  IFNULL(TRIM(REPLACE(TRIM(REPLACE(PL.AUTHORIZATION_TYPE,''Authorization'')),''UNKNOWN'')),''Hourly'') AS ATYPE,
	 IFF(PL.AUTHORIZATION_PERIOD_START_DATE <= D.HAH_CURRENT_WEEK_FIRST_DAY, D.HAH_CURRENT_WEEK_FIRST_DAY, PL.AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE,
	 IFF(PL.AUTHORIZATION_PERIOD_END_DATE >= D.HAH_CURRENT_WEEK_LAST_DAY, D.HAH_CURRENT_WEEK_LAST_DAY, PL.AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE,
	 NULL AS PERIOD_ONHOLD_BEGIN_DATE,
	 NULL AS PERIOD_ONHOLD_END_DATE,
	 DATEDIFF(''DAY'',PERIOD_BEGIN_SERVICE_DATE,PERIOD_BEGIN_SERVICE_DATE)+1 AS ACTUALWEEKDAYS,
	 NULL AS WEEKDAYSWOH,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED,
	 HOURS_AUTHORIZED AS PERIOD_HOURS_AUTHORIZED,
	 IFF(PL.AUTHORIZATION_MAX_UNITS >24,TRUE,FALSE) AS FLAG,
	 ROW_NUMBER() OVER (PARTITION BY PL.CLIENT_SERVICE_KEY ORDER BY D.CALENDAR_DATE) AS PICKER
		FROM
			integration.FACT_CLIENT_SERVICE_MERGED PL
		JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON
		 D.CALENDAR_DATE BETWEEN PL.AUTHORIZATION_PERIOD_START_DATE AND PL.AUTHORIZATION_PERIOD_END_DATE
	AND AUTH_INFO::NUMBER=D.DAY_OF_WEEK
		WHERE
		PL.ORIGINAL_SOURCE_SYSTEM_ID =13
	AND PL.AUTHORIZATION_UOM IN(''Every 90 Days'')
)
,TOTAL_AUTHS AS (
	SELECT * FROM (
	SELECT HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY, SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID, AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE, 
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY, ATYPE, 
CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY, HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS, HOURS_AUTHORIZED AS  AUTHORIZATION_MAX_UNITS_ADJUSTED, 
EFFECTIVE_DAYS AS AUTHDAYS, PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS, 
WEEKDAYSWOH, PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED, PERIOD_HOURS_AUTHORIZED
		FROM WEEKLY_AUTHS -- 0, 1 AND 7
		UNION ALL
		SELECT HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY, SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID, AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE, 
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY, ATYPE, 
CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY, HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS, HOURS_AUTHORIZED AS  AUTHORIZATION_MAX_UNITS_ADJUSTED, 
EFFECTIVE_DAYS AS AUTHDAYS, PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS, 
WEEKDAYSWOH, PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED, PERIOD_HOURS_AUTHORIZED
		FROM BIWEEKLY_TO_EVERY4WEEK_AUTHS WHERE AUTHORIZATION_UOM  IN (''BiWeekly'') AND PICKER % 2 = 1 --2 ,13
		UNION ALL 
		SELECT HAH_CURRENT_WEEK_FIRST_DAY, HAH_CURRENT_WEEK_LAST_DAY,SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID, AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE, 
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY, ATYPE, 
CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY, HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS, HOURS_AUTHORIZED AS  AUTHORIZATION_MAX_UNITS_ADJUSTED, 
EFFECTIVE_DAYS AS AUTHDAYS, PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS, 
WEEKDAYSWOH, PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED, PERIOD_HOURS_AUTHORIZED
		FROM BIWEEKLY_TO_EVERY4WEEK_AUTHS WHERE AUTHORIZATION_UOM  IN (''Every 3 Weeks'') AND PICKER % 3 = 1 --6
		UNION ALL
		SELECT HAH_CURRENT_WEEK_FIRST_DAY, HAH_CURRENT_WEEK_LAST_DAY,SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID, AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE, 
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY, ATYPE, 
CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY, HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS, HOURS_AUTHORIZED AS  AUTHORIZATION_MAX_UNITS_ADJUSTED, 
EFFECTIVE_DAYS AS AUTHDAYS, PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS, 
WEEKDAYSWOH, PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED, PERIOD_HOURS_AUTHORIZED
		FROM BIWEEKLY_TO_EVERY4WEEK_AUTHS WHERE AUTHORIZATION_UOM  IN (''Every 4 Weeks'') AND PICKER % 4 = 1 --9
		UNION ALL
	SELECT HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY, SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID, AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE, 
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY, ATYPE, 
CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY, HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS, HOURS_AUTHORIZED AS  AUTHORIZATION_MAX_UNITS_ADJUSTED, 
EFFECTIVE_DAYS AS AUTHDAYS, PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS, 
WEEKDAYSWOH, PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED, PERIOD_HOURS_AUTHORIZED
		FROM MONTHLY_AUTHS WHERE AUTHORIZATION_UOM IN(''Monthly'') AND PICKER = 1
		UNION ALL
		SELECT HAH_CURRENT_WEEK_FIRST_DAY, HAH_CURRENT_WEEK_LAST_DAY,SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID, AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE, 
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY, ATYPE, 
CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY, HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS, HOURS_AUTHORIZED AS  AUTHORIZATION_MAX_UNITS_ADJUSTED, 
EFFECTIVE_DAYS AS AUTHDAYS, PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS, 
WEEKDAYSWOH, PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED, PERIOD_HOURS_AUTHORIZED
		FROM BIMONTHLY_AUTHS WHERE AUTHORIZATION_UOM IN(''BiMonthly'') AND PICKER = 1 AND SKIPPER % 2 = 1
		UNION ALL
	SELECT HAH_CURRENT_WEEK_FIRST_DAY, HAH_CURRENT_WEEK_LAST_DAY,SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID, AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE, 
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY, ATYPE, 
CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY, HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS, HOURS_AUTHORIZED AS  AUTHORIZATION_MAX_UNITS_ADJUSTED, 
EFFECTIVE_DAYS AS AUTHDAYS, PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS, 
WEEKDAYSWOH, PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED, PERIOD_HOURS_AUTHORIZED
		FROM EVERY_FIVE_TO_SIX_WEEKS_AUTHS WHERE AUTHORIZATION_UOM  IN (''Every 5 Weeks'') AND PICKER % 5 = 1
		UNION ALL
		SELECT HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY, SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID, AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE, 
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY, ATYPE, 
CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY, HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS, HOURS_AUTHORIZED AS  AUTHORIZATION_MAX_UNITS_ADJUSTED, 
EFFECTIVE_DAYS AS AUTHDAYS, PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS, 
WEEKDAYSWOH, PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED, PERIOD_HOURS_AUTHORIZED
		FROM EVERY_FIVE_TO_SIX_WEEKS_AUTHS WHERE AUTHORIZATION_UOM  IN (''Every 6 Weeks'') AND PICKER % 6 = 1
		UNION ALL
		SELECT HAH_CURRENT_WEEK_FIRST_DAY, HAH_CURRENT_WEEK_LAST_DAY,SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID, AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE, 
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY, ATYPE, 
CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY, HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS, HOURS_AUTHORIZED AS  AUTHORIZATION_MAX_UNITS_ADJUSTED, 
EFFECTIVE_DAYS AS AUTHDAYS, PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS, 
WEEKDAYSWOH, PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED, PERIOD_HOURS_AUTHORIZED
		FROM ONE_TIME_AUTHS --12
		UNION ALL
		SELECT  HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY, SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID, AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE, 
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY, ATYPE, 
CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY, HOURS_AUTHORIZED AS AUTHORIZATION_MAX_UNITS, HOURS_AUTHORIZED AS  AUTHORIZATION_MAX_UNITS_ADJUSTED, 
EFFECTIVE_DAYS AS AUTHDAYS, PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS, 
WEEKDAYSWOH, PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED, PERIOD_HOURS_AUTHORIZED
		FROM EVERY_NINETY_DAYS_AUTHS WHERE AUTHORIZATION_UOM  IN(''Every 90 days'') AND PICKER % 90 = 1
	) WHERE HAH_CURRENT_WEEK_FIRST_DAY >= ''2011-01-01'' -- ASR in Prime was started IN 2011-01-01
)
	SELECT DISTINCT HAH_CURRENT_WEEK_FIRST_DAY, SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID,AUTH_START_DATE,AUTH_END_DATE,CLIENT_SERVICE_KEY, ATYPE, 
	CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY,SUM(AUTHORIZATION_MAX_UNITS) AS AUTHORIZATION_MAX_UNITS, SUM(AUTHORIZATION_MAX_UNITS_ADJUSTED) AS AUTHORIZATION_MAX_UNITS_ADJUSTED,
	SUM(AUTHDAYS) AS AUTHDAYS,PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS,
	WEEKDAYSWOH, SUM(PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED) AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED, SUM(PERIOD_HOURS_AUTHORIZED) AS PERIOD_HOURS_AUTHORIZED
    FROM TOTAL_AUTHS AO
    GROUP BY HAH_CURRENT_WEEK_FIRST_DAY, SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID,AUTH_START_DATE,AUTH_END_DATE,CLIENT_SERVICE_KEY, ATYPE, 
	CLIENT_KEY, PARTNER_CONTRACT_SERVICE_KEY,PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE, PERIOD_ONHOLD_END_DATE, ACTUALWEEKDAYS,
	WEEKDAYSWOH
)
,ALLIANCE AS (
WITH WEEKLY_AUTH AS
(
SELECT CS.CLIENT_SERVICE_KEY 
		, DD.CALENDAR_DATE AS AUTH_DAY, CS.AUTH_INFO , DAYNAME(DD.CALENDAR_DATE)
		, CASE WHEN UPPER(DAYNAME(DD.CALENDAR_DATE)) =''SAT'' AND ILIKE(CS.AUTH_INFO ,''%Sat%'') THEN TRUE 
			   WHEN UPPER(DAYNAME(DD.CALENDAR_DATE)) =''MON'' AND ILIKE(CS.AUTH_INFO ,''%Mon%'') THEN TRUE 
			   WHEN UPPER(DAYNAME(DD.CALENDAR_DATE)) =''TUE'' AND ILIKE(CS.AUTH_INFO ,''%Tue%'') THEN TRUE 
			   WHEN UPPER(DAYNAME(DD.CALENDAR_DATE)) =''WED'' AND ILIKE(CS.AUTH_INFO ,''%Wed%'') THEN TRUE 
			   WHEN UPPER(DAYNAME(DD.CALENDAR_DATE)) =''THU'' AND ILIKE(CS.AUTH_INFO ,''%Thu%'') THEN TRUE 
			   WHEN UPPER(DAYNAME(DD.CALENDAR_DATE)) =''FRI'' AND ILIKE(CS.AUTH_INFO ,''%Fri%'') THEN TRUE 
			   WHEN UPPER(DAYNAME(DD.CALENDAR_DATE)) =''SUN'' AND ILIKE(CS.AUTH_INFO ,''%Sun%'') THEN TRUE ELSE FALSE
		  END AS HAS_AUTH
		,CASE WHEN AUTHORIZATION_UOM=''Weekly'' THEN 1
			  WHEN AUTHORIZATION_UOM=''BiWeekly'' THEN 2
			  WHEN AUTHORIZATION_UOM=''Every 3 Weeks'' THEN 3
			  WHEN AUTHORIZATION_UOM=''Every 4 Weeks'' THEN 4
			  WHEN AUTHORIZATION_UOM=''Every 5 Weeks'' THEN 5
			  WHEN AUTHORIZATION_UOM=''Every 8 Weeks'' THEN 8
			  WHEN AUTHORIZATION_UOM=''Every 12 Weeks'' THEN 12 END AS OCCURANCE
		, CS.AUTHORIZATION_UOM, len(CS.AUTH_INFO) - len(replace(CS.AUTH_INFO, '','', '''')) +1 WEEKDAYS
		, IFF(HAS_AUTH, CS.AUTHORIZATION_MAX_UNITS_BY_UOM/WEEKDAYS,0) AS AUTH_HOURS
		, DD.HAH_CURRENT_WEEK_FIRST_DAY ,DD.HAH_CURRENT_WEEK_LAST_DAY 
FROM INTEGRATION.FACT_CLIENT_SERVICE_MERGED CS 
INNER JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE DD
ON DD.CALENDAR_DATE BETWEEN CS.AUTHORIZATION_PERIOD_START_DATE ::DATE AND CS.AUTHORIZATION_PERIOD_END_DATE ::DATE
WHERE CS.AUTHORIZATION_UOM IN (''Weekly'',''BiWeekly'',''Every 3 Weeks'',''Every 4 Weeks'',''Every 5 Weeks'',''Every 8 Weeks'',''Every 12 Weeks'')
AND CS.ORIGINAL_SOURCE_SYSTEM_ID =19 
QUALIFY (DENSE_RANK() OVER (PARTITION BY CS.CLIENT_SERVICE_KEY ORDER BY DD.HAH_CURRENT_WEEK_FIRST_DAY) + (OCCURANCE-1)) % OCCURANCE = 0
)--SELECT SUM(AUTH_HOURS) FROM WEEKLY_AUTH;, 
,MONTHLY_AUTH AS
(
SELECT DISTINCT CS.CLIENT_SERVICE_KEY 
	   ,DATE_TRUNC(MONTH, DD.CALENDAR_DATE) AS AUTH_MONTH 
	   ,CASE WHEN AUTHORIZATION_UOM=''Monthly'' THEN 1
			 WHEN AUTHORIZATION_UOM=''BiMonthly'' THEN 2
		     WHEN AUTHORIZATION_UOM=''Every 4 Months'' THEN 4
			 WHEN AUTHORIZATION_UOM=''Yearly'' THEN 12
			 END AS OCCURANCE
	   ,CS.AUTHORIZATION_MAX_UNITS_BY_UOM AS AUTH_HOURS
	   ,DD.HAH_CURRENT_WEEK_FIRST_DAY ,DD.HAH_CURRENT_WEEK_LAST_DAY 
FROM INTEGRATION.FACT_CLIENT_SERVICE_MERGED CS
INNER JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE DD
	ON DD.CALENDAR_DATE BETWEEN CS.AUTHORIZATION_PERIOD_START_DATE ::DATE AND CS.AUTHORIZATION_PERIOD_END_DATE ::DATE
WHERE CS.AUTHORIZATION_UOM IN (''Monthly'',''BiMonthly'',''Every 4 Months'',''Yearly'') -- Monthly
		AND TRY_TO_NUMBER(replace(CS.AUTH_INFO ,''"'', ''''))= DAY(DD.CALENDAR_DATE) AND ORIGINAL_SOURCE_SYSTEM_ID =19 -- X Day of Month
QUALIFY (DENSE_RANK() OVER(PARTITION BY CS.CLIENT_SERVICE_KEY ORDER BY DATE_TRUNC(MONTH, DD.CALENDAR_DATE)) + (OCCURANCE-1)) % OCCURANCE  = 0
),
ALL_AUTH AS (
--WEEKLY AUTH
SELECT DISTINCT WO.HAH_CURRENT_WEEK_FIRST_DAY, CS.SOURCE_SYSTEM_ID, CS.ORIGINAL_SOURCE_SYSTEM_ID ,
CS.AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE,CS.AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, WO.CLIENT_SERVICE_KEY, 
CS.AUTHORIZATION_TYPE, CS.CLIENT_KEY ,CS.PARTNER_CONTRACT_SERVICE_KEY , CS.AUTHORIZATION_MAX_UNITS ,CS.AUTHORIZATION_MAX_UNITS_ADJUSTED
,DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1 AS AUTHDAYS ,
IFF(CS.AUTHORIZATION_PERIOD_START_DATE <= WO.HAH_CURRENT_WEEK_FIRST_DAY, WO.HAH_CURRENT_WEEK_FIRST_DAY, AUTHORIZATION_PERIOD_START_DATE) 
AS PERIOD_BEGIN_SERVICE_DATE,IFF(AUTHORIZATION_PERIOD_END_DATE >= WO.HAH_CURRENT_WEEK_LAST_DAY, WO.HAH_CURRENT_WEEK_LAST_DAY, 
AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE,NULL AS PERIOD_ONHOLD_BEGIN_DATE, NULL AS PERIOD_ONHOLD_END_DATE
,CASE WHEN WO.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND WO.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
			THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,HAH_CURRENT_WEEK_LAST_DAY)+1)
		WHEN WO.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND WO.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
			THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1)
		WHEN WO.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND WO.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
			THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY)+1)
		WHEN WO.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND WO.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
			THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,AUTHORIZATION_PERIOD_END_DATE)+1) END AS ACTUALWEEKDAYS
,ACTUALWEEKDAYS AS WEEKDAYSWOH ,SUM(WO.AUTH_HOURS) AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED 
,SUM(WO.AUTH_HOURS) AS PERIOD_HOURS_AUTHORIZED
FROM WEEKLY_AUTH WO
JOIN INTEGRATION.FACT_CLIENT_SERVICE_MERGED CS ON CS.CLIENT_SERVICE_KEY = WO.CLIENT_SERVICE_KEY
GROUP BY ALL
UNION 
--MONTHLY AUTH
SELECT MO.HAH_CURRENT_WEEK_FIRST_DAY, CS.SOURCE_SYSTEM_ID, CS.ORIGINAL_SOURCE_SYSTEM_ID ,
CS.AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE, CS.AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, MO.CLIENT_SERVICE_KEY, 
CS.AUTHORIZATION_TYPE, CS.CLIENT_KEY ,CS.PARTNER_CONTRACT_SERVICE_KEY , CS.AUTHORIZATION_MAX_UNITS ,CS.AUTHORIZATION_MAX_UNITS_ADJUSTED
,DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1 AS AUTHDAYS
,IFF(CS.AUTHORIZATION_PERIOD_START_DATE <= MO.HAH_CURRENT_WEEK_FIRST_DAY, MO.HAH_CURRENT_WEEK_FIRST_DAY, AUTHORIZATION_PERIOD_START_DATE) 
AS PERIOD_BEGIN_SERVICE_DATE,IFF(AUTHORIZATION_PERIOD_END_DATE >= MO.HAH_CURRENT_WEEK_LAST_DAY, MO.HAH_CURRENT_WEEK_LAST_DAY, 
AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE, NULL AS PERIOD_ONHOLD_BEGIN_DATE, NULL AS PERIOD_ONHOLD_END_DATE
,CASE WHEN MO.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND MO.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
	  THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,HAH_CURRENT_WEEK_LAST_DAY)+1)
	  WHEN MO.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND MO.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
	  THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1)
	  WHEN MO.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND MO.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
	  THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY)+1)
	  WHEN MO.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND MO.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
	  THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,AUTHORIZATION_PERIOD_END_DATE)+1) 
END AS ACTUALWEEKDAYS
,ACTUALWEEKDAYS AS WEEKDAYSWOH, SUM(MO.AUTH_HOURS) AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED 
,SUM(MO.AUTH_HOURS) AS PERIOD_HOURS_AUTHORIZED
FROM MONTHLY_AUTH MO
JOIN INTEGRATION.FACT_CLIENT_SERVICE_MERGED CS ON CS.CLIENT_SERVICE_KEY = MO.CLIENT_SERVICE_KEY
GROUP BY ALL
)
SELECT HAH_CURRENT_WEEK_FIRST_DAY, SOURCE_SYSTEM_ID, ORIGINAL_SOURCE_SYSTEM_ID, AUTH_START_DATE, AUTH_END_DATE, CLIENT_SERVICE_KEY, 
AUTHORIZATION_TYPE, CLIENT_KEY ,PARTNER_CONTRACT_SERVICE_KEY , AUTHORIZATION_MAX_UNITS ,AUTHORIZATION_MAX_UNITS_ADJUSTED, 
AUTHDAYS, PERIOD_BEGIN_SERVICE_DATE, PERIOD_END_SERVICE_DATE, PERIOD_ONHOLD_BEGIN_DATE,PERIOD_ONHOLD_END_DATE
,ACTUALWEEKDAYS, WEEKDAYSWOH, PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED , PERIOD_HOURS_AUTHORIZED FROM ALL_AUTH
WHERE HAH_CURRENT_WEEK_FIRST_DAY::DATE <= ''2022-09-30''
)
, OTHER_SYSTEMS AS (
SELECT DISTINCT D.HAH_CURRENT_WEEK_FIRST_DAY,SOURCE_SYSTEM_ID ,ORIGINAL_SOURCE_SYSTEM_ID,AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE ,
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY ,
	--IFNULL(TRIM(REPLACE(TRIM(REPLACE(AUTHORIZATION_TYPE,''Authorization'')),''UNKNOWN'')),''Hourly'') AS ATYPE,
	CASE WHEN AUTHORIZATION_TYPE =''Visit Authorization'' THEN ''Visit''
            WHEN AUTHORIZATION_TYPE =''Hourly Authorization'' THEN ''Hourly''
            WHEN AUTHORIZATION_TYPE =''Unit Authorization''   THEN ''Unit''
            WHEN AUTHORIZATION_TYPE =''Daily Authorization''  THEN ''Daily''
            WHEN AUTHORIZATION_TYPE=''Visit'' THEN ''Visit''
            WHEN AUTHORIZATION_TYPE=''Hourly'' THEN ''Hourly''
            WHEN AUTHORIZATION_TYPE =''Authorization'' THEN ''Hourly'' ELSE ''Hourly'' END AS ATYPE,
	CLIENT_KEY ,PARTNER_CONTRACT_SERVICE_KEY ,AUTH.AUTHORIZATION_MAX_UNITS ,AUTH.AUTHORIZATION_MAX_UNITS_ADJUSTED,
	COALESCE(NULLIFZERO(EFFECTIVE_DAYS),DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1) AS AUTHDAYS
	,IFF(AUTHORIZATION_PERIOD_START_DATE <= D.HAH_CURRENT_WEEK_FIRST_DAY, D.HAH_CURRENT_WEEK_FIRST_DAY, AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE
	,IFF(AUTHORIZATION_PERIOD_END_DATE >= D.HAH_CURRENT_WEEK_LAST_DAY, D.HAH_CURRENT_WEEK_LAST_DAY, AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE
	,NULL AS PERIOD_ONHOLD_BEGIN_DATE, NULL AS PERIOD_ONHOLD_END_DATE
	,CASE --WHEN CONCAT(AUTH.AUTHORIZATION_UOM,'' '',AUTH.ORIGINAL_SOURCE_SYSTEM_ID)=''Day 17''
		--THEN AUTHDAYS/(DATEDIFF(''WEEK'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1)
	WHEN D.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,HAH_CURRENT_WEEK_LAST_DAY)+1)
	WHEN D.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1)
	WHEN D.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY)+1)
	WHEN D.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,AUTHORIZATION_PERIOD_END_DATE)+1) END AS ACTUALWEEKDAYS,	
    NULL AS WEEKDAYSWOH,
	--WEEKDAYS* ((AUTHORIZATION_MAX_UNITS) /AUTHDAYS) ,
    CASE WHEN  AUTH.AUTHORIZATION_UOM =''Weekly'' THEN AUTHORIZATION_MAX_UNITS_ADJUSTED_BY_UOM
	ELSE ACTUALWEEKDAYS* ((AUTHORIZATION_MAX_UNITS) /AUTHDAYS) END AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED
	,CASE WHEN AUTH.AUTHORIZATION_UOM =''Weekly'' AND (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY)+1) = ACTUALWEEKDAYS
	THEN AUTHORIZATION_MAX_UNITS_ADJUSTED_BY_UOM
	WHEN AUTH.AUTHORIZATION_UOM =''Weekly'' AND (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY)+1) != ACTUALWEEKDAYS
	THEN ACTUALWEEKDAYS* ((AUTHORIZATION_MAX_UNITS_ADJUSTED_BY_UOM) /7)
	ELSE ACTUALWEEKDAYS* ((AUTHORIZATION_MAX_UNITS_ADJUSTED) /AUTHDAYS) END  AS PERIOD_HOURS_AUTHORIZED
	FROM DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_CLIENT_SERVICE_MERGED  AUTH
	JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON AUTH.AUTHORIZATION_PERIOD_START_DATE <=D.CALENDAR_DATE AND AUTH.AUTHORIZATION_PERIOD_END_DATE >=D.CALENDAR_DATE
	WHERE AUTH.CANCELLED_FLAG=FALSE AND (AUTH.ORIGINAL_SOURCE_SYSTEM_ID NOT IN(13,3,19,8,1,2,16,17)
OR (AUTH.ORIGINAL_SOURCE_SYSTEM_ID=16 AND D.HAH_CURRENT_WEEK_FIRST_DAY <''2023-11-01''))
)
, SYSTEM_WITH_ON_HOLD_DATA AS (
SELECT DISTINCT D.HAH_CURRENT_WEEK_FIRST_DAY,AUTH.SOURCE_SYSTEM_ID,AUTH.ORIGINAL_SOURCE_SYSTEM_ID ,AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE ,
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY ,
	 --IFNULL(TRIM(REPLACE(TRIM(REPLACE(AUTHORIZATION_TYPE,''Authorization'')),''UNKNOWN'')),''Hourly'') AS ATYPE,
CASE WHEN AUTHORIZATION_TYPE =''Visit Authorization'' THEN ''Visit''
            WHEN AUTHORIZATION_TYPE =''Hourly Authorization'' THEN ''Hourly''
            WHEN AUTHORIZATION_TYPE =''Unit Authorization''   THEN ''Unit''
            WHEN AUTHORIZATION_TYPE =''Daily Authorization''  THEN ''Daily''
            WHEN AUTHORIZATION_TYPE=''Visit'' THEN ''Visit''
            WHEN AUTHORIZATION_TYPE=''Hourly'' THEN ''Hourly''
            WHEN AUTHORIZATION_TYPE =''Authorization'' THEN ''Hourly'' ELSE ''Hourly'' END AS ATYPE,
	AUTH.CLIENT_KEY ,PARTNER_CONTRACT_SERVICE_KEY ,AUTH.AUTHORIZATION_MAX_UNITS ,AUTH.AUTHORIZATION_MAX_UNITS_ADJUSTED
	,COALESCE(NULLIFZERO(EFFECTIVE_DAYS),DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1) AS AUTHDAYS
	,IFF(AUTHORIZATION_PERIOD_START_DATE <= D.HAH_CURRENT_WEEK_FIRST_DAY, D.HAH_CURRENT_WEEK_FIRST_DAY, AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE
	,IFF(AUTHORIZATION_PERIOD_END_DATE >= D.HAH_CURRENT_WEEK_LAST_DAY, D.HAH_CURRENT_WEEK_LAST_DAY, AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE
	,CASE WHEN COH.ON_HOLD_START_DATE IS NULL OR COH.ON_HOLD_END_DATE < PERIOD_BEGIN_SERVICE_DATE OR COH.ON_HOLD_START_DATE > PERIOD_END_SERVICE_DATE THEN NULL
		  WHEN COH.ON_HOLD_START_DATE <= PERIOD_BEGIN_SERVICE_DATE THEN PERIOD_BEGIN_SERVICE_DATE
	 ELSE COH.ON_HOLD_START_DATE END AS PERIOD_ONHOLD_BEGIN_DATE
	,CASE WHEN PERIOD_ONHOLD_BEGIN_DATE IS NULL THEN NULL ELSE 
		IFF(COALESCE(COH.ON_HOLD_END_DATE, PERIOD_END_SERVICE_DATE) >= PERIOD_END_SERVICE_DATE, PERIOD_END_SERVICE_DATE, 
		COALESCE(COH.ON_HOLD_END_DATE, PERIOD_END_SERVICE_DATE)) END AS PERIOD_ONHOLD_END_DATE
	,CASE WHEN D.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
			THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,HAH_CURRENT_WEEK_LAST_DAY)+1)
		WHEN D.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
			THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1)
		WHEN D.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
			THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY)+1)
		WHEN D.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
			THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,AUTHORIZATION_PERIOD_END_DATE)+1) END AS ACTUALWEEKDAYS
	,ACTUALWEEKDAYS-IFNULL(iff((DATEDIFF(''DAY'',PERIOD_ONHOLD_BEGIN_DATE,PERIOD_ONHOLD_END_DATE)+1)<0,0,(DATEDIFF(''DAY'',PERIOD_ONHOLD_BEGIN_DATE,PERIOD_ONHOLD_END_DATE)+1)),0) AS WEEKDAYSWOH
	,ACTUALWEEKDAYS* ((AUTHORIZATION_MAX_UNITS) /AUTHDAYS) AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED
	,WEEKDAYSWOH* ((AUTHORIZATION_MAX_UNITS_ADJUSTED) /AUTHDAYS) AS PERIOD_HOURS_AUTHORIZED
	FROM DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_CLIENT_SERVICE_MERGED  AUTH
	JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON AUTH.AUTHORIZATION_PERIOD_START_DATE <=D.CALENDAR_DATE AND AUTH.AUTHORIZATION_PERIOD_END_DATE >=D.CALENDAR_DATE
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.DIM_CLIENT_MERGED COH
		ON COH.ORIGINAL_CLIENT_KEY = AUTH.CLIENT_KEY   
	WHERE AUTH.CANCELLED_FLAG=FALSE AND AUTH.ORIGINAL_SOURCE_SYSTEM_ID = 3
)--SELECT * FROM SYSTEM_WITH_ON_HOLD_DATA WHERE CLIENT_KEY=''fdfd6d4f3db6337424c8095ccae2914c'';
, DATA_CCSI as 
(	select CLIENT_SERVICE_KEY,SOURCE_SYSTEM_ID,ORIGINAL_SOURCE_SYSTEM_ID,SYSTEM_CODE,ORIGINAL_SYSTEM_CODE,PARTNER_CONTRACT_SERVICE_KEY,CLIENT_ADMISSION_KEY,
	CLIENT_KEY,ORIGINAL_CLIENT_KEY,SERVICE_KEY,BILL_CODE,BILL_TYPE,BILL_UOM,SCHEDULE_TYPE,SCHEDULE_UOM,AUTHORIZATION_DISCIPLINE,AUTHORIZATION_DATE,
	IFF(COALESCE(AUTHORIZATION_PERIOD_START_DATE,AUTH_INFO::DATE) <=AUTH_INFO::DATE , AUTH_INFO::DATE, COALESCE(AUTHORIZATION_PERIOD_START_DATE,AUTH_INFO::DATE)) AS AUTHORIZATION_PERIOD_START_DATE,
	IFF(COALESCE(AUTHORIZATION_PERIOD_END_DATE,last_day(AUTH_INFO::DATE)) >= last_day(AUTH_INFO::DATE), last_day(AUTH_INFO::DATE), COALESCE(AUTHORIZATION_PERIOD_END_DATE,last_day(AUTH_INFO::DATE))) AS AUTHORIZATION_PERIOD_END_DATE,	
    EFFECTIVE_DAYS,AUTHORIZATION_TYPE,AUTHORIZATION_UOM,AUTH_INFO,AUTHORIZATION_MAX_UNITS_BY_UOM,AUTHORIZATION_MAX_UNITS,AUTHORIZATION_MAX_UNITS_ADJUSTED_BY_UOM,
	AUTHORIZATION_MAX_UNITS_ADJUSTED,ACTIVE_FLAG,CANCELLED_FLAG
	FROM DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_CLIENT_SERVICE_MERGED  AUTH WHERE AUTH.CANCELLED_FLAG=FALSE AND AUTH.ORIGINAL_SOURCE_SYSTEM_ID in(8,1,2))
,CCSI_AUTH AS (
SELECT DISTINCT D.HAH_CURRENT_WEEK_FIRST_DAY,SOURCE_SYSTEM_ID ,ORIGINAL_SOURCE_SYSTEM_ID,AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE ,
	AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY ,
	--IFNULL(TRIM(REPLACE(TRIM(REPLACE(AUTHORIZATION_TYPE,''Authorization'')),''UNKNOWN'')),''Hourly'') AS ATYPE,
	CASE WHEN AUTHORIZATION_TYPE =''Visit Authorization'' THEN ''Visit''
            WHEN AUTHORIZATION_TYPE =''Hourly Authorization'' THEN ''Hourly''
            WHEN AUTHORIZATION_TYPE =''Unit Authorization''   THEN ''Unit''
            WHEN AUTHORIZATION_TYPE =''Daily Authorization''  THEN ''Daily''
            WHEN AUTHORIZATION_TYPE=''Visit'' THEN ''Visit''
            WHEN AUTHORIZATION_TYPE=''Hourly'' THEN ''Hourly''
            WHEN AUTHORIZATION_TYPE =''Authorization'' THEN ''Hourly'' ELSE ''Hourly'' END AS ATYPE,
	CLIENT_KEY ,PARTNER_CONTRACT_SERVICE_KEY ,AUTH.AUTHORIZATION_MAX_UNITS ,AUTH.AUTHORIZATION_MAX_UNITS_ADJUSTED,
	COALESCE(NULLIFZERO(EFFECTIVE_DAYS),DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1) AS AUTHDAYS
	,IFF(AUTHORIZATION_PERIOD_START_DATE <= D.HAH_CURRENT_WEEK_FIRST_DAY, D.HAH_CURRENT_WEEK_FIRST_DAY, AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE
	,IFF(AUTHORIZATION_PERIOD_END_DATE >= D.HAH_CURRENT_WEEK_LAST_DAY, D.HAH_CURRENT_WEEK_LAST_DAY, AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE
	,NULL AS PERIOD_ONHOLD_BEGIN_DATE, NULL AS PERIOD_ONHOLD_END_DATE
	,CASE WHEN CONCAT(AUTH.AUTHORIZATION_UOM,'' '',AUTH.ORIGINAL_SOURCE_SYSTEM_ID)=''Day 17''
		THEN AUTHDAYS/(DATEDIFF(''WEEK'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1)
	WHEN D.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,HAH_CURRENT_WEEK_LAST_DAY)+1)
	WHEN D.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1)
	WHEN D.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY)+1)
	WHEN D.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,AUTHORIZATION_PERIOD_END_DATE)+1) END AS ACTUALWEEKDAYS,	
    NULL AS WEEKDAYSWOH,
	--WEEKDAYS* ((AUTHORIZATION_MAX_UNITS) /AUTHDAYS) ,
	ACTUALWEEKDAYS* ((AUTHORIZATION_MAX_UNITS) /AUTHDAYS) AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED
	,ACTUALWEEKDAYS* ((AUTHORIZATION_MAX_UNITS_ADJUSTED) /AUTHDAYS) AS PERIOD_HOURS_AUTHORIZED
	FROM DATA_CCSI  AUTH
	JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON AUTH.AUTHORIZATION_PERIOD_START_DATE <=D.CALENDAR_DATE AND AUTH.AUTHORIZATION_PERIOD_END_DATE >=D.CALENDAR_DATE
)
,HHA1 AS (
WITH DAY AS (
    SELECT AUTH_INFO:"Fri" AS Fri,AUTH_INFO:"Sat" AS Sat,AUTH_INFO:"Sun" AS Sun,AUTH_INFO:"Mon" AS Mon,
AUTH_INFO:"Tue" AS Tue,AUTH_INFO:"Wed" AS Wed,AUTH_INFO:"Thu" AS Thu,PA.*  
FROM DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_CLIENT_SERVICE_MERGED  PA 
   WHERE  ORIGINAL_SOURCE_SYSTEM_ID = 17 
   --AND PA.SYSTEM_CODE IN (''OPENSYSTEMS - DE'', ''OPENSYSTEMS - PA'',''OSHAH - DE'',''OSHAH - PA'',''OSHAH - MS'')
   AND AUTHORIZATION_UOM=''Day''
),
ABC AS (
   SELECT DISTINCT DD.CALENDAR_DATE ,
DECODE(DAYNAME(DD.CALENDAR_DATE)
                 , ''Sat'', PA.Sat
                 , ''Sun'', PA.Sun
                 , ''Mon'', PA.Mon
                 , ''Tue'', PA.Tue
                 , ''Wed'', PA.Wed
                 , ''Thu'', PA.Thu
                 , ''Fri'', PA.Fri
             , 0) AS AUTH_HOURS_PER_DAY
     , DECODE(DAYNAME(DD.CALENDAR_DATE)
                 , ''Sat'', IFF(PA.Sat>0,1,0)
                 , ''Sun'', IFF(PA.Sun>0,1,0)
                 , ''Mon'', IFF(PA.Mon>0,1,0)
                 , ''Tue'', IFF(PA.Tue>0,1,0)
                 , ''Wed'', IFF(PA.Wed>0,1,0)
                 , ''Thu'', IFF(PA.Thu>0,1,0)
                 , ''Fri'', IFF(PA.Fri>0,1,0)
             , 0) AS DAYS,PA.*,DD.HAH_CURRENT_WEEK_FIRST_DAY ,DD.HAH_CURRENT_WEEK_LAST_DAY 
FROM  DAY PA
INNER JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE DD
    ON DD.CALENDAR_DATE BETWEEN PA.AUTHORIZATION_PERIOD_START_DATE AND PA.AUTHORIZATION_PERIOD_END_DATE
WHERE AUTHORIZATION_UOM = ''Day''
),--SELECT * FROM ABC WHERE CLIENT_SERVICE_KEY=''0aba59f8186a37e5ba0eb3b32c5fa67c'';
DAILY_UOM AS (
    SELECT DISTINCT 
    ABC.HAH_CURRENT_WEEK_FIRST_DAY,
    ABC.SOURCE_SYSTEM_ID,ABC.ORIGINAL_SOURCE_SYSTEM_ID,
    ABC.AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE,
    ABC.AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE,
    ABC.CLIENT_SERVICE_KEY,
    CASE 
        WHEN ABC.AUTHORIZATION_TYPE = ''Visit Authorization'' THEN ''Visit''
        WHEN ABC.AUTHORIZATION_TYPE = ''Hourly Authorization'' THEN ''Hourly''
        WHEN ABC.AUTHORIZATION_TYPE = ''Unit Authorization'' THEN ''Hourly''
        WHEN ABC.AUTHORIZATION_TYPE = ''Daily Authorization'' THEN ''Daily''
        WHEN ABC.AUTHORIZATION_TYPE = ''Visit'' THEN ''Visit''
        WHEN ABC.AUTHORIZATION_TYPE = ''Hourly'' THEN ''Hourly''
        WHEN ABC.AUTHORIZATION_TYPE = ''Authorization'' THEN ''Hourly'' 
        ELSE ''Hourly'' 
    END AS ATYPE,
    ABC.CLIENT_KEY,
    ABC.PARTNER_CONTRACT_SERVICE_KEY,
    ABC.AUTHORIZATION_MAX_UNITS,
    ABC.AUTHORIZATION_MAX_UNITS_ADJUSTED,
    SUM(ABC.DAYS) AS AUTHDAYS,
    COUNT(ABC.DAYS) AS WEEKDAYS,
--    IFF(ABC.AUTHORIZATION_PERIOD_START_DATE <= ABC.FIRST_DAY_OF_MONTH, ABC.FIRST_DAY_OF_MONTH, ABC.AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE,
--    IFF(ABC.AUTHORIZATION_PERIOD_END_DATE >= ABC.LAST_DAY_OF_MONTH, ABC.LAST_DAY_OF_MONTH, ABC.AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE,
    IFF(AUTHORIZATION_PERIOD_START_DATE <= ABC.HAH_CURRENT_WEEK_FIRST_DAY, ABC.HAH_CURRENT_WEEK_FIRST_DAY, AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE,
    IFF(AUTHORIZATION_PERIOD_END_DATE >= ABC.HAH_CURRENT_WEEK_LAST_DAY, ABC.HAH_CURRENT_WEEK_LAST_DAY, AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE,
    NULL AS PERIOD_ONHOLD_BEGIN_DATE,
    NULL AS PERIOD_ONHOLD_END_DATE,
    SUM(ABC.AUTH_HOURS_PER_DAY) AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED,
    SUM(ABC.AUTH_HOURS_PER_DAY) AS PERIOD_HOURS_AUTHORIZED
FROM 
    ABC
WHERE 
    ABC.CANCELLED_FLAG = FALSE 
GROUP BY 
    ABC.HAH_CURRENT_WEEK_FIRST_DAY, 
    ABC.HAH_CURRENT_WEEK_LAST_DAY,
    ABC.SOURCE_SYSTEM_ID, ABC.ORIGINAL_SOURCE_SYSTEM_ID,
    ABC.AUTHORIZATION_PERIOD_START_DATE, 
    ABC.AUTHORIZATION_PERIOD_END_DATE, 
    ABC.CLIENT_SERVICE_KEY, 
    ATYPE, 
    ABC.CLIENT_KEY, 
    ABC.PARTNER_CONTRACT_SERVICE_KEY,
    ABC.AUTHORIZATION_MAX_UNITS,
    ABC.AUTHORIZATION_MAX_UNITS_ADJUSTED)
   -- SELECT * FROM daily_uom WHERE CLIENT_SERVICE_KEY=''0aba59f8186a37e5ba0eb3b32c5fa67c'';
    ,OTHER_SYSTEMSS AS(
SELECT DISTINCT D.HAH_CURRENT_WEEK_FIRST_DAY,SOURCE_SYSTEM_ID ,ORIGINAL_SOURCE_SYSTEM_ID,AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE ,
    AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY ,
    --IFNULL(TRIM(REPLACE(TRIM(REPLACE(AUTHORIZATION_TYPE,''Authorization'')),''UNKNOWN'')),''Hourly'') AS ATYPE,
    CASE WHEN AUTHORIZATION_TYPE =''Visit Authorization'' THEN ''Visit''
            WHEN AUTHORIZATION_TYPE =''Hourly Authorization'' THEN ''Hourly''
            WHEN AUTHORIZATION_TYPE =''Unit Authorization''   THEN ''Unit''
            WHEN AUTHORIZATION_TYPE =''Daily Authorization''  THEN ''Daily''
            WHEN AUTHORIZATION_TYPE=''Visit'' THEN ''Visit''
            WHEN AUTHORIZATION_TYPE=''Hourly'' THEN ''Hourly''
            WHEN AUTHORIZATION_TYPE =''Authorization'' THEN ''Hourly'' ELSE ''Hourly'' END AS ATYPE,
    CLIENT_KEY ,PARTNER_CONTRACT_SERVICE_KEY ,AUTH.AUTHORIZATION_MAX_UNITS ,AUTH.AUTHORIZATION_MAX_UNITS_ADJUSTED,
    COALESCE(NULLIFZERO(EFFECTIVE_DAYS),DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1) AS AUTHDAYS
    ,DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_FIRST_DAY)+1 AS WEEKDAYS
    ,IFF(AUTHORIZATION_PERIOD_START_DATE <= D.HAH_CURRENT_WEEK_FIRST_DAY, D.HAH_CURRENT_WEEK_FIRST_DAY, AUTHORIZATION_PERIOD_START_DATE) AS PERIOD_BEGIN_SERVICE_DATE
    ,IFF(AUTHORIZATION_PERIOD_END_DATE >= D.HAH_CURRENT_WEEK_LAST_DAY, D.HAH_CURRENT_WEEK_LAST_DAY, AUTHORIZATION_PERIOD_END_DATE) AS PERIOD_END_SERVICE_DATE
    ,NULL AS PERIOD_ONHOLD_BEGIN_DATE, NULL AS PERIOD_ONHOLD_END_DATE
    ,CASE --WHEN CONCAT(AUTH.AUTHORIZATION_UOM,'' '',AUTH.ORIGINAL_SOURCE_SYSTEM_ID)=''Day 17''
        --THEN AUTHDAYS/(DATEDIFF(''WEEK'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1)
    WHEN D.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
    THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,HAH_CURRENT_WEEK_LAST_DAY)+1)
    WHEN D.HAH_CURRENT_WEEK_FIRST_DAY<=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
    THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1)
    WHEN D.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY<=AUTHORIZATION_PERIOD_END_DATE
    THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY)+1)
    WHEN D.HAH_CURRENT_WEEK_FIRST_DAY>=AUTHORIZATION_PERIOD_START_DATE AND D.HAH_CURRENT_WEEK_LAST_DAY>=AUTHORIZATION_PERIOD_END_DATE
    THEN (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,AUTHORIZATION_PERIOD_END_DATE)+1) END AS ACTUALWEEKDAYS,  
    NULL AS WEEKDAYSWOH,
    --WEEKDAYS* ((AUTHORIZATION_MAX_UNITS) /AUTHDAYS) ,
    CASE WHEN  AUTH.AUTHORIZATION_UOM =''Weekly'' THEN AUTHORIZATION_MAX_UNITS_ADJUSTED_BY_UOM
	ELSE ACTUALWEEKDAYS* ((AUTHORIZATION_MAX_UNITS) /AUTHDAYS) END AS PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED
	,CASE WHEN AUTH.AUTHORIZATION_UOM =''Weekly'' AND (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY)+1) = ACTUALWEEKDAYS
	THEN AUTHORIZATION_MAX_UNITS_ADJUSTED_BY_UOM
	WHEN AUTH.AUTHORIZATION_UOM =''Weekly'' AND (DATEDIFF(''DAY'',HAH_CURRENT_WEEK_FIRST_DAY,HAH_CURRENT_WEEK_LAST_DAY)+1) != ACTUALWEEKDAYS
	THEN ACTUALWEEKDAYS* ((AUTHORIZATION_MAX_UNITS_ADJUSTED_BY_UOM) /7)
	ELSE ACTUALWEEKDAYS* ((AUTHORIZATION_MAX_UNITS_ADJUSTED) /AUTHDAYS) END  AS PERIOD_HOURS_AUTHORIZED	
    FROM DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_CLIENT_SERVICE_MERGED  AUTH
    JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_DATE D ON AUTH.AUTHORIZATION_PERIOD_START_DATE <=D.CALENDAR_DATE AND AUTH.AUTHORIZATION_PERIOD_END_DATE >=D.CALENDAR_DATE
    WHERE   AUTH.CANCELLED_FLAG=FALSE AND 
     (AUTH.ORIGINAL_SOURCE_SYSTEM_ID =17 
     AND AUTHORIZATION_UOM NOT IN (''Day'')
    )
)
 SELECT DISTINCT HAH_CURRENT_WEEK_FIRST_DAY,SOURCE_SYSTEM_ID,ORIGINAL_SOURCE_SYSTEM_ID
,AUTH_START_DATE, AUTH_END_DATE,CLIENT_SERVICE_KEY, ATYPE,
CLIENT_KEY,PARTNER_CONTRACT_SERVICE_KEY, AUTHORIZATION_MAX_UNITS,AUTHORIZATION_MAX_UNITS_ADJUSTED,
AUTHDAYS,
PERIOD_BEGIN_SERVICE_DATE,PERIOD_END_SERVICE_DATE,PERIOD_ONHOLD_BEGIN_DATE,PERIOD_ONHOLD_END_DATE,
AUTHDAYS AS ACTUALWEEKDAYS,WEEKDAYS AS WEEKDAYSWOH,PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED,
PERIOD_HOURS_AUTHORIZED FROM  DAILY_UOM
UNION
 SELECT DISTINCT HAH_CURRENT_WEEK_FIRST_DAY,SOURCE_SYSTEM_ID,ORIGINAL_SOURCE_SYSTEM_ID
,AUTH_START_DATE, AUTH_END_DATE,CLIENT_SERVICE_KEY, ATYPE,
CLIENT_KEY,PARTNER_CONTRACT_SERVICE_KEY, AUTHORIZATION_MAX_UNITS,AUTHORIZATION_MAX_UNITS_ADJUSTED,
AUTHDAYS,
PERIOD_BEGIN_SERVICE_DATE,PERIOD_END_SERVICE_DATE,PERIOD_ONHOLD_BEGIN_DATE,PERIOD_ONHOLD_END_DATE,
AUTHDAYS AS ACTUALWEEKDAYS,
WEEKDAYS AS WEEKDAYSWOH,
PERIOD_HOURS_AUTHORIZED_NON_ADJUSTED,
PERIOD_HOURS_AUTHORIZED FROM OTHER_SYSTEMSS
)
, all_data AS (
SELECT * FROM ASR_WEEKLY 
UNION ALL 
SELECT * FROM SYSTEM_WITH_ON_HOLD_DATA
UNION ALL
SELECT * FROM OTHER_SYSTEMS
UNION ALL
SELECT * FROM ALLIANCE
union all
select * from CCSI_AUTH
UNION ALL
select * from HHA1
)
SELECT DISTINCT *,
		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	    CURRENT_USER as ETL_INSERTED_BY ,
	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	    CURRENT_USER as ETL_LAST_UPDATED_BY,
	    0 as ETL_DELETED_FLAG
FROM all_data;

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;

 EOT
}

