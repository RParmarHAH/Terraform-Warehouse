resource "snowflake_procedure" "DW_REPORT_GET_REPORT_CLIENT_GAPS_IN_CARE" {
	name ="GET_REPORT_CLIENT_GAPS_IN_CARE"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT
BEGIN
--***************************************************************************************************************************** 
-- NAME:  MOLINA_GAPS_IN_CARE
-- 
-- DEVELOPMENT LOG: 
-- DATE        AUTHOR                NOTES: 
-- --------    -------------------   ----------------------------------------------------------------------------------------------- 
-- 08/07/2023	ASHISH SHARMA		 INITIAL DEVELOPMENT
--*****************************************************************************************************************************
INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.REPORT.CLIENT_GAPS_IN_CARE
WITH CLIENT_MAPPING AS
(
	SELECT ROSTER.CLIENT_KEY AS ROSTER_CLIENT_KEY
			, ROSTER.CLIENT_NUMBER AS ROSTER_CLIENT_NUMBER
			, CLIENT.CLIENT_KEY AS AMS_CLIENT_KEY
			, CLIENT.CLIENT_NUMBER AS AMS_CLIENT_NUMBER
			, NVL(GATOR.GATOR_CLIENT_KEY, CLIENT.CLIENT_KEY) AS GATOR_CLIENT_KEY
			, CLIENT.ORIGINAL_CLIENT_NUMBER AS PARTNER_CLIENT_NUMBER
			, CLIENT.CLIENT_FIRST_NAME AS CLIENT_FIRST_NAME
			, CLIENT.CLIENT_LAST_NAME AS CLIENT_LAST_NAME
			, MAX(VISIT.SERVICE_DATE) AS LAST_SERVICE_DATE
	FROM DW_${var.SF_ENVIRONMENT}.HAH.FACT_GAPS_IN_CARE GAPS
	INNER JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.DIM_CLIENT_MERGED ROSTER
		ON ROSTER.ORIGINAL_CLIENT_KEY = GAPS.CLIENT_KEY 
	-- Added MOLINA, CENTENE, And AMERIHEALTH
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.CLIENT_CROSS_WALK MOLINA_CW
		ON MOLINA_CW.MOLINA_CLIENT = GAPS.CLIENT_KEY 
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.CLIENT_CROSS_WALK CENTENE_CW
		ON CENTENE_CW.CENTENE_CLIENT = GAPS.CLIENT_KEY
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.CLIENT_CROSS_WALK AMERIHEALTH_CW
		ON AMERIHEALTH_CW.AMERIHEALTH_CLIENT = GAPS.CLIENT_KEY 
	INNER JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.DIM_CLIENT_MERGED CLIENT_MERGED
		ON CLIENT_MERGED.ORIGINAL_CLIENT_KEY = COALESCE(MOLINA_CW.AMS_CLIENT, CENTENE_CW.AMS_CLIENT, AMERIHEALTH_CW.AMS_CLIENT)
	INNER JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.DIM_CLIENT_MERGED CLIENT
		ON CLIENT.CLIENT_KEY = CLIENT_MERGED.CLIENT_KEY 
			AND CLIENT.ORIGINAL_CLIENT_KEY = CLIENT.CLIENT_KEY 
	LEFT JOIN APP_DB_${var.SF_ENVIRONMENT}.CARE_COORDINATION.CLIENT_MATCH_LIST GATOR
		ON GATOR.DW_CLIENT_KEY = CLIENT.CLIENT_KEY 
			AND GATOR.DW_CLIENT_KEY != GATOR.GATOR_CLIENT_KEY
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_VISIT_MERGED VISIT
		ON VISIT.CLIENT_KEY = CLIENT.CLIENT_KEY 
			AND VISIT.CONFIRMED_FLAG = ''YES''
	GROUP BY ALL
)
SELECT DISTINCT C_MAPPING.AMS_CLIENT_KEY AS CLIENT_KEY
				, C_MAPPING.ROSTER_CLIENT_NUMBER AS PARTNER_CLIENT_NUMBER
				, C_MAPPING.AMS_CLIENT_NUMBER AS CLIENT_NUMBER
				, C_MAPPING.GATOR_CLIENT_KEY AS GATOR_CLIENT_KEY
				, GP.REPORT_DATE
				, GP.SYSTEM_CODE
				, C_MAPPING.CLIENT_FIRST_NAME
				, C_MAPPING.CLIENT_LAST_NAME
				, C_MAPPING.LAST_SERVICE_DATE AS LAST_SERVICE_DATE
				, GP.BREAST_CANCER_SCREENING_ELIGIBILITY_FLAG	
				, GP.BREAST_CANCER_SCREENING_GAP_FLAG	
				, GP.CERVICAL_CANCER_SCREENING_ELIGIBILITY_FLAG	
				, GP.CERVICAL_CANCER_SCREENING_GAP_FLAG	
				, GP.COLORECTAL_CANCER_SCREENING_ELIGIBILITY_FLAG	
				, GP.COLORECTAL_CANCER_SCREENING_GAP_FLAG	
				, GP.CARE_FOR_OLDER_ADULTS_ELIGIBILITY_FLAG	
				, GP.CARE_FOR_OLDER_ADULTS_GAP_FLAG	
				, GP.CONTROLLING_HIGH_BLOOD_PRESSURE_ELIGIBILITY_FLAG	
				, GP.CONTROLLING_HIGH_BLOOD_PRESSURE_GAP_FLAG	
				, GP.STATIN_THERAPY_FOR_CARDIOVASCULAR_ELIGIBILITY_FLAG	
				, GP.STATIN_THERAPY_FOR_CARDIOVASCULAR_GAP_FLAG	
				, GP.HEMOGLOBIN_A1C_CONTROL_ELIGIBILITY_FLAG	
				, GP.HEMOGLOBIN_A1C_CONTROL_GAP_FLAG	
				, GP.BLOOD_PRESSURE_CONTROL_ELIGIBILITY_FLAG	
				, GP.BLOOD_PRESSURE_CONTROL_GAP_FLAG	
				, GP.EYE_EXAM_FOR_DIABETICS_ELIGIBILITY_FLAG	
				, GP.EYE_EXAM_FOR_DIABETICS_GAP_FLAG	
				, GP.KIDNEY_HEALTH_FOR_DIABETICS_ELIGIBILITY_FLAG	
				, GP.KIDNEY_HEALTH_FOR_DIABETICS_GAP_FLAG	
				, GP.STATIN_THERAPY_FOR_DIABETICS_ELIGIBILITY_FLAG	
				, GP.STATIN_THERAPY_FOR_DIABETICS_GAP_FLAG	
				, GP.OSTEOPOROSIS_MGMT_ELIGIBILITY_FLAG	
				, GP.OSTEOPOROSIS_MGMT_GAP_FLAG	
				, GP.OSTEOPOROSIS_SCREENING_ELIGIBILITY_FLAG	
				, GP.OSTEOPOROSIS_SCREENING_GAP_FLAG	
				, GP.ADVANCED_CARE_PLANNING_ELIGIBILITY_FLAG	
				, GP.ADVANCED_CARE_PLANNING_GAP_FLAG	
				, GP.TRANSITIONS_OF_CARE_ELIGIBILITY_FLAG	
				, GP.TRANSITIONS_OF_CARE_GAP_FLAG	
				, GP.ADULT_ACCESS_TO_PREVENTIVE_AMBULATORY_HEALTH_SERVICES_ELIGIBILITY_FLAG
				, GP.ADULT_ACCESS_TO_PREVENTIVE_AMBULATORY_HEALTH_SERVICES_GAP_FLAG	
				, GP.MEDICATION_ADHERENCE_FOR_DIABETES_ELIGIBILITY_FLAG	
				, GP.MEDICATION_ADHERENCE_FOR_DIABETES_GAP_FLAG	
				, GP.MEDICATION_ADHERENCE_FOR_HYPERTENSION_ELIGIBILITY_FLAG	
				, GP.MEDICATION_ADHERENCE_FOR_HYPERTENSION_GAP_FLAG	
				, GP.MEDICATION_ADHERENCE_FOR_CHOLESTROL_ELIGIBILITY_FLAG	
				, GP.MEDICATION_ADHERENCE_FOR_CHOLESTROL_GAP_FLAG	
				, GP.ANNUAL_WELLNESS_VISIT_ELIGIBILITY_FLAG	
				, GP.ANNUAL_WELLNESS_VISIT_GAP_FLAG	
				, GP.FLU_VACCINE_ELIGIBILITY_FLAG	
				, GP.FLU_VACCINE_GAP_FLAG	
				, GP.ANNUAL_DENTIST_VISIT_ELIGIBILITY_FLAG	
				, GP.ANNUAL_DENTIST_VISIT_GAP_FLAG	
				, GP.COVID_19_VACCINE_ELIGIBILITY_FLAG	
				, GP.COVID_19_VACCINE_GAP_FLAG	
				, GP.PNEUMONIA_VACCINE_ELIGIBILITY_FLAG	
				, GP.PNEUMONIA_VACCINE_GAP_FLAG	
				, GP.TDAP_VACCINE_ELIGIBILITY_FLAG	
				, GP.TDAP_VACCINE_GAP_FLAG	
				, GP.SHINGLES_VACCINE_ELIGIBILITY_FLAG	
				, GP.SHINGLES_VACCINE_GAP_FLAG	
				, GP.ANNUAL_EYE_EXAM_ELIGIBILITY_FLAG	
				, GP.ANNUAL_EYE_EXAM_GAP_FLAG
FROM DW_${var.SF_ENVIRONMENT}.HAH.FACT_GAPS_IN_CARE GP 
-- Inner Join?? It''s because only those clients should come out where there is a match with AMS
INNER JOIN CLIENT_MAPPING C_MAPPING
	ON C_MAPPING.ROSTER_CLIENT_KEY = GP.CLIENT_KEY;
RETURN ''SUCCESS'';
END
 EOT
}

