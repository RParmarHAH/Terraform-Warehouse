resource "snowflake_procedure" "DW_REPORT_GET_REPORT_FACT_APPLICANT_DETAILS" {
	name ="GET_REPORT_FACT_APPLICANT_DETAILS"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
	return_result VARCHAR(1000);
BEGIN

INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.REPORT.FACT_APPLICANT_DETAILS
(
WITH VISITS_DATA
AS
(
	SELECT 
        EM.EMPLOYEE_KEY, 
        MIN(FV.SERVICE_DATE) FIRST_SCHEDULED_DATE, 
		MAX(FV.SERVICE_DATE) LATEST_SCHEDULED_DATE,
        MIN(IFF(UPPER(FV.CONFIRMED_FLAG) = ''YES'',FV.SERVICE_DATE,NULL)) FIRST_SERVICE_DATE, 
        MAX(IFF(UPPER(FV.CONFIRMED_FLAG) = ''YES'',FV.SERVICE_DATE,NULL)) LAST_SERVICE_DATE
   	    FROM DW_${var.SF_ENVIRONMENT}.INTEGRATION.DIM_EMPLOYEE_AMS_MERGED EM
        LEFT JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_VISIT_MERGED FV
        ON EM.ORIGINAL_EMPLOYEE_KEY = FV.ORIGINAL_EMPLOYEE_KEY
    GROUP BY 1
),
DATA AS
(
	SELECT 	WORKDAY_INTERNAL_ID AS WORKDAY_ID,
			AMS_EMPLOYEE_ID AS AMS_EMPLOYEE_ID,
            AMS_EMPLOYEE_KEY AS AMS_EMPLOYEE_KEY,
			se.CANDIDATE_ID AS CANDIDATE_ID,
			COALESCE(se.JOB_KEY,de.JOB_KEY)AS JOB_KEY,
			COALESCE(se.APPLICANT_KEY,de.APPLICANT_KEY)AS APPLICANT_KEY,
			COALESCE(se.JOB_FAMILY,de.JOB_FAMILY)AS JOB_FAMILY,
			COALESCE(de.SEND_TO_AMS,se.SEND_TO_AMS) AS SEND_TO_AMS,
			COALESCE(de.PRE_BOARDING_COMPLETION,se.PRE_BOARDING_COMPLETION) AS PRE_BOARDING_COMPLETION,
			COALESCE(se.BRANCH_NAME,de.BRANCH_NAME)AS BRANCH_NAME,
			COALESCE(se.BRANCH_KEY,de.BRANCH_KEY)AS BRANCH_KEY,
			COALESCE(se.BRANCH_STATE_CODE,de.BRANCH_STATE_CODE)AS BRANCH_STATE_CODE,
			COALESCE(se.DATE_APPLIED,de.DATE_APPLIED)AS DATE_APPLIED,
			COALESCE(se.CONVERSATION_INPROGRESS_DATETIME,de.CONVERSATION_INPROGRESS_DATETIME) AS CONVERSATION_INPROGRESS_DATETIME,
			COALESCE(se.INTERVIEW_SCHEDULED_DATETIME,de.INTERVIEW_SCHEDULED_DATETIME) AS INTERVIEW_SCHEDULED_DATETIME,
			COALESCE(se.INTERVIEW_RESCHEDULED_DATETIME,de.INTERVIEW_RESCHEDULED_DATETIME) AS INTERVIEW_RESCHEDULED_DATETIME,
			COALESCE(se.INTERVIEW_COMPLETED_DATETIME,de.INTERVIEW_COMPLETED_DATETIME) AS INTERVIEW_COMPLETED_DATETIME,
			COALESCE(se.INTERVIEW_NO_AVAILABILITY_DATETIME,de.INTERVIEW_NO_AVAILABILITY_DATETIME) AS INTERVIEW_NO_AVAILABILITY_DATETIME,
			COALESCE(se.INTERVIEW_NO_SHOW_DATETIME,de.INTERVIEW_NO_SHOW_DATETIME) AS INTERVIEW_NO_SHOW_DATETIME,
			COALESCE(se.NUMBER_OF_TIMES_INTERVIEW_SCHEDULED,de.NUMBER_OF_TIMES_INTERVIEW_SCHEDULED) AS NUMBER_OF_TIMES_INTERVIEW_SCHEDULED, 
			COALESCE(se.Application_and_Background_Check_Consent_Form_Complete_DATETIME,de.Application_and_Background_Check_Consent_Form_Complete_DATETIME) AS Application_and_Background_Check_Consent_Form_Complete_DATETIME,
			COALESCE(de.OFFERS_SENT_DATETIME,de.OFFERS_SENT_DATETIME) AS OFFERS_SENT_DATETIME,
			COALESCE(de.OFFERS_ACCEPTED_DATETIME,se.OFFERS_ACCEPTED_DATETIME) AS OFFERS_ACCEPTED_DATETIME,
			COALESCE(de.ONBOARDING_SENT_DATETIME,se.ONBOARDING_SENT_DATETIME) AS ONBOARDING_SENT_DATETIME,
			COALESCE(de.ONBOARDING_COMPLETED_DATETIME,se.ONBOARDING_COMPLETED_DATETIME) AS ONBOARDING_COMPLETED_DATETIME,
            COALESCE(de.ONBOARDING_COMPLETE_FLAG,se.ONBOARDING_COMPLETE_FLAG) AS ONBOARDING_COMPLETE_FLAG,
			de.HIRED_DATETIME AS "HIRED_DATETIME",
			COALESCE(de.REHIRE_DATETIME,se.REHIRE_DATETIME) AS "REHIRE_DATETIME",
			COALESCE(de.OFFER_DECLINED_DATETIME,se.OFFER_DECLINED_DATETIME) AS OFFER_DECLINED_DATETIME, 
			COALESCE(de.REJECTED_DATETIME,se.REJECTED_DATETIME) AS REJECTED_DATETIME,
			COALESCE(de.REJECTION_REASON,se.REJECTION_REASON) AS REJECTION_REASON,
			COALESCE(de.MOST_RECENT_STAGE_DATETIME,se.MOST_RECENT_STAGE_DATETIME) AS MOST_RECENT_STAGE_DATETIME,
			COALESCE(de.APPLICANT_STATUS,se.APPLICANT_STATUS) AS APPLICANT_STATUS,
			COALESCE(de.EMPLOYEE_STATUS,se.EMPLOYEE_STATUS) AS EMPLOYEE_STATUS,
            de.DISPOSITION_REASON,
			COALESCE(de.PRIOR_STATUS,se.PRIOR_STATUS)AS PRIOR_STATUS,
			COALESCE(de.PRIOR_STATUS_DATETIME,se.PRIOR_STATUS_DATETIME) AS PRIOR_STATUS_DATETIME,
			se.SOURCE  application_source,
			se."SYSTEM_CODE"  SYSTEM_CODE,
			A.FIRST_SCHEDULED_DATE as FIRST_SCHEDULED_DATE,
			A.LATEST_SCHEDULED_DATE as LATEST_SCHEDULED_DATE,
			A.FIRST_SERVICE_DATE as FIRST_SERVICE_DATE,
			A.LAST_SERVICE_DATE as LAST_SERVICE_DATE,
			
			:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
			:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
			CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
			CURRENT_USER AS ETL_INSERTED_BY,
			CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_UPDATED_DATE,
			CURRENT_USER AS ETL_LAST_UPDATED_BY	
			--cw.AMS_EMPLOYEE_KEY
	FROM  	DW_${var.SF_ENVIRONMENT}.HAH.FACT_APPLICANT_STATUS se           --para
			LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.FACT_APPLICANT_STATUS de --wday
			ON se."CANDIDATE_ID" = de."LINKED_ID"  AND de."LINKED_ID" IS NOT NULL 
			LEFT JOIN DW_${var.SF_ENVIRONMENT}."INTEGRATION"."EMPLOYEE_CROSS_WALK" cw ON cw."APPLICANT_EMPLOYEE_KEY" = se."APPLICANT_KEY" 
			LEFT JOIN VISITS_DATA A ON A.EMPLOYEE_KEY = CW."AMS_EMPLOYEE_KEY"
	WHERE  	SE.SYSTEM_CODE <> ''WORKDAY'' 
			--AND se.candidate_id = ''72036929621067''
			AND WORKDAY_ID IS NOT NULL

),
UNMAPPED_DATA AS
(
	SELECT  WORKDAY_INTERNAL_ID AS WORKDAY_ID,
			AMS_EMPLOYEE_ID AS AMS_EMPLOYEE_ID,
            AMS_EMPLOYEE_KEY AS AMS_EMPLOYEE_KEY,
			de.CANDIDATE_ID AS CANDIDATE_ID,
			de.JOB_KEY AS JOB_KEY,
			de.APPLICANT_KEY AS APPLICANT_KEY,
			de.JOB_FAMILY AS JOB_FAMILY,
			de.SEND_TO_AMS AS SEND_TO_AMS,
			de.PRE_BOARDING_COMPLETION AS PRE_BOARDING_COMPLETION,
			de.BRANCH_NAME AS BRANCH_NAME,
			de.BRANCH_KEY AS BRANCH_KEY,
			de.BRANCH_STATE_CODE AS BRANCH_STATE_CODE,
			de.DATE_APPLIED,
			de.CONVERSATION_INPROGRESS_DATETIME,
			de.INTERVIEW_SCHEDULED_DATETIME,
			de.INTERVIEW_RESCHEDULED_DATETIME,
			de.INTERVIEW_COMPLETED_DATETIME,
			de.INTERVIEW_NO_AVAILABILITY_DATETIME,
			de.INTERVIEW_NO_SHOW_DATETIME,
			de.NUMBER_OF_TIMES_INTERVIEW_SCHEDULED,
			de.Application_and_Background_Check_Consent_Form_Complete_DATETIME,
			de.OFFERS_SENT_DATETIME,
			de.OFFERS_ACCEPTED_DATETIME,
			de.ONBOARDING_SENT_DATETIME,
			de.ONBOARDING_COMPLETED_DATETIME,
            de.ONBOARDING_COMPLETE_FLAG,
			de."HIRED_DATETIME",
			de."REHIRE_DATETIME",
			de.OFFER_DECLINED_DATETIME, 
			de.REJECTED_DATETIME,
			de.REJECTION_REASON,
			de.MOST_RECENT_STAGE_DATETIME,
			de.APPLICANT_STATUS,
            de.EMPLOYEE_STATUS,
			de.DISPOSITION_REASON,
			de.PRIOR_STATUS,
			de.PRIOR_STATUS_DATETIME,
			de.SOURCE  application_source,
			de."SYSTEM_CODE"  SYSTEM_CODE,
			A.FIRST_SCHEDULED_DATE as FIRST_SCHEDULED_DATE,
			A.LATEST_SCHEDULED_DATE AS LATEST_SCHEDULED_DATE,
			A.FIRST_SERVICE_DATE as FIRST_SERVICE_DATE,
			A.LAST_SERVICE_DATE AS LAST_SERVICE_DATE,
			:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
			:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
			CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
			CURRENT_USER AS ETL_INSERTED_BY,
			CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_UPDATED_DATE,
			CURRENT_USER AS ETL_LAST_UPDATED_BY
			--cw.AMS_EMPLOYEE_KEY
	FROM 	DW_${var.SF_ENVIRONMENT}.HAH.FACT_APPLICANT_STATUS de--wday
			LEFT JOIN DW_${var.SF_ENVIRONMENT}."INTEGRATION"."EMPLOYEE_CROSS_WALK" cw ON cw."APPLICANT_EMPLOYEE_KEY" = de."APPLICANT_KEY" AND INACTIVE <>TRUE AND DUP_FLAG <> TRUE 
			LEFT JOIN VISITS_DATA A ON A.EMPLOYEE_KEY = CW."AMS_EMPLOYEE_KEY"
	WHERE  	de."LINKED_ID" IS NULL--This IS FOR DATA entirely FROM wordkday
			AND de.CANDIDATE_ID NOT IN (SELECT CANDIDATE_ID FROM data)
)
SELECT 	*
FROM 	DATA 
UNION ALL
SELECT 	* 
FROM 	UNMAPPED_DATA
);
	
SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;

 EOT
}

