resource "snowflake_procedure" "DW_REPORT_GET_REPORT_UTILIZATION_BACKUP_20210913" {
	name ="GET_REPORT_UTILIZATION_BACKUP_20210913"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "JAVASCRIPT"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

        var sql = `
    INSERT OVERWRITE INTO REPORT.UTILIZATION
	(PERIOD_BEGIN_DATE, STATE, BRANCH_KEY, ORIGINAL_BRANCH_KEY, OFFICE_NUMBER, OFFICE_NAME, SUPERVISOR_KEY, SUPERVISOR_CODE,
		CLIENT_KEY, ORIGINAL_CLIENT_KEY, CLIENT_NUMBER, ORIGINAL_CLIENT_NUMBER, ORIGINAL_SOURCE_SYSTEM_ID, SOURCE_SYSTEM_ID, 
		CONTRACT_KEY, CONTRACT_CODE, HOURS_SERVED, HOURS_BILLED, HOURS_AUTHORIZED, HOURS_AUTHORIZED_NON_ADJUSTED,
		UTILIZATION, OVER_AUTHED, OVER_AUTHED_ADJUSTED, OVER_AUTHED_HOURS, OVER_AUTHED_HOURS_ADJUSTED, SERVED_WITHOUT_AUTH, 
		VISITS_ALL, VISITS_CLEAN_SHIFTS, VISITS_NEED_MAINTENANCE,
		ETL_TASK_KEY, ETL_INSERTED_TASK_KEY, ETL_INSERTED_DATE, ETL_INSERTED_BY, ETL_LAST_UPDATED_DATE, ETL_LAST_UPDATED_BY, ETL_DELETED_FLAG)
WITH VISITS AS (
	SELECT DISTINCT DATE_TRUNC(MONTH, VISIT.REPORT_DATE) REPORT_DATE, 
		VISIT.CLIENT_KEY, 
		VISIT.SOURCE_SYSTEM_ID,
		FIRST_VALUE(VISIT.ORIGINAL_SOURCE_SYSTEM_ID) OVER(PARTITION BY VISIT.CLIENT_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END) AS ORIGINAL_SOURCE_SYSTEM_ID,
		FIRST_VALUE(VISIT.ORIGINAL_CLIENT_KEY) OVER(PARTITION BY VISIT.CLIENT_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END) AS ORIGINAL_CLIENT_KEY,
		VISIT.CLIENT_NUMBER, 
		FIRST_VALUE(VISIT.ORIGINAL_CLIENT_NUMBER) OVER(PARTITION BY VISIT.CLIENT_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END) AS ORIGINAL_CLIENT_NUMBER,
		VISIT.CONTRACT_KEY, 
--		VISIT.SOURCE_SYSTEM_ID,
--		VISIT.ORIGINAL_SOURCE_SYSTEM_ID,
		FIRST_VALUE(VISIT.BRANCH_KEY) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY ORDER BY MAX(VISIT.REPORT_DATE) DESC, NVL(SUM(VISIT.HOURS_SERVED), 0) DESC) BRANCH_KEY,
		FIRST_VALUE(VISIT.ORIGINAL_BRANCH_KEY) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 0 ELSE 1 END, MAX(VISIT.REPORT_DATE) DESC, NVL(SUM(VISIT.HOURS_SERVED), 0) DESC) ORIGINAL_BRANCH_KEY,
		FIRST_VALUE(VISIT.SUPERVISOR_KEY) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY ORDER BY MAX(VISIT.REPORT_DATE) DESC, NVL(SUM(VISIT.HOURS_SERVED), 0) DESC) SUPERVISOR_KEY,
		SUM(NVL(SUM(VISIT.HOURS_SERVED), 0)) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY) HOURS_SERVED,
		SUM(COUNT(VISIT.VISIT_KEY)) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY) AS VISITS_ALL,
		SUM(COUNT(IFF(VISIT.CLEAN_SHIFT_FLAG = 1, VISIT.VISIT_KEY, NULL))) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY) AS VISITS_CLEAN_SHIFTS,
		SUM(COUNT(IFF(VISIT.CLEAN_SHIFT_FLAG = 0, VISIT.VISIT_KEY, NULL))) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.CONTRACT_KEY) AS VISITS_NEED_MAINTENANCE
	FROM INTEGRATION.FACT_VISIT_MERGED AS VISIT
	WHERE NVL(VISIT.STATUS_CODE, ''02'') IN (''02'', ''03'', ''04'', ''05'') -- Only confirmed visits
	GROUP BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), 
		VISIT.CLIENT_KEY, 
		VISIT.SOURCE_SYSTEM_ID,
		VISIT.ORIGINAL_SOURCE_SYSTEM_ID,
		VISIT.ORIGINAL_CLIENT_KEY,
		VISIT.CLIENT_NUMBER, 
		VISIT.ORIGINAL_CLIENT_NUMBER,
		VISIT.CONTRACT_KEY, 
--		VISIT.SOURCE_SYSTEM_ID,
--		VISIT.ORIGINAL_SOURCE_SYSTEM_ID,
		VISIT.BRANCH_KEY, 
		VISIT.ORIGINAL_BRANCH_KEY,
		VISIT.SUPERVISOR_KEY
), REVENUE_DATAFLEX AS (
	SELECT DATEFROMPARTS(LEFT(INVOICES.PERIOD, 4), RIGHT(TRIM(INVOICES.PERIOD), 2), 1) AS REPORT_DATE, CLIENT.CLIENT_KEY, CONTRACT.CONTRACT_KEY, SUM(INVOICES.HOURSBILLED) HOURS_BILLED
	FROM DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFINVOICES INVOICES
	JOIN HAH.DIM_CLIENT CLIENT
		ON CLIENT.SOURCE_SYSTEM_ID = 3 AND CLIENT.SYSTEM_CODE = INVOICES.DBNAME AND CLIENT.CLIENT_NUMBER = INVOICES.CLIENTNUMBER 
	JOIN HAH.DIM_CONTRACT CONTRACT
		ON CONTRACT.SOURCE_SYSTEM_ID = 3 AND CONTRACT.SYSTEM_CODE = INVOICES.DBNAME AND CONTRACT.CONTRACT_CODE = INVOICES.CONTRACTCODE
	WHERE MOVEDTO = ''''
	GROUP BY DATEFROMPARTS(LEFT(INVOICES.PERIOD, 4), RIGHT(TRIM(INVOICES.PERIOD), 2), 1), CLIENT.CLIENT_KEY, CONTRACT.CONTRACT_KEY
), REVENUE_OTHERS AS (
	SELECT DATE_TRUNC(MONTH, REVENUE.REPORT_DATE) AS REPORT_DATE, REVENUE.CLIENT_KEY, REVENUE.CONTRACT_KEY, SUM(REVENUE.INVOICE_HOURS) HOURS_BILLED
	FROM INTEGRATION.FACT_REVENUE_MERGED REVENUE
	JOIN HAH.DIM_INVOICE INVOICE
		ON INVOICE.INVOICE_KEY = REVENUE.INVOICE_KEY
	WHERE REVENUE.SOURCE_SYSTEM_ID <> 3 AND INVOICE.INVOICE_STATUS IN (''Bill Paid'',''Bill Sent'',''Fully Paid'',''Partially Paid'')
	GROUP BY DATE_TRUNC(MONTH, REVENUE.REPORT_DATE), REVENUE.CLIENT_KEY, REVENUE.CONTRACT_KEY
), REVENUE AS (
	SELECT L.REPORT_DATE, CLIENT.CLIENT_KEY, L.CONTRACT_KEY, SUM(L.HOURS_BILLED) AS HOURS_BILLED
	FROM (
		SELECT REPORT_DATE, CLIENT_KEY, CONTRACT_KEY, HOURS_BILLED
		FROM REVENUE_DATAFLEX
		UNION ALL
		SELECT REPORT_DATE, CLIENT_KEY, CONTRACT_KEY, HOURS_BILLED
		FROM REVENUE_OTHERS
	) L
	JOIN INTEGRATION.DIM_CLIENT_MERGED AS CLIENT
		ON CLIENT.ORIGINAL_CLIENT_KEY = L.CLIENT_KEY
	GROUP BY L.REPORT_DATE, CLIENT.CLIENT_KEY, L.CONTRACT_KEY
), INTAKES AS (
	SELECT DATE_TRUNC(MONTH, INTAKE.REPORT_DATE) AS REPORT_DATE, INTAKE.CLIENT_KEY, INTAKE.CLIENT_NUMBER, INTAKE.CONTRACT_KEY, NVL(SUM(INTAKE.HOURS_AUTHORIZED), 0) HOURS_AUTHORIZED, NVL(SUM(INTAKE.HOURS_AUTHORIZED_NON_ADJUSTED), 0) HOURS_AUTHORIZED_NON_ADJUSTED
	FROM INTEGRATION.FACT_INTAKE_MERGED INTAKE
	GROUP BY DATE_TRUNC(MONTH, INTAKE.REPORT_DATE), INTAKE.CLIENT_KEY, INTAKE.CLIENT_NUMBER, INTAKE.CONTRACT_KEY 
), UTILIZATION_DETAIL AS (
	SELECT DISTINCT VISIT.REPORT_DATE PERIOD_BEGIN_DATE,
		BRANCH.BRANCH_KEY,
		VISIT.ORIGINAL_BRANCH_KEY,
		COALESCE(BRANCH.OFFICE_STATE_CODE, CLIENT.CLIENT_STATE_CODE) STATE,
		BRANCH.OFFICE_NUMBER,
		BRANCH.DETAILED_OFFICE_NAME AS OFFICE_NAME,
		VISIT.SUPERVISOR_KEY,
		SUPERVISOR.SUPERVISOR_CODE,
		VISIT.CLIENT_KEY, 
		CLIENT.ORIGINAL_CLIENT_KEY,
		VISIT.CLIENT_NUMBER, 
		CLIENT.ORIGINAL_CLIENT_NUMBER,
		VISIT.ORIGINAL_SOURCE_SYSTEM_ID,
		VISIT.SOURCE_SYSTEM_ID,
		VISIT.CONTRACT_KEY,
		CONTRACT.CONTRACT_CODE,
		CONTRACT.CONTRACT_NAME,
		REVENUE.HOURS_BILLED,
		VISIT.HOURS_SERVED,
		INTAKE.HOURS_AUTHORIZED,
		INTAKE.HOURS_AUTHORIZED_NON_ADJUSTED,
		IFF(NVL(INTAKE.HOURS_AUTHORIZED, 0) <= 0, NULL, NVL(VISIT.HOURS_SERVED, 0) / INTAKE.HOURS_AUTHORIZED) AS UTILIZATION,
		IFF(IFF(NVL(INTAKE.HOURS_AUTHORIZED_NON_ADJUSTED , 0) <= 0, NULL, NVL(VISIT.HOURS_SERVED, 0) / INTAKE.HOURS_AUTHORIZED_NON_ADJUSTED)>1, 1, 0) AS OVER_AUTHED,
		IFF(IFF(NVL(INTAKE.HOURS_AUTHORIZED , 0) <= 0, NULL, NVL(VISIT.HOURS_SERVED, 0) / INTAKE.HOURS_AUTHORIZED)>1, 1, 0) AS OVER_AUTHED_ADJUSTED,
		IFF(INTAKE.HOURS_AUTHORIZED_NON_ADJUSTED <VISIT.HOURS_SERVED, NVL(VISIT.HOURS_SERVED, 0) - INTAKE.HOURS_AUTHORIZED_NON_ADJUSTED , NULL) AS OVER_AUTHED_HOURS,
		IFF(INTAKE.HOURS_AUTHORIZED<VISIT.HOURS_SERVED, NVL(VISIT.HOURS_SERVED, 0) - INTAKE.HOURS_AUTHORIZED, NULL) AS OVER_AUTHED_HOURS_ADJUSTED,
		IFF(NVL(VISIT.HOURS_SERVED, 0) > 0 AND NVL(INTAKE.HOURS_AUTHORIZED, 0) <= 0, 1, 0) AS SERVED_WITHOUT_AUTH,
		VISIT.VISITS_ALL,
		VISIT.VISITS_CLEAN_SHIFTS,
		VISIT.VISITS_NEED_MAINTENANCE
	FROM VISITS VISIT
	JOIN INTEGRATION.DIM_CLIENT_MERGED CLIENT
		ON CLIENT.ORIGINAL_CLIENT_KEY = VISIT.CLIENT_KEY
	JOIN HAH.DIM_CONTRACT CONTRACT
		ON CONTRACT.CONTRACT_KEY = VISIT.CONTRACT_KEY
	LEFT JOIN INTAKES INTAKE
		ON INTAKE.REPORT_DATE = VISIT.REPORT_DATE AND INTAKE.CLIENT_KEY = VISIT.CLIENT_KEY AND INTAKE.CONTRACT_KEY = VISIT.CONTRACT_KEY 
	LEFT JOIN REVENUE REVENUE
		ON REVENUE.REPORT_DATE = VISIT.REPORT_DATE AND REVENUE.CLIENT_KEY = VISIT.CLIENT_KEY AND REVENUE.CONTRACT_KEY = VISIT.CONTRACT_KEY
	JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH
		ON BRANCH.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY
	LEFT JOIN INTEGRATION.DIM_SUPERVISOR_MERGED SUPERVISOR
		ON SUPERVISOR.ORIGINAL_SUPERVISOR_KEY = VISIT.SUPERVISOR_KEY
)
SELECT PERIOD_BEGIN_DATE, STATE, BRANCH_KEY, ORIGINAL_BRANCH_KEY, OFFICE_NUMBER, OFFICE_NAME, SUPERVISOR_KEY, SUPERVISOR_CODE,
	CLIENT_KEY, ORIGINAL_CLIENT_KEY, CLIENT_NUMBER, ORIGINAL_CLIENT_NUMBER, 
	ORIGINAL_SOURCE_SYSTEM_ID, SOURCE_SYSTEM_ID, CONTRACT_KEY, CONTRACT_CODE,  
	HOURS_SERVED, HOURS_BILLED, HOURS_AUTHORIZED, HOURS_AUTHORIZED_NON_ADJUSTED,
	UTILIZATION, OVER_AUTHED, OVER_AUTHED_ADJUSTED, OVER_AUTHED_HOURS, OVER_AUTHED_HOURS_ADJUSTED, SERVED_WITHOUT_AUTH, 
	VISITS_ALL, VISITS_CLEAN_SHIFTS, VISITS_NEED_MAINTENANCE,
	-- ETL Fields
	
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_TASK_KEY,
        
	
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_INSERTED_TASK_KEY,
        
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	CURRENT_USER as ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
	CURRENT_USER as ETL_LAST_UPDATED_BY,
	0 as ETL_DELETED_FLAG
FROM UTILIZATION_DETAIL;`;
          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
          
 EOT
}

