resource "snowflake_procedure" "DW_REPORT_GET_REPORT_CLIENT_LINEAR_RETENTION_MONTHLY_INNER" {
	name ="GET_REPORT_CLIENT_LINEAR_RETENTION_MONTHLY_INNER"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "SQL"

	arguments {
		name = "MONTH_DATE"
		type = "DATE"
}	

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT
BEGIN
DELETE FROM REPORT.CLIENT_LINEAR_RETENTION_MONTHLY WHERE SERVICE_MONTH = date_trunc(month,:MONTH_DATE);

INSERT INTO REPORT.CLIENT_LINEAR_RETENTION_MONTHLY
WITH ALL_DATA AS (
WITH PERIOD AS
(
SELECT FIRST_DAY_OF_MONTH::DATE AS MONTH_PERIOD
FROM HAH.DIM_DATE 
WHERE FIRST_DAY_OF_MONTH = date_trunc(month,:MONTH_DATE)
GROUP BY ALL
)
,FINAL AS (
SELECT DISTINCT TO_VARCHAR(PERIOD.MONTH_PERIOD, ''MMMM yyyy'') AS SERVICE_MONTH_NAME
        , PERIOD.MONTH_PERIOD AS SERVICE_MONTH
        , CLIENT_KEY
        --, BRANCH_KEY 
        -- For the same flag the value will be either True or False (0 or 1), take MAX (0 or 1) by Month, Client, Branch
        , MAX(HOURS_AND_CENSUS.PERIOD_BEGIN_DATE = PERIOD.MONTH_PERIOD) AS Is_Active
        , MAX(HOURS_AND_CENSUS.PERIOD_BEGIN_DATE = DATEADD(MONTH, -1, PERIOD.MONTH_PERIOD)) AS "30_Days_Base"
        ,CASE WHEN Is_Active = TRUE AND "30_Days_Base"=TRUE THEN TRUE ELSE FALSE END AS "30_Days_Active"
        , MAX(HOURS_AND_CENSUS.PERIOD_BEGIN_DATE = DATEADD(MONTH, -3, PERIOD.MONTH_PERIOD)) AS "90_Days_Base"
        ,CASE WHEN Is_Active = TRUE AND "90_Days_Base"=TRUE THEN TRUE ELSE FALSE END AS "90_Days_Active"
        , MAX(HOURS_AND_CENSUS.PERIOD_BEGIN_DATE = DATEADD(MONTH, -12, PERIOD.MONTH_PERIOD)) AS "12_Months_Base"
        ,CASE WHEN Is_Active = TRUE AND "12_Months_Base"=TRUE THEN TRUE ELSE FALSE END AS "12_Months_Active"
        ,:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
		  :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
		  convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_INSERTED_DATE,
		  CURRENT_USER AS ETL_INSERTED_BY,
		  convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz AS ETL_UPDATED_DATE,
		  CURRENT_USER AS ETL_LAST_UPDATED_BY,
          0 AS ETL_DELETED_FLAG
FROM REPORT.HOURS_AND_CLIENT_CENSUS_MONTHLY AS HOURS_AND_CENSUS, PERIOD 
WHERE HOURS_AND_CENSUS.PERIOD_BEGIN_DATE IN 
        (
            PERIOD.MONTH_PERIOD -- 30 Days Active
            , DATEADD(MONTH, -1, PERIOD.MONTH_PERIOD) -- 30 Days Base
            , DATEADD(MONTH, -3, PERIOD.MONTH_PERIOD)  -- 90 Days Base
            , DATEADD(MONTH, -12, PERIOD.MONTH_PERIOD) -- 12 Months Base
        ) AND CLIENT_SERVED_FLAG=TRUE
GROUP BY ALL
ORDER BY PERIOD.MONTH_PERIOD, CLIENT_KEY
)
SELECT  BRANCH_KEY,Fi.*
FROM FINAL FI
LEFT JOIN (SELECT DISTINCT CLIENT_KEY,FIRST_VALUE(BRANCH_KEY) over(PARTITION BY CLIENT_KEY  ORDER BY PERIOD_BEGIN_DATE DESC ) AS BRANCH_KEY 
FROM  REPORT.HOURS_AND_CLIENT_CENSUS_MONTHLY 
WHERE CLIENT_SERVED_FLAG=TRUE 
GROUP BY CLIENT_KEY ,BRANCH_KEY,PERIOD_BEGIN_DATE) CE  ON CE.CLIENT_KEY = FI.CLIENT_KEY 
)
SELECT DISTINCT SERVICE_MONTH_NAME,SERVICE_MONTH,CLIENT_KEY,BRANCH_KEY,"30_Days_Active","30_Days_Base","90_Days_Active",
"90_Days_Base","12_Months_Active","12_Months_Base", ETL_TASK_KEY,ETL_INSERTED_TASK_KEY,ETL_INSERTED_DATE,
ETL_INSERTED_BY,ETL_UPDATED_DATE,ETL_LAST_UPDATED_BY,ETL_DELETED_FLAG FROM ALL_DATA ;
END
 EOT
}

