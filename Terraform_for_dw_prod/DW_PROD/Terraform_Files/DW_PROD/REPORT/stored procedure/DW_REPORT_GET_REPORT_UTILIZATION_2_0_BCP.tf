resource "snowflake_procedure" "DW_REPORT_GET_REPORT_UTILIZATION_2_0_BCP" {
	name ="GET_REPORT_UTILIZATION_2_0_BCP"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
 return_result VARCHAR;
BEGIN
	 --*****************************************************************************************************************************
-- NAME:  UTILIZATION
--
-- PURPOSE: Creates derived monthly metrics for each client based on visit/service data
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------        
-- 		    				         Initial development
-- 11/09/22    Saurav Purohit        Reworked logic to include non-confirmed visits as well and added fields for New Scheduled metrics
-- 17/11/22    Hasnain Motagamwala   Added field NPS by joining HAH.FACT_NPS based on CLIENT_KEY, PERIOD_BEGIN_DATE.
-- 03/20/23	   Shraddha Sejpal		 DW 2.0 changes (replaced FACT_INTAKE with FACT_CLIENT_SERVICE and DIM_CONTRACT with FACT_PARTNER_CONTRACT_SERVICE)       
-- 03/23/23    Sanket Jain           Added updated New Scheduled Metrics,Partner_Code and Service_code  
-- 05/22/23    Nutan Jagnade         Added future_hours_no_caregiver column
--*****************************************************************************************************************************
--NOTE:			If Manual Refresh is required then SCHEDULE_METRICS_MONTHLY should be refreshed first before running this object
--*****************************************************************************************************************************

INSERT OVERWRITE INTO REPORT.UTILIZATION_2_0 

WITH VISIT AS (	
--SELECT SUM(HOURS_SERVED) FROM(
	SELECT DISTINCT DATE_TRUNC(MONTH, VISIT.REPORT_DATE) REPORT_DATE, VISIT.PARTNER_CONTRACT_SERVICE_KEY,
		VISIT.CLIENT_KEY, 
		VISIT.SOURCE_SYSTEM_ID,
		FIRST_VALUE(VISIT.ORIGINAL_SOURCE_SYSTEM_ID) OVER(PARTITION BY VISIT.CLIENT_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END) AS ORIGINAL_SOURCE_SYSTEM_ID,
		FIRST_VALUE(VISIT.ORIGINAL_CLIENT_KEY) OVER(PARTITION BY VISIT.CLIENT_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END) AS ORIGINAL_CLIENT_KEY,
		VISIT.CLIENT_NUMBER,
		MIN(IFF(MAX(VISIT.CONFIRMED_FLAG) = ''YES'' ,VISIT.SERVICE_DATE, NULL)) OVER (PARTITION BY  VISIT.CLIENT_KEY) AS Absolute_First_Service_Date,		--
		MAX(IFF(MAX(VISIT.CONFIRMED_FLAG) = ''YES'' ,VISIT.SERVICE_DATE, NULL)) OVER (PARTITION BY  VISIT.CLIENT_KEY) AS Absolute_Last_Service_Date,		--
		FIRST_VALUE(VISIT.ORIGINAL_CLIENT_NUMBER) OVER(PARTITION BY VISIT.CLIENT_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END) AS ORIGINAL_CLIENT_NUMBER,
		FIRST_VALUE(VISIT.BRANCH_KEY) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.PARTNER_CONTRACT_SERVICE_KEY,VISIT.CLIENT_KEY ORDER BY IFF(MAX(VISIT.CONFIRMED_FLAG) = ''YES'', 0, 1), MAX(VISIT.REPORT_DATE) DESC,  NVL(SUM(VISIT.HOURS_SERVED), 0) DESC) BRANCH_KEY,		--
		FIRST_VALUE(VISIT.ORIGINAL_BRANCH_KEY) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.CLIENT_KEY, VISIT.PARTNER_CONTRACT_SERVICE_KEY ORDER BY CASE WHEN VISIT.CLIENT_KEY = VISIT.ORIGINAL_CLIENT_KEY THEN 1 ELSE 0 END, IFF(MAX(VISIT.CONFIRMED_FLAG) = ''YES'', 0, 1), MAX(VISIT.REPORT_DATE) DESC,  NVL(SUM(VISIT.HOURS_SERVED), 0) DESC) ORIGINAL_BRANCH_KEY,		--
		FIRST_VALUE(VISIT.SUPERVISOR_KEY) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.PARTNER_CONTRACT_SERVICE_KEY,VISIT.CLIENT_KEY ORDER BY IFF(MAX(VISIT.CONFIRMED_FLAG) = ''YES'', 0, 1), MAX(VISIT.REPORT_DATE) DESC,  NVL(SUM(VISIT.HOURS_SERVED), 0) DESC) SUPERVISOR_KEY,		--
		SUM(NVL(SUM(IFF(VISIT.CONFIRMED_FLAG = ''YES'', VISIT.HOURS_SERVED,0)), 0)) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.PARTNER_CONTRACT_SERVICE_KEY,VISIT.CLIENT_KEY) HOURS_SERVED,
		SUM(NVL(SUM(IFF(VISIT.CONFIRMED_FLAG = ''YES'' AND INVOICE_STATUS_NAME =''Billed'', VISIT.BILL_UNITS_SERVED,0)), 0)) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.PARTNER_CONTRACT_SERVICE_KEY,VISIT.CLIENT_KEY) HOURS_BILLED,
		SUM(COUNT(IFF(VISIT.CONFIRMED_FLAG = ''YES'',VISIT.VISIT_KEY,NULL))) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE),VISIT.PARTNER_CONTRACT_SERVICE_KEY, VISIT.CLIENT_KEY) AS VISITS_ALL,
		SUM(COUNT(IFF(VISIT.CLEAN_SHIFT_FLAG = 1 AND VISIT.CONFIRMED_FLAG = ''YES'', VISIT.VISIT_KEY, NULL))) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.PARTNER_CONTRACT_SERVICE_KEY, VISIT.CLIENT_KEY) AS VISITS_CLEAN_SHIFTS,		--
		SUM(COUNT(IFF(VISIT.CLEAN_SHIFT_FLAG = 0 AND VISIT.CONFIRMED_FLAG = ''YES'', VISIT.VISIT_KEY, NULL))) OVER(PARTITION BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE), VISIT.PARTNER_CONTRACT_SERVICE_KEY, VISIT.CLIENT_KEY) AS VISITS_NEED_MAINTENANCE		--
	FROM INTEGRATION.FACT_VISIT_MERGED AS VISIT
	WHERE VISIT.ORIGINAL_SOURCE_SYSTEM_ID = 4
	OR (VISIT.ORIGINAL_SOURCE_SYSTEM_ID =17 AND SYSTEM_CODE IN (''OPENSYSTEMS - DE'',''OPENSYSTEMS - PA'',''OSHAH - DE'',''OSHAH - PA''))
	OR (VISIT.ORIGINAL_SOURCE_SYSTEM_ID = 7 AND (VISIT.VISIT_KEY  IN 
		(SELECT VISIT_KEY FROM INTEGRATION.FACT_VISIT_MERGED V JOIN HAH.DIM_BRANCH B ON 
		V.ORIGINAL_BRANCH_KEY = B.BRANCH_KEY WHERE OFFICE_STATE_CODE = ''IN'' AND V.ORIGINAL_SOURCE_SYSTEM_ID =7)))    
		--VISIT.CONFIRMED_FLAG = ''YES''  -- Only confirmed visits  
	GROUP BY DATE_TRUNC(MONTH, VISIT.REPORT_DATE),
		VISIT.PARTNER_CONTRACT_SERVICE_KEY,
		VISIT.CLIENT_KEY,
		VISIT.SOURCE_SYSTEM_ID,
		VISIT.ORIGINAL_SOURCE_SYSTEM_ID,
		VISIT.ORIGINAL_CLIENT_KEY,
		VISIT.CLIENT_NUMBER,
        VISIT.SERVICE_DATE,
		VISIT.ORIGINAL_CLIENT_NUMBER,
		VISIT.BRANCH_KEY, 
		VISIT.ORIGINAL_BRANCH_KEY,
		VISIT.SUPERVISOR_KEY
)
, NEW_METRICS AS (
	SELECT	REPORT_DATE, CLIENT_KEY , PARTNER_CONTRACT_SERVICE_KEY , 
		SUM(NM.VISITS_SCHEDULED) AS VISITS_SCHEDULED,
		SUM(NM.VISITS_COMPLETED) AS VISITS_COMPLETED,
		SUM(NM.VISITS_CANCELLED) AS VISITS_CANCELLED,
		SUM(NM.VISITS_IN_REVIEW) AS VISITS_IN_REVIEW,
		SUM(NM.VISITS_MISSED) AS VISITS_MISSED,
		SUM(NM.VISITS_RESCHEDULED) AS VISITS_RESCHEDULED,
		SUM(NM.FUTURE_VISITS) AS FUTURE_VISITS,
		SUM(NM.FUTURE_CANCELLED_VISITS) AS FUTURE_CANCELLED_VISITS,
		SUM(NM.FUTURE_HOLD_VISITS) AS FUTURE_HOLD_VISITS,
		SUM(NM.HOURS_SCHEDULED) AS HOURS_SCHEDULED,
		SUM(NM.HOURS_CANCELLED) AS HOURS_CANCELLED,
		SUM(NM.HOURS_IN_REVIEW) AS HOURS_IN_REVIEW,
		SUM(NM.HOURS_MISSED) AS HOURS_MISSED,
		SUM(NM.HOURS_RESCHEDULED) AS HOURS_RESCHEDULED,
		SUM(NM.FUTURE_HOURS) AS FUTURE_HOURS,
		SUM(NM.FUTURE_HOURS_NO_CAREGIVER) AS FUTURE_HOURS_NO_CAREGIVER,
		SUM(NM.FUTURE_CANCELLED_HOURS) AS FUTURE_CANCELLED_HOURS,
		SUM(NM.FUTURE_HOLD_HOURS) AS FUTURE_HOLD_HOURS,
		MAX(NM.CLIENT_SERVED_FLAG) AS CLIENT_SERVED_FLAG
		FROM REPORT.SCHEDULE_METRICS_MONTHLY  NM
		GROUP BY REPORT_DATE, CLIENT_KEY , PARTNER_CONTRACT_SERVICE_KEY 
)
, AUTHORIZATION AS (
	WITH DATA AS (
	SELECT DISTINCT SOURCE_SYSTEM_ID ,AUTHORIZATION_PERIOD_START_DATE AS AUTH_START_DATE ,AUTHORIZATION_PERIOD_END_DATE AS AUTH_END_DATE, CLIENT_SERVICE_KEY ,
	D.FIRST_DAY_OF_MONTH,
	CLIENT_KEY ,PARTNER_CONTRACT_SERVICE_KEY ,AUTH.AUTHORIZATION_MAX_UNITS ,AUTH.AUTHORIZATION_MAX_UNITS_ADJUSTED,
	COALESCE(NULLIFZERO(EFFECTIVE_DAYS),DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1) AS AUTHDAYS
	,CASE WHEN AUTH.AUTHORIZATION_UOM=''Day'' then AUTHDAYS/(DATEDIFF(''MONTH'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1)
	WHEN D.FIRST_DAY_OF_MONTH<=AUTHORIZATION_PERIOD_START_DATE AND D.LAST_DAY_OF_MONTH<=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,LAST_DAY_OF_MONTH)+1)
	WHEN D.FIRST_DAY_OF_MONTH<=AUTHORIZATION_PERIOD_START_DATE AND D.LAST_DAY_OF_MONTH>=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',AUTHORIZATION_PERIOD_START_DATE,AUTHORIZATION_PERIOD_END_DATE)+1)
	WHEN D.FIRST_DAY_OF_MONTH>=AUTHORIZATION_PERIOD_START_DATE AND D.LAST_DAY_OF_MONTH<=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',FIRST_DAY_OF_MONTH,LAST_DAY_OF_MONTH)+1)
	WHEN D.FIRST_DAY_OF_MONTH>=AUTHORIZATION_PERIOD_START_DATE AND D.LAST_DAY_OF_MONTH>=AUTHORIZATION_PERIOD_END_DATE
	THEN (DATEDIFF(''DAY'',FIRST_DAY_OF_MONTH,AUTHORIZATION_PERIOD_END_DATE)+1) END AS MONTHDAYS,	
	MONTHDAYS* ((AUTHORIZATION_MAX_UNITS) /AUTHDAYS)
	FROM INTEGRATION.FACT_CLIENT_SERVICE_MERGED  AUTH
	JOIN HAH.DIM_DATE D ON AUTH.AUTHORIZATION_PERIOD_START_DATE <=D.CALENDAR_DATE AND AUTH.AUTHORIZATION_PERIOD_END_DATE >=D.CALENDAR_DATE
	WHERE AUTH.CANCELLED_FLAG=FALSE 
	),FINAL as( 
	SELECT SOURCE_SYSTEM_ID,FIRST_DAY_OF_MONTH AS MONTH, PARTNER_CONTRACT_SERVICE_KEY, CLIENT_KEY,
	sum(MONTHDAYS* ((AUTHORIZATION_MAX_UNITS) /AUTHDAYS)) AS HOURS_AUTHORIZED_NON_ADJUSTED,
	sum(MONTHDAYS* ((AUTHORIZATION_MAX_UNITS_ADJUSTED) /AUTHDAYS)) AS HOURS_AUTHORIZED
	FROM DATA GROUP BY 1,2,3,4
	)SELECT * FROM final
)
SELECT VISIT.REPORT_DATE AS PERIOD_BEGIN_DATE,
		COALESCE(BRANCH.OFFICE_STATE_CODE, CLIENT.CLIENT_STATE_CODE) STATE,
		IFNULL(IFF(PCS.SCHEDULE_TYPE=''UNKNOWN'',''Hourly'',PCS.SCHEDULE_TYPE),''Hourly'') AS TYPE,
		BRANCH.BRANCH_KEY,
		VISIT.ORIGINAL_BRANCH_KEY,
		BRANCH.OFFICE_NUMBER,
		BRANCH.DETAILED_OFFICE_NAME AS OFFICE_NAME,
		VISIT.SUPERVISOR_KEY,
		SUPERVISOR.SUPERVISOR_CODE,
		VISIT.Absolute_First_Service_Date,
		VISIT.CLIENT_KEY,
		VISIT.ORIGINAL_CLIENT_KEY, 
		VISIT.CLIENT_NUMBER, 
		VISIT.ORIGINAL_CLIENT_NUMBER,
		VISIT.ORIGINAL_SOURCE_SYSTEM_ID,
		VISIT.SOURCE_SYSTEM_ID,
		VISIT.PARTNER_CONTRACT_SERVICE_KEY AS CONTRACT_KEY,
		PCS.CONTRACT_CODE,
		PCS.PARTNER_CODE,
		PCS.SERVICE_CODE,
		NM.VISITS_SCHEDULED,
		NM.VISITS_COMPLETED,
		NM.VISITS_CANCELLED,
		NM.VISITS_IN_REVIEW,
		NM.VISITS_MISSED,
		NM.VISITS_RESCHEDULED,
		NM.FUTURE_VISITS,
		NM.FUTURE_CANCELLED_VISITS,
		NM.FUTURE_HOLD_VISITS,
		NM.HOURS_SCHEDULED,
		VISIT.HOURS_SERVED,
		NM.HOURS_CANCELLED,
		NM.HOURS_IN_REVIEW,
		NM.HOURS_MISSED,
		NM.HOURS_RESCHEDULED,
		NM.FUTURE_HOURS,
		NM.FUTURE_HOURS_NO_CAREGIVER,
		NM.FUTURE_CANCELLED_HOURS,
		NM.FUTURE_HOLD_HOURS,
		VISIT.HOURS_BILLED,
		AUTH.HOURS_AUTHORIZED,
		AUTH.HOURS_AUTHORIZED_NON_ADJUSTED AS HOURS_AUTHORIZED_NON_ADJUSTED,
		IFF(NVL(AUTH.HOURS_AUTHORIZED, 0) <= 0, NULL, NVL(VISIT.HOURS_SERVED, 0) / AUTH.HOURS_AUTHORIZED) AS UTILIZATION,
		IFF(IFF(NVL(AUTH.HOURS_AUTHORIZED_NON_ADJUSTED , 0) <= 0, NULL, NVL(VISIT.HOURS_SERVED, 0) / AUTH.HOURS_AUTHORIZED_NON_ADJUSTED)>1, 1, 0) AS OVER_AUTHED,
		IFF(IFF(NVL(AUTH.HOURS_AUTHORIZED , 0) <= 0, NULL, NVL(VISIT.HOURS_SERVED, 0) / AUTH.HOURS_AUTHORIZED)>1, 1, 0) AS OVER_AUTHED_ADJUSTED,
	    IFF(AUTH.HOURS_AUTHORIZED_NON_ADJUSTED <VISIT.HOURS_SERVED, NVL(VISIT.HOURS_SERVED, 0) - AUTH.HOURS_AUTHORIZED_NON_ADJUSTED , NULL) AS OVER_AUTHED_HOURS,
		IFF(AUTH.HOURS_AUTHORIZED<VISIT.HOURS_SERVED, NVL(VISIT.HOURS_SERVED, 0) - AUTH.HOURS_AUTHORIZED, NULL) AS OVER_AUTHED_HOURS_ADJUSTED,
		IFF(NVL(VISIT.HOURS_SERVED, 0) > 0 AND NVL(AUTH.HOURS_AUTHORIZED, 0) <= 0, 1, 0) AS SERVED_WITHOUT_AUTH,	
		VISIT.VISITS_ALL,
		VISIT.VISITS_CLEAN_SHIFTS,
		VISIT.VISITS_NEED_MAINTENANCE,
		NM.CLIENT_SERVED_FLAG,
		:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
        convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
		CURRENT_USER as ETL_INSERTED_BY ,
		convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
		CURRENT_USER as ETL_LAST_UPDATED_BY,
		0 as ETL_DELETED_FLAG,
		VISIT.Absolute_Last_Service_Date,
		NPS
FROM VISIT 
JOIN INTEGRATION.DIM_CLIENT_MERGED CLIENT
		ON CLIENT.ORIGINAL_CLIENT_KEY = VISIT.CLIENT_KEY
LEFT JOIN HAH.FACT_PARTNER_CONTRACT_SERVICE PCS 
		ON PCS.PARTNER_CONTRACT_SERVICE_KEY = VISIT.PARTNER_CONTRACT_SERVICE_KEY 
LEFT JOIN AUTHORIZATION AUTH ON VISIT.REPORT_DATE = AUTH.MONTH AND VISIT.PARTNER_CONTRACT_SERVICE_KEY= AUTH.PARTNER_CONTRACT_SERVICE_KEY 
	AND VISIT.CLIENT_KEY = AUTH.CLIENT_KEY AND VISIT.SOURCE_SYSTEM_ID = AUTH.SOURCE_SYSTEM_ID  
JOIN INTEGRATION.DIM_BRANCH_MERGED BRANCH
		ON BRANCH.ORIGINAL_BRANCH_KEY = VISIT.BRANCH_KEY 
LEFT JOIN INTEGRATION.DIM_SUPERVISOR_MERGED SUPERVISOR
		ON SUPERVISOR.ORIGINAL_SUPERVISOR_KEY = VISIT.SUPERVISOR_KEY
LEFT JOIN NEW_METRICS NM 
		ON NM.REPORT_DATE = VISIT.REPORT_DATE AND NM.CLIENT_KEY = VISIT.CLIENT_KEY AND NM.PARTNER_CONTRACT_SERVICE_KEY = VISIT.PARTNER_CONTRACT_SERVICE_KEY
LEFT JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.FACT_NPS FN
  		ON FN.CLIENT_KEY = VISIT.CLIENT_KEY
  		AND YEAR(VISIT.REPORT_DATE) = YEAR(FN.RECORDED_DATE) 
  		AND MONTH(VISIT.REPORT_DATE) = MONTH(FN.RECORDED_DATE);

SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
return return_result;
END;

 EOT
}

