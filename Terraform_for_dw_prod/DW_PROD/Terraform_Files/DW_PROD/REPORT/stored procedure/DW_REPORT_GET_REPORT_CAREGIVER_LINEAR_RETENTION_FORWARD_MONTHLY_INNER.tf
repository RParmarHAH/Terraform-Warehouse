resource "snowflake_procedure" "DW_REPORT_GET_REPORT_CAREGIVER_LINEAR_RETENTION_FORWARD_MONTHLY_INNER" {
	name ="GET_REPORT_CAREGIVER_LINEAR_RETENTION_FORWARD_MONTHLY_INNER"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	language  = "SQL"

	arguments {
		name = "MONTH_DATE"
		type = "DATE"
}	

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT
BEGIN
DELETE FROM REPORT.CAREGIVER_LINEAR_RETENTION_FORWARD_MONTHLY WHERE SERVICE_MONTH = date_trunc(month,:MONTH_DATE);

INSERT INTO REPORT.CAREGIVER_LINEAR_RETENTION_FORWARD_MONTHLY
WITH ALL_DATA AS (
WITH PERIOD AS
(
SELECT FIRST_DAY_OF_MONTH::DATE AS MONTH_PERIOD
FROM HAH.DIM_DATE 
WHERE FIRST_DAY_OF_MONTH = date_trunc(month,:MONTH_DATE)
GROUP BY ALL
),
Bill_Only_Employees AS
(
SELECT *
FROM HAH.DIM_Employee AS emp
WHERE ((UPPER( Employee_First_Name) LIKE ''%BILL%'' AND UPPER( Employee_Last_Name) LIKE ''%ONLY%'')
OR UPPER( Employee_First_Name) LIKE ANY ( ''%BILL%ONLY%'', ''%FIELD%STAFF%'', ''%CAREGIVER%'', ''%TEST%PROFILE%'', ''%IMPLEMENT%'', ''%EMPLOYEE%'', ''%DO%NOT%USE%'', ''%OFFICE%'')
OR UPPER( Employee_Last_Name) LIKE ANY ( ''%BILL%ONLY%'', ''%FIELD%STAFF%'', ''%CAREGIVER%'', ''%TEST%PROFILE%'', ''%IMPLEMENT%'', ''%EMPLOYEE%'', ''%DO%NOT%USE%'', ''%OFFICE%'')
OR UPPER( Employee_First_Name) = ''TEST''
OR UPPER( Employee_Last_Name) = ''TEST'') AND SOURCE_SYSTEM_ID NOT IN (13)
ORDER BY Primary_Branch_State, Primary_Branch_Key
),
VISIT_DATA AS 
(SELECT 
    DATE_TRUNC(MONTH, fv.service_date) AS SERVICE_MONTH,
    FV.EMPLOYEE_KEY,
    FV.BRANCH_KEY,
    SUM(NVL(IFF(FV.CONFIRMED_FLAG = ''YES'', FV.Hours_Served, NULL), 0)) AS Sum_of_Hours_Served,
    CASE WHEN NVL(Sum_of_Hours_Served, 0) <> 0 THEN ''TRUE'' ELSE ''FALSE'' END AS Active_Flag,
    CASE WHEN emp.CASE_MANAGER_FLAG = TRUE THEN ''ADMIN'' ELSE emp.Employee_Category END AS Derived_Employee_Category
FROM 
    integration.fact_visit_merged fv 
INNER JOIN HAH.DIM_Contract AS vdc ON fv.Contract_Key = vdc.Contract_Key AND NVL( vdc.Mileage_Flag, ''FALSE'') = ''FALSE'' AND UPPER( vdc.Revenue_Subcategory_Name ) NOT LIKE ''%MILE%'' 
AND (NVL( fv.Bill_Rate, 1) >= 1 OR fv.Bill_Rate = 0) AND vdc.Billable_Flag = TRUE
LEFT OUTER JOIN 
    INTEGRATION.DIM_EMPLOYEE_MERGED AS emp ON FV.Employee_Key = emp.Employee_Key
WHERE 
    DERIVED_EMPLOYEE_CATEGORY = ''FIELD''
    AND VDC.revenue_category IN (''HH'',''HC'',''OTHER'')
    AND FV.EMPLOYEE_KEY NOT IN (SELECT employee_key FROM Bill_Only_Employees)
    AND fv.Original_Employee_Key NOT IN ( SELECT Employee_Key FROM Bill_Only_Employees)
GROUP BY 
    SERVICE_MONTH, FV.EMPLOYEE_KEY, FV.BRANCH_KEY, emp.CASE_MANAGER_FLAG, emp.Employee_Category
HAVING 
    SUM(NVL(IFF(FV.CONFIRMED_FLAG = ''YES'', FV.Hours_Served, NULL), 0)) <> 0
)
,FINAL AS (
SELECT DISTINCT
    TO_VARCHAR(PERIOD.MONTH_PERIOD, ''MMMM yyyy'') AS SERVICE_MONTH_NAME,
    PERIOD.MONTH_PERIOD AS SERVICE_MONTH,
    fv.EMPLOYEE_KEY 
--   , fv.BRANCH_KEY
    , MAX(FV.SERVICE_MONTH = PERIOD.MONTH_PERIOD) AS IS_ACTIVE
    , MAX(FV.SERVICE_MONTH = DATEADD(MONTH, +1, PERIOD.MONTH_PERIOD)) AS "1_month_active"
    , MAX(FV.SERVICE_MONTH = DATEADD(MONTH, +3, PERIOD.MONTH_PERIOD)) AS "3_month_active"
    , MAX(FV.SERVICE_MONTH = DATEADD(MONTH, +12, PERIOD.MONTH_PERIOD)) AS "12_month_active",
     :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,
	CURRENT_USER as ETL_LAST_UPDATED_BY,
	0 as ETL_DELETED_FLAG
from VISIT_DATA FV, PERIOD
where FV.SERVICE_MONTH IN 
        (
            PERIOD.MONTH_PERIOD -- 30 Days Active
            , DATEADD(MONTH, +1, PERIOD.MONTH_PERIOD) -- 1_month_active
            , DATEADD(MONTH, +3, PERIOD.MONTH_PERIOD)  -- 3_month_active
            , DATEADD(MONTH, +12, PERIOD.MONTH_PERIOD) -- 12_month_active 
        ) 
GROUP BY ALL
ORDER BY PERIOD.MONTH_PERIOD, EMPLOYEE_KEY
)
SELECT  CE.BRANCH_KEY,FI.*
FROM  FINAL FI
LEFT JOIN (SELECT DISTINCT EMPLOYEE_KEY, FIRST_VALUE(BRANCH_KEY) OVER(PARTITION BY EMPLOYEE_KEY  ORDER BY SERVICE_MONTH DESC ) AS BRANCH_KEY
FROM VISIT_DATA) CE ON FI.EMPLOYEE_KEY = CE.EMPLOYEE_KEY
)
SELECT SERVICE_MONTH_NAME,SERVICE_MONTH,EMPLOYEE_KEY,BRANCH_KEY,"1_month_active","3_month_active",
"12_month_active",ETL_TASK_KEY,ETL_INSERTED_TASK_KEY,ETL_INSERTED_DATE,
ETL_INSERTED_BY,ETL_UPDATED_DATE,ETL_LAST_UPDATED_BY,ETL_DELETED_FLAG
 FROM ALL_DATA
WHERE IS_ACTIVE = TRUE
;
END
 EOT
}

