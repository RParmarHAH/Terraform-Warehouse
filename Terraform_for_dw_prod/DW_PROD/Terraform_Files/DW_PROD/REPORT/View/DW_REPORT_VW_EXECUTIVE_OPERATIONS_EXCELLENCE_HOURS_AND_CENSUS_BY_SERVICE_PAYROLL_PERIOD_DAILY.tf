resource "snowflake_view" "DW_REPORT_VW_EXECUTIVE_OPERATIONS_EXCELLENCE_HOURS_AND_CENSUS_BY_SERVICE_PAYROLL_PERIOD_DAILY" {
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	name = "VW_EXECUTIVE_OPERATIONS_EXCELLENCE_HOURS_AND_CENSUS_BY_SERVICE_PAYROLL_PERIOD_DAILY"
	statement = <<-SQL
	 
WITH DATA AS ( SELECT DISTINCT IFF(COALESCE(CCSI_BRANCH.CLIENT_KEY,CCSI_ACQUIRED_CLIENT.CLIENT_KEY,AQUISITION.CLIENT_KEY,RECCO_CLIENT.CLIENT_KEY) IS NULL,FALSE, TRUE) AS CLIENT_ACQUIRED_FLAG,
	      CASE  WHEN COALESCE(CCSI_BRANCH.CLIENT_KEY,CCSI_ACQUIRED_CLIENT.CLIENT_KEY) IS NOT NULL THEN 'CCSI'
		        WHEN AQUISITION.SOURCE_SYSTEM_ID = 9  THEN UPPER(AQUISITION.AQUISITION_NAME)
	      		WHEN AQUISITION.AQUISITION_NAME = 'Praetorian' THEN 'PRAETORIAN'
	      		WHEN AQUISITION.AQUISITION_NAME = 'EDISON' THEN 'EDISON'
	      		WHEN AQUISITION.AQUISITION_NAME = 'Meridius' THEN 'MERIDIUS'
	      		WHEN AQUISITION.AQUISITION_NAME = 'Longevity' THEN 'LONGEVITY'
	      		WHEN AQUISITION.AQUISITION_NAME = 'All Generations' THEN 'ALL GENERATIONS'
				WHEN AQUISITION.AQUISITION_NAME = 'MYCARE' THEN 'MYCARE'
				WHEN RECCO_CLIENT.AQUISITION_NAME = 'RECCO' THEN 'RECCO'
	      	ELSE AQUISITION.AQUISITION_NAME END  AS CLIENT_ACQUISITION_NAME,   
	      A.*,
	      CM.DERIVED_FIRST_SERVICE_DATE DERIVED_FIRST_SERVICE_DATE,
	      CM.DERIVED_LAST_SERVICE_DATE DERIVED_LAST_SERVICE_DATE      
	FROM REPORT.HOURS_AND_CENSUS_BY_PAYROLL_DATE_DAILY A
	    LEFT JOIN INTEGRATION.DIM_CLIENT_MERGED CM ON 
	        A.CLIENT_KEY_DATA = CM.CLIENT_KEY
	     LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED CCSI_BRANCH ON
				  CCSI_BRANCH.BRANCH_KEY = A.BRANCH_KEY 
				  AND CCSI_BRANCH.CLIENT_KEY = A.CLIENT_KEY
				  AND CCSI_BRANCH.CONTRACT_KEY = A.CONTRACT_KEY 
				  AND CCSI_BRANCH.SERVICE_MONTH = DATE_TRUNC('MONTH',A.SERVICE_DATE)
				  AND CCSI_BRANCH.AQUISITION_NAME ='CCSI'
		LEFT OUTER JOIN (SELECT DISTINCT CLIENT_KEY 
							FROM HAH.FACT_CLIENT_ACQUIRED 
							WHERE AQUISITION_NAME = 'CCSI') CCSI_ACQUIRED_CLIENT
				  ON CCSI_ACQUIRED_CLIENT.CLIENT_KEY = A.CLIENT_KEY AND A.SERVICE_DATE >= '2021-07-01'
		LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED AQUISITION
				  ON AQUISITION.BRANCH_KEY = A.BRANCH_KEY 
				  AND AQUISITION.CLIENT_KEY = A.CLIENT_KEY 
				  AND AQUISITION.CONTRACT_KEY = A.CONTRACT_KEY 
				  AND AQUISITION.SERVICE_MONTH = DATE_TRUNC('MONTH',A.SERVICE_DATE)
				  AND AQUISITION.AQUISITION_NAME != 'CCSI'
		LEFT OUTER JOIN HAH.FACT_CLIENT_ACQUIRED RECCO_CLIENT
				  ON RECCO_CLIENT.BRANCH_KEY = A.BRANCH_KEY 
				  AND RECCO_CLIENT.CLIENT_KEY = A.CLIENT_KEY 
				  AND RECCO_CLIENT.CONTRACT_KEY = A.CONTRACT_KEY 
				  AND RECCO_CLIENT.SERVICE_MONTH = DATE_TRUNC('MONTH',A.SERVICE_DATE)
				  AND RECCO_CLIENT.AQUISITION_NAME = 'RECCO'
	WHERE A.SERVICE_DATE BETWEEN DATEADD('WEEK',-79,CURRENT_DATE) AND CURRENT_DATE
)
,DATE_DATA AS (
 SELECT DISTINCT A.CALENDAR_DATE AS CALENDAR_DATE,B.BRANCH_KEY AS BRANCH_KEY 
 FROM HAH.DIM_DATE A
 LEFT JOIN INTEGRATION.FACT_BRANCH_PAYROLL_PERIODS_MERGED B ON A.CALENDAR_DATE BETWEEN B.PERIOD_START_DATE AND B.PERIOD_END_DATE
 WHERE A.CALENDAR_DATE BETWEEN DATEADD('WEEK',-79,CURRENT_DATE) AND CURRENT_DATE
) 
SELECT DISTINCT C.BRANCH_PAYROLL_PERIODS_KEY,
    A.PAYROLL_DATE,
    A.PAY_PERIOD_START_DATE,
    A.PAY_PERIOD_END_DATE,
    A.SERVICE_DATE,
    A.SERVICE_END_OF_WEEK,
    A.BRANCH_KEY,
    A.SUPERVISOR_KEY,
    A.CLIENT_KEY_DATA,
    A.CONTRACT_KEY,
    A.ORIGINAL_SOURCE_SYSTEM_ID,
    A.SOURCE_SYSTEM_ID,
    A.CLIENT_KEY,
    A.HOURS_SERVED_ALL,
    A.CLIENT_ACQUIRED_FLAG,
    A.CLIENT_ACQUISITION_NAME,
    A.ETL_TASK_KEY,
    A.ETL_INSERTED_TASK_KEY,
    A.ETL_INSERTED_DATE,
    A.ETL_INSERTED_BY,
    A.ETL_LAST_UPDATED_DATE,
    A.ETL_LAST_UPDATED_BY,
    A.ETL_DELETED_FLAG,
    A.ETL_INFERRED_MEMBER_FLAG,
    A.DERIVED_FIRST_SERVICE_DATE DERIVED_FIRST_SERVICE_DATE,
    A.DERIVED_LAST_SERVICE_DATE DERIVED_LAST_SERVICE_DATE
FROM DATA A 
LEFT JOIN DATE_DATA B ON B.CALENDAR_DATE=DATEADD('DAY',-7,A.SERVICE_DATE) AND A.BRANCH_KEY=B.BRANCH_KEY
  LEFT JOIN INTEGRATION.FACT_BRANCH_PAYROLL_PERIODS_MERGED C ON A.BRANCH_KEY=C.ORIGINAL_BRANCH_KEY AND A.SERVICE_DATE>=C.PERIOD_START_DATE 
	      AND A.SERVICE_DATE<=C.PERIOD_END_DATE
WHERE B.CALENDAR_DATE IS NOT NULL;
SQL
	or_replace = true 
	is_secure = false 
}

