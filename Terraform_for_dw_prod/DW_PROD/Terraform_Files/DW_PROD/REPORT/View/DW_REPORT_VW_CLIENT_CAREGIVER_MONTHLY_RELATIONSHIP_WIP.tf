resource "snowflake_view" "DW_REPORT_VW_CLIENT_CAREGIVER_MONTHLY_RELATIONSHIP_WIP" {
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "REPORT"
	name = "VW_CLIENT_CAREGIVER_MONTHLY_RELATIONSHIP_WIP"
	statement = <<-SQL
	 WITH GEN_REL AS (
SELECT DISTINCT DATE_TRUNC('MONTH',SERVICE_DATE) SERVICE_MONTH, 
	CLIENT_KEY, 
	ORIGINAL_CLIENT_KEY, 
	CLIENT_NUMBER ,
	EMPLOYEE_KEY, 
	ORIGINAL_EMPLOYEE_KEY,
	EMPLOYEE_NUMBER, 
	SYSTEM_CODE,
MIN(iff(MAX(CONFIRMED_FLAG) = 'YES',SERVICE_DATE,NULL)) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY) 
	RELATIONSHIP_FIRST_SERVICE_DATE, 
MAX(iff(MAX(CONFIRMED_FLAG) = 'YES',SERVICE_DATE,NULL)) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY) 
	RELATIONSHIP_LATEST_SERVICE_DATE,
	BRANCH_KEY,
(	MAX(iff(MAX(CONFIRMED_FLAG) = 'YES',SERVICE_DATE,NULL)) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY) 
	- MIN(iff(MAX(CONFIRMED_FLAG) = 'YES',SERVICE_DATE,NULL)) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY)
) 	RELATIONSHIP_TENURE, 
MIN(iff(MAX(CONFIRMED_FLAG) = 'YES',SERVICE_DATE,NULL)) OVER (PARTITION BY ORIGINAL_CLIENT_kEY) 
	CLIENT_FIRST_SERVICE_DATE,
MAX(iff(MAX(CONFIRMED_FLAG) = 'YES',SERVICE_DATE,NULL)) OVER (PARTITION BY ORIGINAL_CLIENT_kEY) 
	CLIENT_LATEST_SERVICE_DATE,
(	MAX(iff(MAX(CONFIRMED_FLAG) = 'YES',SERVICE_DATE,NULL)) OVER (PARTITION BY ORIGINAL_CLIENT_kEY) 
	- MIN(iff(MAX(CONFIRMED_FLAG) = 'YES',SERVICE_DATE,NULL)) OVER (PARTITION BY ORIGINAL_CLIENT_kEY)
) 	CLIENT_TENURE, 
MIN(iff(MAX(CONFIRMED_FLAG) = 'YES',SERVICE_DATE,NULL)) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY) 
	EMPLOYEE_FIRST_SERVICE_DATE,
MAX(iff(MAX(CONFIRMED_FLAG) = 'YES',SERVICE_DATE,NULL)) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY) 
	EMPLOYEE_LATEST_SERVICE_DATE,
	CLIENT_DOB,
	EMPLOYEE_DOB,
CASE WHEN CASE_MANAGER_FLAG = TRUE THEN 'ADMIN' ELSE EMPLOYEE_CATEGORY END 
	AS DERIVED_EMPLOYEE_CATEGORY,
	CLIENT_ZIP, 
CONCAT(CG_LATITUDE,',',CG_LONGITUDE) 
	CLIENT_LAT_LONG,
	EMPLOYEE_ZIP,
CONCAT(EG_LATITUDE,',',EG_LONGITUDE) 
	EMPLOYEE_LAT_LONG,
HAVERSINE(CG_LATITUDE,CG_LONGITUDE,EG_LATITUDE,EG_LONGITUDE) 
	EMPLOYEE_CLIENT_DISTANCE,
SUM(HAVERSINE(CG_LATITUDE,CG_LONGITUDE,EG_LATITUDE,EG_LONGITUDE))/COUNT(HAVERSINE(CG_LATITUDE,CG_LONGITUDE,EG_LATITUDE,EG_LONGITUDE)) 
	AVG_EMPLOYEE_CLIENT_DISTANCE,
SUM(iff(MAX(CONFIRMED_FLAG) = 'YES',HOURS_SERVED,NULL)) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH) 
	TOTAL_HOURS_SERVED,
COUNT(iff(MAX(CONFIRMED_FLAG) = 'YES',VISIT_KEY,NULL)) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH) 
	TOTAL_NUMBER_OF_VISITS,
(SUM(iff(MAX(CONFIRMED_FLAG) = 'YES',HOURS_SERVED,NULL)) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH)/COUNT(iff(MAX(CONFIRMED_FLAG) = 'YES',VISIT_KEY,NULL)) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH)) 
	AVG_HOURS_PER_VISIT,
	EMPLOYEE_FIRST_NAME,
	EMPLOYEE_LAST_NAME
FROM 
(
SELECT VISIT_KEY,SERVICE_DATE,CLIENT_KEY,ORIGINAL_CLIENT_KEY,CLIENT_NUMBER,EMPLOYEE_KEY,ORIGINAL_EMPLOYEE_KEY,EMPLOYEE_NUMBER,SYSTEM_CODE,BRANCH_KEY,CONFIRMED_FLAG,CLIENT_DOB,EMPLOYEE_DOB,CASE_MANAGER_FLAG,EMPLOYEE_CATEGORY,CLIENT_ZIP,CG_LATITUDE,CG_LONGITUDE,EMPLOYEE_ZIP,EG_LATITUDE,EG_LONGITUDE,HOURS_SERVED,EMPLOYEE_FIRST_NAME,EMPLOYEE_LAST_NAME
FROM DW_${var.SF_ENVIRONMENT}.REPORT.CLIENT_CAREGIVER_MONTHLY_RELATIONSHIP_1_0 
UNION ALL 
SELECT VISIT_KEY,SERVICE_DATE,CLIENT_KEY,ORIGINAL_CLIENT_KEY,CLIENT_NUMBER,EMPLOYEE_KEY,ORIGINAL_EMPLOYEE_KEY,EMPLOYEE_NUMBER,SYSTEM_CODE,BRANCH_KEY,CONFIRMED_FLAG,CLIENT_DOB,EMPLOYEE_DOB,CASE_MANAGER_FLAG,EMPLOYEE_CATEGORY,CLIENT_ZIP,CG_LATITUDE,CG_LONGITUDE,EMPLOYEE_ZIP,EG_LATITUDE,EG_LONGITUDE,HOURS_SERVED,EMPLOYEE_FIRST_NAME,EMPLOYEE_LAST_NAME 
FROM DW_${var.SF_ENVIRONMENT}.REPORT.CLIENT_CAREGIVER_MONTHLY_RELATIONSHIP_2_0
)
GROUP BY VISIT_KEY,
SERVICE_DATE,
HOURS_SERVED,
CLIENT_KEY,
CLIENT_NUMBER,
EMPLOYEE_KEY,
EMPLOYEE_NUMBER,
BRANCH_KEY,
CLIENT_DOB,
EMPLOYEE_DOB,
CLIENT_ZIP,
EMPLOYEE_ZIP,
CASE_MANAGER_FLAG,
EMPLOYEE_CATEGORY, 
cg_LATITUDE,
cg_LONGITUDE,
eg_LATITUDE,
eg_LONGITUDE,
SYSTEM_CODE,
ORIGINAL_EMPLOYEE_KEY,
ORIGINAL_CLIENT_KEY,
EMPLOYEE_FIRST_NAME,
EMPLOYEE_LAST_NAME
),
HH_REL AS (
SELECT DISTINCT 
DATE_TRUNC('MONTH',SERVICE_DATE) SERVICE_MONTH,
CLIENT_KEY, 
	ORIGINAL_CLIENT_KEY, 
	EMPLOYEE_KEY, 
	ORIGINAL_EMPLOYEE_KEY,
	MIN(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY) 
	HH_RELATIONSHIP_FIRST_SERVICE_DATE, 
MAX(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY) 
	HH_RELATIONSHIP_LATEST_SERVICE_DATE,
(MAX(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY) 
- MIN(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY)
)	HH_RELATIONSHIP_TENURE, 
MIN(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_CLIENT_kEY) 
	CLIENT_HH_FIRST_SERVICE_DATE,
MAX(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_CLIENT_kEY) 
	CLIENT_HH_LATEST_SERVICE_DATE,
MIN(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY) 
	EMPLOYEE_HH_FIRST_SERVICE_DATE,
MAX(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY) 
	EMPLOYEE_HH_LATEST_SERVICE_DATE,
SUM(HOURS_SERVED) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH) 
	TOTAL_HH_HOURS_SERVED,
COUNT(VISIT_KEY) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH) 
	TOTAL_NUMBER_HH_OF_VISITS,
(SUM(HOURS_SERVED) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH)/COUNT(VISIT_KEY) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH)) 
	HH_AVG_HOURS_PER_VISIT
FROM (
SELECT 
V.SERVICE_DATE,
	V.CLIENT_KEY, 
	V.ORIGINAL_CLIENT_KEY, 
	V.EMPLOYEE_KEY, 
	V.ORIGINAL_EMPLOYEE_KEY,
V.HOURS_SERVED,
V.VISIT_KEY
FROM INTEGRATION.FACT_VISIT_MERGED V 
JOIN HAH.DIM_CONTRACT C ON C.CONTRACT_KEY = V.CONTRACT_KEY AND C.REVENUE_CATEGORY = 'HH' 
WHERE  V.CONFIRMED_FLAG = 'YES' --V.STATUS_CODE IN ('02','03','04','05')
AND V.ORIGINAL_SOURCE_SYSTEM_ID NOT IN (4,7,17,13,9,3,19,8,16,1,2) 
UNION ALL 
SELECT 
V.SERVICE_DATE,
	V.CLIENT_KEY, 
	V.ORIGINAL_CLIENT_KEY, 
	V.EMPLOYEE_KEY, 
	V.ORIGINAL_EMPLOYEE_KEY,
V.HOURS_SERVED,
V.VISIT_KEY
FROM INTEGRATION.FACT_VISIT_MERGED V 
JOIN HAH.FACT_PARTNER_CONTRACT_SERVICE PCS ON V.PARTNER_CONTRACT_SERVICE_KEY = PCS.PARTNER_CONTRACT_SERVICE_KEY
JOIN HAH.DIM_SERVICES S ON S.SERVICE_KEY = PCS.SERVICE_KEY
WHERE  V.CONFIRMED_FLAG = 'YES' --V.STATUS_CODE IN ('02','03','04','05')
AND V.ORIGINAL_SOURCE_SYSTEM_ID IN (4,7,17,13,9,3,19,8,16,1,2) 
AND S.REVENUE_CATEGORY  = 'HH' AND PCS.BILLABLE_FLAG = TRUE
)
GROUP BY 
SERVICE_DATE,
	CLIENT_KEY, 
	ORIGINAL_CLIENT_KEY, 
	EMPLOYEE_KEY, 
	ORIGINAL_EMPLOYEE_KEY,
HOURS_SERVED,
VISIT_KEY
),
HC_REL AS (
SELECT DISTINCT DATE_TRUNC('MONTH',SERVICE_DATE) SERVICE_MONTH,
	CLIENT_KEY, 
	ORIGINAL_CLIENT_KEY, 
	EMPLOYEE_KEY, 
	ORIGINAL_EMPLOYEE_KEY,
MIN(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY) 
	HC_RELATIONSHIP_FIRST_SERVICE_DATE, 
MAX(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY) 
	HC_RELATIONSHIP_LATEST_SERVICE_DATE,
(MAX(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY) 
- MIN(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY, ORIGINAL_CLIENT_kEY)
) 	HC_RELATIONSHIP_TENURE, 
MIN(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_CLIENT_kEY) 
	CLIENT_HC_FIRST_SERVICE_DATE,
MAX(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_CLIENT_kEY) 
	CLIENT_HC_LATEST_SERVICE_DATE,
MIN(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY) 
	EMPLOYEE_HC_FIRST_SERVICE_DATE,
MAX(SERVICE_DATE) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY) 
	EMPLOYEE_HC_LATEST_SERVICE_DATE,
SUM(HOURS_SERVED) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH) 
	TOTAL_HC_HOURS_SERVED,
COUNT(VISIT_KEY) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH) 
	TOTAL_NUMBER_HC_OF_VISITS,
(SUM(HOURS_SERVED) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH)/COUNT(VISIT_KEY) OVER (PARTITION BY ORIGINAL_EMPLOYEE_KEY,ORIGINAL_CLIENT_kEY,SERVICE_MONTH)) 
	HC_AVG_HOURS_PER_VISIT
FROM (
SELECT 
V.SERVICE_DATE,
	V.CLIENT_KEY, 
	V.ORIGINAL_CLIENT_KEY, 
	V.EMPLOYEE_KEY, 
	V.ORIGINAL_EMPLOYEE_KEY,
V.HOURS_SERVED,
V.VISIT_KEY
FROM INTEGRATION.FACT_VISIT_MERGED V 
JOIN HAH.DIM_CONTRACT C ON C.CONTRACT_KEY = V.CONTRACT_KEY AND C.REVENUE_CATEGORY = 'HC' 
WHERE  V.CONFIRMED_FLAG = 'YES' --V.STATUS_CODE IN ('02','03','04','05')
AND V.ORIGINAL_SOURCE_SYSTEM_ID NOT IN (4,7,17,13,9,3,19,8,16,1,2) 
UNION ALL 
SELECT 
V.SERVICE_DATE,
	V.CLIENT_KEY, 
	V.ORIGINAL_CLIENT_KEY, 
	V.EMPLOYEE_KEY, 
	V.ORIGINAL_EMPLOYEE_KEY,
V.HOURS_SERVED,
V.VISIT_KEY
FROM INTEGRATION.FACT_VISIT_MERGED V 
JOIN HAH.FACT_PARTNER_CONTRACT_SERVICE PCS ON V.PARTNER_CONTRACT_SERVICE_KEY = PCS.PARTNER_CONTRACT_SERVICE_KEY
JOIN HAH.DIM_SERVICES S ON S.SERVICE_KEY = PCS.SERVICE_KEY
WHERE  V.CONFIRMED_FLAG = 'YES' --V.STATUS_CODE IN ('02','03','04','05')
AND V.ORIGINAL_SOURCE_SYSTEM_ID IN (4,7,17,13,9,3,19,8,16,1,2) 
AND S.REVENUE_CATEGORY  = 'HC' AND PCS.BILLABLE_FLAG = TRUE
)
GROUP BY 
SERVICE_DATE,
	CLIENT_KEY, 
	ORIGINAL_CLIENT_KEY, 
	EMPLOYEE_KEY, 
	ORIGINAL_EMPLOYEE_KEY,
HOURS_SERVED,
VISIT_KEY
),
NEW_METRICS AS
	(	
		SELECT
			REPORT_DATE, 
			CLIENT_KEY,
			BRANCH_KEY,
			EMPLOYEE_KEY,
			ORIGINAL_EMPLOYEE_KEY,
			ORIGINAL_CLIENT_KEY, 
			sum(HOURS_IN_REVIEW) AS HOURS_IN_REVIEW,
			sum(FUTURE_HOURS) AS FUTURE_HOURS,
			sum(FUTURE_CANCELLED_HOURS) AS FUTURE_CANCELLED_HOURS,
			sum(FUTURE_HOLD_HOURS) AS FUTURE_HOLD_HOURS,
			sum(HOURS_MISSED) AS HOURS_MISSED,
			sum(HOURS_CANCELLED) AS HOURS_CANCELLED,
			sum(HOURS_RESCHEDULED) AS HOURS_RESCHEDULED,
			sum(HOURS_SCHEDULED) AS HOURS_SCHEDULED,
			sum(VISITS_IN_REVIEW) AS VISITS_IN_REVIEW,
			sum(FUTURE_VISITS) AS FUTURE_VISITS,
			sum(FUTURE_CANCELLED_VISITS) AS FUTURE_CANCELLED_VISITS,
			sum(FUTURE_HOLD_VISITS) AS FUTURE_HOLD_VISITS,
			sum(VISITS_MISSED) AS VISITS_MISSED,
			sum(VISITS_COMPLETED) AS VISITS_COMPLETED,
			sum(VISITS_CANCELLED) AS VISITS_CANCELLED,
			sum(VISITS_RESCHEDULED) AS VISITS_RESCHEDULED,
			sum(VISITS_SCHEDULED) AS VISITS_SCHEDULED,
			max(client_served_flag) AS CLIENT_SERVED_FLAG
		FROM REPORT.SCHEDULE_METRICS_MONTHLY V
		GROUP BY 
			REPORT_DATE, 
			CLIENT_KEY,
			BRANCH_KEY,
			EMPLOYEE_KEY,
			ORIGINAL_EMPLOYEE_KEY,
			ORIGINAL_CLIENT_KEY			
	)
SELECT G.*,HH_RELATIONSHIP_FIRST_SERVICE_DATE, HH_RELATIONSHIP_LATEST_SERVICE_DATE, HH_RELATIONSHIP_TENURE, CLIENT_HH_FIRST_SERVICE_DATE, CLIENT_HH_LATEST_SERVICE_DATE,
EMPLOYEE_HH_FIRST_SERVICE_DATE, EMPLOYEE_HH_LATEST_SERVICE_DATE, TOTAL_HH_HOURS_SERVED, TOTAL_NUMBER_HH_OF_VISITS, HH_AVG_HOURS_PER_VISIT,
HC_RELATIONSHIP_LATEST_SERVICE_DATE, HC_RELATIONSHIP_TENURE, CLIENT_HC_FIRST_SERVICE_DATE, CLIENT_HC_LATEST_SERVICE_DATE,
EMPLOYEE_HC_FIRST_SERVICE_DATE, EMPLOYEE_HC_LATEST_SERVICE_DATE, TOTAL_HC_HOURS_SERVED, TOTAL_NUMBER_HC_OF_VISITS, HC_AVG_HOURS_PER_VISIT,
NM.HOURS_IN_REVIEW,
	NM.FUTURE_HOURS,
	NM.FUTURE_CANCELLED_HOURS,
	NM.FUTURE_HOLD_HOURS,
	NM.HOURS_MISSED,
	NM.HOURS_CANCELLED,
	NM.HOURS_RESCHEDULED,
	NM.HOURS_SCHEDULED,
	NM.VISITS_IN_REVIEW,
	NM.FUTURE_VISITS,
	NM.FUTURE_CANCELLED_VISITS,
	NM.FUTURE_HOLD_VISITS,
	NM.VISITS_MISSED,
	NM.VISITS_COMPLETED,
	NM.VISITS_CANCELLED,
	NM.VISITS_RESCHEDULED,
	NM.VISITS_SCHEDULED,
	NM.CLIENT_SERVED_FLAG
FROM GEN_REL G
LEFT JOIN HC_REL HC ON HC.ORIGINAL_CLIENT_KEY=G.ORIGINAL_CLIENT_KEY AND HC.ORIGINAL_EMPLOYEE_KEY=G.ORIGINAL_EMPLOYEE_KEY AND HC.SERVICE_MONTH=G.SERVICE_MONTH
LEFT JOIN HH_REL HH ON HH.ORIGINAL_CLIENT_KEY=G.ORIGINAL_CLIENT_KEY AND HH.ORIGINAL_EMPLOYEE_KEY=G.ORIGINAL_EMPLOYEE_KEY AND HH.SERVICE_MONTH=G.SERVICE_MONTH
LEFT JOIN NEW_METRICS NM ON NM.REPORT_DATE = G.SERVICE_MONTH 
	AND NM.EMPLOYEE_KEY = G.EMPLOYEE_KEY AND NM.CLIENT_KEY = G.CLIENT_KEY AND NM.BRANCH_KEY = G.BRANCH_KEY
	AND NM.ORIGINAL_CLIENT_KEY = G.ORIGINAL_CLIENT_KEY AND NM.ORIGINAL_EMPLOYEE_KEY = G.ORIGINAL_EMPLOYEE_KEY
WHERE IFF(NM.CLIENT_SERVED_FLAG = TRUE,coalesce(G.TOTAL_HOURS_SERVED, 0), 1) > 0;
SQL
	or_replace = true 
	is_secure = false 
}

