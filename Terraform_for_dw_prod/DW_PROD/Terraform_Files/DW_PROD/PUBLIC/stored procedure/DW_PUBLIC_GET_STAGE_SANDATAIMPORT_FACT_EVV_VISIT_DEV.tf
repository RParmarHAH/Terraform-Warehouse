resource "snowflake_procedure" "DW_PUBLIC_GET_STAGE_SANDATAIMPORT_FACT_EVV_VISIT_DEV" {
	name ="GET_STAGE_SANDATAIMPORT_FACT_EVV_VISIT_DEV"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "PUBLIC"
	language  = "JAVASCRIPT"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

        var sql = `
    INSERT OVERWRITE INTO STAGE.SANDATAIMPORT_FACT_EVV_VISIT_${var.SF_ENVIRONMENT}
WITH avg_bill_rate as (
	SELECT agencyid,admissionid,AVG(RATE) as BILL_RATE 
	FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS
	GROUP BY agencyid,admissionid)
SELECT MD5(SV.AGENCYID || ''-'' || SV.SCHEDULEID || ''-'' || ''SANDATAIMPORT'') AS VISIT_KEY,
   ''Schedule'' as SCHEDULE_VISIT_INDICATOR,
	SV.SCHEDULEDATE AS REPORT_DATE,
	CASE WHEN S.state_iso_code = ''PA'' THEN 
	MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || COALESCE(SV.LOCATIONID, '''') || ''-'' || ''SANDATAIMPORT'') ELSE 
	MD5(NVL(OFFICE.DBNAME,'''') || ''-'' || COALESCE(OFFICE.OFFICENUMBER, -1) || ''-'' || IFF(OFFICE.OFFICENUMBER = 0, ''GPSYNCDATA'', ''DATAFLEXSYNCDATA'')) END
	AS BRANCH_KEY,
	CASE WHEN S.state_iso_code = ''PA'' THEN 
	MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || SV.CLIENTID || ''-'' || ''SANDATAIMPORT'') ELSE
    md5(s.state_iso_code || ''-'' || NVL(DFCLIENT."NUMBER",-1) || ''-''  ||  ''DATAFLEXSYNCDATA'') END AS CLIENT_KEY,
	CASE WHEN S.state_iso_code = ''PA'' THEN 
	MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || SV.ADMISSIONTYPE || ''-'' || ''SANDATAIMPORT'') ELSE 
	md5(s.state_iso_code || ''-'' || NVL(CONTRACT.CONTRACTCODE,''Unknown'') || ''-''  ||  ''DATAFLEXSYNCDATA'') END AS CONTRACT_KEY,
	CASE WHEN S.state_iso_code = ''PA'' THEN 
	NVL(E.EMPLOYEE_KEY, MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || UPPER(COALESCE(TRY_CAST(SV.STAFFAGENCYID AS INT)::STRING, TRIM(SV.STAFFAGENCYID), '''')) || ''-'' || ''1900-01-01'' || ''-'' || ''SANDATAIMPORT'')) ELSE
	nvl(e.EMPLOYEE_KEY, md5(COALESCE(s.state_iso_code,'''') || ''-'' || UPPER(NVL(TRIM(EMPLOYEE.NUMBER), '''')) || ''-''  ||  ''1900-01-01'' || ''-'' || ''DATAFLEXSYNCDATA''))
	END AS EMPLOYEE_KEY,
	4 AS SOURCE_SYSTEM_ID,
	CASE WHEN S.state_iso_code = ''PA'' THEN 
	MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || NVL(CAD.COORDINATORID::STRING, ''Unknown-'' || NVL(SV.AGENCYID, ''S'')) || ''-'' || ''SANDATAIMPORT'') ELSE 
	 md5(s.state_iso_code || ''-''  || nvl(COALESCE(DFCLIENTSUPERVISOR.SUPERVISORCODE, DFCLIENT.SUPERVISORCODE),''Unknown-'' || s.state_iso_code) || ''-''  || ''DATAFLEXSYNCDATA'') END  
	 AS SUPERVISOR_KEY,
	-- Business Keys
	SV.SCHEDULEDATE AS SERVICE_DATE,
	NULL AS PAYROLL_DATE,
	CASE WHEN S.state_iso_code = ''PA'' THEN NVL(BRANCH.BRANCH_NAME, SV.LOCATIONID) ELSE
	COALESCE(OFFICE.OFFICENAME, ''Unknown'') END AS BRANCH_NAME,
	CASE WHEN S.state_iso_code = ''PA'' THEN SV.CLIENTID ELSE
	DFCLIENT."NUMBER" END AS CLIENT_NUMBER,
	CASE WHEN S.state_iso_code = ''PA'' THEN SV.ADMISSIONTYPE ELSE
	CONTRACT.CONTRACTCODE END AS CONTRACT_CODE,
	CASE WHEN S.state_iso_code = ''PA'' THEN NVL(TRY_CAST(SV.STAFFAGENCYID AS INT)::STRING, UPPER(TRIM(SV.STAFFAGENCYID))--, ''-1''
	) ELSE EMPLOYEE.NUMBER END AS EMPLOYEE_ID,
	S.STATE_ISO_CODE AS SYSTEM_CODE,
	CASE WHEN S.state_iso_code = ''PA'' THEN NVL(CAD.COORDINATORID::STRING, ''Unknown-'' || NVL(SV.AGENCYID, ''S'')) ELSE
	COALESCE(DFCLIENTSUPERVISOR.SUPERVISORCODE, DFCLIENT.SUPERVISORCODE) END AS SUPERVISOR_CODE,
	CASE WHEN SV.STATUS IN (''02'',''03'',''04'') AND SV.VERIFICATIONTYPE = ''Auto'' THEN 1 ELSE 0 END AS CLEAN_SHIFT_FLAG,
	SV.STATUS AS STATUS_CODE,
	CASE SV.STATUS 
		WHEN ''01'' THEN ''Pending''
        WHEN ''02'' THEN ''Confirmed''
        WHEN ''03'' THEN ''In Process''
        WHEN ''04'' THEN ''Billed''
        WHEN ''09'' THEN ''Hold''
        WHEN ''10'' THEN ''Cancelled''
        END AS STATUS_DESCRIPTION,
    
    NULL AS CANCEL_REASON_CODE,
    NULL AS CANCEL_REASON_DESCRIPTION,
    sch.CANCELREASONNOTES AS CANCEL_REASON_NOTES,
    CASE WHEN sch.EXCEPTIONCODE IS NOT NULL AND sch.EXCEPTIONCODE <>'''' THEN ''TRUE'' ELSE ''FALSE'' END AS EXCEPTION_REASON_FLAG,
    sch.RESOLUTIONCODE AS RESOLUTION_CODE,
    NULL AS RESOLUTION_DESCRIPTION,
    sch.REJECTIONCODE AS REJECTION_CODE,
    r.DESCRIPTION AS REJECTION_DESCRIPTION,
    NULL AS BILL_CODE,
	COALESCE(ca.bill_rate * IFF(ca.unittype=5,4,1),avg_bill_rate_ca.BILL_RATE) as Bill_Rate,
	NULL AS OVERHEAD_RATE,
    SUM(SV.SCHEDULEDDURATION) AS HOURS_SERVED,
    sch.PROPOSEDTIMEIN AS SCHEDULE_TIMEIN,
    sch.PROPOSEDTIMEOUT AS SCHEDULE_TIMEOUT,
    sch.PROPOSEDDURATION AS SCHEDULE_DURATION,
    sch.EVVTIMEIN AS ACTUAL_TIMEIN,
    sch.EVVTIMEOUT AS ACTUAL_TIMEOUT,
    sch.EVVDURATION AS ACTUAL_DURATION,
    sch.SCHEDULEDTIMEIN AS ADJUSTED_TIMEIN,
    sch.SCHEDULEDTIMEOUT AS ADJUSTED_TIMEOUT,
    sch.SCHEDULEDDURATION AS ADJUSTED_DURATION,
    NULL AS COMMENTS,
    NULL AS IS_EVV_FLAG,
    NULL AS TIMESHEET_TYPE,
    NULL AS TRACKING_ID,
    -- ETL Fields
    
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_TASK_KEY,
        
	
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_INSERTED_TASK_KEY,
        
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.SANDATAVISITS SV
--LEFT JOIN DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.EXTERNALIDS EID
--	ON --EID.DBNAME = ''PA'' AND 
--	EID.TYP = ''L'' AND EID.EXTID = SV.LOCATIONID 
LEFT JOIN HAH.DIM_BRANCH AS BRANCH ON BRANCH.SYSTEM_CODE::STRING = SV.AGENCYID AND BRANCH.OFFICE_CODE = SV.LOCATIONID
LEFT JOIN HAH.DIM_STATE S 
    on SV.agencyid = S.sandata_agency_id
LEFT JOIN HAH.DIM_EMPLOYEE E
	ON (case when s.state_iso_code =''PA'' then e.system_code = SV.agencyid
        else e.SYSTEM_CODE = S.STATE_ISO_CODE end) AND SV.SCHEDULEDATE >= E.EFFECTIVE_FROM_DATE AND SV.SCHEDULEDATE < E.EFFECTIVE_TO_DATE  
	AND E.EMPLOYEE_ID = CAST(SV.STAFFAGENCYID AS INT)::STRING
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTADMISSIONS CAD
	ON CAD.AGENCYID = SV.AGENCYID AND CAD.ADMISSIONID = SV.ADMISSIONID 
LEFT JOIN (SELECT AGENCYID,avg(try_to_number(unittype)) AS unittype,scheduleid,admissionid,avg(rate) as bill_rate
 from DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS 
 group by AGENCYID,scheduleid,admissionid) ca ON SV.agencyid = ca.agencyid and SV.scheduleid = ca.scheduleid
and SV.admissionid = ca.admissionid 
LEFT JOIN avg_bill_rate avg_bill_rate_ca on
SV.agencyid = avg_bill_rate_ca.agencyid 
and SV.admissionid = avg_bill_rate_ca.admissionid 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES sch ON SV.AGENCYID = sch.AGENCYID AND SV.SCHEDULEID = sch.SCHEDULEID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_REJECTIONCODES r ON sch.REJECTIONCODE = r.code AND sch.agencyid = r.AGENCYID 
-------Employee_Key-----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFEMPLOYEES AS EMPLOYEE
    ON EMPLOYEE.DBNAME = S.STATE_ISO_CODE AND EMPLOYEE.PAYROLLIDINDEXNO = try_cast(SV.STAFFAGENCYID as integer)
-------Contract_Key-----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAEXCHANGE.OPENSAM_CLIENTADMISSIONTYPES CAT
    ON CAT.HAHDFDB = S.STATE_ISO_CODE AND CAT.ADMISSIONTYPEID = SV.ADMISSIONTYPE AND CAT.DEFAULTSERVICE = SV.SERVICEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCONTRACTS AS CONTRACT
    ON CONTRACT.DBNAME = CAT.HAHDFDB AND CONTRACT.CONTRACTCODE = CAT.CONTRACTCODE
-------Supervisor_Key----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTS C
    ON C.AGENCYID = CAD.AGENCYID AND C.CLIENTID = CAD.CLIENTID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTS AS DFCLIENT
    ON DFCLIENT.DBNAME = S.STATE_ISO_CODE AND DFCLIENT."NUMBER" = TRY_CAST(C.OTHERID AS INTEGER)
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTSUPERVISORS DFCLIENTSUPERVISOR
    ON DFCLIENTSUPERVISOR.DBNAME = DFCLIENT.DBNAME AND DFCLIENTSUPERVISOR.CLIENTNUMBER = DFCLIENT."NUMBER"  
    AND DFCLIENTSUPERVISOR.BUSINESSLINE = CONTRACT.REVENUECATEGORY
-------Branch_Key------
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFOFFICES AS OFFICE
    ON OFFICE.DBNAME = DFCLIENT.DBNAME AND OFFICE.OFFICENUMBER = DFCLIENT.OFFICENUMBER
-----------------------
WHERE 
NVL(SV.STAFFAGENCYID,'''') <> '''' AND SV.CLIENTID IS NOT NULL
	AND NVL(SV.ADMISSIONTYPE, '''') <> '''' AND LEN(NVL(SV.STATUS,'''')) <= 2 -- Exclude (7) bad data records
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43
,44,45,46,47,48,49,50,51,52;`;
          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  

 var sql = `MERGE INTO dw_dev.STAGE.SANDATAIMPORT_FACT_EVV_VISIT_${var.SF_ENVIRONMENT} AS TARGET USING (
WITH clu as (
    select
           (CASE WHEN try_to_numeric(OTHERID) is null AND try_to_numeric(CUSTOMID) is null THEN -1
                WHEN try_to_numeric(OTHERID) is not null AND try_to_numeric(CUSTOMID) is null THEN OTHERID
                WHEN try_to_numeric(CUSTOMID) is not null AND try_to_numeric(OTHERID) is null THEN CUSTOMID
                ELSE coalesce(OTHERID, CUSTOMID)
            END)::INTEGER as DF_CLIENT_NUMBER,
           AGENCYID,
           max(CLIENTID) AS CLIENTID
    from DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTS
    group by 1,2
),
max_client as (
    select DF_CLIENT_NUMBER,
            max(CLIENTID) AS CLIENTID
    from clu
    GROUP BY 1
    ),
avg_bill_rate as (
	SELECT agencyid,admissionid,AVG(RATE) as BILL_RATE 
	FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS
	GROUP BY agencyid,admissionid)
SELECT
	MD5(NVL(f.agencyID,''S'') || ''-'' || f.scheduleid || ''-'' || ''SANDATAIMPORT'') AS VISIT_KEY,
	''Visit'' as SCHEDULE_VISIT_INDICATOR,
    f."DATE" AS REPORT_DATE,
    CASE WHEN S.state_iso_code =''PA'' THEN 
     md5(nvl(f.agencyID,''S'') || ''-'' || nvl(f.LocationId,'') || ''-'' ||  ''SANDATAIMPORT'') ELSE
    MD5(NVL(OFFICE.DBNAME,'') || ''-'' || COALESCE(OFFICE.OFFICENUMBER, -1) || ''-'' || IFF(OFFICE.OFFICENUMBER = 0, ''GPSYNCDATA'', ''DATAFLEXSYNCDATA'')) END
    AS BRANCH_KEY,
    CASE WHEN S.state_iso_code = ''PA'' THEN 
    md5(nvl(f.agencyID,''S'')||''-'' ||  coalesce(ClientAdmissions.CLIENTID,clu.CLIENTID,mc.CLIENTID) || ''-''  || ''SANDATAIMPORT'' ) ELSE
    md5(s.state_iso_code ||''-'' || NVL(DFCLIENT."NUMBER",-1) || ''-''  ||  ''DATAFLEXSYNCDATA'')END AS CLIENT_KEY,
    CASE WHEN S.state_iso_code = ''PA'' THEN 
    md5(nvl(f.agencyID,''S'') || ''-'' || f.ClientAdmitType || ''-''  ||  ''SANDATAIMPORT'') ELSE
    md5(s.state_iso_code || ''-'' || NVL(CONTRACT.CONTRACTCODE,''Unknown'') || ''-''  ||  ''DATAFLEXSYNCDATA'') END AS CONTRACT_KEY,
    CASE WHEN S.state_iso_code = ''PA'' THEN 
    nvl(e.EMPLOYEE_KEY, md5(nvl(f.agencyID,''S'') || ''-'' || upper(NVL(TRIM(f.STAFFAGENCYID), '')) || ''-'' || ''1900-01-01'' || ''-'' || ''SANDATAIMPORT'')) else
    nvl(e.EMPLOYEE_KEY, md5(COALESCE(s.state_iso_code,'') || ''-'' || UPPER(NVL(TRIM(EMPLOYEE.NUMBER), '')) || ''-''  ||  ''1900-01-01'' || ''-'' || ''DATAFLEXSYNCDATA''))
    end AS EMPLOYEE_KEY, 
    4 AS SOURCE_SYSTEM_ID,
    CASE WHEN S.state_iso_code = ''PA'' THEN 
    md5(nvl(f.agencyID,''S'') || ''-''  || nvl(ClientAdmissions.CoordinatorID::string, ''Unknown-'' || nvl(f.agencyID,''S'')) || ''-''  || ''SANDATAIMPORT'') 
    ELSE md5(s.state_iso_code || ''-''  || nvl(COALESCE(DFCLIENTSUPERVISOR.SUPERVISORCODE, DFCLIENT.SUPERVISORCODE),''Unknown-'' || s.state_iso_code) || ''-''  || ''DATAFLEXSYNCDATA'') END 
    AS SUPERVISOR_KEY,
    --Business Keys
    f."DATE" AS SERVICE_DATE,
	dateadd(''day'',9,date_trunc(''week'',CAST(f."DATE" as date))) AS PAYROLL_DATE,
	case when s.state_iso_code = ''PA'' THEN nvl(BRANCH.BRANCH_NAME ,f.LocationId) ELSE OFFICE.OFFICENAME END AS BRANCH_NAME,
    case when s.state_iso_code = ''PA'' THEN coalesce(ClientAdmissions.CLIENTID,clu.CLIENTID,mc.CLIENTID) 
    ELSE DFCLIENT."NUMBER" END AS CLIENT_NUMBER,
	case when s.state_iso_code = ''PA'' THEN f.ClientAdmitType ELSE CONTRACT.CONTRACTCODE END
    AS CONTRACT_CODE,
	case when s.state_iso_code = ''PA'' THEN NVL(f.STAFFAGENCYID, ''-1'') ELSE CAST(EMPLOYEE.NUMBER AS VARCHAR) END AS EMPLOYEE_ID,
    s.state_iso_code AS SYSTEM_CODE,
	case when s.state_iso_code = ''PA'' THEN nvl(ClientAdmissions.CoordinatorID::string, ''Unknown-'' || nvl(f.agencyID,''S'')) 
    ELSE COALESCE(DFCLIENTSUPERVISOR.SUPERVISORCODE, DFCLIENT.SUPERVISORCODE) END AS SUPERVISOR_CODE,
    CASE WHEN (sch.STATUS IN (''02'', ''03'', ''04'') AND sch.VERIFICATIONTYPE = ''Auto'') THEN 1 ELSE 0 END AS CLEAN_SHIFT_FLAG,
    EVENTSTATUS AS STATUS_CODE,
    CASE EVENTSTATUS
        WHEN ''01'' THEN ''Pending''
        WHEN ''02'' THEN ''Confirmed''
        WHEN ''03'' THEN ''In Process''
        WHEN ''04'' THEN ''Billed''
        WHEN ''09'' THEN ''Hold''
        WHEN ''10'' THEN ''Cancelled''
        END AS STATUS_DESCRIPTION,
    f.REASONCODE AS CANCEL_REASON_CODE,
    f.REASONCODEDESCRIPTION AS CANCEL_REASON_DESCRIPTION,
    sch.CANCELREASONNOTES AS CANCEL_REASON_NOTES,
    CASE WHEN sch.EXCEPTIONCODE IS NOT NULL AND sch.EXCEPTIONCODE <>'' THEN ''TRUE'' ELSE ''FALSE'' END as EXCEPTION_REASON_FLAG,
    sch.RESOLUTIONCODE AS RESOLUTION_CODE,
    NULL AS RESOLUTION_DESCRIPTION,
    sch.REJECTIONCODE AS REJECTION_CODE,
    r.DESCRIPTION AS REJECTION_DESCRIPTION, 
    NULL AS BILL_CODE,
    COALESCE(ca.bill_rate* IFF(ca.unittype=5,4,1),avg_bill_rate_ca.BILL_RATE) as Bill_Rate, --unittype 5 has unitwise rate
    NULL AS OVERHEAD_RATE,
    SUM(F.ADJUSTEDDURATION) AS HOURS_SERVED,
    f.PROPOSEDSTART AS SCHEDULE_TIMEIN,
    f.PROPOSEDEND AS SCHEDULE_TIMEOUT,
    f.PROPOSEDDURATION AS SCHEDULE_DURATION,
    f.TIMEIN AS ACTUAL_TIMEIN,
    f.TIMEOUT AS ACTUAL_TIMEOUT,
    f.ACTUALDURATION AS ACTUAL_DURATION,
    f.ADJUSTEDTIMEIN AS ADJUSTED_TIMEIN,
    f.ADJUSTEDTIMEOUT AS ADJUSTED_TIMEOUT,
    f.ADJUSTEDDURATION AS ADJUSTED_DURATION,
    F.COMMENTS AS COMMENTS,
    ''Y'' AS IS_EVV_FLAG, 
    NULL AS TIMESHEET_TYPE, 
    NULL AS TRACKING_ID,
    
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_TASK_KEY,
        
    
        `;    
             sql += STR_ETL_TASK_KEY;
             sql +=  
             ` AS ETL_INSERTED_TASK_KEY,
        
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_VISITS f
left join clu clu
    on (CASE WHEN try_to_numeric(F.CLIENTOTHERID) is null THEN -1
            ELSE f.CLIENTOTHERID
        END)::INTEGER = clu.DF_CLIENT_NUMBER
    and f.AGENCYID = clu.AGENCYID
left join max_client mc
    on (CASE WHEN try_to_numeric(f.CLIENTOTHERID) is null THEN -1
            ELSE f.CLIENTOTHERID
        END)::INTEGER = mc.DF_CLIENT_NUMBER
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTADMISSIONS ClientAdmissions
    ON ClientAdmissions.agencyID = f.AgencyId
    AND ClientAdmissions.admissionID = f.AdmissionId
--LEFT JOIN DISC_${var.SF_ENVIRONMENT}.BI_Repository.EXTERNALIDS eid
--    ON f.LocationId = eid.ExtID
--    AND eid.Typ = ''L''
LEFT JOIN HAH.DIM_BRANCH AS BRANCH ON BRANCH.SYSTEM_CODE::STRING = F.AGENCYID AND BRANCH.OFFICE_CODE = F.LOCATIONID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES sch ON f.AGENCYID = sch.AGENCYID AND f.SCHEDULEID = sch.SCHEDULEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_REJECTIONCODES r ON sch.REJECTIONCODE = r.code AND sch.agencyid = r.AGENCYID 
LEFT JOIN (SELECT AGENCYID,avg(try_to_number(unittype)) AS unittype,scheduleid,admissionid,avg(rate) as bill_rate
 from DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS 
 group by AGENCYID,scheduleid,admissionid) ca on
f.agencyid = ca.agencyid and f.scheduleid = ca.scheduleid
and f.admissionid = ca.admissionid 
LEFT JOIN avg_bill_rate avg_bill_rate_ca on
f.agencyid = avg_bill_rate_ca.agencyid 
and f.admissionid = avg_bill_rate_ca.admissionid
LEFT JOIN HAH.DIM_STATE s 
    on f.agencyid = s.sandata_agency_id
-----Employee_Key-----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFEMPLOYEES AS EMPLOYEE
    ON EMPLOYEE.DBNAME = S.STATE_ISO_CODE AND EMPLOYEE.PAYROLLIDINDEXNO = try_cast(F.STAFFAGENCYID as integer)
LEFT JOIN HAH.DIM_EMPLOYEE e
	ON f.STAFFAGENCYID = e.EMPLOYEE_ID
	AND (case when s.state_iso_code =''PA'' then e.system_code = f.agencyid
        else e.SYSTEM_CODE = S.STATE_ISO_CODE end)
    AND f.Date >= e.EFFECTIVE_FROM_DATE
    AND f.Date < e.EFFECTIVE_TO_DATE
-----Contract_Key-----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAEXCHANGE.OPENSAM_CLIENTADMISSIONTYPES CAT
    ON CAT.HAHDFDB = S.STATE_ISO_CODE AND CAT.ADMISSIONTYPEID = F.CLIENTADMITTYPE AND CAT.DEFAULTSERVICE = F.SERVICEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCONTRACTS AS CONTRACT
    ON CONTRACT.DBNAME = CAT.HAHDFDB AND CONTRACT.CONTRACTCODE = CAT.CONTRACTCODE
-----Client_Key-------
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTS C
    ON C.AGENCYID = ClientAdmissions.AGENCYID AND C.CLIENTID = ClientAdmissions.CLIENTID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTS AS DFCLIENT
    ON DFCLIENT.DBNAME = S.STATE_ISO_CODE AND DFCLIENT."NUMBER" = CLU.DF_CLIENT_NUMBER --TRY_CAST(C.OTHERID AS INTEGER)
-----Supervisor_Key----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTSUPERVISORS DFCLIENTSUPERVISOR
    ON DFCLIENTSUPERVISOR.DBNAME = DFCLIENT.DBNAME AND DFCLIENTSUPERVISOR.CLIENTNUMBER = DFCLIENT."NUMBER"  
    AND DFCLIENTSUPERVISOR.BUSINESSLINE = CONTRACT.REVENUECATEGORY
-----Branch_Key-----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFOFFICES AS OFFICE
    ON OFFICE.DBNAME = DFCLIENT.DBNAME AND OFFICE.OFFICENUMBER = DFCLIENT.OFFICENUMBER
WHERE  
(f.ETL_LAST_UPDATED_DATE >= ''`; 
sql += STR_CDC_START
sql += `''::timestamp_ntz
	OR sch.ETL_LAST_UPDATED_DATE >= ''`; 
sql += STR_CDC_START
sql += `''::timestamp_ntz)
AND f.STAFFAGENCYID <> '''' 
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43
,44,45,46,47,48,49,50,51,52
HAVING SUM(f.ADJUSTEDDURATION) > 0
) AS SOURCE ON SOURCE.VISIT_KEY = TARGET.VISIT_KEY
WHEN MATCHED THEN 
	UPDATE SET REPORT_DATE = SOURCE.REPORT_DATE,
	SCHEDULE_VISIT_INDICATOR = SOURCE.SCHEDULE_VISIT_INDICATOR,
		BRANCH_KEY = SOURCE.BRANCH_KEY,
		CLIENT_KEY = SOURCE.CLIENT_KEY,
		CONTRACT_KEY = SOURCE.CONTRACT_KEY,
		EMPLOYEE_KEY = SOURCE.EMPLOYEE_KEY,
		SOURCE_SYSTEM_ID = SOURCE.SOURCE_SYSTEM_ID,
		SUPERVISOR_KEY = SOURCE.SUPERVISOR_KEY,
		SERVICE_DATE = SOURCE.SERVICE_DATE,
        PAYROLL_DATE = SOURCE.PAYROLL_DATE,
		BRANCH_NAME = SOURCE.BRANCH_NAME,
		CLIENT_NUMBER = SOURCE.CLIENT_NUMBER,
		CONTRACT_CODE = SOURCE.CONTRACT_CODE,
		EMPLOYEE_ID = SOURCE.EMPLOYEE_ID,
		SYSTEM_CODE = SOURCE.SYSTEM_CODE,
		SUPERVISOR_CODE = SOURCE.SUPERVISOR_CODE,
		CLEAN_SHIFT_FLAG = SOURCE.CLEAN_SHIFT_FLAG,
		STATUS_CODE = SOURCE.STATUS_CODE,
		STATUS_DESCRIPTION = SOURCE.STATUS_DESCRIPTION,
		CANCEL_REASON_CODE = SOURCE.CANCEL_REASON_CODE,
		CANCEL_REASON_DESCRIPTION = SOURCE.CANCEL_REASON_DESCRIPTION,
		CANCEL_REASON_NOTES = SOURCE.CANCEL_REASON_NOTES,
		EXCEPTION_REASON_FLAG = SOURCE.EXCEPTION_REASON_FLAG,
		RESOLUTION_CODE = SOURCE.RESOLUTION_CODE,
		RESOLUTION_DESCRIPTION = SOURCE.RESOLUTION_DESCRIPTION,
		REJECTION_CODE = SOURCE.REJECTION_CODE,
		REJECTION_DESCRIPTION = SOURCE.REJECTION_DESCRIPTION,
		BILL_CODE = SOURCE.BILL_CODE,
		BILL_RATE = SOURCE.BILL_RATE,
		OVERHEAD_RATE = SOURCE.OVERHEAD_RATE,
		HOURS_SERVED = SOURCE.HOURS_SERVED,
		SCHEDULE_TIMEIN = SOURCE.SCHEDULE_TIMEIN,
  		SCHEDULE_TIMEOUT = SOURCE.SCHEDULE_TIMEOUT,
		SCHEDULE_DURATION = SOURCE.SCHEDULE_DURATION,
  		ACTUAL_TIMEIN = SOURCE.ACTUAL_TIMEIN,
  		ACTUAL_TIMEOUT = SOURCE.ACTUAL_TIMEOUT,
		ACTUAL_DURATION = SOURCE.ACTUAL_DURATION,
  		ADJUSTED_TIMEIN = SOURCE.ADJUSTED_TIMEIN,
  		ADJUSTED_TIMEOUT = SOURCE.ADJUSTED_TIMEOUT,
		ADJUSTED_DURATION = SOURCE.ADJUSTED_DURATION,
        COMMENTS = SOURCE.COMMENTS,
        IS_EVV_FLAG = SOURCE.IS_EVV_FLAG,
    	TIMESHEET_TYPE = SOURCE.TIMESHEET_TYPE,
    	TRACKING_ID = SOURCE.TRACKING_ID,
		ETL_TASK_KEY = SOURCE.ETL_TASK_KEY,
		ETL_INSERTED_TASK_KEY = SOURCE.ETL_INSERTED_TASK_KEY,
		ETL_INSERTED_DATE = SOURCE.ETL_INSERTED_DATE,
		ETL_INSERTED_BY = SOURCE.ETL_INSERTED_BY,
		ETL_LAST_UPDATED_DATE = SOURCE.ETL_LAST_UPDATED_DATE,
		ETL_LAST_UPDATED_BY = SOURCE.ETL_LAST_UPDATED_BY,
		ETL_DELETED_FLAG = SOURCE.ETL_DELETED_FLAG
WHEN NOT MATCHED THEN
	INSERT (VISIT_KEY,
	SCHEDULE_VISIT_INDICATOR,
		REPORT_DATE,
		BRANCH_KEY,
		CLIENT_KEY,
		CONTRACT_KEY,
		EMPLOYEE_KEY,
		SOURCE_SYSTEM_ID,
		SUPERVISOR_KEY,
		SERVICE_DATE,
        PAYROLL_DATE,
		BRANCH_NAME,
		CLIENT_NUMBER,
		CONTRACT_CODE,
		EMPLOYEE_ID,
		SYSTEM_CODE,
		SUPERVISOR_CODE,
		CLEAN_SHIFT_FLAG,
		STATUS_CODE,
		STATUS_DESCRIPTION,
		CANCEL_REASON_CODE,
		CANCEL_REASON_DESCRIPTION,
		CANCEL_REASON_NOTES,
		EXCEPTION_REASON_FLAG,
		RESOLUTION_CODE,
		RESOLUTION_DESCRIPTION,
		REJECTION_CODE,
		REJECTION_DESCRIPTION,
		BILL_CODE,
		BILL_RATE,
		OVERHEAD_RATE,
		HOURS_SERVED,
		SCHEDULE_TIMEIN,
  		SCHEDULE_TIMEOUT,
		SCHEDULE_DURATION,
  		ACTUAL_TIMEIN,
  		ACTUAL_TIMEOUT,
		ACTUAL_DURATION,
  		ADJUSTED_TIMEIN,
  		ADJUSTED_TIMEOUT,
		ADJUSTED_DURATION,
		COMMENTS,
        IS_EVV_FLAG,
    	TIMESHEET_TYPE,
    	TRACKING_ID,
    	ETL_TASK_KEY,
		ETL_INSERTED_TASK_KEY,
		ETL_INSERTED_DATE,
		ETL_INSERTED_BY,
		ETL_LAST_UPDATED_DATE,
		ETL_LAST_UPDATED_BY,
		ETL_DELETED_FLAG)
	VALUES (SOURCE.VISIT_KEY,
	SOURCE.SCHEDULE_VISIT_INDICATOR,
		SOURCE.REPORT_DATE,
		SOURCE.BRANCH_KEY,
		SOURCE.CLIENT_KEY,
		SOURCE.CONTRACT_KEY,
		SOURCE.EMPLOYEE_KEY,
		SOURCE.SOURCE_SYSTEM_ID,
		SOURCE.SUPERVISOR_KEY,
		SOURCE.SERVICE_DATE,
        SOURCE.PAYROLL_DATE,
		SOURCE.BRANCH_NAME,
		SOURCE.CLIENT_NUMBER,
		SOURCE.CONTRACT_CODE,
		SOURCE.EMPLOYEE_ID,
		SOURCE.SYSTEM_CODE,
		SOURCE.SUPERVISOR_CODE,
		SOURCE.CLEAN_SHIFT_FLAG,
		SOURCE.STATUS_CODE,
		SOURCE.STATUS_DESCRIPTION,
		SOURCE.CANCEL_REASON_CODE,
		SOURCE.CANCEL_REASON_DESCRIPTION,
		SOURCE.CANCEL_REASON_NOTES,
		SOURCE.EXCEPTION_REASON_FLAG,
		SOURCE.RESOLUTION_CODE,
		SOURCE.RESOLUTION_DESCRIPTION,
		SOURCE.REJECTION_CODE,
		SOURCE.REJECTION_DESCRIPTION,
		SOURCE.BILL_CODE,
		SOURCE.BILL_RATE,
		SOURCE.OVERHEAD_RATE,
        SOURCE.HOURS_SERVED,
		SOURCE.SCHEDULE_TIMEIN,
  		SOURCE.SCHEDULE_TIMEOUT,
		SOURCE.SCHEDULE_DURATION,
  		SOURCE.ACTUAL_TIMEIN,
  		SOURCE.ACTUAL_TIMEOUT,
		SOURCE.ACTUAL_DURATION,
  		SOURCE.ADJUSTED_TIMEIN,
  		SOURCE.ADJUSTED_TIMEOUT,
		SOURCE.ADJUSTED_DURATION,
        SOURCE.COMMENTS,
        SOURCE.IS_EVV_FLAG,
    	SOURCE.TIMESHEET_TYPE,
    	SOURCE.TRACKING_ID,
    	SOURCE.ETL_TASK_KEY,
		SOURCE.ETL_INSERTED_TASK_KEY,
		SOURCE.ETL_INSERTED_DATE,
		SOURCE.ETL_INSERTED_BY,
		SOURCE.ETL_LAST_UPDATED_DATE,
		SOURCE.ETL_LAST_UPDATED_BY,
		SOURCE.ETL_DELETED_FLAG);`;
          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
          ;
    ----------------------------
    ----------------------------

    CREATE OR REPLACE PROCEDURE DW_${var.SF_ENVIRONMENT}.HAH.MERGE_STAGE_SANDATAIMPORT_FACT_EVV_VISIT_${var.SF_ENVIRONMENT}()
    RETURNS string 
    LANGUAGE javascript
    AS
    

    var sqlCmd = "";
    var sqlStmt = "";
    var result = "";

    try {
      var sqlCmd = `
    MERGE INTO HAH.FACT_EVV_VISIT_${var.SF_ENVIRONMENT} TGT 
USING STAGE.SANDATAIMPORT_FACT_EVV_VISIT_${var.SF_ENVIRONMENT} STAGE 
ON TGT.VISIT_KEY = STAGE.VISIT_KEY
WHEN MATCHED THEN 
UPDATE SET 
    TGT.SCHEDULE_VISIT_INDICATOR= STAGE.SCHEDULE_VISIT_INDICATOR
   ,TGT.REPORT_DATE= STAGE.REPORT_DATE
   ,TGT.BRANCH_KEY= STAGE.BRANCH_KEY
   ,TGT.CLIENT_KEY= STAGE.CLIENT_KEY
   ,TGT.CONTRACT_KEY= STAGE.CONTRACT_KEY
   ,TGT.EMPLOYEE_KEY= STAGE.EMPLOYEE_KEY
   ,TGT.SOURCE_SYSTEM_ID= STAGE.SOURCE_SYSTEM_ID
   ,TGT.SUPERVISOR_KEY= STAGE.SUPERVISOR_KEY
   ,TGT.SERVICE_DATE= STAGE.SERVICE_DATE
   ,TGT.PAYROLL_DATE= STAGE.PAYROLL_DATE
   ,TGT.BRANCH_NAME= STAGE.BRANCH_NAME
   ,TGT.CLIENT_NUMBER= STAGE.CLIENT_NUMBER
   ,TGT.CONTRACT_CODE= STAGE.CONTRACT_CODE
   ,TGT.EMPLOYEE_ID= STAGE.EMPLOYEE_ID
   ,TGT.SYSTEM_CODE= STAGE.SYSTEM_CODE
   ,TGT.SUPERVISOR_CODE= STAGE.SUPERVISOR_CODE
   ,TGT.CLEAN_SHIFT_FLAG= STAGE.CLEAN_SHIFT_FLAG
   ,TGT.STATUS_CODE= STAGE.STATUS_CODE
   ,TGT.STATUS_DESCRIPTION= STAGE.STATUS_DESCRIPTION
   ,TGT.CANCEL_REASON_CODE= STAGE.CANCEL_REASON_CODE
   ,TGT.CANCEL_REASON_DESCRIPTION= STAGE.CANCEL_REASON_DESCRIPTION
   ,TGT.CANCEL_REASON_NOTES= STAGE.CANCEL_REASON_NOTES
   ,TGT.EXCEPTION_REASON_FLAG= STAGE.EXCEPTION_REASON_FLAG
   ,TGT.RESOLUTION_CODE= STAGE.RESOLUTION_CODE
   ,TGT.RESOLUTION_DESCRIPTION= STAGE.RESOLUTION_DESCRIPTION
   ,TGT.REJECTION_CODE= STAGE.REJECTION_CODE
   ,TGT.REJECTION_DESCRIPTION= STAGE.REJECTION_DESCRIPTION
   ,TGT.BILL_CODE= STAGE.BILL_CODE
   ,TGT.BILL_RATE= STAGE.BILL_RATE
   ,TGT.OVERHEAD_RATE= STAGE.OVERHEAD_RATE
   ,TGT.HOURS_SERVED= STAGE.HOURS_SERVED
   ,TGT.SCHEDULE_TIMEIN= STAGE.SCHEDULE_TIMEIN
   ,TGT.SCHEDULE_TIMEOUT= STAGE.SCHEDULE_TIMEOUT
   ,TGT.SCHEDULE_DURATION= STAGE.SCHEDULE_DURATION
   ,TGT.ACTUAL_TIMEIN= STAGE.ACTUAL_TIMEIN
   ,TGT.ACTUAL_TIMEOUT= STAGE.ACTUAL_TIMEOUT
   ,TGT.ACTUAL_DURATION= STAGE.ACTUAL_DURATION
   ,TGT.ADJUSTED_TIMEIN= STAGE.ADJUSTED_TIMEIN
   ,TGT.ADJUSTED_TIMEOUT= STAGE.ADJUSTED_TIMEOUT
   ,TGT.ADJUSTED_DURATION= STAGE.ADJUSTED_DURATION
   ,TGT.COMMENTS= STAGE.COMMENTS
   ,TGT.IS_EVV_FLAG= STAGE.IS_EVV_FLAG
   ,TGT.TIMESHEET_TYPE= STAGE.TIMESHEET_TYPE
   ,TGT.TRACKING_ID= STAGE.TRACKING_ID
   ,TGT.ETL_TASK_KEY= STAGE.ETL_TASK_KEY
   ,TGT.ETL_LAST_UPDATED_DATE= STAGE.ETL_LAST_UPDATED_DATE
   ,TGT.ETL_LAST_UPDATED_BY= STAGE.ETL_LAST_UPDATED_BY
   ,TGT.ETL_DELETED_FLAG= STAGE.ETL_DELETED_FLAG
WHEN NOT MATCHED THEN 
INSERT ( 
    VISIT_KEY
   ,SCHEDULE_VISIT_INDICATOR
   ,REPORT_DATE
   ,BRANCH_KEY
   ,CLIENT_KEY
   ,CONTRACT_KEY
   ,EMPLOYEE_KEY
   ,SOURCE_SYSTEM_ID
   ,SUPERVISOR_KEY
   ,SERVICE_DATE
   ,PAYROLL_DATE
   ,BRANCH_NAME
   ,CLIENT_NUMBER
   ,CONTRACT_CODE
   ,EMPLOYEE_ID
   ,SYSTEM_CODE
   ,SUPERVISOR_CODE
   ,CLEAN_SHIFT_FLAG
   ,STATUS_CODE
   ,STATUS_DESCRIPTION
   ,CANCEL_REASON_CODE
   ,CANCEL_REASON_DESCRIPTION
   ,CANCEL_REASON_NOTES
   ,EXCEPTION_REASON_FLAG
   ,RESOLUTION_CODE
   ,RESOLUTION_DESCRIPTION
   ,REJECTION_CODE
   ,REJECTION_DESCRIPTION
   ,BILL_CODE
   ,BILL_RATE
   ,OVERHEAD_RATE
   ,HOURS_SERVED
   ,SCHEDULE_TIMEIN
   ,SCHEDULE_TIMEOUT
   ,SCHEDULE_DURATION
   ,ACTUAL_TIMEIN
   ,ACTUAL_TIMEOUT
   ,ACTUAL_DURATION
   ,ADJUSTED_TIMEIN
   ,ADJUSTED_TIMEOUT
   ,ADJUSTED_DURATION
   ,COMMENTS
   ,IS_EVV_FLAG
   ,TIMESHEET_TYPE
   ,TRACKING_ID
   ,ETL_TASK_KEY
   ,ETL_INSERTED_TASK_KEY
   ,ETL_INSERTED_DATE
   ,ETL_INSERTED_BY
   ,ETL_LAST_UPDATED_DATE
   ,ETL_LAST_UPDATED_BY
   ,ETL_DELETED_FLAG
) 
VALUES (
    STAGE.VISIT_KEY
   ,STAGE.SCHEDULE_VISIT_INDICATOR
   ,STAGE.REPORT_DATE
   ,STAGE.BRANCH_KEY
   ,STAGE.CLIENT_KEY
   ,STAGE.CONTRACT_KEY
   ,STAGE.EMPLOYEE_KEY
   ,STAGE.SOURCE_SYSTEM_ID
   ,STAGE.SUPERVISOR_KEY
   ,STAGE.SERVICE_DATE
   ,STAGE.PAYROLL_DATE
   ,STAGE.BRANCH_NAME
   ,STAGE.CLIENT_NUMBER
   ,STAGE.CONTRACT_CODE
   ,STAGE.EMPLOYEE_ID
   ,STAGE.SYSTEM_CODE
   ,STAGE.SUPERVISOR_CODE
   ,STAGE.CLEAN_SHIFT_FLAG
   ,STAGE.STATUS_CODE
   ,STAGE.STATUS_DESCRIPTION
   ,STAGE.CANCEL_REASON_CODE
   ,STAGE.CANCEL_REASON_DESCRIPTION
   ,STAGE.CANCEL_REASON_NOTES
   ,STAGE.EXCEPTION_REASON_FLAG
   ,STAGE.RESOLUTION_CODE
   ,STAGE.RESOLUTION_DESCRIPTION
   ,STAGE.REJECTION_CODE
   ,STAGE.REJECTION_DESCRIPTION
   ,STAGE.BILL_CODE
   ,STAGE.BILL_RATE
   ,STAGE.OVERHEAD_RATE
   ,STAGE.HOURS_SERVED
   ,STAGE.SCHEDULE_TIMEIN
   ,STAGE.SCHEDULE_TIMEOUT
   ,STAGE.SCHEDULE_DURATION
   ,STAGE.ACTUAL_TIMEIN
   ,STAGE.ACTUAL_TIMEOUT
   ,STAGE.ACTUAL_DURATION
   ,STAGE.ADJUSTED_TIMEIN
   ,STAGE.ADJUSTED_TIMEOUT
   ,STAGE.ADJUSTED_DURATION
   ,STAGE.COMMENTS
   ,STAGE.IS_EVV_FLAG
   ,STAGE.TIMESHEET_TYPE
   ,STAGE.TRACKING_ID
   ,STAGE.ETL_TASK_KEY
   ,STAGE.ETL_INSERTED_TASK_KEY
   ,STAGE.ETL_INSERTED_DATE
   ,STAGE.ETL_INSERTED_BY
   ,STAGE.ETL_LAST_UPDATED_DATE
   ,STAGE.ETL_LAST_UPDATED_BY
   ,STAGE.ETL_DELETED_FLAG
);`;
          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
          
 EOT
}

resource "snowflake_procedure" "DW_HAH_MERGE_STAGE_SANDATAIMPORT_FACT_EVV_VISIT_DEV" {
	name ="MERGE_STAGE_SANDATAIMPORT_FACT_EVV_VISIT_DEV"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "JAVASCRIPT"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

        VAR SQL = `
    INSERT OVERWRITE INTO STAGE.SANDATAIMPORT_FACT_EVV_VISIT_${var.SF_ENVIRONMENT}
WITH AVG_BILL_RATE AS (
	SELECT AGENCYID,ADMISSIONID,AVG(RATE) AS BILL_RATE 
	FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS
	GROUP BY AGENCYID,ADMISSIONID)
SELECT MD5(SV.AGENCYID || ''-'' || SV.SCHEDULEID || ''-'' || ''SANDATAIMPORT'') AS VISIT_KEY,
   ''SCHEDULE'' AS SCHEDULE_VISIT_INDICATOR,
	SV.SCHEDULEDATE AS REPORT_DATE,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN 
	MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || COALESCE(SV.LOCATIONID, '''') || ''-'' || ''SANDATAIMPORT'') ELSE 
	MD5(NVL(OFFICE.DBNAME,'''') || ''-'' || COALESCE(OFFICE.OFFICENUMBER, -1) || ''-'' || IFF(OFFICE.OFFICENUMBER = 0, ''GPSYNCDATA'', ''DATAFLEXSYNCDATA'')) END
	AS BRANCH_KEY,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN 
	MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || SV.CLIENTID || ''-'' || ''SANDATAIMPORT'') ELSE
    MD5(S.STATE_ISO_CODE || ''-'' || NVL(DFCLIENT."NUMBER",-1) || ''-''  ||  ''DATAFLEXSYNCDATA'') END AS CLIENT_KEY,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN 
	MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || SV.ADMISSIONTYPE || ''-'' || ''SANDATAIMPORT'') ELSE 
	MD5(S.STATE_ISO_CODE || ''-'' || NVL(CONTRACT.CONTRACTCODE,''UNKNOWN'') || ''-''  ||  ''DATAFLEXSYNCDATA'') END AS CONTRACT_KEY,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN 
	NVL(E.EMPLOYEE_KEY, MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || UPPER(COALESCE(TRY_CAST(SV.STAFFAGENCYID AS INT)::STRING, TRIM(SV.STAFFAGENCYID), '''')) || ''-'' || ''1900-01-01'' || ''-'' || ''SANDATAIMPORT'')) ELSE
	NVL(E.EMPLOYEE_KEY, MD5(COALESCE(S.STATE_ISO_CODE,'''') || ''-'' || UPPER(NVL(TRIM(EMPLOYEE.NUMBER), '''')) || ''-''  ||  ''1900-01-01'' || ''-'' || ''DATAFLEXSYNCDATA''))
	END AS EMPLOYEE_KEY,
	4 AS SOURCE_SYSTEM_ID,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN 
	MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || NVL(CAD.COORDINATORID::STRING, ''UNKNOWN-'' || NVL(SV.AGENCYID, ''S'')) || ''-'' || ''SANDATAIMPORT'') ELSE 
	 MD5(S.STATE_ISO_CODE || ''-''  || NVL(COALESCE(DFCLIENTSUPERVISOR.SUPERVISORCODE, DFCLIENT.SUPERVISORCODE),''UNKNOWN-'' || S.STATE_ISO_CODE) || ''-''  || ''DATAFLEXSYNCDATA'') END  
	 AS SUPERVISOR_KEY,
	-- BUSINESS KEYS
	SV.SCHEDULEDATE AS SERVICE_DATE,
	NULL AS PAYROLL_DATE,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN NVL(BRANCH.BRANCH_NAME, SV.LOCATIONID) ELSE
	COALESCE(OFFICE.OFFICENAME, ''UNKNOWN'') END AS BRANCH_NAME,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN SV.CLIENTID ELSE
	DFCLIENT."NUMBER" END AS CLIENT_NUMBER,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN SV.ADMISSIONTYPE ELSE
	CONTRACT.CONTRACTCODE END AS CONTRACT_CODE,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN NVL(TRY_CAST(SV.STAFFAGENCYID AS INT)::STRING, UPPER(TRIM(SV.STAFFAGENCYID))--, ''-1''
	) ELSE EMPLOYEE.NUMBER END AS EMPLOYEE_ID,
	S.STATE_ISO_CODE AS SYSTEM_CODE,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN NVL(CAD.COORDINATORID::STRING, ''UNKNOWN-'' || NVL(SV.AGENCYID, ''S'')) ELSE
	COALESCE(DFCLIENTSUPERVISOR.SUPERVISORCODE, DFCLIENT.SUPERVISORCODE) END AS SUPERVISOR_CODE,
	CASE WHEN SV.STATUS IN (''02'',''03'',''04'') AND SV.VERIFICATIONTYPE = ''AUTO'' THEN 1 ELSE 0 END AS CLEAN_SHIFT_FLAG,
	SV.STATUS AS STATUS_CODE,
	CASE SV.STATUS 
		WHEN ''01'' THEN ''PENDING''
        WHEN ''02'' THEN ''CONFIRMED''
        WHEN ''03'' THEN ''IN PROCESS''
        WHEN ''04'' THEN ''BILLED''
        WHEN ''09'' THEN ''HOLD''
        WHEN ''10'' THEN ''CANCELLED''
        END AS STATUS_DESCRIPTION,
    
    NULL AS CANCEL_REASON_CODE,
    NULL AS CANCEL_REASON_DESCRIPTION,
    SCH.CANCELREASONNOTES AS CANCEL_REASON_NOTES,
    CASE WHEN SCH.EXCEPTIONCODE IS NOT NULL AND SCH.EXCEPTIONCODE <>'''' THEN ''TRUE'' ELSE ''FALSE'' END AS EXCEPTION_REASON_FLAG,
    SCH.RESOLUTIONCODE AS RESOLUTION_CODE,
    NULL AS RESOLUTION_DESCRIPTION,
    SCH.REJECTIONCODE AS REJECTION_CODE,
    R.DESCRIPTION AS REJECTION_DESCRIPTION,
    NULL AS BILL_CODE,
	COALESCE(CA.BILL_RATE * IFF(CA.UNITTYPE=5,4,1),AVG_BILL_RATE_CA.BILL_RATE) AS BILL_RATE,
	NULL AS OVERHEAD_RATE,
    SUM(SV.SCHEDULEDDURATION) AS HOURS_SERVED,
    SCH.PROPOSEDTIMEIN AS SCHEDULE_TIMEIN,
    SCH.PROPOSEDTIMEOUT AS SCHEDULE_TIMEOUT,
    SCH.PROPOSEDDURATION AS SCHEDULE_DURATION,
    SCH.EVVTIMEIN AS ACTUAL_TIMEIN,
    SCH.EVVTIMEOUT AS ACTUAL_TIMEOUT,
    SCH.EVVDURATION AS ACTUAL_DURATION,
    SCH.SCHEDULEDTIMEIN AS ADJUSTED_TIMEIN,
    SCH.SCHEDULEDTIMEOUT AS ADJUSTED_TIMEOUT,
    SCH.SCHEDULEDDURATION AS ADJUSTED_DURATION,
    NULL AS COMMENTS,
    NULL AS IS_EVV_FLAG,
    NULL AS TIMESHEET_TYPE,
    NULL AS TRACKING_ID,
    -- ETL FIELDS
    
        `;    
             SQL += STR_ETL_TASK_KEY;
             SQL +=  
             ` AS ETL_TASK_KEY,
        
	
        `;    
             SQL += STR_ETL_TASK_KEY;
             SQL +=  
             ` AS ETL_INSERTED_TASK_KEY,
        
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
    CURRENT_USER AS ETL_INSERTED_BY ,
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
    CURRENT_USER AS ETL_LAST_UPDATED_BY,
    0 AS ETL_DELETED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.SANDATAVISITS SV
--LEFT JOIN DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.EXTERNALIDS EID
--	ON --EID.DBNAME = ''PA'' AND 
--	EID.TYP = ''L'' AND EID.EXTID = SV.LOCATIONID 
LEFT JOIN HAH.DIM_BRANCH AS BRANCH ON BRANCH.SYSTEM_CODE::STRING = SV.AGENCYID AND BRANCH.OFFICE_CODE = SV.LOCATIONID
LEFT JOIN HAH.DIM_STATE S 
    ON SV.AGENCYID = S.SANDATA_AGENCY_ID
LEFT JOIN HAH.DIM_EMPLOYEE E
	ON (CASE WHEN S.STATE_ISO_CODE =''PA'' THEN E.SYSTEM_CODE = SV.AGENCYID
        ELSE E.SYSTEM_CODE = S.STATE_ISO_CODE END) AND SV.SCHEDULEDATE >= E.EFFECTIVE_FROM_DATE AND SV.SCHEDULEDATE < E.EFFECTIVE_TO_DATE  
	AND E.EMPLOYEE_ID = CAST(SV.STAFFAGENCYID AS INT)::STRING
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTADMISSIONS CAD
	ON CAD.AGENCYID = SV.AGENCYID AND CAD.ADMISSIONID = SV.ADMISSIONID 
LEFT JOIN (SELECT AGENCYID,AVG(TRY_TO_NUMBER(UNITTYPE)) AS UNITTYPE,SCHEDULEID,ADMISSIONID,AVG(RATE) AS BILL_RATE
 FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS 
 GROUP BY AGENCYID,SCHEDULEID,ADMISSIONID) CA ON SV.AGENCYID = CA.AGENCYID AND SV.SCHEDULEID = CA.SCHEDULEID
AND SV.ADMISSIONID = CA.ADMISSIONID 
LEFT JOIN AVG_BILL_RATE AVG_BILL_RATE_CA ON
SV.AGENCYID = AVG_BILL_RATE_CA.AGENCYID 
AND SV.ADMISSIONID = AVG_BILL_RATE_CA.ADMISSIONID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES SCH ON SV.AGENCYID = SCH.AGENCYID AND SV.SCHEDULEID = SCH.SCHEDULEID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_REJECTIONCODES R ON SCH.REJECTIONCODE = R.CODE AND SCH.AGENCYID = R.AGENCYID 
-------EMPLOYEE_KEY-----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFEMPLOYEES AS EMPLOYEE
    ON EMPLOYEE.DBNAME = S.STATE_ISO_CODE AND EMPLOYEE.PAYROLLIDINDEXNO = TRY_CAST(SV.STAFFAGENCYID AS INTEGER)
-------CONTRACT_KEY-----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAEXCHANGE.OPENSAM_CLIENTADMISSIONTYPES CAT
    ON CAT.HAHDFDB = S.STATE_ISO_CODE AND CAT.ADMISSIONTYPEID = SV.ADMISSIONTYPE AND CAT.DEFAULTSERVICE = SV.SERVICEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCONTRACTS AS CONTRACT
    ON CONTRACT.DBNAME = CAT.HAHDFDB AND CONTRACT.CONTRACTCODE = CAT.CONTRACTCODE
-------SUPERVISOR_KEY----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTS C
    ON C.AGENCYID = CAD.AGENCYID AND C.CLIENTID = CAD.CLIENTID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTS AS DFCLIENT
    ON DFCLIENT.DBNAME = S.STATE_ISO_CODE AND DFCLIENT."NUMBER" = TRY_CAST(C.OTHERID AS INTEGER)
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTSUPERVISORS DFCLIENTSUPERVISOR
    ON DFCLIENTSUPERVISOR.DBNAME = DFCLIENT.DBNAME AND DFCLIENTSUPERVISOR.CLIENTNUMBER = DFCLIENT."NUMBER"  
    AND DFCLIENTSUPERVISOR.BUSINESSLINE = CONTRACT.REVENUECATEGORY
-------BRANCH_KEY------
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFOFFICES AS OFFICE
    ON OFFICE.DBNAME = DFCLIENT.DBNAME AND OFFICE.OFFICENUMBER = DFCLIENT.OFFICENUMBER
-----------------------
WHERE 
NVL(SV.STAFFAGENCYID,'''') <> '''' AND SV.CLIENTID IS NOT NULL
	AND NVL(SV.ADMISSIONTYPE, '''') <> '''' AND LEN(NVL(SV.STATUS,'''')) <= 2 -- EXCLUDE (7) BAD DATA RECORDS
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43
,44,45,46,47,48,49,50,51,52;`;
          TRY {
                SNOWFLAKE.EXECUTE (
                    {SQLTEXT: SQL}
                    );
                RETURN "SUCCEEDED.";   // RETURN A SUCCESS/ERROR INDICATOR.
                }
            CATCH (ERR)  {
                RETURN "FAILED: " + ERR;   // RETURN A SUCCESS/ERROR INDICATOR.
                }  

 VAR SQL = `MERGE INTO DW_${var.SF_ENVIRONMENT}.STAGE.SANDATAIMPORT_FACT_EVV_VISIT_${var.SF_ENVIRONMENT} AS TARGET USING (
WITH CLU AS (
    SELECT
           (CASE WHEN TRY_TO_NUMERIC(OTHERID) IS NULL AND TRY_TO_NUMERIC(CUSTOMID) IS NULL THEN -1
                WHEN TRY_TO_NUMERIC(OTHERID) IS NOT NULL AND TRY_TO_NUMERIC(CUSTOMID) IS NULL THEN OTHERID
                WHEN TRY_TO_NUMERIC(CUSTOMID) IS NOT NULL AND TRY_TO_NUMERIC(OTHERID) IS NULL THEN CUSTOMID
                ELSE COALESCE(OTHERID, CUSTOMID)
            END)::INTEGER AS DF_CLIENT_NUMBER,
           AGENCYID,
           MAX(CLIENTID) AS CLIENTID
    FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTS
    GROUP BY 1,2
),
MAX_CLIENT AS (
    SELECT DF_CLIENT_NUMBER,
            MAX(CLIENTID) AS CLIENTID
    FROM CLU
    GROUP BY 1
    ),
AVG_BILL_RATE AS (
	SELECT AGENCYID,ADMISSIONID,AVG(RATE) AS BILL_RATE 
	FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS
	GROUP BY AGENCYID,ADMISSIONID)
SELECT
	MD5(NVL(F.AGENCYID,''S'') || ''-'' || F.SCHEDULEID || ''-'' || ''SANDATAIMPORT'') AS VISIT_KEY,
	''VISIT'' AS SCHEDULE_VISIT_INDICATOR,
    F."DATE" AS REPORT_DATE,
    CASE WHEN S.STATE_ISO_CODE =''PA'' THEN 
     MD5(NVL(F.AGENCYID,''S'') || ''-'' || NVL(F.LOCATIONID,'') || ''-'' ||  ''SANDATAIMPORT'') ELSE
    MD5(NVL(OFFICE.DBNAME,'') || ''-'' || COALESCE(OFFICE.OFFICENUMBER, -1) || ''-'' || IFF(OFFICE.OFFICENUMBER = 0, ''GPSYNCDATA'', ''DATAFLEXSYNCDATA'')) END
    AS BRANCH_KEY,
    CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN 
    MD5(NVL(F.AGENCYID,''S'')||''-'' ||  COALESCE(CLIENTADMISSIONS.CLIENTID,CLU.CLIENTID,MC.CLIENTID) || ''-''  || ''SANDATAIMPORT'' ) ELSE
    MD5(S.STATE_ISO_CODE ||''-'' || NVL(DFCLIENT."NUMBER",-1) || ''-''  ||  ''DATAFLEXSYNCDATA'')END AS CLIENT_KEY,
    CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN 
    MD5(NVL(F.AGENCYID,''S'') || ''-'' || F.CLIENTADMITTYPE || ''-''  ||  ''SANDATAIMPORT'') ELSE
    MD5(S.STATE_ISO_CODE || ''-'' || NVL(CONTRACT.CONTRACTCODE,''UNKNOWN'') || ''-''  ||  ''DATAFLEXSYNCDATA'') END AS CONTRACT_KEY,
    CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN 
    NVL(E.EMPLOYEE_KEY, MD5(NVL(F.AGENCYID,''S'') || ''-'' || UPPER(NVL(TRIM(F.STAFFAGENCYID), '')) || ''-'' || ''1900-01-01'' || ''-'' || ''SANDATAIMPORT'')) ELSE
    NVL(E.EMPLOYEE_KEY, MD5(COALESCE(S.STATE_ISO_CODE,'') || ''-'' || UPPER(NVL(TRIM(EMPLOYEE.NUMBER), '')) || ''-''  ||  ''1900-01-01'' || ''-'' || ''DATAFLEXSYNCDATA''))
    END AS EMPLOYEE_KEY, 
    4 AS SOURCE_SYSTEM_ID,
    CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN 
    MD5(NVL(F.AGENCYID,''S'') || ''-''  || NVL(CLIENTADMISSIONS.COORDINATORID::STRING, ''UNKNOWN-'' || NVL(F.AGENCYID,''S'')) || ''-''  || ''SANDATAIMPORT'') 
    ELSE MD5(S.STATE_ISO_CODE || ''-''  || NVL(COALESCE(DFCLIENTSUPERVISOR.SUPERVISORCODE, DFCLIENT.SUPERVISORCODE),''UNKNOWN-'' || S.STATE_ISO_CODE) || ''-''  || ''DATAFLEXSYNCDATA'') END 
    AS SUPERVISOR_KEY,
    --BUSINESS KEYS
    F."DATE" AS SERVICE_DATE,
	DATEADD(''DAY'',9,DATE_TRUNC(''WEEK'',CAST(F."DATE" AS DATE))) AS PAYROLL_DATE,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN NVL(BRANCH.BRANCH_NAME ,F.LOCATIONID) ELSE OFFICE.OFFICENAME END AS BRANCH_NAME,
    CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN COALESCE(CLIENTADMISSIONS.CLIENTID,CLU.CLIENTID,MC.CLIENTID) 
    ELSE DFCLIENT."NUMBER" END AS CLIENT_NUMBER,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN F.CLIENTADMITTYPE ELSE CONTRACT.CONTRACTCODE END
    AS CONTRACT_CODE,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN NVL(F.STAFFAGENCYID, ''-1'') ELSE CAST(EMPLOYEE.NUMBER AS VARCHAR) END AS EMPLOYEE_ID,
    S.STATE_ISO_CODE AS SYSTEM_CODE,
	CASE WHEN S.STATE_ISO_CODE = ''PA'' THEN NVL(CLIENTADMISSIONS.COORDINATORID::STRING, ''UNKNOWN-'' || NVL(F.AGENCYID,''S'')) 
    ELSE COALESCE(DFCLIENTSUPERVISOR.SUPERVISORCODE, DFCLIENT.SUPERVISORCODE) END AS SUPERVISOR_CODE,
    CASE WHEN (SCH.STATUS IN (''02'', ''03'', ''04'') AND SCH.VERIFICATIONTYPE = ''AUTO'') THEN 1 ELSE 0 END AS CLEAN_SHIFT_FLAG,
    EVENTSTATUS AS STATUS_CODE,
    CASE EVENTSTATUS
        WHEN ''01'' THEN ''PENDING''
        WHEN ''02'' THEN ''CONFIRMED''
        WHEN ''03'' THEN ''IN PROCESS''
        WHEN ''04'' THEN ''BILLED''
        WHEN ''09'' THEN ''HOLD''
        WHEN ''10'' THEN ''CANCELLED''
        END AS STATUS_DESCRIPTION,
    F.REASONCODE AS CANCEL_REASON_CODE,
    F.REASONCODEDESCRIPTION AS CANCEL_REASON_DESCRIPTION,
    SCH.CANCELREASONNOTES AS CANCEL_REASON_NOTES,
    CASE WHEN SCH.EXCEPTIONCODE IS NOT NULL AND SCH.EXCEPTIONCODE <>'' THEN ''TRUE'' ELSE ''FALSE'' END AS EXCEPTION_REASON_FLAG,
    SCH.RESOLUTIONCODE AS RESOLUTION_CODE,
    NULL AS RESOLUTION_DESCRIPTION,
    SCH.REJECTIONCODE AS REJECTION_CODE,
    R.DESCRIPTION AS REJECTION_DESCRIPTION, 
    NULL AS BILL_CODE,
    COALESCE(CA.BILL_RATE* IFF(CA.UNITTYPE=5,4,1),AVG_BILL_RATE_CA.BILL_RATE) AS BILL_RATE, --UNITTYPE 5 HAS UNITWISE RATE
    NULL AS OVERHEAD_RATE,
    SUM(F.ADJUSTEDDURATION) AS HOURS_SERVED,
    F.PROPOSEDSTART AS SCHEDULE_TIMEIN,
    F.PROPOSEDEND AS SCHEDULE_TIMEOUT,
    F.PROPOSEDDURATION AS SCHEDULE_DURATION,
    F.TIMEIN AS ACTUAL_TIMEIN,
    F.TIMEOUT AS ACTUAL_TIMEOUT,
    F.ACTUALDURATION AS ACTUAL_DURATION,
    F.ADJUSTEDTIMEIN AS ADJUSTED_TIMEIN,
    F.ADJUSTEDTIMEOUT AS ADJUSTED_TIMEOUT,
    F.ADJUSTEDDURATION AS ADJUSTED_DURATION,
    F.COMMENTS AS COMMENTS,
    ''Y'' AS IS_EVV_FLAG, 
    NULL AS TIMESHEET_TYPE, 
    NULL AS TRACKING_ID,
    
        `;    
             SQL += STR_ETL_TASK_KEY;
             SQL +=  
             ` AS ETL_TASK_KEY,
        
    
        `;    
             SQL += STR_ETL_TASK_KEY;
             SQL +=  
             ` AS ETL_INSERTED_TASK_KEY,
        
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
    CURRENT_USER AS ETL_INSERTED_BY ,
    CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
    CURRENT_USER AS ETL_LAST_UPDATED_BY,
    0 AS ETL_DELETED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_VISITS F
LEFT JOIN CLU CLU
    ON (CASE WHEN TRY_TO_NUMERIC(F.CLIENTOTHERID) IS NULL THEN -1
            ELSE F.CLIENTOTHERID
        END)::INTEGER = CLU.DF_CLIENT_NUMBER
    AND F.AGENCYID = CLU.AGENCYID
LEFT JOIN MAX_CLIENT MC
    ON (CASE WHEN TRY_TO_NUMERIC(F.CLIENTOTHERID) IS NULL THEN -1
            ELSE F.CLIENTOTHERID
        END)::INTEGER = MC.DF_CLIENT_NUMBER
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTADMISSIONS CLIENTADMISSIONS
    ON CLIENTADMISSIONS.AGENCYID = F.AGENCYID
    AND CLIENTADMISSIONS.ADMISSIONID = F.ADMISSIONID
--LEFT JOIN DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.EXTERNALIDS EID
--    ON F.LOCATIONID = EID.EXTID
--    AND EID.TYP = ''L''
LEFT JOIN HAH.DIM_BRANCH AS BRANCH ON BRANCH.SYSTEM_CODE::STRING = F.AGENCYID AND BRANCH.OFFICE_CODE = F.LOCATIONID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES SCH ON F.AGENCYID = SCH.AGENCYID AND F.SCHEDULEID = SCH.SCHEDULEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_REJECTIONCODES R ON SCH.REJECTIONCODE = R.CODE AND SCH.AGENCYID = R.AGENCYID 
LEFT JOIN (SELECT AGENCYID,AVG(TRY_TO_NUMBER(UNITTYPE)) AS UNITTYPE,SCHEDULEID,ADMISSIONID,AVG(RATE) AS BILL_RATE
 FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS 
 GROUP BY AGENCYID,SCHEDULEID,ADMISSIONID) CA ON
F.AGENCYID = CA.AGENCYID AND F.SCHEDULEID = CA.SCHEDULEID
AND F.ADMISSIONID = CA.ADMISSIONID 
LEFT JOIN AVG_BILL_RATE AVG_BILL_RATE_CA ON
F.AGENCYID = AVG_BILL_RATE_CA.AGENCYID 
AND F.ADMISSIONID = AVG_BILL_RATE_CA.ADMISSIONID
LEFT JOIN HAH.DIM_STATE S 
    ON F.AGENCYID = S.SANDATA_AGENCY_ID
-----EMPLOYEE_KEY-----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFEMPLOYEES AS EMPLOYEE
    ON EMPLOYEE.DBNAME = S.STATE_ISO_CODE AND EMPLOYEE.PAYROLLIDINDEXNO = TRY_CAST(F.STAFFAGENCYID AS INTEGER)
LEFT JOIN HAH.DIM_EMPLOYEE E
	ON F.STAFFAGENCYID = E.EMPLOYEE_ID
	AND (CASE WHEN S.STATE_ISO_CODE =''PA'' THEN E.SYSTEM_CODE = F.AGENCYID
        ELSE E.SYSTEM_CODE = S.STATE_ISO_CODE END)
    AND F.DATE >= E.EFFECTIVE_FROM_DATE
    AND F.DATE < E.EFFECTIVE_TO_DATE
-----CONTRACT_KEY-----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAEXCHANGE.OPENSAM_CLIENTADMISSIONTYPES CAT
    ON CAT.HAHDFDB = S.STATE_ISO_CODE AND CAT.ADMISSIONTYPEID = F.CLIENTADMITTYPE AND CAT.DEFAULTSERVICE = F.SERVICEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCONTRACTS AS CONTRACT
    ON CONTRACT.DBNAME = CAT.HAHDFDB AND CONTRACT.CONTRACTCODE = CAT.CONTRACTCODE
-----CLIENT_KEY-------
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTS C
    ON C.AGENCYID = CLIENTADMISSIONS.AGENCYID AND C.CLIENTID = CLIENTADMISSIONS.CLIENTID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTS AS DFCLIENT
    ON DFCLIENT.DBNAME = S.STATE_ISO_CODE AND DFCLIENT."NUMBER" = CLU.DF_CLIENT_NUMBER --TRY_CAST(C.OTHERID AS INTEGER)
-----SUPERVISOR_KEY----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTSUPERVISORS DFCLIENTSUPERVISOR
    ON DFCLIENTSUPERVISOR.DBNAME = DFCLIENT.DBNAME AND DFCLIENTSUPERVISOR.CLIENTNUMBER = DFCLIENT."NUMBER"  
    AND DFCLIENTSUPERVISOR.BUSINESSLINE = CONTRACT.REVENUECATEGORY
-----BRANCH_KEY-----
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFOFFICES AS OFFICE
    ON OFFICE.DBNAME = DFCLIENT.DBNAME AND OFFICE.OFFICENUMBER = DFCLIENT.OFFICENUMBER
WHERE  
(F.ETL_LAST_UPDATED_DATE >= ''`; 
SQL += STR_CDC_START
SQL += `''::TIMESTAMP_NTZ
	OR SCH.ETL_LAST_UPDATED_DATE >= ''`; 
SQL += STR_CDC_START
SQL += `''::TIMESTAMP_NTZ)
AND F.STAFFAGENCYID <> '''' 
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43
,44,45,46,47,48,49,50,51,52
HAVING SUM(F.ADJUSTEDDURATION) > 0
) AS SOURCE ON SOURCE.VISIT_KEY = TARGET.VISIT_KEY
WHEN MATCHED THEN 
	UPDATE SET REPORT_DATE = SOURCE.REPORT_DATE,
	SCHEDULE_VISIT_INDICATOR = SOURCE.SCHEDULE_VISIT_INDICATOR,
		BRANCH_KEY = SOURCE.BRANCH_KEY,
		CLIENT_KEY = SOURCE.CLIENT_KEY,
		CONTRACT_KEY = SOURCE.CONTRACT_KEY,
		EMPLOYEE_KEY = SOURCE.EMPLOYEE_KEY,
		SOURCE_SYSTEM_ID = SOURCE.SOURCE_SYSTEM_ID,
		SUPERVISOR_KEY = SOURCE.SUPERVISOR_KEY,
		SERVICE_DATE = SOURCE.SERVICE_DATE,
        PAYROLL_DATE = SOURCE.PAYROLL_DATE,
		BRANCH_NAME = SOURCE.BRANCH_NAME,
		CLIENT_NUMBER = SOURCE.CLIENT_NUMBER,
		CONTRACT_CODE = SOURCE.CONTRACT_CODE,
		EMPLOYEE_ID = SOURCE.EMPLOYEE_ID,
		SYSTEM_CODE = SOURCE.SYSTEM_CODE,
		SUPERVISOR_CODE = SOURCE.SUPERVISOR_CODE,
		CLEAN_SHIFT_FLAG = SOURCE.CLEAN_SHIFT_FLAG,
		STATUS_CODE = SOURCE.STATUS_CODE,
		STATUS_DESCRIPTION = SOURCE.STATUS_DESCRIPTION,
		CANCEL_REASON_CODE = SOURCE.CANCEL_REASON_CODE,
		CANCEL_REASON_DESCRIPTION = SOURCE.CANCEL_REASON_DESCRIPTION,
		CANCEL_REASON_NOTES = SOURCE.CANCEL_REASON_NOTES,
		EXCEPTION_REASON_FLAG = SOURCE.EXCEPTION_REASON_FLAG,
		RESOLUTION_CODE = SOURCE.RESOLUTION_CODE,
		RESOLUTION_DESCRIPTION = SOURCE.RESOLUTION_DESCRIPTION,
		REJECTION_CODE = SOURCE.REJECTION_CODE,
		REJECTION_DESCRIPTION = SOURCE.REJECTION_DESCRIPTION,
		BILL_CODE = SOURCE.BILL_CODE,
		BILL_RATE = SOURCE.BILL_RATE,
		OVERHEAD_RATE = SOURCE.OVERHEAD_RATE,
		HOURS_SERVED = SOURCE.HOURS_SERVED,
		SCHEDULE_TIMEIN = SOURCE.SCHEDULE_TIMEIN,
  		SCHEDULE_TIMEOUT = SOURCE.SCHEDULE_TIMEOUT,
		SCHEDULE_DURATION = SOURCE.SCHEDULE_DURATION,
  		ACTUAL_TIMEIN = SOURCE.ACTUAL_TIMEIN,
  		ACTUAL_TIMEOUT = SOURCE.ACTUAL_TIMEOUT,
		ACTUAL_DURATION = SOURCE.ACTUAL_DURATION,
  		ADJUSTED_TIMEIN = SOURCE.ADJUSTED_TIMEIN,
  		ADJUSTED_TIMEOUT = SOURCE.ADJUSTED_TIMEOUT,
		ADJUSTED_DURATION = SOURCE.ADJUSTED_DURATION,
        COMMENTS = SOURCE.COMMENTS,
        IS_EVV_FLAG = SOURCE.IS_EVV_FLAG,
    	TIMESHEET_TYPE = SOURCE.TIMESHEET_TYPE,
    	TRACKING_ID = SOURCE.TRACKING_ID,
		ETL_TASK_KEY = SOURCE.ETL_TASK_KEY,
		ETL_INSERTED_TASK_KEY = SOURCE.ETL_INSERTED_TASK_KEY,
		ETL_INSERTED_DATE = SOURCE.ETL_INSERTED_DATE,
		ETL_INSERTED_BY = SOURCE.ETL_INSERTED_BY,
		ETL_LAST_UPDATED_DATE = SOURCE.ETL_LAST_UPDATED_DATE,
		ETL_LAST_UPDATED_BY = SOURCE.ETL_LAST_UPDATED_BY,
		ETL_DELETED_FLAG = SOURCE.ETL_DELETED_FLAG
WHEN NOT MATCHED THEN
	INSERT (VISIT_KEY,
	SCHEDULE_VISIT_INDICATOR,
		REPORT_DATE,
		BRANCH_KEY,
		CLIENT_KEY,
		CONTRACT_KEY,
		EMPLOYEE_KEY,
		SOURCE_SYSTEM_ID,
		SUPERVISOR_KEY,
		SERVICE_DATE,
        PAYROLL_DATE,
		BRANCH_NAME,
		CLIENT_NUMBER,
		CONTRACT_CODE,
		EMPLOYEE_ID,
		SYSTEM_CODE,
		SUPERVISOR_CODE,
		CLEAN_SHIFT_FLAG,
		STATUS_CODE,
		STATUS_DESCRIPTION,
		CANCEL_REASON_CODE,
		CANCEL_REASON_DESCRIPTION,
		CANCEL_REASON_NOTES,
		EXCEPTION_REASON_FLAG,
		RESOLUTION_CODE,
		RESOLUTION_DESCRIPTION,
		REJECTION_CODE,
		REJECTION_DESCRIPTION,
		BILL_CODE,
		BILL_RATE,
		OVERHEAD_RATE,
		HOURS_SERVED,
		SCHEDULE_TIMEIN,
  		SCHEDULE_TIMEOUT,
		SCHEDULE_DURATION,
  		ACTUAL_TIMEIN,
  		ACTUAL_TIMEOUT,
		ACTUAL_DURATION,
  		ADJUSTED_TIMEIN,
  		ADJUSTED_TIMEOUT,
		ADJUSTED_DURATION,
		COMMENTS,
        IS_EVV_FLAG,
    	TIMESHEET_TYPE,
    	TRACKING_ID,
    	ETL_TASK_KEY,
		ETL_INSERTED_TASK_KEY,
		ETL_INSERTED_DATE,
		ETL_INSERTED_BY,
		ETL_LAST_UPDATED_DATE,
		ETL_LAST_UPDATED_BY,
		ETL_DELETED_FLAG)
	VALUES (SOURCE.VISIT_KEY,
	SOURCE.SCHEDULE_VISIT_INDICATOR,
		SOURCE.REPORT_DATE,
		SOURCE.BRANCH_KEY,
		SOURCE.CLIENT_KEY,
		SOURCE.CONTRACT_KEY,
		SOURCE.EMPLOYEE_KEY,
		SOURCE.SOURCE_SYSTEM_ID,
		SOURCE.SUPERVISOR_KEY,
		SOURCE.SERVICE_DATE,
        SOURCE.PAYROLL_DATE,
		SOURCE.BRANCH_NAME,
		SOURCE.CLIENT_NUMBER,
		SOURCE.CONTRACT_CODE,
		SOURCE.EMPLOYEE_ID,
		SOURCE.SYSTEM_CODE,
		SOURCE.SUPERVISOR_CODE,
		SOURCE.CLEAN_SHIFT_FLAG,
		SOURCE.STATUS_CODE,
		SOURCE.STATUS_DESCRIPTION,
		SOURCE.CANCEL_REASON_CODE,
		SOURCE.CANCEL_REASON_DESCRIPTION,
		SOURCE.CANCEL_REASON_NOTES,
		SOURCE.EXCEPTION_REASON_FLAG,
		SOURCE.RESOLUTION_CODE,
		SOURCE.RESOLUTION_DESCRIPTION,
		SOURCE.REJECTION_CODE,
		SOURCE.REJECTION_DESCRIPTION,
		SOURCE.BILL_CODE,
		SOURCE.BILL_RATE,
		SOURCE.OVERHEAD_RATE,
        SOURCE.HOURS_SERVED,
		SOURCE.SCHEDULE_TIMEIN,
  		SOURCE.SCHEDULE_TIMEOUT,
		SOURCE.SCHEDULE_DURATION,
  		SOURCE.ACTUAL_TIMEIN,
  		SOURCE.ACTUAL_TIMEOUT,
		SOURCE.ACTUAL_DURATION,
  		SOURCE.ADJUSTED_TIMEIN,
  		SOURCE.ADJUSTED_TIMEOUT,
		SOURCE.ADJUSTED_DURATION,
        SOURCE.COMMENTS,
        SOURCE.IS_EVV_FLAG,
    	SOURCE.TIMESHEET_TYPE,
    	SOURCE.TRACKING_ID,
    	SOURCE.ETL_TASK_KEY,
		SOURCE.ETL_INSERTED_TASK_KEY,
		SOURCE.ETL_INSERTED_DATE,
		SOURCE.ETL_INSERTED_BY,
		SOURCE.ETL_LAST_UPDATED_DATE,
		SOURCE.ETL_LAST_UPDATED_BY,
		SOURCE.ETL_DELETED_FLAG);`;
          TRY {
                SNOWFLAKE.EXECUTE (
                    {SQLTEXT: SQL}
                    );
                RETURN "SUCCEEDED.";   // RETURN A SUCCESS/ERROR INDICATOR.
                }
            CATCH (ERR)  {
                RETURN "FAILED: " + ERR;   // RETURN A SUCCESS/ERROR INDICATOR.
                }  
          ;
    ----------------------------
    ----------------------------

    CREATE OR REPLACE PROCEDURE DW_${var.SF_ENVIRONMENT}.HAH.MERGE_STAGE_SANDATAIMPORT_FACT_EVV_VISIT_${var.SF_ENVIRONMENT}()
    RETURNS STRING 
    LANGUAGE JAVASCRIPT
    AS
    

    VAR SQLCMD = "";
    VAR SQLSTMT = "";
    VAR RESULT = "";

    TRY {
      VAR SQLCMD = `
    MERGE INTO HAH.FACT_EVV_VISIT_${var.SF_ENVIRONMENT} TGT 
USING STAGE.SANDATAIMPORT_FACT_EVV_VISIT_${var.SF_ENVIRONMENT} STAGE 
ON TGT.VISIT_KEY = STAGE.VISIT_KEY
WHEN MATCHED THEN 
UPDATE SET 
    TGT.SCHEDULE_VISIT_INDICATOR= STAGE.SCHEDULE_VISIT_INDICATOR
   ,TGT.REPORT_DATE= STAGE.REPORT_DATE
   ,TGT.BRANCH_KEY= STAGE.BRANCH_KEY
   ,TGT.CLIENT_KEY= STAGE.CLIENT_KEY
   ,TGT.CONTRACT_KEY= STAGE.CONTRACT_KEY
   ,TGT.EMPLOYEE_KEY= STAGE.EMPLOYEE_KEY
   ,TGT.SOURCE_SYSTEM_ID= STAGE.SOURCE_SYSTEM_ID
   ,TGT.SUPERVISOR_KEY= STAGE.SUPERVISOR_KEY
   ,TGT.SERVICE_DATE= STAGE.SERVICE_DATE
   ,TGT.PAYROLL_DATE= STAGE.PAYROLL_DATE
   ,TGT.BRANCH_NAME= STAGE.BRANCH_NAME
   ,TGT.CLIENT_NUMBER= STAGE.CLIENT_NUMBER
   ,TGT.CONTRACT_CODE= STAGE.CONTRACT_CODE
   ,TGT.EMPLOYEE_ID= STAGE.EMPLOYEE_ID
   ,TGT.SYSTEM_CODE= STAGE.SYSTEM_CODE
   ,TGT.SUPERVISOR_CODE= STAGE.SUPERVISOR_CODE
   ,TGT.CLEAN_SHIFT_FLAG= STAGE.CLEAN_SHIFT_FLAG
   ,TGT.STATUS_CODE= STAGE.STATUS_CODE
   ,TGT.STATUS_DESCRIPTION= STAGE.STATUS_DESCRIPTION
   ,TGT.CANCEL_REASON_CODE= STAGE.CANCEL_REASON_CODE
   ,TGT.CANCEL_REASON_DESCRIPTION= STAGE.CANCEL_REASON_DESCRIPTION
   ,TGT.CANCEL_REASON_NOTES= STAGE.CANCEL_REASON_NOTES
   ,TGT.EXCEPTION_REASON_FLAG= STAGE.EXCEPTION_REASON_FLAG
   ,TGT.RESOLUTION_CODE= STAGE.RESOLUTION_CODE
   ,TGT.RESOLUTION_DESCRIPTION= STAGE.RESOLUTION_DESCRIPTION
   ,TGT.REJECTION_CODE= STAGE.REJECTION_CODE
   ,TGT.REJECTION_DESCRIPTION= STAGE.REJECTION_DESCRIPTION
   ,TGT.BILL_CODE= STAGE.BILL_CODE
   ,TGT.BILL_RATE= STAGE.BILL_RATE
   ,TGT.OVERHEAD_RATE= STAGE.OVERHEAD_RATE
   ,TGT.HOURS_SERVED= STAGE.HOURS_SERVED
   ,TGT.SCHEDULE_TIMEIN= STAGE.SCHEDULE_TIMEIN
   ,TGT.SCHEDULE_TIMEOUT= STAGE.SCHEDULE_TIMEOUT
   ,TGT.SCHEDULE_DURATION= STAGE.SCHEDULE_DURATION
   ,TGT.ACTUAL_TIMEIN= STAGE.ACTUAL_TIMEIN
   ,TGT.ACTUAL_TIMEOUT= STAGE.ACTUAL_TIMEOUT
   ,TGT.ACTUAL_DURATION= STAGE.ACTUAL_DURATION
   ,TGT.ADJUSTED_TIMEIN= STAGE.ADJUSTED_TIMEIN
   ,TGT.ADJUSTED_TIMEOUT= STAGE.ADJUSTED_TIMEOUT
   ,TGT.ADJUSTED_DURATION= STAGE.ADJUSTED_DURATION
   ,TGT.COMMENTS= STAGE.COMMENTS
   ,TGT.IS_EVV_FLAG= STAGE.IS_EVV_FLAG
   ,TGT.TIMESHEET_TYPE= STAGE.TIMESHEET_TYPE
   ,TGT.TRACKING_ID= STAGE.TRACKING_ID
   ,TGT.ETL_TASK_KEY= STAGE.ETL_TASK_KEY
   ,TGT.ETL_LAST_UPDATED_DATE= STAGE.ETL_LAST_UPDATED_DATE
   ,TGT.ETL_LAST_UPDATED_BY= STAGE.ETL_LAST_UPDATED_BY
   ,TGT.ETL_DELETED_FLAG= STAGE.ETL_DELETED_FLAG
WHEN NOT MATCHED THEN 
INSERT ( 
    VISIT_KEY
   ,SCHEDULE_VISIT_INDICATOR
   ,REPORT_DATE
   ,BRANCH_KEY
   ,CLIENT_KEY
   ,CONTRACT_KEY
   ,EMPLOYEE_KEY
   ,SOURCE_SYSTEM_ID
   ,SUPERVISOR_KEY
   ,SERVICE_DATE
   ,PAYROLL_DATE
   ,BRANCH_NAME
   ,CLIENT_NUMBER
   ,CONTRACT_CODE
   ,EMPLOYEE_ID
   ,SYSTEM_CODE
   ,SUPERVISOR_CODE
   ,CLEAN_SHIFT_FLAG
   ,STATUS_CODE
   ,STATUS_DESCRIPTION
   ,CANCEL_REASON_CODE
   ,CANCEL_REASON_DESCRIPTION
   ,CANCEL_REASON_NOTES
   ,EXCEPTION_REASON_FLAG
   ,RESOLUTION_CODE
   ,RESOLUTION_DESCRIPTION
   ,REJECTION_CODE
   ,REJECTION_DESCRIPTION
   ,BILL_CODE
   ,BILL_RATE
   ,OVERHEAD_RATE
   ,HOURS_SERVED
   ,SCHEDULE_TIMEIN
   ,SCHEDULE_TIMEOUT
   ,SCHEDULE_DURATION
   ,ACTUAL_TIMEIN
   ,ACTUAL_TIMEOUT
   ,ACTUAL_DURATION
   ,ADJUSTED_TIMEIN
   ,ADJUSTED_TIMEOUT
   ,ADJUSTED_DURATION
   ,COMMENTS
   ,IS_EVV_FLAG
   ,TIMESHEET_TYPE
   ,TRACKING_ID
   ,ETL_TASK_KEY
   ,ETL_INSERTED_TASK_KEY
   ,ETL_INSERTED_DATE
   ,ETL_INSERTED_BY
   ,ETL_LAST_UPDATED_DATE
   ,ETL_LAST_UPDATED_BY
   ,ETL_DELETED_FLAG
) 
VALUES (
    STAGE.VISIT_KEY
   ,STAGE.SCHEDULE_VISIT_INDICATOR
   ,STAGE.REPORT_DATE
   ,STAGE.BRANCH_KEY
   ,STAGE.CLIENT_KEY
   ,STAGE.CONTRACT_KEY
   ,STAGE.EMPLOYEE_KEY
   ,STAGE.SOURCE_SYSTEM_ID
   ,STAGE.SUPERVISOR_KEY
   ,STAGE.SERVICE_DATE
   ,STAGE.PAYROLL_DATE
   ,STAGE.BRANCH_NAME
   ,STAGE.CLIENT_NUMBER
   ,STAGE.CONTRACT_CODE
   ,STAGE.EMPLOYEE_ID
   ,STAGE.SYSTEM_CODE
   ,STAGE.SUPERVISOR_CODE
   ,STAGE.CLEAN_SHIFT_FLAG
   ,STAGE.STATUS_CODE
   ,STAGE.STATUS_DESCRIPTION
   ,STAGE.CANCEL_REASON_CODE
   ,STAGE.CANCEL_REASON_DESCRIPTION
   ,STAGE.CANCEL_REASON_NOTES
   ,STAGE.EXCEPTION_REASON_FLAG
   ,STAGE.RESOLUTION_CODE
   ,STAGE.RESOLUTION_DESCRIPTION
   ,STAGE.REJECTION_CODE
   ,STAGE.REJECTION_DESCRIPTION
   ,STAGE.BILL_CODE
   ,STAGE.BILL_RATE
   ,STAGE.OVERHEAD_RATE
   ,STAGE.HOURS_SERVED
   ,STAGE.SCHEDULE_TIMEIN
   ,STAGE.SCHEDULE_TIMEOUT
   ,STAGE.SCHEDULE_DURATION
   ,STAGE.ACTUAL_TIMEIN
   ,STAGE.ACTUAL_TIMEOUT
   ,STAGE.ACTUAL_DURATION
   ,STAGE.ADJUSTED_TIMEIN
   ,STAGE.ADJUSTED_TIMEOUT
   ,STAGE.ADJUSTED_DURATION
   ,STAGE.COMMENTS
   ,STAGE.IS_EVV_FLAG
   ,STAGE.TIMESHEET_TYPE
   ,STAGE.TRACKING_ID
   ,STAGE.ETL_TASK_KEY
   ,STAGE.ETL_INSERTED_TASK_KEY
   ,STAGE.ETL_INSERTED_DATE
   ,STAGE.ETL_INSERTED_BY
   ,STAGE.ETL_LAST_UPDATED_DATE
   ,STAGE.ETL_LAST_UPDATED_BY
   ,STAGE.ETL_DELETED_FLAG
);`;
          TRY {
                SNOWFLAKE.EXECUTE (
                    {SQLTEXT: SQL}
                    );
                RETURN "SUCCEEDED.";   // RETURN A SUCCESS/ERROR INDICATOR.
                }
            CATCH (ERR)  {
                RETURN "FAILED: " + ERR;   // RETURN A SUCCESS/ERROR INDICATOR.
                }  
          
 EOT
}

