resource "snowflake_procedure" "DW_PUBLIC_DATAFLEXSYNCDATA_MATRIXCARE_EMPLOYEE_MAPPING_POSTPROCESSING" {
	name ="DATAFLEXSYNCDATA_MATRIXCARE_EMPLOYEE_MAPPING_POSTPROCESSING"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "PUBLIC"
	language  = "JAVASCRIPT"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

        var sql = `
    INSERT OVERWRITE INTO DW_${var.SF_ENVIRONMENT}.INTEGRATION.DATAFLEXSYNCDATA_MATRIXCARE_EMPLOYEE_MAPPING
WITH Dataflex_Emp AS  
	(
	SELECT EMPLOYEE_KEY, EMPLOYEE_ID, SOURCE_SYSTEM_ID, EMPLOYEE_NUMBER,PAYROLL_ID,EMPLOYEE_DOB,EMPLOYEE_HIRE_DATE,
	EMPLOYEE_TERMINATE_DATE,EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, EMPLOYEE_ADDRESS1 AS EMPLOYEE_ADDRESS_1,EMPLOYEE_CITY, EMPLOYEE_STATE_CODE, 
	EMPLOYEE_ZIP, EMPLOYEE_HOME_PHONE, EMPLOYEE_CELL_PHONE, EMPLOYEE_WORK_PHONE, EMPLOYEE_PERSONAL_EMAIL, EMPLOYEE_WORK_EMAIL, 
	LINKED_IN_PROFILE_URL, EMPLOYEE_GENDER, EMPLOYEE_ETHNICITY,PRIMARY_BRANCH_KEY,PRIMARY_BRANCH_NAME,PRIMARY_BRANCH_STATE,
	PRIMARY_BRANCH_SYSTEM_CODE
	FROM HAH.DIM_EMPLOYEE
	WHERE SOURCE_system_id=3
	AND SYSTEM_CODE IN (''IN'', ''MI'')
	),
	Matrix_Emp as
	(
	SELECT EMPLOYEE_KEY, EMPLOYEE_ID, SOURCE_SYSTEM_ID, EMPLOYEE_NUMBER,PAYROLL_ID,EMPLOYEE_DOB,EMPLOYEE_HIRE_DATE,
	EMPLOYEE_TERMINATE_DATE,EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, EMPLOYEE_ADDRESS1 AS EMPLOYEE_ADDRESS_1,EMPLOYEE_CITY, EMPLOYEE_STATE_CODE, 
	EMPLOYEE_ZIP, EMPLOYEE_HOME_PHONE, EMPLOYEE_CELL_PHONE, EMPLOYEE_WORK_PHONE, EMPLOYEE_PERSONAL_EMAIL, EMPLOYEE_WORK_EMAIL, 
	LINKED_IN_PROFILE_URL, EMPLOYEE_GENDER, EMPLOYEE_ETHNICITY,PRIMARY_BRANCH_KEY,PRIMARY_BRANCH_NAME,PRIMARY_BRANCH_STATE,
	PRIMARY_BRANCH_SYSTEM_CODE
	FROM HAH.DIM_EMPLOYEE
	WHERE SOURCE_system_id=7
	),
	GP_Emp AS  ---GP RECORDS WHICH ARE NOT IN DATAFLEX
	(
	SELECT GP.EMPLOYEE_KEY, GP.EMPLOYEE_ID, GP.SOURCE_SYSTEM_ID, GP.EMPLOYEE_NUMBER,GP.PAYROLL_ID,GP.EMPLOYEE_DOB,GP.EMPLOYEE_HIRE_DATE,
	GP.EMPLOYEE_TERMINATE_DATE,GP.EMPLOYEE_FIRST_NAME, GP.EMPLOYEE_LAST_NAME, GP.EMPLOYEE_ADDRESS1 AS EMPLOYEE_ADDRESS_1,GP.EMPLOYEE_CITY, GP.EMPLOYEE_STATE_CODE, 
	GP.EMPLOYEE_ZIP, GP.EMPLOYEE_HOME_PHONE, GP.EMPLOYEE_CELL_PHONE, GP.EMPLOYEE_WORK_PHONE, GP.EMPLOYEE_PERSONAL_EMAIL, GP.EMPLOYEE_WORK_EMAIL, 
	GP.LINKED_IN_PROFILE_URL, GP.EMPLOYEE_GENDER, GP.EMPLOYEE_ETHNICITY,GP.PRIMARY_BRANCH_KEY,GP.PRIMARY_BRANCH_NAME,GP.PRIMARY_BRANCH_STATE,
	GP.PRIMARY_BRANCH_SYSTEM_CODE
	FROM (SELECT * FROM HAH.DIM_EMPLOYEE WHERE SOURCE_SYSTEM_ID=5 AND WORK_STATE IN (''IN'', ''MI'')) GP
	LEFT JOIN (SELECT * FROM HAH.DIM_EMPLOYEE WHERE SOURCE_SYSTEM_ID=3 AND SYSTEM_CODE IN (''IN'', ''MI'')) DF
	ON TRIM(GP.EMPLOYEE_ID) = TRIM(DF.PAYROLL_ID) AND TRIM(GP.WORK_STATE) = TRIM(DF.SYSTEM_CODE) 
	WHERE DF.PAYROLL_ID IS NULL AND TRIM(GP.SYSTEM_CODE) <> ''HAHIL''
	),
	DF_MAT_MAPPING AS 
	(
	SELECT distinct MC.EMPLOYEE_KEY MATRIX_EMP_KEY , MC.EMPLOYEE_ID MATRIX_EMP_ID,--M.SOURCE_SYSTEM_ID, M.EMPLOYEE_NUMBER,
	DC.EMPLOYEE_KEY DATAFLEX_EMP_KEY, DC.EMPLOYEE_ID DATAFLEX_EMP_ID--,D.SOURCE_SYSTEM_ID, D.EMPLOYEE_NUMBER
	FROM Matrix_Emp MC 
	JOIN Dataflex_Emp DC ON
	 (UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)) = UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)) AND UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)) = UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)) 
		AND TRIM(MC.EMPLOYEE_ZIP) = TRIM(DC.EMPLOYEE_ZIP) AND UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)) = UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)) AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB)
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5) AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB)
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5) AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(DC.EMPLOYEE_ZIP,1,5)
			AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)),1,5))
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
			AND (MC.EMPLOYEE_HOME_PHONE = DC.EMPLOYEE_HOME_PHONE OR MC.EMPLOYEE_WORK_PHONE = DC.EMPLOYEE_WORK_PHONE OR MC.EMPLOYEE_CELL_PHONE = DC.EMPLOYEE_CELL_PHONE ))
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
		AND MC.EMPLOYEE_PERSONAL_EMAIL = DC.EMPLOYEE_PERSONAL_EMAIL )
OR   
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(DC.EMPLOYEE_ZIP,1,5) 
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)),1,5))	
OR   
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(DC.EMPLOYEE_ZIP,1,5) 
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)),1,5))	
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
			AND (MC.EMPLOYEE_ADDRESS_1 = DC.EMPLOYEE_ADDRESS_1))
OR 
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB
		AND (MC.EMPLOYEE_PERSONAL_EMAIL = DC.EMPLOYEE_PERSONAL_EMAIL))),
MATRIX_REMAINING AS 
	(
	SELECT M.* FROM Matrix_Emp M WHERE M.EMPLOYEE_KEY NOT IN (SELECT DISTINCT MATRIX_EMP_KEY FROM DF_MAT_MAPPING)
--	LEFT JOIN DF_MAT_MAPPING MAP ON M.EMPLOYEE_KEY = MAP.MATRIX_EMP_KEY 
--	WHERE MAP.MATRIX_EMP_KEY IS NULL
	)
SELECT distinct --''DF'' AS TYPE,
MATRIX_EMP_KEY , MATRIX_EMP_ID,--SOURCE_SYSTEM_ID, EMPLOYEE_NUMBER,
DATAFLEX_EMP_KEY, DATAFLEX_EMP_ID--,D.SOURCE_SYSTEM_ID, D.EMPLOYEE_NUMBER
FROM DF_MAT_MAPPING
--)
--------------------------------
UNION
------------------------------
SELECT distinct --''GP'' AS TYPE, 
MC.EMPLOYEE_KEY MATRIX_EMP_KEY , MC.EMPLOYEE_ID MATRIX_EMP_ID,--M.SOURCE_SYSTEM_ID, M.EMPLOYEE_NUMBER,
GP.EMPLOYEE_KEY DATAFLEX_EMP_KEY, GP.EMPLOYEE_ID DATAFLEX_EMP_ID--,D.SOURCE_SYSTEM_ID, D.EMPLOYEE_NUMBER
FROM MATRIX_REMAINING MC  
JOIN GP_Emp GP 
ON
	 (UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)) = UPPER(TRIM(GP.EMPLOYEE_FIRST_NAME)) AND UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)) = UPPER(TRIM(GP.EMPLOYEE_LAST_NAME)) 
		AND TRIM(MC.EMPLOYEE_ZIP) = TRIM(GP.EMPLOYEE_ZIP) AND UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)) = UPPER(TRIM(GP.EMPLOYEE_ADDRESS_1)) AND MC.EMPLOYEE_DOB = GP.EMPLOYEE_DOB)
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_LAST_NAME)), 1, 5) AND MC.EMPLOYEE_DOB = GP.EMPLOYEE_DOB)
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_LAST_NAME)), 1, 5) AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(GP.EMPLOYEE_ZIP,1,5)
			AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_ADDRESS_1)),1,5))
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_LAST_NAME)), 1, 5)
			AND (MC.EMPLOYEE_HOME_PHONE = GP.EMPLOYEE_HOME_PHONE OR MC.EMPLOYEE_WORK_PHONE = GP.EMPLOYEE_WORK_PHONE OR MC.EMPLOYEE_CELL_PHONE = GP.EMPLOYEE_CELL_PHONE ))
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_LAST_NAME)), 1, 5)
		AND MC.EMPLOYEE_PERSONAL_EMAIL = GP.EMPLOYEE_PERSONAL_EMAIL )
OR   
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_LAST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = GP.EMPLOYEE_DOB AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(GP.EMPLOYEE_ZIP,1,5) 
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_ADDRESS_1)),1,5))	
OR   
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = GP.EMPLOYEE_DOB AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(GP.EMPLOYEE_ZIP,1,5) 
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_ADDRESS_1)),1,5))	
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_LAST_NAME)), 1, 5)
			AND (MC.EMPLOYEE_ADDRESS_1 = GP.EMPLOYEE_ADDRESS_1))
OR 
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(GP.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = GP.EMPLOYEE_DOB
		AND (MC.EMPLOYEE_PERSONAL_EMAIL = GP.EMPLOYEE_PERSONAL_EMAIL));`;
          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
          
 EOT
}

