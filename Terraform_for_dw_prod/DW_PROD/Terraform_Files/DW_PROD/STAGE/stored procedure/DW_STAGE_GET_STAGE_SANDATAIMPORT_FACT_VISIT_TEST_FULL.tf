resource "snowflake_procedure" "DW_STAGE_GET_STAGE_SANDATAIMPORT_FACT_VISIT_TEST_FULL" {
	name ="GET_STAGE_SANDATAIMPORT_FACT_VISIT_TEST_FULL"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "STAGE"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

DECLARE
    return_result VARCHAR;
BEGIN
    --*****************************************************************************************************************************
-- NAME:  SANDATAIMPORT_FACT_VISIT_REVISED
--
-- PURPOSE: Creates one row per visit according to SANDATAIMPORT
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 02/13/20     Greg Marsh           Initial Development
-- 03/23/20     Rachel Stewart       Changed timeout to ADJUSTEDTIMEOUT
-- 04/01/20		Mohd Kamaludin		 Added CDC
-- 04/30/20     Mohd Kamaludin       Updated Visit Key definition and Added Status Code and Status Description
-- 05/04/20     Mohd Kamaludin       Updated Employee Key and employee id to match Sandata Dim Employee (StaffAgencyID)
-- 09/23/20		Mir Ali				 Changed Report_Date and Service_Date to use Date field rather than ADJUSTEDTIMEOUT; also removed filter for null ADJUSTEDTIMEOUT
-- 10/6/20		Prachi Shah			 Added Payroll Date
-- 01/04/21     Mir Ali              Changed Branch_Key to include Office_Code not Office_Name
-- 02/09/21     Shraddha Sejpal		 Updated logic for Bill_rate 
-- 04/20/21		Mir Ali				 Added nightly/historical table load, to be able to easily repopulate Fact_Visit should it need to be resynced
-- 06/28/22		Shraddha Sejpal		 Added schedule/visit/invoice/payroll status information and schedule/actual/adjusted timing information,scheduled employee,
--									 Confirmed_Flag, Bill_unit_type & Bill_Unit_Served,Updated Hours_Served logic.
-- 02/10/23     Mirisha              Leveraged Dedupe
-- 03/24/23		Darshan Gosai       Seprated SANDATA CARECOORIDNATE recrds on basis of system_code
--*****************************************************************************************************************************
INSERT OVERWRITE INTO dw_prod."STAGE".SANDATAIMPORT_FACT_VISIT_FULL_LOAD_TEST
WITH avg_bill_rate as (									--- Changed old logic to updated logic from Merge proc below
		SELECT agencyid,admissionid,AVG(RATE) as BILL_RATE 
		FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS
		GROUP BY agencyid,admissionid)
,unit_type AS (
SELECT * FROM (SELECT row_number() OVER (PARTITION BY SCHEDULEID ORDER BY rate desc) rn,AGENCYID ,SCHEDULEID, 
CASE UNITTYPE WHEN ''01'' THEN ''Hourly'' WHEN ''02'' THEN ''Visit'' WHEN ''05'' THEN ''Hourly'' WHEN ''06'' THEN ''Per Diem'' 
	else NULL END AS UNITTYPE  
from DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS 
WHERE AGENCYID =''8485'' AND RATE NOT IN (0.00, 0.01) AND (UNITTYPE IS NOT NULL OR UNITTYPE <>'''')) WHERE rn=1 )
,scheduled_employee AS (
   SELECT * FROM (SELECT ROW_NUMBER () OVER (PARTITION BY SV.AGENCYID ,SV.SCHEDULEID ORDER BY ETL_LAST_UPDATED_DATE DESC) AS rno,
   SV.AGENCYID ,SV.SCHEDULEID ,SV.STATUS, SV.STAFFAGENCYID  
   FROM DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.HIST_SANDATAVISITS SV WHERE SV.AGENCYID =''8485'' AND SV.STATUS IN(''01'')) WHERE rno=1)
,DERIVED_STATUS AS (
	SELECT AGENCYID ,SCHEDULEID, CASE WHEN SV.STATUS =''01'' AND SV.STAFFAGENCYID IS NULL AND SV.SCHEDULEDATE > CURRENT_DATE() THEN ''01OPENFUTURE'' 
		 WHEN SV.STATUS =''01'' AND SV.STAFFAGENCYID IS NOT NULL AND SV.SCHEDULEDATE > CURRENT_DATE() THEN ''01FUTURE''
		 WHEN SV.STATUS =''01'' AND SV.STAFFAGENCYID IS NULL AND SV.SCHEDULEDATE <= CURRENT_DATE() THEN ''01OPEN'' 
		 WHEN SV.STATUS =''01'' AND SV.STAFFAGENCYID IS NOT NULL AND SV.SCHEDULEDATE <= CURRENT_DATE() THEN ''01''
		ELSE SV.STATUS END AS DERIVED_STATUS
		,md5(4 ||''-''||''8485''||''-''||nvl(DERIVED_STATUS,''S'')) AS VISIT_STATUS_KEY
   FROM DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.SANDATAVISITS SV WHERE AGENCYID =''8485''
),
EMPLOYEE AS 
(
	SELECT * FROM
	(
		SELECT STAFFAGENCYID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.EMPLOYEE_MASTER_LIST
        WHERE AGENCYID=8485
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT STAFFAGENCYID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.EMPLOYEE_MATCH_LIST
		WHERE STAFFAGENCYID NOT IN (SELECT STAFFAGENCYID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.EMPLOYEE_MASTER_LIST ) 
        AND AGENCYID=8485
	) 
), CLIENT AS
(
	SELECT * FROM
	(
		SELECT CLIENTID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.CLIENT_MASTER_LIST
        WHERE AGENCYID=8485 
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT CLIENTID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.CLIENT_MATCH_LIST
		WHERE CLIENTID NOT IN (SELECT CLIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.CLIENT_MASTER_LIST ) 
        AND AGENCYID=8485
	)
)
    SELECT DISTINCT 
	
	CASE WHEN  SV.SERVICEID = ''CARECO''	
		THEN MD5(''CC_''||SV.AGENCYID || ''-'' || SV.SCHEDULEID || ''-'' || ''SANDATAIMPORT'') 
		ELSE MD5(SV.AGENCYID || ''-'' || SV.SCHEDULEID || ''-'' || ''SANDATAIMPORT'') 
		END AS VISIT_KEY,
		
	 
	SV.SCHEDULEDATE AS REPORT_DATE,
	MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || COALESCE(SV.LOCATIONID, '''') || ''-'' || ''SANDATAIMPORT'') AS BRANCH_KEY,
	MD5(NVL(C.AGENCYID, ''S'') || ''-'' || C.MASTER_ID || ''-'' || ''SANDATAIMPORT'') AS CLIENT_KEY,
	
	 
	CASE WHEN  SV.SERVICEID = ''CARECO''	
		THEN MD5(NVL(''CC_''||SV.AGENCYID, ''S'') || ''-'' || SV.ADMISSIONTYPE || ''-'' || ''SANDATAIMPORT'')
		ELSE MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || SV.ADMISSIONTYPE || ''-'' || ''SANDATAIMPORT'') END AS CONTRACT_KEY,
	
	MD5(SV.AGENCYID || ''-'' || UPPER(COALESCE(TRY_CAST(SEMP.STAFFAGENCYID AS INT)::STRING, TRIM(SV.STAFFAGENCYID))) || ''-'' || ''1900-01-01'' || ''-'' || ''SANDATAIMPORT'') AS SCHEDULED_EMPLOYEE_KEY,
	COALESCE(MD5(NVL(stf.AGENCYID,''S'') || ''-'' || UPPER(COALESCE(TRY_CAST(STF.MASTER_ID AS INT)::STRING,TRIM(STF.MASTER_ID))) || ''-'' || ''1900-01-01'' || ''-'' || ''SANDATAIMPORT'')
, md5(nvl(STF.agencyID,''S'') || ''-'' || upper(NVL(TRIM(STF.MASTER_ID), '''')) || ''-'' || ''1900-01-01'' || ''-'' || ''SANDATAIMPORT'')) AS EMPLOYEE_KEY,
	4 AS SOURCE_SYSTEM_ID,
	MD5(NVL(SV.AGENCYID, ''S'') || ''-'' || NVL(CAD.COORDINATORID::STRING, ''Unknown-'' || NVL(SV.AGENCYID, ''S'')) || ''-'' || ''SANDATAIMPORT'') AS SUPERVISOR_KEY,
    NULL AS INVOICE_KEY,
	NULL AS PAYROLL_KEY,
	-- Business Keys
	SV.SCHEDULEDATE AS SERVICE_DATE,
	NULL AS PAYROLL_DATE,
	NVL(EID.LSTNAM, SV.LOCATIONID) AS BRANCH_NAME,
	--SV.CLIENTID AS CLIENT_NUMBER,
	C.MASTER_ID AS CLIENT_NUMBER,
	SV.ADMISSIONTYPE AS CONTRACT_CODE,
	COALESCE(TRY_CAST(SEMP.STAFFAGENCYID AS INT)::STRING, UPPER(TRIM(STF.STAFFAGENCYID))) AS SCHEDULED_EMPLOYEE_ID,								
	COALESCE(TRY_CAST(STF.STAFFAGENCYID AS INT)::STRING, UPPER(TRIM(STF.STAFFAGENCYID))) AS EMPLOYEE_ID,
	
		CASE WHEN SV.SERVICEID = ''CARECO''	
		THEN ''CC_''||SV.AGENCYID
		ELSE SV.AGENCYID END AS SYSTEM_CODE,
	
	NVL(CAD.COORDINATORID::STRING, ''Unknown-'' || NVL(SV.AGENCYID, ''S'')) AS SUPERVISOR_CODE,
	NULL AS INVOICE_ID,
	NULL AS CHEQUE_NUMBER,
	CASE WHEN SV.STATUS IN (''02'',''03'',''04'') AND SV.VERIFICATIONTYPE = ''Auto'' THEN 1 ELSE 0 END AS CLEAN_SHIFT_FLAG,
	STATUS.SCHEDULE_STATUS_CODE, STATUS.SCHEDULE_STATUS_NAME,STATUS.SCHEDULE_STATUS_DESCRIPTION,
	STATUS.VISIT_STATUS_CODE, STATUS.VISIT_STATUS_NAME, STATUS.VISIT_STATUS_DESCRIPTION,
	STATUS.INVOICE_STATUS_CODE, STATUS.INVOICE_STATUS_NAME, STATUS.INVOICE_STATUS_DESCRIPTION,
	STATUS.PAYROLL_STATUS_CODE, STATUS.PAYROLL_STATUS_NAME, STATUS.PAYROLL_STATUS_DESCRIPTION,
	NULL AS CANCEL_REASON_CODE,
	NULL AS CANCEL_REASON_DESCRIPTION,
	sch.CANCELREASONNOTES AS CANCEL_REASON_NOTES,
    CASE WHEN sch.EXCEPTIONCODE IS NOT NULL AND sch.EXCEPTIONCODE <>'''' THEN ''YES'' ELSE ''NO'' END AS EXCEPTION_REASON_INDICATOR,
    sch.RESOLUTIONCODE AS RESOLUTION_CODE,
    NULL AS RESOLUTION_DESCRIPTION,
	sch.REJECTIONCODE AS REJECTION_CODE,
	r.DESCRIPTION AS REJECTION_DESCRIPTION,
	SV.SERVICEID AS BILL_CODE,
	COALESCE((ca.bill_rate * IFF(ca.unittype=5,4,1)),avg_bill_rate_ca.BILL_RATE) as Bill_Rate,
	--COALESCE(ca.bill_rate,avg_bill_rate_ca.BILL_RATE) as Bill_Rate,											--- Changed old logic to updated logic from Merge proc below
	SV.EVVDURATION AS BILL_UNITS_SERVED,
	U.UNITTYPE AS BILL_UNIT_TYPE,
	NULL AS OVERHEAD_RATE,
	SV.SCHEDULEDTIMEIN AS SCHEDULE_TIMEIN,
	SV.SCHEDULEDTIMEOUT AS SCHEDULE_TIMEOUT,
	SV.SCHEDULEDDURATION AS SCHEDULE_DURATION,
	SV.EVVTIMEIN AS ACTUAL_TIMEIN,
	SV.EVVTIMEOUT AS ACTUAL_TIMEOUT,
	SV.EVVDURATION AS ACTUAL_DURATION, --NO RECORD WITH DURATION NULL
	NULL AS ADJUSTED_TIMEIN,
	NULL AS ADJUSTED_TIMEOUT,
	NULL AS ADJUSTED_DURATION,
	SV.EVVDURATION AS HOURS_SERVED, 
	NULL AS COMMENTS,
	NULL AS IS_EVV_FLAG,
	NULL AS TIMESHEET_TYPE,
	NULL AS TRACKING_ID,
   --  ETL Fields
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
    :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
    CURRENT_USER as ETL_INSERTED_BY ,
    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
    CURRENT_USER as ETL_LAST_UPDATED_BY,
    0 as ETL_DELETED_FLAG,
    status.CONFIRMED_FLAG AS confirmed_flag
FROM DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.SANDATAVISITS SV
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.EXTERNALIDS EID
	ON EID.DBNAME = ''PA'' AND EID.TYP = ''L'' AND EID.EXTID = SV.LOCATIONID 
LEFT JOIN EMPLOYEE STF ON STF.AGENCYID=SV.AGENCYID AND STF.STAFFAGENCYID= SV.STAFFAGENCYID
--LEFT JOIN HAH.DIM_EMPLOYEE E
	--ON E.SYSTEM_CODE = SV.AGENCYID AND SV.SCHEDULEDATE >= E.EFFECTIVE_FROM_DATE AND SV.SCHEDULEDATE < E.EFFECTIVE_TO_DATE  AND E.EMPLOYEE_ID = SV.STAFFAGENCYID
LEFT JOIN CLIENT C ON C.AGENCYID = SV.AGENCYID AND C.CLIENTID = SV.CLIENTID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTADMISSIONS CAD
	ON CAD.AGENCYID = SV.AGENCYID AND CAD.ADMISSIONID = SV.ADMISSIONID 																			--- Changed old logic to updated logic from Merge proc below
LEFT JOIN (SELECT AGENCYID,scheduleid,admissionid,avg(rate) as bill_rate, avg(try_to_number(unittype)) AS unittype
	 from DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS 
	 group by AGENCYID,scheduleid,admissionid) ca on
	sv.agencyid = ca.agencyid and sv.scheduleid = ca.scheduleid
	and sv.admissionid = ca.admissionid 
LEFT JOIN avg_bill_rate avg_bill_rate_ca on
SV.agencyid = avg_bill_rate_ca.agencyid 
and SV.admissionid = avg_bill_rate_ca.admissionid
LEFT JOIN UNIT_TYPE U ON SV.AGENCYID= U.AGENCYID AND SV.SCHEDULEID = U.SCHEDULEID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES sch ON SV.AGENCYID = sch.AGENCYID AND SV.SCHEDULEID = sch.SCHEDULEID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_REJECTIONCODES r ON sch.REJECTIONCODE = r.code AND sch.agencyid = r.AGENCYID
LEFT JOIN DERIVED_STATUS DSTATUS ON SV.AGENCYID = DSTATUS.AGENCYID AND SV.SCHEDULEID = DSTATUS.SCHEDULEID
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_VISIT_STATUS_MAPPING STATUS ON DSTATUS.VISIT_STATUS_KEY = STATUS.VISIT_STATUS_KEY
--LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_VISIT_STATUS_MAPPING STATUS ON SV.AGENCYID = STATUS.system_code AND DSTATUS.DERIVED_STATUS = STATUS.DERIVED_DISC_STATUS AND STATUS.SOURCE_SYSTEM_ID=4
LEFT JOIN scheduled_employee SEMP ON SV.AGENCYID = SEMP.AGENCYID AND SV.SCHEDULEID = SEMP.SCHEDULEID
WHERE SV.AGENCYID = ''8485'' 
AND NVL(SV.STAFFAGENCYID,'''') <> '''' AND SV.CLIENTID IS NOT NULL
	AND NVL(SV.ADMISSIONTYPE, '''') <> '''' AND LEN(NVL(SV.STATUS,'''')) <= 2 -- Exclude (7) bad data records
    AND SV.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz;


MERGE INTO dw_prod."STAGE".SANDATAIMPORT_FACT_VISIT_FULL_LOAD_TEST AS TARGET USING ( 
WITH clu as (
	    select
	           (CASE WHEN try_to_numeric(OTHERID) is null AND try_to_numeric(CUSTOMID) is null THEN -1
	                WHEN try_to_numeric(OTHERID) is not null AND try_to_numeric(CUSTOMID) is null THEN OTHERID
	                WHEN try_to_numeric(CUSTOMID) is not null AND try_to_numeric(OTHERID) is null THEN CUSTOMID
	                ELSE coalesce(OTHERID, CUSTOMID)
	            END)::INTEGER as DF_CLIENT_NUMBER,
	           AGENCYID,
	           max(CLIENTID) AS CLIENTID
	    from DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTS
	    group by 1,2
	),
	max_client as (
	    select DF_CLIENT_NUMBER,
	            max(CLIENTID) AS CLIENTID
	    from clu
	    GROUP BY 1
	    ),
	avg_bill_rate as (
		SELECT agencyid,admissionid,AVG(RATE) as BILL_RATE 
		FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS
		GROUP BY agencyid,admissionid),
	unit_type AS (
		SELECT * FROM (SELECT row_number() OVER (PARTITION BY SCHEDULEID ORDER BY rate desc) rn,AGENCYID ,SCHEDULEID, 
		CASE UNITTYPE WHEN ''01'' THEN ''Hourly'' WHEN ''02'' THEN ''Visit'' WHEN ''05'' THEN ''Hourly'' WHEN ''06'' THEN ''Per Diem'' 
		else NULL END AS UNITTYPE  
		from DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS 
		WHERE AGENCYID =''8485'' AND RATE NOT IN (0.00, 0.01) AND (UNITTYPE IS NOT NULL OR UNITTYPE <>'''')) WHERE rn=1 
		)
,scheduled_employee AS (
   SELECT * FROM (SELECT ROW_NUMBER () OVER (PARTITION BY SV.AGENCYID ,SV.SCHEDULEID ORDER BY ETL_LAST_UPDATED_DATE DESC) AS rno,
   SV.AGENCYID ,SV.SCHEDULEID ,SV.EVENTSTATUS, SV.STAFFAGENCYID  
   FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.HIST_SANDATA_VISITS SV WHERE SV.AGENCYID =''8485'' AND SV.EVENTSTATUS IN(''01'')) WHERE rno=1)
,DERIVED_STATUS AS (
	SELECT SV.AGENCYID ,SV.SCHEDULEID, CASE WHEN SV.EVENTSTATUS =''01'' AND SV.STAFFAGENCYID IS NULL AND SV.DATE > CURRENT_DATE() THEN ''01OPENFUTURE'' 
		 WHEN SV.EVENTSTATUS =''01'' AND SV.STAFFAGENCYID IS NOT NULL AND SV.DATE > CURRENT_DATE() THEN ''01FUTURE''
		 WHEN SV.EVENTSTATUS =''01'' AND SV.STAFFAGENCYID IS NULL AND SV.DATE <= CURRENT_DATE() THEN ''01OPEN'' 
		 WHEN SV.EVENTSTATUS =''01'' AND SV.STAFFAGENCYID IS NOT NULL AND SV.DATE <= CURRENT_DATE() THEN ''01''
	ELSE SV.EVENTSTATUS END AS DERIVED_STATUS 
	,md5(4 ||''-''||''8485''||''-''||nvl(DERIVED_STATUS,''S'')) AS VISIT_STATUS_KEY
	FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_VISITS SV WHERE AGENCYID =''8485'' --AND EVENTSTATUS=''01''
   ),
EMPLOYEE AS 
(
	SELECT * FROM
	(
		SELECT STAFFAGENCYID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.EMPLOYEE_MASTER_LIST
        WHERE AGENCYID=8485
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT STAFFAGENCYID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.EMPLOYEE_MATCH_LIST
		WHERE STAFFAGENCYID NOT IN (SELECT STAFFAGENCYID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.EMPLOYEE_MASTER_LIST ) 
        AND AGENCYID=8485
	) 
), CLIENT AS
(
	SELECT * FROM
	(
		SELECT CLIENTID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.CLIENT_MASTER_LIST
        WHERE AGENCYID=8485 
	)
	UNION
	SELECT * FROM
	(
		SELECT DISTINCT CLIENTID, MASTER_ID, AGENCYID
		FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.CLIENT_MATCH_LIST
		WHERE CLIENTID NOT IN (SELECT CLIENTID FROM DISC_DEDUPE_${var.SF_ENVIRONMENT}.SANDATAIMPORT.CLIENT_MASTER_LIST ) 
        AND AGENCYID=8485
	))
	SELECT DISTINCT
		
		CASE WHEN F.SERVICEID = ''CARECO''	
		THEN MD5(''CC_''||f.agencyID || ''-'' || f.scheduleid || ''-'' || ''SANDATAIMPORT'') 
		ELSE MD5(f.agencyID || ''-'' || f.scheduleid || ''-'' || ''SANDATAIMPORT'')
		END AS VISIT_KEY,
		
	    f."DATE" AS REPORT_DATE,  --BK
	    md5(nvl(f.agencyID,''S'') || ''-'' || nvl(f.LocationId,'''') || ''-'' ||  ''SANDATAIMPORT'') AS BRANCH_KEY,
	   COALESCE( md5( CL.AGENCYID|| ''-'' ||  CL.MASTER_ID || ''-''  ||  ''SANDATAIMPORT'' ), md5(nvl(CL.agencyID,''S'')|| ''-'' ||  coalesce(CL.MASTER_ID,-1) || ''-''  ||  ''SANDATAIMPORT'' )) AS CLIENT_KEY,
	    
		CASE WHEN F.SERVICEID = ''CARECO''	
		THEN md5(nvl(''CC_''||f.agencyID,''S'') || ''-'' || f.ClientAdmitType || ''-''  ||  ''SANDATAIMPORT'')
		ELSE md5(nvl(f.agencyID,''S'') || ''-'' || f.ClientAdmitType || ''-''  ||  ''SANDATAIMPORT'')
		END AS   CONTRACT_KEY,
		
		md5(nvl(f.agencyID,''S'') || ''-'' || upper(TRIM(SEMP.STAFFAGENCYID)) || ''-'' || ''1900-01-01'' || ''-'' || ''SANDATAIMPORT'') AS SCHEDULED_EMPLOYEE_KEY,
	    COALESCE(MD5(NVL(stf.AGENCYID,''S'') || ''-'' || UPPER(COALESCE(TRY_CAST(STF.MASTER_ID AS INT)::STRING,TRIM(STF.MASTER_ID))) || ''-'' || ''1900-01-01'' || ''-'' || ''SANDATAIMPORT''),
 md5(nvl(STF.agencyID,''S'') || ''-'' || upper(NVL(TRIM(STF.MASTER_ID), '''')) || ''-'' || ''1900-01-01'' || ''-'' || ''SANDATAIMPORT'')) AS EMPLOYEE_KEY,
	    4 AS SOURCE_SYSTEM_ID,
	    md5(nvl(f.agencyID,''S'') || ''-''  || nvl(ClientAdmissions.CoordinatorID::string, ''Unknown-'' || nvl(f.agencyID,''S'')) || ''-''  || ''SANDATAIMPORT'') AS SUPERVISOR_KEY,
		NULL AS INVOICE_KEY,
		NULL AS PAYROLL_KEY,
	    --Business Keys
	    f."DATE" AS SERVICE_DATE,
		dateadd(''day'',4,date_trunc(''week'',CAST(f."DATE" as date))) AS PAYROLL_DATE,
		nvl(BRANCH.BRANCH_NAME,f.LocationId) AS BRANCH_NAME,
	    --coalesce(ClientAdmissions.CLIENTID,clu.CLIENTID,mc.CLIENTID) AS CLIENT_NUMBER, --BK
		coalesce(CL.MASTER_ID, -1) AS CLIENT_NUMBER, --BK
		f.ClientAdmitType AS CONTRACT_CODE,  --BK
		SEMP.STAFFAGENCYID AS SCHEDULED_EMPLOYEE_ID,
		NVL(f.STAFFAGENCYID, ''-1'') AS EMPLOYEE_ID,
	    
		
		CASE WHEN F.SERVICEID = ''CARECO''	
		THEN ''CC_''||f.agencyID
		ELSE f.agencyID
		END AS SYSTEM_CODE	, --BK
		
		
		nvl(ClientAdmissions.CoordinatorID::string, ''Unknown-'' || nvl(f.agencyID,''S'')) AS SUPERVISOR_CODE,
		NULL AS INVOICE_ID,
		NULL AS CHEQUE_NUMBER,
	    CASE WHEN (sch.STATUS IN (''02'', ''03'', ''04'') AND sch.VERIFICATIONTYPE = ''Auto'') THEN 1 ELSE 0 END AS CLEAN_SHIFT_FLAG,
	STATUS.SCHEDULE_STATUS_CODE,STATUS.SCHEDULE_STATUS_NAME,STATUS.SCHEDULE_STATUS_DESCRIPTION,
	STATUS.VISIT_STATUS_CODE, ---added generalized status codes FOR ALL SOURCE systems.
	STATUS.VISIT_STATUS_NAME,STATUS.VISIT_STATUS_DESCRIPTION,
    STATUS.INVOICE_STATUS_CODE,STATUS.INVOICE_STATUS_NAME,STATUS.INVOICE_STATUS_DESCRIPTION,								   
	STATUS.PAYROLL_STATUS_CODE,STATUS.PAYROLL_STATUS_NAME,STATUS.PAYROLL_STATUS_DESCRIPTION,
		F.REASONCODE as CANCEL_REASON_CODE,     --    COMMENT ''Reason code for schedule cancellation'', 	-- comes from Sandata
		F.REASONCODEDESCRIPTION as CANCEL_REASON_DESCRIPTION ,
		sch.CANCELREASONNOTES as CANCEL_REASON_NOTES, 	
	    CASE WHEN sch.EXCEPTIONCODE IS NOT NULL AND sch.EXCEPTIONCODE <>'''' THEN ''YES'' ELSE ''NO'' END AS EXCEPTION_REASON_INDICATOR,
	    SCH.RESOLUTIONCODE AS RESOLUTION_CODE,
	    NULL AS RESOLUTION_DESCRIPTION,
	    SCH.REJECTIONCODE AS REJECTION_CODE,							-- comes from Sandata
		r.DESCRIPTION as REJECTION_DESCRIPTION,        							-- comes from Sandata
	    TS.BILLCODE as BILL_CODE,                    							-- comes from DFTimeSheets
		COALESCE((ca.bill_rate * IFF(ca.unittype=5,4,1)),avg_bill_rate_ca.BILL_RATE) as Bill_Rate,
		NVL(F.ADJUSTEDDURATION,F.ACTUALDURATION) AS BILL_UNITS_SERVED,
		U.UNITTYPE AS BILL_UNIT_TYPE,
	    NULL AS OVERHEAD_RATE,
		F.PROPOSEDSTART AS SCHEDULE_TIMEIN,
		F.PROPOSEDEND AS SCHEDULE_TIMEOUT,
		F.PROPOSEDDURATION AS SCHEDULE_DURATION,
		F.TIMEIN AS ACTUAL_TIMEIN,
		F.TIMEOUT AS ACTUAL_TIMEOUT,
		F.ACTUALDURATION AS ACTUAL_DURATION,
		F.ADJUSTEDTIMEIN AS ADJUSTED_TIMEIN,
		F.ADJUSTEDTIMEOUT AS ADJUSTED_TIMEOUT,
		F.ADJUSTEDDURATION AS ADJUSTED_DURATION,
	    NVL(F.ADJUSTEDDURATION,F.ACTUALDURATION) AS HOURS_SERVED,
	    F.COMMENTS AS COMMENTS,  
		TS.ISEVV as IS_EVV_FLAG,                  --COMMENT ''Record came from EVV feed'',			-- comes from DFTimeSheets
		TS.TIMESHEETTYPE as TIMESHEET_TYPE,             --  COMMENT ''R = Regular, U = Make up, M = ?'',		-- comes from DFTimeSheets
		TS.TRACKINGID as TRACKING_ID,  
		--  ETL Fields
        :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,
	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,
	    CURRENT_USER as ETL_INSERTED_BY ,
	    convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE,
	    CURRENT_USER as ETL_LAST_UPDATED_BY,
	    0 as ETL_DELETED_FLAG,
	    STATUS.CONFIRMED_FLAG AS CONFIRMED_FLAG
	FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_VISITS f
	left join clu clu
	    on (CASE WHEN try_to_numeric(F.CLIENTOTHERID) is null THEN -1
	            ELSE f.CLIENTOTHERID
	        END)::INTEGER = clu.DF_CLIENT_NUMBER
	    and f.AGENCYID = clu.AGENCYID
	left join max_client mc
	    on (CASE WHEN try_to_numeric(f.CLIENTOTHERID) is null THEN -1
	            ELSE f.CLIENTOTHERID
	        END)::INTEGER = mc.DF_CLIENT_NUMBER
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTADMISSIONS ClientAdmissions
	    ON ClientAdmissions.agencyID = f.AgencyId
	    AND ClientAdmissions.admissionID = f.AdmissionId
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFTIMESHEETS TS ON TS.DBNAME = CLU.AGENCYID
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_BRANCH AS BRANCH ON BRANCH.SYSTEM_CODE::STRING = f.AGENCYID AND BRANCH.OFFICE_CODE = f.LOCATIONID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES sch ON f.AGENCYID = sch.AGENCYID AND f.SCHEDULEID = sch.SCHEDULEID
	LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_REJECTIONCODES r ON sch.REJECTIONCODE = r.code AND sch.agencyid = r.AGENCYID
	LEFT JOIN 
	(SELECT AGENCYID,avg(try_to_number(unittype)) AS unittype,scheduleid,admissionid,avg(rate) as bill_rate
	 from DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULESCLIENTS 
	 group by AGENCYID,scheduleid,admissionid) ca on
	f.agencyid = ca.agencyid and f.scheduleid = ca.scheduleid
	and f.admissionid = ca.admissionid 
	LEFT JOIN avg_bill_rate avg_bill_rate_ca on
	f.agencyid = avg_bill_rate_ca.agencyid 
	and f.admissionid = avg_bill_rate_ca.admissionid 
	LEFT JOIN UNIT_TYPE U ON F.AGENCYID= U.AGENCYID AND F.SCHEDULEID = U.SCHEDULEID 
--	LEFT JOIN HAH.DIM_EMPLOYEE e
--		ON f.STAFFAGENCYID = e.EMPLOYEE_ID
--		AND e.SYSTEM_CODE = nvl(f.agencyID,''S'')
--	    AND f.Date >= e.EFFECTIVE_FROM_DATE
--	    AND f.Date < e.EFFECTIVE_TO_DATE
    LEFT JOIN EMPLOYEE STF ON STF.AGENCYID=f.AGENCYID AND STF.STAFFAGENCYID= f.STAFFAGENCYID	
	LEFT JOIN DERIVED_STATUS DSTATUS ON F.AGENCYID = DSTATUS.AGENCYID AND F.SCHEDULEID = DSTATUS.SCHEDULEID
	LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_VISIT_STATUS_MAPPING STATUS ON DSTATUS.VISIT_STATUS_KEY = STATUS.VISIT_STATUS_KEY
	--LEFT JOIN HAH.DIM_VISIT_STATUS_MAPPING STATUS ON F.AGENCYID = STATUS.system_code AND DSTATUS.DERIVED_STATUS = STATUS.DERIVED_DISC_STATUS AND STATUS.SOURCE_SYSTEM_ID=4
	LEFT JOIN scheduled_employee SEMP ON F.AGENCYID = SEMP.AGENCYID AND F.SCHEDULEID = SEMP.SCHEDULEID
    LEFT JOIN CLIENT CL ON CL.AGENCYID= NVL(clu.AGENCYID, ClientAdmissions.AGENCYID)
                         AND CL.CLIENTID = coalesce(ClientAdmissions.CLIENTID,clu.CLIENTID,mc.CLIENTID)  
	WHERE f.agencyID = 8485--and f.ADJUSTEDTIMEOUT IS NOT NULL
	AND (f.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz
	OR sch.ETL_LAST_UPDATED_DATE >= :STR_CDC_START::timestamp_ntz
	AND f.STAFFAGENCYID <> '''''''') --remove test records
	GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40
	,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70
	--HAVING SUM(f.ADJUSTEDDURATION) > 0
	) AS SOURCE ON SOURCE.VISIT_KEY = TARGET.VISIT_KEY
WHEN MATCHED THEN 
	UPDATE SET
		CLIENT_KEY = IFF(TARGET.CLIENT_KEY IS NULL,SOURCE.CLIENT_KEY,TARGET.CLIENT_KEY),
		PAYROLL_DATE = SOURCE.PAYROLL_DATE,
		CLIENT_NUMBER = IFF(TARGET.CLIENT_KEY IS NULL,SOURCE.CLIENT_NUMBER,TARGET.CLIENT_NUMBER),
		CANCEL_REASON_CODE = SOURCE.CANCEL_REASON_CODE,
		CANCEL_REASON_DESCRIPTION = SOURCE.CANCEL_REASON_DESCRIPTION,
		ADJUSTED_TIMEIN = SOURCE.ADJUSTED_TIMEIN,
		ADJUSTED_TIMEOUT = SOURCE.ADJUSTED_TIMEOUT,
		ADJUSTED_DURATION = SOURCE.ADJUSTED_DURATION,
		HOURS_SERVED = IFF(TARGET.HOURS_SERVED =0, SOURCE.HOURS_SERVED, TARGET.HOURS_SERVED),
		BILL_UNITS_SERVED = IFF(TARGET.BILL_UNITS_SERVED=0, SOURCE.BILL_UNITS_SERVED, TARGET.BILL_UNITS_SERVED),
		COMMENTS = SOURCE.COMMENTS,
		IS_EVV_FLAG = SOURCE.IS_EVV_FLAG,
		TIMESHEET_TYPE = SOURCE.TIMESHEET_TYPE,
		TRACKING_ID = SOURCE.TRACKING_ID
WHEN NOT MATCHED THEN
	INSERT (VISIT_KEY,
		REPORT_DATE,
		BRANCH_KEY,
		CLIENT_KEY,
		CONTRACT_KEY,
		SCHEDULED_EMPLOYEE_KEY,
		EMPLOYEE_KEY,
		SOURCE_SYSTEM_ID,
		SUPERVISOR_KEY,
		INVOICE_KEY,
		PAYROLL_KEY,
		SERVICE_DATE,
		PAYROLL_DATE,
		BRANCH_NAME,
		CLIENT_NUMBER,
		CONTRACT_CODE,
		SCHEDULED_EMPLOYEE_ID,
		EMPLOYEE_ID,
		SYSTEM_CODE,
		SUPERVISOR_CODE,
		INVOICE_ID,
		CHEQUE_NUMBER,
		CLEAN_SHIFT_FLAG,
		SCHEDULE_STATUS_CODE,
		SCHEDULE_STATUS_NAME,
		SCHEDULE_STATUS_DESCRIPTION,
		VISIT_STATUS_CODE,
		VISIT_STATUS_NAME,
		VISIT_STATUS_DESCRIPTION,
		INVOICE_STATUS_CODE,
		INVOICE_STATUS_NAME,
		INVOICE_STATUS_DESCRIPTION,
		PAYROLL_STATUS_CODE,
		PAYROLL_STATUS_NAME,
		PAYROLL_STATUS_DESCRIPTION,
		CANCEL_REASON_CODE,
		CANCEL_REASON_DESCRIPTION,
		CANCEL_REASON_NOTES,
		EXCEPTION_REASON_INDICATOR,
		RESOLUTION_CODE,
		RESOLUTION_DESCRIPTION,
		REJECTION_CODE,
		REJECTION_DESCRIPTION,
		BILL_CODE,
		BILL_RATE,
		BILL_UNITS_SERVED,
		BILL_UNIT_TYPE,
		OVERHEAD_RATE,
		SCHEDULE_TIMEIN,
		SCHEDULE_TIMEOUT,
		SCHEDULE_DURATION,
		ACTUAL_TIMEIN,
		ACTUAL_TIMEOUT,
		ACTUAL_DURATION,
		ADJUSTED_TIMEIN,
		ADJUSTED_TIMEOUT,
		ADJUSTED_DURATION,
		HOURS_SERVED,
		COMMENTS,
		IS_EVV_FLAG,
		TIMESHEET_TYPE,
		TRACKING_ID,
		ETL_TASK_KEY,
		ETL_INSERTED_TASK_KEY,
		ETL_INSERTED_DATE,
		ETL_INSERTED_BY,
		ETL_LAST_UPDATED_DATE,
		ETL_LAST_UPDATED_BY,
		ETL_DELETED_FLAG,
		CONFIRMED_FLAG)
	VALUES (SOURCE.VISIT_KEY,
		SOURCE.REPORT_DATE,
		SOURCE.BRANCH_KEY,
		SOURCE.CLIENT_KEY,
		SOURCE.CONTRACT_KEY,
		SOURCE.SCHEDULED_EMPLOYEE_KEY,
		SOURCE.EMPLOYEE_KEY,
		SOURCE.SOURCE_SYSTEM_ID,
		SOURCE.SUPERVISOR_KEY,
		SOURCE.INVOICE_KEY,
		SOURCE.PAYROLL_KEY,
		SOURCE.SERVICE_DATE,
		SOURCE.PAYROLL_DATE,
		SOURCE.BRANCH_NAME,
		SOURCE.CLIENT_NUMBER,
		SOURCE.CONTRACT_CODE,
		SOURCE.SCHEDULED_EMPLOYEE_ID,
		SOURCE.EMPLOYEE_ID,
		SOURCE.SYSTEM_CODE,
		SOURCE.SUPERVISOR_CODE,
		SOURCE.INVOICE_ID,
		SOURCE.CHEQUE_NUMBER,
		SOURCE.CLEAN_SHIFT_FLAG,
		SOURCE.SCHEDULE_STATUS_CODE,
		SOURCE.SCHEDULE_STATUS_NAME,
		SOURCE.SCHEDULE_STATUS_DESCRIPTION,
		SOURCE.VISIT_STATUS_CODE,
		SOURCE.VISIT_STATUS_NAME,
		SOURCE.VISIT_STATUS_DESCRIPTION,
		SOURCE.INVOICE_STATUS_CODE,
		SOURCE.INVOICE_STATUS_NAME,
		SOURCE.INVOICE_STATUS_DESCRIPTION,
		SOURCE.PAYROLL_STATUS_CODE,
		SOURCE.PAYROLL_STATUS_NAME,
		SOURCE.PAYROLL_STATUS_DESCRIPTION,
		SOURCE.CANCEL_REASON_CODE,
		SOURCE.CANCEL_REASON_DESCRIPTION,
		SOURCE.CANCEL_REASON_NOTES,
		SOURCE.EXCEPTION_REASON_INDICATOR,
		SOURCE.RESOLUTION_CODE,
		SOURCE.RESOLUTION_DESCRIPTION,
		SOURCE.REJECTION_CODE,
		SOURCE.REJECTION_DESCRIPTION,
		SOURCE.BILL_CODE,
		SOURCE.BILL_RATE,
		SOURCE.BILL_UNITS_SERVED,
		SOURCE.BILL_UNIT_TYPE,
		SOURCE.OVERHEAD_RATE,
		SOURCE.SCHEDULE_TIMEIN,
		SOURCE.SCHEDULE_TIMEOUT,
		SOURCE.SCHEDULE_DURATION,
		SOURCE.ACTUAL_TIMEIN,
		SOURCE.ACTUAL_TIMEOUT,
		SOURCE.ACTUAL_DURATION,
		SOURCE.ADJUSTED_TIMEIN,
		SOURCE.ADJUSTED_TIMEOUT,
		SOURCE.ADJUSTED_DURATION,
		SOURCE.HOURS_SERVED,
		SOURCE.COMMENTS,
		SOURCE.IS_EVV_FLAG,
		SOURCE.TIMESHEET_TYPE,
		SOURCE.TRACKING_ID,
		SOURCE.ETL_TASK_KEY,
		SOURCE.ETL_INSERTED_TASK_KEY,
		SOURCE.ETL_INSERTED_DATE,
		SOURCE.ETL_INSERTED_BY,
		SOURCE.ETL_LAST_UPDATED_DATE,
		SOURCE.ETL_LAST_UPDATED_BY,
		SOURCE.ETL_DELETED_FLAG,
		SOURCE.CONFIRMED_FLAG);
		
    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

    return return_result;
END;
    
 EOT
}

