resource "snowflake_view" "DW_STAGE_MI_DF_VISIT_CLAIMS" {
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "STAGE"
	name = "MI_DF_VISIT_CLAIMS"
	statement = <<-SQL
	 WITH VISIT_DETROIT AS 
(
WITH SCHEDULE_PAYERS AS
	(
SELECT DISTINCT SCHCP_SCHEDULEID
	,FIRST_VALUE(SCHCP_PAYERID) OVER (PARTITION BY SCHCP_SCHEDULEID ORDER BY SCHCP_SEQNO DESC) SCHCP_PAYERID
	,FIRST_VALUE(COALESCE(ETL_LAST_UPDATED_DATE, '1/1/1900')) OVER (PARTITION BY SCHCP_SCHEDULEID ORDER BY SCHCP_SEQNO DESC) ETL_LAST_UPDATED_DATE
	FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SCHEDULEPAYERS 
	)
, CLIENT_PAYERS AS
	(
		SELECT DISTINCT CLIPAY_CLIENTID
		,FIRST_VALUE(CLIPAY_PAYERID) OVER (PARTITION BY CLIPAY_CLIENTID ORDER BY CLIPAY_SEQNO DESC) CLIPAY_PAYERID
		,FIRST_VALUE(COALESCE(ETL_LAST_UPDATED_DATE, '1/1/1900')) OVER (PARTITION BY CLIPAY_CLIENTID ORDER BY CLIPAY_SEQNO DESC) ETL_LAST_UPDATED_DATE
		FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_CLIENTPAYERS 
	)
, PAYER_BRANCH AS
		 (
			 SELECT  DISTINCT PAYBR_BRANCH_ID 
			,FIRST_VALUE(PAYBR_PAYERID) OVER (PARTITION BY PAYBR_BRANCH_ID ORDER BY PAYBR_CREATEDDATE DESC) PAYBR_PAYERID
			,FIRST_VALUE(COALESCE(ETL_LAST_UPDATED_DATE, '1/1/1900')) OVER (PARTITION BY PAYBR_BRANCH_ID ORDER BY PAYBR_CREATEDDATE DESC) ETL_LAST_UPDATED_DATE
			FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_PAYERBRANCHES 
		) 	
,ADM_AUTH AS 
		( 
		 SELECT DISTINCT ADM.ADM_ID ,ADM.ADM_SUPERVISORID ,ADM.ADM_COORDINATORID ,ADM.ADM_INTERNALCASEMGRID ,AUTH_PAYERID,
		 AUTH_BEGINDATE, AUTH_ENDDATE ,AUTH_SERVICECODEID 
		 FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_ADMISSIONS ADM 
		 LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_AUTHORIZATION AUTH ON ADM.ADM_ID =AUTH_ADMISSIONID
		)	
, INVOICE_PAYERS AS
	(	
		SELECT DISTINCT INVD_SCHEDULEID
		,FIRST_VALUE(INVD_SCHEDULEPAYERID) OVER(PARTITION BY INVD_SCHEDULEID ORDER BY INVH_INVOICEDATE DESC) INV_PAYERID
		,FIRST_VALUE(INH.ETL_LAST_UPDATED_DATE) OVER(PARTITION BY INVD_SCHEDULEID ORDER BY INVH_INVOICEDATE DESC) ETL_LAST_UPDATED_DATE
		FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_INVOICEHEADER INH 
	 	JOIN  DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_INVOICEDETAILS IND ON INH.INVH_ID = IND.INVD_INVHID 
	)
, BILL_RATES AS
	(
		SELECT * FROM 
		(
		SELECT SCHEDULEID,starttime, endtime, unittype,units,actualrate
		,ROW_NUMBER() OVER (PARTITION  BY SCHEDULEID ORDER BY RBS_ID DESC) AS ROWRBS_ID 
		,MAX(COALESCE(ETL_LAST_UPDATED_DATE, '1/1/1900')) OVER (PARTITION  BY SCHEDULEID ORDER BY RBS_ID DESC)  ETL_LAST_UPDATED_DATE
		FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_RATEBILLSHIFTS 
		) WHERE ROWRBS_ID =1
	)
SELECT DISTINCT
	MD5('MATRIXCARE' || '-' || SCH_ID || '-' || 'MATRIXCARE') AS VISIT_KEY
   ,TO_DATE(SCH_STARTTIME) REPORT_DATE
   ,COALESCE (BRANCH_MAPPING.CONVERGED_BRANCH_KEY, MD5('MATRIXCARE' || '-' || SCH_BRANCHID || '-' || 'MATRIXCARE' )) BRANCH_KEY
   ,MD5( 'MATRIXCARE' || '-' || NVL(COALESCE (CLIENT_MAPPING.MASTER_CLIENT_NUMBER::STRING,SCH_CLIENTID::STRING),'') || '-' || 'MATRIXCARE') CLIENT_KEY
   ,MD5('MATRIXCARE' || '-' || COALESCE (SCHPAYER.SCHCP_PAYERID,CP.CLIPAY_PAYERID,INV.INV_PAYERID,ADM.AUTH_PAYERID,PB.PAYBR_PAYERID) || '-' || SCH_SERVICECODEID || '-' || 'MATRIXCARE' ) CONTRACT_KEY
   ,MD5( 'MATRIXCARE' || '-' || NVL(COALESCE (EMPLOYEE_MAPPING.MASTER_EMPLOYEE_NUMBER,SCH_CAREGIVERID::STRING),'') || '-' || 'MATRIXCARE') EMPLOYEE_KEY
   ,7 AS SOURCE_SYSTEM_ID
   ,MD5('MATRIXCARE' || '-' || COALESCE(ADM.ADM_SUPERVISORID::STRING, ADM.ADM_COORDINATORID::STRING, ADM.ADM_INTERNALCASEMGRID::STRING, 'Unknown')|| '-' || 'MATRIXCARE' ) SUPERVISOR_KEY
   ,TO_DATE(SCH_STARTTIME) SERVICE_DATE
   ,TO_DATE(SCH_PAYDATE) AS PAYROLL_DATE
   ,UPPER(TRIM(COALESCE(BRANCH_MAPPING.CONVERGED_OFFICE_NAME,BRANCH.BR_NAME))) AS BRANCH_NAME
   ,COALESCE(CLIENT_MAPPING.MASTER_CLIENT_NUMBER,SCH_CLIENTID) AS CLIENT_NUMBER
   ,COALESCE (SCHPAYER.SCHCP_PAYERID,CP.CLIPAY_PAYERID,INV.INV_PAYERID,ADM.AUTH_PAYERID,PB.PAYBR_PAYERID) AS CONTRACT_CODE
   ,COALESCE(EMPLOYEE_MAPPING.MASTER_EMPLOYEE_NUMBER, SCH_CAREGIVERID) AS EMPLOYEE_ID
   ,care.CAR_FirstName ||' '|| care.CAR_LastName AS Emp_Name
   ,'MATRIXCARE' AS SYSTEM_CODE
   ,COALESCE(ADM.ADM_SUPERVISORID::STRING, ADM.ADM_COORDINATORID::STRING, ADM.ADM_INTERNALCASEMGRID::STRING) AS SUPERVISOR_CODE
   ,1 AS CLEAN_SHIFT_FLAG
   ,CASE WHEN SCHSTATUS.SCHST_NAME = 'C' THEN '02'
   		 WHEN SCHSTATUS.SCHST_NAME = 'T' THEN '02'
   		 WHEN SCHSTATUS.SCHST_NAME = 'S' THEN '01'
   		 WHEN SCHSTATUS.SCHST_NAME = 'NS' THEN '09'
   		 WHEN SCHSTATUS.SCHST_NAME = 'XCG' THEN '10'
   		 WHEN SCHSTATUS.SCHST_NAME = 'XC' THEN '10'
   		 WHEN SCHSTATUS.SCHST_NAME = 'R' THEN '10'
   		 WHEN SCHSTATUS.SCHST_NAME = 'H' THEN '10'
   		 WHEN SCHSTATUS.SCHST_NAME = 'COR' THEN '09'
   		 WHEN SCHSTATUS.SCHST_NAME = 'NTS' THEN '09'
   		 WHEN SCHSTATUS.SCHST_NAME = 'HOLD' THEN '09'
   		 WHEN SCHSTATUS.SCHST_NAME = 'AVAIL' THEN '09'
   		 WHEN SCHSTATUS.SCHST_NAME = 'TCOR' THEN '09'
   		 WHEN SCHSTATUS.SCHST_NAME = 'OPEN' THEN '01'
   		 WHEN SCHSTATUS.SCHST_NAME = 'XO' THEN '10'
   		 WHEN SCHSTATUS.SCHST_NAME = 'NTS_' THEN '09'
         WHEN SCHSTATUS.SCHST_NAME = 'TH' THEN '02'
   		 WHEN SCHSTATUS.SCHST_NAME = 'CV-19' THEN '10'
   		 ELSE NULL END AS STATUS_CODE
   ,CASE WHEN SCHSTATUS.SCHST_NAME = 'C' THEN 'Confirmed'
   		 WHEN SCHSTATUS.SCHST_NAME = 'T' THEN 'Confirmed'
   		 WHEN SCHSTATUS.SCHST_NAME = 'S' THEN 'Pending'
   		 WHEN SCHSTATUS.SCHST_NAME = 'NS' THEN 'Hold'
   		 WHEN SCHSTATUS.SCHST_NAME = 'XCG' THEN 'Cancelled'
   		 WHEN SCHSTATUS.SCHST_NAME = 'XC' THEN 'Cancelled'
   		 WHEN SCHSTATUS.SCHST_NAME = 'R' THEN 'Cancelled'
   		 WHEN SCHSTATUS.SCHST_NAME = 'H' THEN 'Cancelled'
   		 WHEN SCHSTATUS.SCHST_NAME = 'COR' THEN 'Hold'
   		 WHEN SCHSTATUS.SCHST_NAME = 'NTS' THEN 'Hold'
   		 WHEN SCHSTATUS.SCHST_NAME = 'HOLD' THEN 'Hold'
   		 WHEN SCHSTATUS.SCHST_NAME = 'AVAIL' THEN 'Hold'
   		 WHEN SCHSTATUS.SCHST_NAME = 'TCOR' THEN 'Hold'
   		 WHEN SCHSTATUS.SCHST_NAME = 'OPEN' THEN 'Pending'
   		 WHEN SCHSTATUS.SCHST_NAME = 'XO' THEN 'Cancelled'
   		 WHEN SCHSTATUS.SCHST_NAME = 'NTS_' THEN 'Hold'
    	 WHEN SCHSTATUS.SCHST_NAME = 'TH' THEN 'Confirmed'
   		 WHEN SCHSTATUS.SCHST_NAME = 'CV-19' THEN 'Cancelled'
   		 ELSE NULL END  AS STATUS_DESCRIPTION
    ,NULL as CANCEL_REASON_CODE      
    ,NULL as CANCEL_REASON_DESCRIPTION 
    ,NULL as CANCEL_REASON_NOTES
    ,0 AS EXCEPTION_REASON_FLAG
	,NULL AS RESOLUTION_CODE
    ,NULL AS RESOLUTION_DESCRIPTION
	,NULL AS REJECTION_CODE							
	,NULL as REJECTION_DESCRIPTION 
	,SCH_SERVICECODEID as BILL_CODE
	,CASE WHEN BR.UNITTYPE =0 OR BR.UNITTYPE =1 THEN 0 ELSE  
		CAST(BR.ACTUALRATE*(60/BR.UNITTYPE) AS DECIMAL(18,3)) END AS BILL_RATE --,BR.STARTTIME,BR.ENDTIME,BR.UNITTYPE,BR.UNITS,BR.ACTUALRATE  
	,NULL  AS Overhead_Rate
    ,SCH_STARTTIME AS Start_Time
    ,SCH_ENDTIME AS End_Time    
    ,CASE WHEN SCH.SCH_BILLRATEUNITFLAG =0 THEN CAST(SCH.SCH_PAYUNITS/(60/NULLIF(SCH.SCH_PAYRATEUNITFLAG, 0)) AS DECIMAL(18,3)) ELSE 
    	CAST(SCH.SCH_UNITS/(60/NULLIF(SCH.SCH_BILLRATEUNITFLAG, 0)) AS DECIMAL(18,3)) END AS HOURS_SERVED --,SCH_STARTTIME ,SCH_ENDTIME, SCH_UNITS,SCH_BILLRATEUNITFLAG
    ,SCH_DESCRIPTION  AS COMMENTS                   						
	,NULL  as IS_EVV_FLAG                
	,NULL  as TIMESHEET_TYPE 
	,NULL  as TRACKING_ID  
    ,-1 AS ETL_TASK_KEY
    ,-1 AS ETL_INSERTED_TASK_KEY
    ,convert_timezone('UTC', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE
    ,CURRENT_USER as ETL_INSERTED_BY 
    ,convert_timezone('UTC', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_LAST_UPDATED_DATE
    ,CURRENT_USER as ETL_LAST_UPDATED_BY
    ,0 as ETL_DELETED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SCHEDULES AS SCH
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_SCHEDULESTATUS AS SCHSTATUS ON SCH.SCH_SCHEDULESTATUSID = SCHSTATUS.SCHST_ID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_CAREGIVER AS CARE ON CARE.CAR_ID = SCH.SCH_CAREGIVERID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.MATRIXCARE_MASTER_EMPLOYEE_MAPPING_ALL AS EMPLOYEE_MAPPING ON EMPLOYEE_MAPPING.EMPLOYEE_NUMBER = SCH.SCH_CAREGIVERID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.MATRIXCARE_MASTER_CLIENT_MAPPING_ALL AS CLIENT_MAPPING ON CLIENT_MAPPING.CLIENT_NUMBER = SCH.SCH_CLIENTID 
LEFT JOIN BILL_RATES BR ON BR.SCHEDULEID = SCH.SCH_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.STVHC_T_BRANCHES AS BRANCH ON BRANCH.BR_ID = SCH.SCH_BRANCHID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.MATRIXCARE.MATRIXCARE_MASTER_BRANCH_MAPPING BRANCH_MAPPING ON BRANCH_MAPPING.OFFICE_CODE = SCH.SCH_BRANCHID::STRING AND BRANCH_MAPPING.SOURCE_SYSTEM_ID = 7 AND BRANCH_MAPPING.SYSTEM_CODE = 'MATRIXCARE' 
LEFT JOIN SCHEDULE_PAYERS AS SCHPAYER ON SCH.SCH_ID = SCHPAYER.SCHCP_SCHEDULEID
LEFT JOIN CLIENT_PAYERS CP ON SCH.SCH_CLIENTID = CP.CLIPAY_CLIENTID 
LEFT JOIN PAYER_BRANCH PB ON PB.PAYBR_BRANCH_ID = SCH.SCH_BRANCHID 
LEFT JOIN INVOICE_PAYERS INV ON INV.INVD_SCHEDULEID = SCH.SCH_ID
LEFT JOIN ADM_AUTH ADM ON ADM.ADM_ID = SCH.SCH_ADMISSIONID AND TO_DATE(SCH.SCH_STARTTIME) BETWEEN ADM.AUTH_BEGINDATE 
AND ADM.AUTH_ENDDATE AND SCH.SCH_SERVICECODEID = ADM.AUTH_SERVICECODEID	AND 
COALESCE (SCHPAYER.SCHCP_PAYERID,CP.CLIPAY_PAYERID,INV.INV_PAYERID,PB.PAYBR_PAYERID) = ADM.AUTH_PAYERID
WHERE (SCH.ETL_LAST_UPDATED_DATE >= '1900-01-01'
		OR SCHSTATUS.ETL_LAST_UPDATED_DATE >= '1900-01-01'
		OR BRANCH.ETL_LAST_UPDATED_DATE >= '1900-01-01'
	    OR CARE.ETL_LAST_UPDATED_DATE >= '1900-01-01'
	    OR PB.ETL_LAST_UPDATED_DATE >= '1900-01-01'
	    OR CP.ETL_LAST_UPDATED_DATE >= '1900-01-01'
	    OR SCHPAYER.ETL_LAST_UPDATED_DATE >= '1900-01-01'
	    OR BR.ETL_LAST_UPDATED_DATE >= '1900-01-01'
	    OR INV.ETL_LAST_UPDATED_DATE >= '1900-01-01'
	    OR CLIENT_MAPPING.ETL_LAST_UPDATED_DATE >= '1900-01-01'
		OR EMPLOYEE_MAPPING.ETL_LAST_UPDATED_DATE >= '1900-01-01'
		OR BRANCH_MAPPING.ETL_LAST_UPDATED_DATE >= '1900-01-01'
		)
	AND CASE WHEN SCH.SCH_BILLRATEUNITFLAG =0 THEN CAST(SCH.SCH_PAYUNITS/(60/NULLIF(SCH.SCH_PAYRATEUNITFLAG, 0)) AS DECIMAL(18,3)) ELSE 
    	CAST(SCH.SCH_UNITS/(60/NULLIF(SCH.SCH_BILLRATEUNITFLAG, 0)) AS DECIMAL(18,3)) END > 0
    	),
    	DF_IN_CLIENT AS (
	    	SELECT DISTINCT NULL AS CLIENT_PID, 
			DATAFLEX.CLIENT_KEY AS DATAFLEX_CLIENT_KEY, 
			DATAFLEX.CLIENT_NUMBER AS DATAFLEX_CLIENT_ID,
			FIRST_VALUE(MATRIXCARE.CLIENT_KEY) OVER (PARTITION BY DATAFLEX.CLIENT_KEY ORDER BY MATRIXCARE.CLIENT_NUMBER) AS MATRIXCARE_CLIENT_KEY
		FROM INTEGRATION.DATAFLEX_MATRIXCARE_CLIENT_MAPPING_IN_MI AS DATAFLEX
		JOIN INTEGRATION.DATAFLEX_MATRIXCARE_CLIENT_MAPPING_IN_MI AS MATRIXCARE
			ON MATRIXCARE.MASTER_CLIENT_KEY = DATAFLEX.MASTER_CLIENT_KEY
				AND MATRIXCARE.CLIENT_KEY <> DATAFLEX.CLIENT_KEY
				AND MATRIXCARE.SYSTEM_CODE <> DATAFLEX.SYSTEM_CODE
				AND MATRIXCARE.SOURCE_SYSTEM_ID <> DATAFLEX.SOURCE_SYSTEM_ID
		WHERE DATAFLEX.SOURCE_SYSTEM_ID = 3
	)
 SELECT DISTINCT vis.SERVICE_DATE,
	vis.PAYROLL_DATE,
	vis.BRANCH_NAME,
	vis.CLIENT_NUMBER,
	CLIENT.DATAFLEX_CLIENT_ID,
	EMPLOYEE_MAPPING.DATAFLEX_EMP_ID,
	cl.Client_Name,
	vis.CONTRACT_CODE,
	cn.Contract_Name,
	cn.Payor_Code,
	cn.Payor_Description,
	cn.Revenue_Category,
	cn.Revenue_Subcategory_Name,
	cn.Service_Code_ID,
	srv.Name AS Service_Name,
	srv.Description AS Service_Description,
	vis.EMPLOYEE_ID,
--	VIS.EMPLOYEE_KEY,
    Emp_Name,
	vis.SUPERVISOR_CODE,
    vis.Start_Time,
    vis.End_Time,
	vis.HOURS_SERVED,
	vis.CLEAN_SHIFT_FLAG,
	vis.STATUS_CODE,
	vis.STATUS_DESCRIPTION,
	vis.BILL_CODE,
	vis.BILL_RATE,
	vis.OVERHEAD_RATE,
	vis.COMMENTS
 FROM VISIT_DETROIT vis 
LEFT JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_CONTRACT CN ON CN.CONTRACT_KEY = VIS.CONTRACT_KEY 
LEFT OUTER JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_Services AS srv ON
	CN.Service_Key = srv.Service_Key
LEFT OUTER JOIN DW_${var.SF_ENVIRONMENT}.HAH.DIM_Client AS cl ON
vis.Client_Key = cl.Client_Key
LEFT JOIN DW_${var.SF_ENVIRONMENT}.INTEGRATION.DATAFLEXSYNCDATA_MATRIXCARE_EMPLOYEE_MAPPING AS EMPLOYEE_MAPPING 
ON EMPLOYEE_MAPPING.MATRIX_EMP_KEY =  VIS.EMPLOYEE_KEY
LEFT JOIN DF_IN_CLIENT CLIENT ON CLIENT.MATRIXCARE_CLIENT_KEY = VIS.CLIENT_KEY
 WHERE  BRANCH_NAME LIKE ANY ('%DETROIT%', '%NILES%', '%DEARBORN%', '%AUBURN%HILLS%', '%WARREN%', '%GRANDRAPIDS%', '%LANSING%', '%FLINT%', '%AUBURN%HILLS%', '%SOUTHFIELD%', '%ANN%ARBOR%')
-- AND SERVICE_DATE BETWEEN '2021-05-10' AND '2021-05-31' 
-- AND SERVICE_DATE BETWEEN '2021-06-01' AND '2021-06-30' 
AND  vis.Status_Description IN ('Billed', 'In Process', 'Paid', 'Confirmed');
SQL
	or_replace = true 
	is_secure = false 
}

