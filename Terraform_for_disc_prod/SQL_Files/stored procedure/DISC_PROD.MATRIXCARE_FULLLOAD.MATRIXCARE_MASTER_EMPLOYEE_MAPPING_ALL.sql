CREATE OR REPLACE PROCEDURE DISC_PROD.MATRIXCARE_FULLLOAD.MATRIXCARE_MASTER_EMPLOYEE_MAPPING_ALL("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
  RETURN_RESULT VARCHAR(1000);
BEGIN  
    INSERT OVERWRITE INTO DISC_PROD.MATRIXCARE.MATRIXCARE_MASTER_EMPLOYEE_MAPPING_ALL
WITH FINAL AS(WITH DATA AS(WITH HOME_PHONE AS
(
	SELECT DISTINCT CPH_CAREGIVERID,
		FIRST_VALUE( TRIM( cgp.CPH_PHONE)) IGNORE NULLS OVER( PARTITION BY cgp.CPH_CAREGIVERID
			ORDER BY cgp.CPH_SEQUENCE, cgp.UPDATEDATE::DATE DESC, cgp.INSERTDATE::DATE DESC)
		AS EMPLOYEE_HOME_PHONE
	FROM MATRIXCARE.STVHC_T_CAREGIVERPHONES cgp
	LEFT OUTER JOIN MATRIXCARE.STVHC_T_PHONETYPE pt
		ON cgp.CPH_PHONETYPE = pt.PHT_ID
	WHERE cgp.DELETEDFLAG = FALSE AND UPPER( TRIM( pt.PHT_NAME)) LIKE ''%HOME%''
),
CELL_PHONE AS
(
	SELECT DISTINCT CPH_CAREGIVERID,
		FIRST_VALUE( TRIM( cgp.CPH_PHONE)) IGNORE NULLS OVER( PARTITION BY cgp.CPH_CAREGIVERID
			ORDER BY cgp.CPH_SEQUENCE, cgp.UPDATEDATE::DATE DESC, cgp.INSERTDATE::DATE DESC)
		AS EMPLOYEE_CELL_PHONE
	FROM MATRIXCARE.STVHC_T_CAREGIVERPHONES cgp
	LEFT OUTER JOIN MATRIXCARE.STVHC_T_PHONETYPE pt
		ON cgp.CPH_PHONETYPE = pt.PHT_ID
	WHERE cgp.DELETEDFLAG = FALSE AND UPPER( TRIM( pt.PHT_NAME)) LIKE ''%MOBILE%''
),
WORK_PHONE AS
(
	SELECT DISTINCT CPH_CAREGIVERID,
		FIRST_VALUE( TRIM( cgp.CPH_PHONE)) IGNORE NULLS OVER( PARTITION BY cgp.CPH_CAREGIVERID
			ORDER BY cgp.CPH_SEQUENCE, cgp.UPDATEDATE::DATE DESC, cgp.INSERTDATE::DATE DESC)
		AS EMPLOYEE_WORK_PHONE
	FROM MATRIXCARE.STVHC_T_CAREGIVERPHONES cgp
	LEFT OUTER JOIN MATRIXCARE.STVHC_T_PHONETYPE pt
		ON cgp.CPH_PHONETYPE = pt.PHT_ID
	WHERE cgp.DELETEDFLAG = FALSE AND UPPER( TRIM( pt.PHT_NAME)) LIKE ''%WORK%''
)
SELECT DISTINCT MD5( ''MATRIXCARE'' || ''-'' || cg.CAR_ID || ''-'' || ''MATRIXCARE'') AS EMPLOYEE_KEY,
	cg.CAR_ID AS EMPLOYEE_NUMBER,
	CASE WHEN cg.CAR_BIRTHDATE::DATE < ''1901-01-01''::DATE OR cg.CAR_BIRTHDATE::DATE > DATEADD( YEAR, -12, CURRENT_DATE) THEN NULL
		 ELSE cg.CAR_BIRTHDATE::DATE
		END AS EMPLOYEE_DOB,
	LEFT( UPPER( TRIM( cg.CAR_FIRSTNAME)), 50) AS EMPLOYEE_FIRST_NAME,
	--LEFT( UPPER( TRIM( cg.CAR_MIDDLENAME)), 50) AS EMPLOYEE_MIDDLE_NAME,
	LEFT( UPPER( TRIM( cg.CAR_LASTNAME)), 50) AS EMPLOYEE_LAST_NAME,
	LEFT( UPPER( TRIM( cg.CAR_ADDRESS1)), 150) AS EMPLOYEE_ADDRESS_1,
	LEFT( UPPER( TRIM( cg.CAR_ADDRESS2)), 150) AS EMPLOYEE_ADDRESS_2,
	LEFT( UPPER( TRIM( cg.CAR_CITY)), 50) AS EMPLOYEE_CITY,
	LEFT( UPPER( TRIM( cg.CAR_STATEORPROVINCE)), 2) AS EMPLOYEE_STATE_CODE,
	LEFT( TRIM( cg.CAR_POSTALCODE), 11) AS EMPLOYEE_ZIP,
	LEFT( TRIM( hph.EMPLOYEE_HOME_PHONE), 20) AS EMPLOYEE_HOME_PHONE,
	LEFT( TRIM( cph.EMPLOYEE_CELL_PHONE), 20) AS EMPLOYEE_CELL_PHONE,
	LEFT( TRIM( wph.EMPLOYEE_WORK_PHONE), 20) AS EMPLOYEE_WORK_PHONE,
	LEFT( UPPER( NVL( NULLIF( TRIM( cg.CAR_EMAIL1),''''), NULLIF( TRIM( cg.CAR_EMAIL2),''''))), 150) AS EMPLOYEE_PERSONAL_EMAIL,
	IFF( EMPLOYEE_PERSONAL_EMAIL = LEFT( UPPER( NULLIF( TRIM( cg.CAR_EMAIL2),'''')), 150), NULL, LEFT( UPPER( NULLIF( TRIM( cg.CAR_EMAIL2),'''')), 150)) AS EMPLOYEE_WORK_EMAIL
FROM MATRIXCARE.STVHC_T_CAREGIVER cg
LEFT OUTER JOIN HOME_PHONE hph ON cg.CAR_ID = hph.CPH_CAREGIVERID
LEFT OUTER JOIN CELL_PHONE cph ON cg.CAR_ID = cph.CPH_CAREGIVERID
LEFT OUTER JOIN WORK_PHONE wph ON cg.CAR_ID = wph.CPH_CAREGIVERID
WHERE EMPLOYEE_FIRST_NAME NOT IN (''TEST'',''MATRIX'') AND EMPLOYEE_LAST_NAME NOT IN (''TEST'',''SUBJECT'',''TRAINING''))-- invalid SSN?
SELECT 
DC.EMPLOYEE_KEY,DC.EMPLOYEE_NUMBER,DC.EMPLOYEE_DOB,DC.EMPLOYEE_FIRST_NAME,DC.EMPLOYEE_LAST_NAME,DC.EMPLOYEE_ADDRESS_1,
DC.EMPLOYEE_ADDRESS_2,DC.EMPLOYEE_CITY,DC.EMPLOYEE_STATE_CODE,DC.EMPLOYEE_ZIP,DC.EMPLOYEE_HOME_PHONE,DC.EMPLOYEE_CELL_PHONE
,DC.EMPLOYEE_WORK_PHONE,DC.EMPLOYEE_PERSONAL_EMAIL
,(    --''GROUP1''
CASE WHEN DC.EMPLOYEE_NUMBER IN (''475'',''476'') THEN ''476''
ELSE CASE WHEN DC.EMPLOYEE_NUMBER IN (''23651'',''26074'') THEN ''26074''
ELSE CASE WHEN DC.EMPLOYEE_NUMBER IN (''31290'',''28439'',''29805'') THEN ''28439''
ELSE CASE WHEN DC.EMPLOYEE_NUMBER IN (''28558'',''27966'') THEN ''28558''
ELSE CASE WHEN DC.EMPLOYEE_NUMBER IN (''27959'',''14495'') THEN ''27959''
ELSE CASE WHEN DC.EMPLOYEE_NUMBER IN (''10841'',''15004'') THEN ''15004''
ELSE CASE WHEN DC.EMPLOYEE_NUMBER IN (''31188'',''26797'') THEN ''31188''
ELSE CASE WHEN DC.EMPLOYEE_NUMBER IN (''23190'',''24017'') THEN ''24017''
ELSE CASE WHEN DC.EMPLOYEE_NUMBER IN (''31181'',''26652'') THEN ''31181''
ELSE CASE WHEN  (SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5) AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB)
    THEN MIN(DC.EMPLOYEE_NUMBER)OVER (PARTITION BY (SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) || SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) || MC.EMPLOYEE_DOB))
    --''GROUP2'' 
ELSE CASE WHEN  (SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5) 
		AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(DC.EMPLOYEE_ZIP,1,5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)),1,5))
	THEN MIN(DC.EMPLOYEE_NUMBER)OVER (PARTITION BY((SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5)) || SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) || SUBSTRING(MC.EMPLOYEE_ZIP,1,5) || SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5)))
	--''GROUP3'' 	
ELSE CASE WHEN (SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
		AND (MC.EMPLOYEE_CELL_PHONE = DC.EMPLOYEE_CELL_PHONE ))
    THEN MIN(DC.EMPLOYEE_NUMBER)OVER (PARTITION BY(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) || SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) || nvl(MC.EMPLOYEE_CELL_PHONE,''HP'')))
    --''GROUP4''
ELSE CASE WHEN (SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
		AND (MC.EMPLOYEE_HOME_PHONE = DC.EMPLOYEE_HOME_PHONE ))
    THEN MIN(DC.EMPLOYEE_NUMBER)OVER (PARTITION BY(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) || SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) || nvl(MC.EMPLOYEE_HOME_PHONE,''HP'')))
    --''GROUP5''
ELSE CASE WHEN (SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
		AND MC.EMPLOYEE_PERSONAL_EMAIL = DC.EMPLOYEE_PERSONAL_EMAIL )
    THEN MIN(DC.EMPLOYEE_NUMBER)OVER (PARTITION BY(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) || MC.EMPLOYEE_PERSONAL_EMAIL))
    --''GROUP6''
ELSE CASE WHEN (SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(DC.EMPLOYEE_ZIP,1,5) 
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)),1,5))
	THEN MIN(DC.EMPLOYEE_NUMBER)OVER (PARTITION BY(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) || MC.EMPLOYEE_DOB || SUBSTRING(MC.EMPLOYEE_ZIP,1,5) ||SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5)))
	--''GROUP7''
ELSE CASE WHEN (SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(DC.EMPLOYEE_ZIP,1,5) 
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)),1,5))
	THEN  MIN(DC.EMPLOYEE_NUMBER)OVER (PARTITION BY((SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) || MC.EMPLOYEE_DOB || SUBSTRING(MC.EMPLOYEE_ZIP,1,5) || SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5))))
	--''GROUP8''
ELSE CASE WHEN (SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND MC.EMPLOYEE_HOME_PHONE = DC.EMPLOYEE_HOME_PHONE AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(DC.EMPLOYEE_ZIP,1,5) 
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)),1,5))
	THEN  MIN(DC.EMPLOYEE_NUMBER)OVER (PARTITION BY((SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) || MC.EMPLOYEE_HOME_PHONE || SUBSTRING(MC.EMPLOYEE_ZIP,1,5) || SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5))))
	--''GROUP 9''
ELSE CASE WHEN (SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB
		AND (MC.EMPLOYEE_PERSONAL_EMAIL = DC.EMPLOYEE_PERSONAL_EMAIL))
	THEN MIN(DC.EMPLOYEE_NUMBER)OVER (PARTITION BY(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) || MC.EMPLOYEE_DOB || MC.EMPLOYEE_PERSONAL_EMAIL))
    ELSE NULL END END END END END END END END END END END END END END END END END END
    ) AS PRE_MASTER_EMPLOYEE_KEY
FROM DATA DC 
JOIN (SELECT * FROM DATA) MC ON
 (UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)) = UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)) AND UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)) = UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)) 
		AND TRIM(MC.EMPLOYEE_ZIP) = TRIM(DC.EMPLOYEE_ZIP) AND UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)) = UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)) AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB)
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5) AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB)
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5) AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(DC.EMPLOYEE_ZIP,1,5)
			AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)),1,5))
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
			AND (MC.EMPLOYEE_HOME_PHONE = DC.EMPLOYEE_HOME_PHONE OR MC.EMPLOYEE_WORK_PHONE = DC.EMPLOYEE_WORK_PHONE OR MC.EMPLOYEE_CELL_PHONE = DC.EMPLOYEE_CELL_PHONE ))
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
		AND MC.EMPLOYEE_PERSONAL_EMAIL = DC.EMPLOYEE_PERSONAL_EMAIL )
OR   
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(DC.EMPLOYEE_ZIP,1,5) 
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)),1,5))	
OR   
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(DC.EMPLOYEE_ZIP,1,5) 
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)),1,5))	
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND MC.EMPLOYEE_HOME_PHONE = DC.EMPLOYEE_HOME_PHONE AND SUBSTRING(MC.EMPLOYEE_ZIP,1,5)=SUBSTRING(DC.EMPLOYEE_ZIP,1,5) 
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_ADDRESS_1)),1,5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_ADDRESS_1)),1,5))
OR
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_LAST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_LAST_NAME)), 1, 5)
			AND (MC.EMPLOYEE_ADDRESS_1 = DC.EMPLOYEE_ADDRESS_1))
OR 
	(SUBSTRING(UPPER(TRIM(MC.EMPLOYEE_FIRST_NAME)), 1, 5) = SUBSTRING(UPPER(TRIM(DC.EMPLOYEE_FIRST_NAME)), 1, 5)
		AND MC.EMPLOYEE_DOB = DC.EMPLOYEE_DOB
		AND (MC.EMPLOYEE_PERSONAL_EMAIL = DC.EMPLOYEE_PERSONAL_EMAIL))
WHERE
    DC.EMPLOYEE_NUMBER <> MC.EMPLOYEE_NUMBER OR DC.EMPLOYEE_NUMBER IN (''475'',''476'',''23651'',''26074'',''28439'',''29805'',''31290'',
''28558'',''27966'',''27959'',''14495'',''10841'',''15004'',''31188'',''26797'',''23190'',''24017'',''31181'',''26652''))
SELECT DISTINCT 
EMPLOYEE_KEY,EMPLOYEE_NUMBER,EMPLOYEE_DOB,EMPLOYEE_FIRST_NAME,EMPLOYEE_LAST_NAME,EMPLOYEE_ADDRESS_1,
EMPLOYEE_ADDRESS_2,EMPLOYEE_CITY,EMPLOYEE_STATE_CODE,EMPLOYEE_ZIP,EMPLOYEE_HOME_PHONE,EMPLOYEE_CELL_PHONE
,EMPLOYEE_WORK_PHONE,EMPLOYEE_PERSONAL_EMAIL, 
MD5( ''MATRIXCARE'' || ''-'' || NVL(PRE_MASTER_EMPLOYEE_KEY::STRING,'''') || ''-'' || ''MATRIXCARE'') AS MASTER_EMPLOYEE_KEY, PRE_MASTER_EMPLOYEE_KEY AS MASTER_EMPLOYEE_NUMBER,
:STR_ETL_TASK_KEY AS ETL_TASK_KEY,
:STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY,       
convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_INSERTED_DATE,	CURRENT_USER as ETL_INSERTED_BY ,
	convert_timezone(''UTC'', CURRENT_TIMESTAMP)::timestamp_ntz as ETL_UPDATED_DATE,CURRENT_USER as ETL_LAST_UPDATED_BY,0 as ETL_DELETED_FLAG 
FROM FINAL;
 SELECT CONCAT (''MESSAGE : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
	RETURN return_result;
    END;
    ';