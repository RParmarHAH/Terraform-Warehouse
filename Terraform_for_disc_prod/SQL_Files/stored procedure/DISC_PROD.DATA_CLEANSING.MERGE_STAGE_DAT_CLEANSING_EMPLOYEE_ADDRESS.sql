CREATE OR REPLACE PROCEDURE DISC_PROD.DATA_CLEANSING.MERGE_STAGE_DAT_CLEANSING_EMPLOYEE_ADDRESS()
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
    return_result VARCHAR;
BEGIN
    --*****************************************************************************************************************************
-- NAME: ADPALLIANCE_SRC_Employee
--
-- PURPOSE: Creates script for data cleanse for ADPALLIANCE source
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 08/07/23     Darshan Gosai           Initial development
--*****************************************************************************************************************************
--

/* Data loading in Azure Staging table */

INSERT OVERWRITE INTO DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES 
SELECT * FROM AWS_LANDING_INGEST_DB_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES ;


/* To Update .0 zip with correct value  */

UPDATE DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES 
FROM 
(
SELECT  
source_system_id,
system_code,
EMPLOYEE_NUMBER,
SPLIT_PART(zip,''.'',1)  AS  zip
FROM 
DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES 
WHERE LENGTH(zip) in  (7,6) 
AND zip LIKE ''%.0'' GROUP BY 1,2,3,4
)x 
SET 
zip  = x.zip
WHERE 
DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES.source_system_id = X.source_system_id
AND DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES.system_code = X.system_code
AND DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES .EMPLOYEE_NUMBER = X.EMPLOYEE_NUMBER;

/* To Update Four diigt length zip with proper value  */

UPDATE DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES 
FROM 
(
SELECT  
source_system_id,
system_code,
EMPLOYEE_NUMBER,
''0''||zip AS  zip
FROM 
DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES 
WHERE LENGTH(zip) = 4 
GROUP BY 1,2,3,4
)x 
SET 
zip  = x.zip
WHERE 
DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES .source_system_id = X.source_system_id
AND DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES .system_code = X.system_code
AND DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES .EMPLOYEE_NUMBER = X.EMPLOYEE_NUMBER;


/* Merge Statement to EMPLOYEE_STANDARDIZED_ADDRESSES */

MERGE INTO DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES   AS tgt
USING
(
SELECT DISTINCT SOURCE_SYSTEM_ID,
				SYSTEM_CODE,
				EMPLOYEE_NUMBER,
				FIRST_NAME,
				LAST_NAME,
				ADDRESS,
				CITY,
				STATE,
				ZIP,
				POINTS,
				LATITUDE,
				LONGITUDE,
				LABEL,
				ADDRESS_NUMBER,
				STREET,
				MUNICIPALITY,
				REGION,
				SUB_REGION,
				COUNTRY_CODE,
				ZIPCODE,
				PLUS_FOUR_CODE,
				RELEVANCE,
				INSERTED_AT       
				FROM DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES 
) AS src
ON src.Source_System_ID = tgt.Source_System_ID
AND src.System_Code = tgt.System_Code
AND src.EMPLOYEE_NUMBER = tgt.EMPLOYEE_NUMBER
WHEN MATCHED AND (
				  IFNULL( src.FIRST_NAME, ''~!@#$%^&*()+'') <> IFNULL( tgt.FIRST_NAME, ''~!@#$%^&*()+'')
              OR  IFNULL( src.LAST_NAME, ''~!@#$%^&*()+'') <> IFNULL( tgt.LAST_NAME, ''~!@#$%^&*()+'')
              OR  IFNULL( src.ADDRESS, ''~!@#$%^&*()+'') <> IFNULL( tgt.ADDRESS, ''~!@#$%^&*()+'')
              OR  IFNULL( src.CITY, ''~!@#$%^&*()+'') <> IFNULL( tgt.CITY, ''~!@#$%^&*()+'')
              OR  IFNULL( src.STATE, ''~!@#$%^&*()+'') <> IFNULL( tgt.STATE, ''~!@#$%^&*()+'')
              OR  IFNULL( src.ZIP, ''~!@#$%^&*()+'') <> IFNULL( tgt.ZIP, ''~!@#$%^&*()+'')
              OR  IFNULL( src.POINTS, ''~!@#$%^&*()+'') <> IFNULL( tgt.POINTS, ''~!@#$%^&*()+'')
              OR  IFNULL( src.LATITUDE::VARCHAR(50), ''~!@#$%^&*()+'') <> IFNULL( tgt.LATITUDE::VARCHAR(50), ''~!@#$%^&*()+'')
              OR  IFNULL( src.LONGITUDE::VARCHAR(50), ''~!@#$%^&*()+'') <> IFNULL( tgt.LONGITUDE::VARCHAR(50), ''~!@#$%^&*()+'')
              OR  IFNULL( src.LABEL, ''~!@#$%^&*()+'') <> IFNULL( tgt.LABEL, ''~!@#$%^&*()+'')
              OR  IFNULL( src.STREET, ''~!@#$%^&*()+'') <> IFNULL( tgt.STREET, ''~!@#$%^&*()+'')
              OR  IFNULL( src.MUNICIPALITY, ''~!@#$%^&*()+'') <> IFNULL( tgt.MUNICIPALITY, ''~!@#$%^&*()+'')
              OR  IFNULL( src.REGION, ''~!@#$%^&*()+'') <> IFNULL( tgt.REGION, ''~!@#$%^&*()+'')
              OR  IFNULL( src.SUB_REGION, ''~!@#$%^&*()+'') <> IFNULL( tgt.SUB_REGION, ''~!@#$%^&*()+'')
              OR  IFNULL( src.COUNTRY_CODE, ''~!@#$%^&*()+'') <> IFNULL( tgt.COUNTRY_CODE, ''~!@#$%^&*()+'')
              OR  IFNULL( src.ZIPCODE, ''~!@#$%^&*()+'') <> IFNULL( tgt.ZIPCODE, ''~!@#$%^&*()+'')
              OR  IFNULL( src.PLUS_FOUR_CODE, ''~!@#$%^&*()+'') <> IFNULL( tgt.PLUS_FOUR_CODE, ''~!@#$%^&*()+'')
              OR  IFNULL( src.RELEVANCE::VARCHAR(50), ''~!@#$%^&*()+'') <> IFNULL( tgt.RELEVANCE::VARCHAR(50), ''~!@#$%^&*()+'')
              OR  IFNULL( src.INSERTED_AT::VARCHAR(50), ''~!@#$%^&*()+'') <> IFNULL( tgt.INSERTED_AT::VARCHAR(50), ''~!@#$%^&*()+'')		  
			  )
 THEN UPDATE SET  tgt.FIRST_NAME = src.FIRST_NAME,
                  tgt.LAST_NAME = src.LAST_NAME,
                  tgt.ADDRESS = src.ADDRESS,
                  tgt.CITY = src.CITY,
                  tgt.STATE = src.STATE,
                  tgt.ZIP = src.ZIP,
                  tgt.POINTS = src.POINTS,
                  tgt.LATITUDE = src.LATITUDE,
                  tgt.LONGITUDE = src.LONGITUDE,
                  tgt.LABEL = src.LABEL,
                  tgt.STREET = src.STREET,
                  tgt.MUNICIPALITY = src.MUNICIPALITY,
                  tgt.REGION = src.REGION,
                  tgt.SUB_REGION = src.SUB_REGION,
                  tgt.COUNTRY_CODE = src.COUNTRY_CODE,
                  tgt.ZIPCODE = src.ZIPCODE,
                  tgt.PLUS_FOUR_CODE = src.PLUS_FOUR_CODE,
                  tgt.RELEVANCE = src.RELEVANCE,
                  tgt.INSERTED_AT = src.INSERTED_AT
WHEN NOT MATCHED THEN INSERT
(SOURCE_SYSTEM_ID,SYSTEM_CODE,EMPLOYEE_NUMBER,FIRST_NAME,LAST_NAME,ADDRESS,CITY,STATE,ZIP,POINTS,LATITUDE,LONGITUDE,
				LABEL,ADDRESS_NUMBER,STREET,MUNICIPALITY,REGION,SUB_REGION,COUNTRY_CODE,ZIPCODE,PLUS_FOUR_CODE,
				RELEVANCE,INSERTED_AT )
VALUES
(SOURCE_SYSTEM_ID,SYSTEM_CODE,EMPLOYEE_NUMBER,FIRST_NAME,LAST_NAME,ADDRESS,CITY,STATE,ZIP,POINTS,LATITUDE,LONGITUDE,
				LABEL,ADDRESS_NUMBER,STREET,MUNICIPALITY,REGION,SUB_REGION,COUNTRY_CODE,ZIPCODE,PLUS_FOUR_CODE,
				RELEVANCE,INSERTED_AT );


UPDATE DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES
FROM 
(
With EMP_ADD1 as 
( 
SELECT  
EMPLOYEE_NUMBER, 
SOURCE_SYSTEM_ID,
SYSTEM_CODE, 
ADDRESS ,
CITY ,
STATE ,
ZIP,
ZIPCODE
FROM  DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES
WHERE zip <> ZIPCODE
GROUP BY 1,2,3,4,5,6,7,8
)
,EMP_ADD2 as 
(
SELECT
ADDRESS ,
CITY ,
STATE ,
ZIPCODE,
ZIP
FROM  DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES
WHERE ZIP=ZIPCODE
GROUP BY 1,2,3,4,5
)
(SELECT 
EMP_ADD1.EMPLOYEE_NUMBER,EMP_ADD1.SOURCE_SYSTEM_ID,EMP_ADD1.SYSTEM_CODE,EMP_ADD1.ZIPCODE
FROM EMP_ADD1 
INNER JOIN EMP_ADD2 
ON  EMP_ADD1.ADDRESS=EMP_ADD2.ADDRESS
AND EMP_ADD1.CITY=EMP_ADD2.CITY
AND EMP_ADD1.STATE=EMP_ADD2.STATE
AND EMP_ADD1.ZIPCODE=EMP_ADD2.ZIP
AND EMP_ADD1.ZIPCODE=EMP_ADD2.ZIPCODE))X
SET
ZIP=X.ZIPCODE
WHERE 
DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES.EMPLOYEE_NUMBER=X.EMPLOYEE_NUMBER
AND DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES.SOURCE_SYSTEM_ID=X.SOURCE_SYSTEM_ID
AND DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES.SYSTEM_CODE=X.SYSTEM_CODE;

UPDATE  DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES  FROM 
(SELECT 
STD_ADDRS_ZIP_NOT_SAME.SOURCE_SYSTEM_ID,
STD_ADDRS_ZIP_NOT_SAME.SYSTEM_CODE,
STD_ADDRS_ZIP_NOT_SAME.EMPLOYEE_NUMBER,
STD_ADDRS_ZIP_NOT_SAME.ZIPCODE
FROM 
(SELECT 
SOURCE_SYSTEM_ID,
SYSTEM_CODE,
EMPLOYEE_NUMBER,
ADDRESS_NUMBER ,
STREET ,
MUNICIPALITY ,
REGION ,
SUB_REGION ,
COUNTRY_CODE ,
ZIPCODE 
FROM DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES 
WHERE 
zip <> ZIPCODE AND SOURCE_SYSTEM_ID NOT IN (36)) STD_ADDRS_ZIP_NOT_SAME
JOIN (
SELECT 
SOURCE_SYSTEM_ID,
SYSTEM_CODE,
EMPLOYEE_NUMBER,
ADDRESS_NUMBER ,
STREET ,
MUNICIPALITY ,
REGION ,
SUB_REGION ,
COUNTRY_CODE ,
ZIPCODE 
FROM DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES 
WHERE 
zip = ZIPCODE AND SOURCE_SYSTEM_ID NOT IN (36)
)STD_ADDRS_ZIP_SAME 
ON STD_ADDRS_ZIP_NOT_SAME.ADDRESS_NUMBER = STD_ADDRS_ZIP_SAME.ADDRESS_NUMBER
AND STD_ADDRS_ZIP_NOT_SAME.STREET =  STD_ADDRS_ZIP_SAME.STREET
AND STD_ADDRS_ZIP_NOT_SAME.MUNICIPALITY =  STD_ADDRS_ZIP_SAME.MUNICIPALITY
AND STD_ADDRS_ZIP_NOT_SAME.REGION =  STD_ADDRS_ZIP_SAME.REGION
AND STD_ADDRS_ZIP_NOT_SAME.SUB_REGION =  STD_ADDRS_ZIP_SAME.SUB_REGION
AND STD_ADDRS_ZIP_NOT_SAME.COUNTRY_CODE =  STD_ADDRS_ZIP_SAME.COUNTRY_CODE
AND STD_ADDRS_ZIP_NOT_SAME.ZIPCODE = STD_ADDRS_ZIP_SAME.ZIPCODE ) X
SET  
zip = x.zipcode
WHERE 
DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES.SOURCE_SYSTEM_ID  = X.SOURCE_SYSTEM_ID
AND DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES.SYSTEM_CODE  = X.SYSTEM_CODE
AND DISC_PROD.DATA_CLEANSING.EMPLOYEE_STANDARDIZED_ADDRESSES.EMPLOYEE_NUMBER = X.EMPLOYEE_NUMBER;
				

/* Address storing in historical table */

INSERT INTO DISC_PROD.DATA_CLEANSING.EMPLOYEE_HISTRY_STANDARDIZED_ADDRESSES
SELECT * FROM DISC_PROD.DATA_CLEANSING.EMPLOYEE_STG_STANDARDIZED_ADDRESSES  ;
	
 
 RETURN ''SUCCESS'';
    END;
';