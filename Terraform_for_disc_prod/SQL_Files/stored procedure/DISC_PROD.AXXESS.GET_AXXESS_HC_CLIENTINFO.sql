CREATE OR REPLACE PROCEDURE DISC_PROD.AXXESS.GET_AXXESS_HC_CLIENTINFO("TASKKEY" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
--*****************************************************************************************************************************
-- NAME:  DISC_PROD.AXXESS.GET_AXXESS_HC_CLIENTINFO 
--
-- PURPOSE: To Load Discovery Layer Tables
--
-- DEVELOPMENT LOG:
-- DATE        		AUTHOR                	NOTES:
-- ----------  		-------------------   	-----------------------------------------------------------------------------------------------
-- 2023-11-20 		Ravi Suthar            	Initial Development
-- 2023-12-22 		Deepesh/RSuthar     	Added logic for incremental load  
-- 2024-01-12		KDhokai/RSuthar			Added new columns 
--*****************************************************************************************************************************

BEGIN 
    --TargetSQL
    INSERT INTO DISC_PROD.AXXESS.HIST_AXXESS_HC_CLIENTINFO (SELECT A.$1 as SYSTEM_ID, A.$2 as CREATE_TIMESTAMP, A.$3 as UPDATE_TIMESTAMP, A.$4 as IS_DELETED, A.$5 as FIRST_NAME, A.$6 as MIDDLE_INITIAL, A.$7 as LAST_NAME, A.$8 as DATE_OF_BIRTH, A.$9 as SSN, A.$10 as MEDICAL_RECORD_NUMBER, A.$11 as GENDER, A.$12 as GENDER_PRONOUNS, A.$13 as MARITAL_STATUS, A.$14 as MEDICAID_NUMBER, A.$15 as ALTERNATE_MEDICAID_NUMBER, A.$16 as ETHNICITY, A.$17 as RACE, A.$18 as TAGS, A.$19 as PRIMARY_ADDRESS_COUNTRY, A.$20 as PRIMARY_ADDRESS_LINE_1, A.$21 as PRIMARY_ADDRESS_LINE_2, A.$22 as PRIMARY_ADDRESS_CITY, A.$23 as PRIMARY_ADDRESS_STATE, A.$24 as PRIMARY_ADDRESS_ZIP, A.$25 as PRIMARY_ADDRESS_ZIP4, A.$26 as PRIMARYADDRESSCOUNTRY, A.$27 as PRIMARY_PHONE_NUMBER, A.$28 as PRIMARY_PHONE_TYPE, A.$29 as EMAIL, A.$30 as BRANCH_SYSTEM_ID, A.$31 as CLINICAL_MANAGER_EMPLOYEE_SYSTEM_ID, A.$32 as CLINICAL_EMPLOYEE_SYSTEM_ID, A.$33 as CASH_MANAGER_EMPLOYEE_SYSTEM_ID,A.$34 as Emergency_Triage_Code ,A.$35 as Emergency_Triage_Description,A.$36 as	Additional_Emergency_Preparedness_Information ,A.$37 as Client_Status,:TaskKey AS ETL_TASK_KEY,:TaskKey AS ETL_INSERTED_TASK_KEY, current_timestamp ::TIMESTAMP_NTZ(9) AS ETL_INSERTED_DATE, CURRENT_USER() AS ETL_INSERTED_BY, current_timestamp ::TIMESTAMP_NTZ(9) AS ETL_LAST_UPDATED_DATE, CURRENT_USER() AS ETL_LAST_UPDATED_BY, FALSE AS ETL_DELETED_FLAG FROM @DISC_PROD.STAGE.AWSAZSTAGEPROD/Axxess/SFTP_files/AXXESS_HC_CLIENTINFO (file_format => DISC_PROD.STAGE.PSV_FORMAT) A);
	
CREATE OR REPLACE TABLE DISC_PROD.AXXESS.AXXESS_HC_CLIENTINFO
 AS WITH curr_v AS 
 (SELECT SYSTEM_ID, MAX(ETL_LAST_UPDATED_DATE) AS MAX_LAST_UPDATED_DATE 
 FROM DISC_PROD.AXXESS.HIST_AXXESS_HC_CLIENTINFO GROUP BY SYSTEM_ID )   
 SELECT P.* exclude ETL_DELETED_FLAG,
 CASE WHEN ETL_INSERTED_DATE::DATE <> CURRENT_DATE THEN TRUE ELSE P.ETL_DELETED_FLAG END AS ETL_DELETED_FLAG 
 FROM DISC_PROD.AXXESS.HIST_AXXESS_HC_CLIENTINFO P 
 INNER JOIN curr_v v ON P.SYSTEM_ID = v.SYSTEM_ID
 AND P.ETL_LAST_UPDATED_DATE = v.MAX_LAST_UPDATED_DATE;


----REPLACE HIST TABLE WITH CURRENT TABLE 
CREATE OR REPLACE table DISC_PROD.AXXESS.HIST_AXXESS_HC_CLIENTINFO CLONE DISC_PROD.AXXESS.AXXESS_HC_CLIENTINFO;	

END;
';