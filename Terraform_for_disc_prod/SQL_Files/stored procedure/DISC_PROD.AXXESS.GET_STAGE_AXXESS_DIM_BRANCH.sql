CREATE OR REPLACE PROCEDURE DISC_PROD.AXXESS.GET_STAGE_AXXESS_DIM_BRANCH("STR_ETL_TASK_KEY" VARCHAR(16777216), "STR_CDC_START" VARCHAR(16777216), "STR_CDC_END" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
	var sql = `
--*****************************************************************************************************************************
-- NAME:  AXXESS_DIM_BRANCH

-- DEVELOPMENT LOG:
-- DATE			AUTHOR					NOTES:
-- --------		-------------------		---------------------------------------------------------------------------------------
-- 12/29/2021	Abhishek Sunil			Initial Development
-- 04/04/2022	Parag Gajjar			Revised logic
-- 05/04/2022	Parag Gajjar			Logic changes and Customer Dedup Leverage
--*****************************************************************************************************************************


INSERT OVERWRITE INTO STAGE.AXXESS_DIM_BRANCH
WITH OFFICES AS (
	SELECT
		BRANCH_ID,
		CASE 
			WHEN BRANCH_ID = ''c1def643fd34ff9d01a0feef253fedca'' THEN ''1''
			WHEN BRANCH_ID = ''401f36bb0c664cfdb78db4fba3c41998'' THEN ''2''
		END AS OFFICE_CODE,
		CASE 
			WHEN BRANCH_ID = ''c1def643fd34ff9d01a0feef253fedca'' THEN ''1''
			WHEN BRANCH_ID = ''401f36bb0c664cfdb78db4fba3c41998'' THEN ''2''
		END AS OFFICE_NUMBER
	FROM
		DISC_DEV.AXXESS.AXXESS_BRANCHINFO
),
BRANCH AS (
SELECT Distinct BRANCH_ID, BRANCH FROM DISC_DEV.AXXESS.AXXESS_EPISODESNAPSHOTS WHERE BRANCH_ID IS NOT NULL
-- DISC_DEDUPE_DEV.AXXESS.CLIENT_MASTER_LIST WHERE BRANCH_ID IS NOT NULL 
)
SELECT DISTINCT
	--MD5(''PRIME'' || UPPER(TRIM(CLI.BRANCH_ID)) || ''-'' || ''AXXESS'') AS BRANCH_KEY,
    MD5(''PRIME'' || ''-'' || UPPER(TRIM(CLI.BRANCH_ID)) || ''-'' || ''AXXESS'') AS BRANCH_KEY,
	UPPER(TRIM(CLI.BRANCH)) AS BRANCH_NAME,
	''PRIME'' AS SYSTEM_CODE,
	14 AS SOURCE_SYSTEM_ID,
	OFFICES.OFFICE_NUMBER AS OFFICE_NUMBER,
	OFFICES.OFFICE_CODE AS OFFICE_CODE,
	UPPER(TRIM(CLI.BRANCH)) AS OFFICE_NAME,
	UPPER(TRIM(CLI.BRANCH)) AS OFFICE_NAME_ALT,
	UPPER(TRIM(CLI.BRANCH)) AS DEPARTMENT_NAME,
	''HH'' AS BRANCH_SERVICE_LINE,
	TRUE AS PARENT_FLAG,
	--MD5(''PRIME'' || UPPER(TRIM(CLI.BRANCH_ID)) || ''-'' || ''AXXESS'') AS PARENT_BRANCH_KEY,
    MD5(''PRIME'' || ''-''|| UPPER(TRIM(CLI.BRANCH_ID)) || ''-'' || ''AXXESS'') AS PARENT_BRANCH_KEY,
	OFFICES.OFFICE_NUMBER AS PARENT_OFFICE_NUMBER,
	OFFICES.OFFICE_NUMBER AS PARENT_OFFICE_CODE, --Same AS OFFICE_CODE FOR Axxess
	BI.ADDRESS_STATECODE || '' - '' || UPPER(TRIM(CLI.BRANCH)) || '' ('' || OFFICES.OFFICE_CODE || '')'' AS PARENT_BRANCH_NAME,
	TRIM(BI.ADDRESS_LINE_1) AS OFFICE_ADDRESS1,
	NULL AS OFFICE_ADDRESS2,
	GEO.CITY_PRIMARY_NAME AS OFFICE_CITY,
	BI.ADDRESS_STATECODE AS OFFICE_STATE_CODE,
	BI.ADDRESS_ZIPCODE AS OFFICE_ZIP,
	NULL AS OFFICE_PHONE,
	NULL AS OFFICE_TOLL_FREE_PHONE,
	NULL AS OFFICE_FAX,
	BI.ADDRESS_STATECODE || '' - '' || UPPER(TRIM(CLI.BRANCH)) || '' ('' || OFFICES.OFFICE_CODE || '')'' AS DETAILED_OFFICE_NAME,
	NULL AS REGION_NUMBER,
	NULL AS REGION_NAME,
	NULL AS REGION_MANAGER,	
	NULL AS REGION_MANAGER_EMPLOYEE_KEY,
	NULL AS SUBREGION_NAME,
	NULL AS PRIMARY_BRANCH_MANAGER_NAME,
	NULL AS PRIMARY_BRANCH_EMAIL,
	NULL AS PRIMARY_BRANCH_MANAGER_EMPLOYEE_KEY,
	NULL AS SECONDARY_BRANCH_MANAGER_NAME,
	NULL AS SECONDARY_BRANCH_EMAIL,
	NULL AS SECONDARY_BRANCH_MANAGER_EMPLOYEE_KEY,
	NULL AS RISKCONNECT_NODE_KEY,
	NULL AS RISKCONNECT_NAME,
	NULL AS HR_OFFICE_NUMBER,
	NULL AS HR_OFFICE_NAME,
	TRUE AS ACTIVE_FLAG,
	TO_DATE(''1900-01-01'',''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
	TO_DATE(''9999-12-31'',''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
    `;    
		sql += STR_ETL_TASK_KEY;
		sql +=  
		` AS ETL_TASK_KEY,
	`;    
		sql += STR_ETL_TASK_KEY;
		sql +=  
		` AS ETL_INSERTED_TASK_KEY,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	0 AS ETL_DELETED_FLAG,
	0 AS ETL_INFERRED_MEMBER_FLAG
FROM
	BRANCH CLI
LEFT JOIN
	DISC_DEV.AXXESS.AXXESS_BRANCHINFO BI ON CLI.BRANCH_ID = BI.BRANCH_ID 
LEFT JOIN
	HAH.DIM_GEOGRAPHY GEO ON BI.ADDRESS_ZIPCODE = GEO.ZIP_CODE
LEFT JOIN
	OFFICES ON BI.BRANCH_ID = OFFICES.BRANCH_ID
--ORDER BY OFFICE_NUMBER
--BELOW IS THE HOME CARE DATA
UNION All

SELECT DISTINCT
    MD5(''PRIME'' || ''-'' || UPPER(TRIM(FIN.BRANCH_ID)) || ''-'' || ''AXXESS'') AS BRANCH_KEY,
	UPPER(TRIM(FIN.BRANCH_NAME)) AS BRANCH_NAME,
	''PRIME'' AS SYSTEM_CODE,
	14 AS SOURCE_SYSTEM_ID,
	OFFICE.OFFICE_NUMBER AS OFFICE_NUMBER,
	OFFICE.OFFICE_NUMBER AS OFFICE_CODE,
	UPPER(TRIM(FIN.BRANCH_NAME)) AS OFFICE_NAME,
	UPPER(TRIM(FIN.BRANCH_NAME)) AS OFFICE_NAME_ALT,
	UPPER(TRIM(FIN.BRANCH_NAME)) AS DEPARTMENT_NAME,
	''HC'' AS BRANCH_SERVICE_LINE,
	TRUE AS PARENT_FLAG,
    MD5(''PRIME'' || ''-''|| UPPER(TRIM(FIN.BRANCH_ID)) || ''-'' || ''AXXESS'') AS PARENT_BRANCH_KEY,
	OFFICE.OFFICE_NUMBER AS PARENT_OFFICE_NUMBER,
	OFFICE.OFFICE_NUMBER AS PARENT_OFFICE_CODE,
	NULL AS PARENT_BRANCH_NAME,
	NULL AS OFFICE_ADDRESS1,
	NULL AS OFFICE_ADDRESS2,
	GEO.CITY_PRIMARY_NAME AS OFFICE_CITY,
	BRANCH_STATE_CODE AS OFFICE_STATE_CODE,
	BRANCH_ZIP_CODE AS OFFICE_ZIP,
	NULL AS OFFICE_PHONE,
	NULL AS OFFICE_TOLL_FREE_PHONE,
	NULL AS OFFICE_FAX,
	NULL AS DETAILED_OFFICE_NAME,
	NULL AS REGION_NUMBER,
	NULL AS REGION_NAME,
	NULL AS REGION_MANAGER,	
	NULL AS REGION_MANAGER_EMPLOYEE_KEY,
	NULL AS SUBREGION_NAME,
	NULL AS PRIMARY_BRANCH_MANAGER_NAME,
	NULL AS PRIMARY_BRANCH_EMAIL,
	NULL AS PRIMARY_BRANCH_MANAGER_EMPLOYEE_KEY,
	NULL AS SECONDARY_BRANCH_MANAGER_NAME,
	NULL AS SECONDARY_BRANCH_EMAIL,
	NULL AS SECONDARY_BRANCH_MANAGER_EMPLOYEE_KEY,
	NULL AS RISKCONNECT_NODE_KEY,
	NULL AS RISKCONNECT_NAME,
	NULL AS HR_OFFICE_NUMBER,
	NULL AS HR_OFFICE_NAME,
	TRUE AS ACTIVE_FLAG,
	TO_DATE(''1900-01-01'',''YYYY-MM-DD'') AS EFFECTIVE_FROM_DATE,
	TO_DATE(''9999-12-31'',''YYYY-MM-DD'') AS EFFECTIVE_TO_DATE,
	  `;    
		sql += STR_ETL_TASK_KEY;
		sql +=  
		` AS ETL_TASK_KEY,
	`;    
		sql += STR_ETL_TASK_KEY;
		sql +=  
		` AS ETL_INSERTED_TASK_KEY,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE,
	CURRENT_USER AS ETL_INSERTED_BY ,
	CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE,
	CURRENT_USER AS ETL_LAST_UPDATED_BY,
	0 AS ETL_DELETED_FLAG,
	0 AS ETL_INFERRED_MEMBER_FLAG
FROM (
SELECT Distinct BRANCH_ID, BRANCH_NAME,BRANCH_STATE_CODE,BRANCH_ZIP_CODE FROM DISC_DEV.AXXESS.AXXESS_VISITFINANCIALS
WHERE BRANCH_ID IS NOT NULL AND BRANCH_NAME IS NOT NULL
) FIN
LEFT JOIN
	HAH.DIM_GEOGRAPHY GEO ON FIN.BRANCH_ZIP_CODE = GEO.ZIP_CODE
	JOIN (
	SELECT
		BRANCH_ID,
		CASE 
			WHEN BRANCH_ID = ''55837848-a68d-4793-97e0-ab7c70a60364'' THEN ''3''
			WHEN BRANCH_ID = ''c077b09b-d545-4fea-947d-4ae64ae4970a'' THEN ''4''
		END AS OFFICE_CODE,
		CASE 
			WHEN BRANCH_ID = ''55837848-a68d-4793-97e0-ab7c70a60364'' THEN ''3''
			WHEN BRANCH_ID = ''c077b09b-d545-4fea-947d-4ae64ae4970a'' THEN ''4''
		END AS OFFICE_NUMBER
	FROM
		DISC_DEV.AXXESS.AXXESS_VISITFINANCIALS
) OFFICE ON OFFICE.BRANCH_ID = FIN.BRANCH_ID
 `;
          try {
                snowflake.execute (
                    {sqlText: sql}
                    );
                return "Succeeded.";   // Return a success/error indicator.
                }
            catch (err)  {
                return "Failed: " + err;   // Return a success/error indicator.
                }  
          ';