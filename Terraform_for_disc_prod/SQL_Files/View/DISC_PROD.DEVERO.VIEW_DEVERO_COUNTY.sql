create or replace view DISC_PROD.DEVERO.VIEW_DEVERO_COUNTY(
	COUNTY_ID,
	HAS_CODE,
	COUNTY,
	AGENCY_ID,
	ACTIVE,
	DATE_MODIFIED,
	ETL_TASK_KEY,
	ETL_INSERTED_TASK_KEY,
	ETL_INSERTED_DATE,
	ETL_INSERTED_BY,
	ETL_LAST_UPDATED_DATE,
	ETL_LAST_UPDATED_BY,
	ETL_DELETED_FLAG
) as (
WITH RESULT_DATA AS
(
SELECT 	DISTINCT
          C.COUNTY_ID
		, XMLGET(PARSE_XML(C.COUNTY_XML), 'HAS_CODE'):"$"::STRING AS HAS_CODE
		, XMLGET(PARSE_XML(C.COUNTY_XML), 'COUNTY'):"$"::STRING AS COUNTY
		, NULL AS AGENCY_ID     --COUNTY.VALUE:"$" :: STRING AS AGENCY_ID
		, XMLGET(PARSE_XML(C.COUNTY_XML), 'ACTIVE'):"$"::STRING AS ACTIVE
		, XMLGET(PARSE_XML(C.COUNTY_XML), 'DATE_MODIFIED'):"$"::STRING AS DATE_MODIFIED
		, C.ETL_TASK_KEY
		, C.ETL_INSERTED_TASK_KEY
		, C.ETL_INSERTED_DATE
		, C.ETL_INSERTED_BY
		, C.ETL_LAST_UPDATED_DATE
		, C.ETL_LAST_UPDATED_BY
		, C.ETL_DELETED_FLAG
		,ROW_NUMBER() OVER(PARTITION BY COUNTY_ID ORDER BY DATE_MODIFIED DESC) AS LATEST_MODIFIED
  FROM DISC_PROD.DEVERO.HIST_DEVERO_COUNTY  C
--, LATERAL FLATTEN(XMLGET(PARSE_XML(C.COUNTY_XML), 'AGENCY_IDS'):"$":: ARRAY) COUNTY
--WHERE DATE(C.ETL_LAST_UPDATED_DATE) = COALESCE((
--SELECT MAX(DATE(ETL_LAST_UPDATED_DATE)) FROM DISC_PROD.DEVERO.HIST_DEVERO_COUNTY),DATE(GETDATE()))
)
SELECT 
 COUNTY_ID,
	HAS_CODE,
	COUNTY,
	AGENCY_ID,
	ACTIVE,
	DATE_MODIFIED,
	ETL_TASK_KEY,
	ETL_INSERTED_TASK_KEY,
	ETL_INSERTED_DATE,
	ETL_INSERTED_BY,
	ETL_LAST_UPDATED_DATE,
	ETL_LAST_UPDATED_BY,
	ETL_DELETED_FLAG
FROM RESULT_DATA
WHERE LATEST_MODIFIED =1
);