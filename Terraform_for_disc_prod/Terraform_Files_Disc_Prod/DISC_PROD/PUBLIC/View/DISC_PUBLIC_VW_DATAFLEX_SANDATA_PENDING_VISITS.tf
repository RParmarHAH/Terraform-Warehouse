resource "snowflake_view" "DISC_PUBLIC_VW_DATAFLEX_SANDATA_PENDING_VISITS" {
	database = "DISC_${var.SF_ENVIRONMENT}"
	schema = "PUBLIC"
	name = "VW_DATAFLEX_SANDATA_PENDING_VISITS"
	statement = <<-SQL
	 
WITH 
 SANDATA_SCHEDULES AS 
(SELECT CASE AGENCYID WHEN '8380' THEN 'IL' WHEN '8463' THEN 'MO' ELSE NULL END DFDBNAME
, AGENCYID, SCHEDULEID, SCHEDULEDATE
, IFF(SERVICEID='',NULL,SERVICEID) AS SERVICEID 
, PROPOSEDTIMEIN, PROPOSEDTIMEOUT, PROPOSEDDURATION, EVVTIMEIN, EVVTIMEOUT, EVVDURATION, STATUS
, NVL(IFF(CANCELREASON = '',NULL,CANCELREASON),REASONCODE)  AS CANCEL_REASON_CODE
, CANCELREASONNOTES, RESOLUTIONCODE, REJECTIONCODE, EXCEPTIONCODE
, IFF(COMMENTS = '', NULL, COMMENTS) AS COMMENTS
, ETL_LAST_UPDATED_DATE 
FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES 
WHERE AGENCYID IN ('8380','8463') AND STATUS IN ('01','09','10')
)
, 
BI_SANDATAVISITS AS 
(SELECT AGENCYID, SCHEDULEID, SCHEDULEDATE, ADMISSIONTYPE, ADMISSIONID , CLIENTID  
, IFF(LOCATIONID = '',NULL, LOCATIONID) AS LOCATIONID
, IFF(SERVICEID = '',NULL,SERVICEID) AS SERVICEID 
, IFF(STAFFAGENCYID = '', NULL, STAFFAGENCYID)::NUMBER AS STAFFAGENCYID
FROM DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.SANDATAVISITS
WHERE AGENCYID IN ('8380','8463') AND STATUS IN ('01','09','10')
)
, 
SANDATA_VISITS AS 
(SELECT AGENCYID, SCHEDULEID, DATE AS SCHEDULEDATE, CLIENTADMITTYPE, ADMISSIONID
, CASE AGENCYID WHEN '8380' THEN 'IL' WHEN '8463' THEN 'MO' ELSE NULL END AS DFDBNAME
, IFF(CLIENTOTHERID = '',NULL, CLIENTOTHERID) AS CLIENTOTHERID
, IFF(SERVICEID = '',NULL,SERVICEID) AS SERVICEID
, IFF(LOCATIONID = '',NULL, LOCATIONID) AS LOCATIONID
, IFF(STAFFAGENCYID = '', NULL, STAFFAGENCYID)::NUMBER AS STAFFAGENCYID
, PROPOSEDSTART, PROPOSEDEND, PROPOSEDDURATION, TIMEIN, TIMEOUT, ACTUALDURATION, ADJUSTEDTIMEIN, ADJUSTEDTIMEOUT, ADJUSTEDDURATION
, EVENTSTATUS AS STATUS
, REASONCODE, REASONCODEDESCRIPTION
, IFF(COMMENTS = '', NULL, COMMENTS) AS COMMENTS
, ETL_LAST_UPDATED_DATE 
FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_VISITS S 
WHERE AGENCYID IN ('8380','8463') AND EVENTSTATUS IN ('01','09','10')
)
, SDV_2 AS 																		-- Visits IN Sandata_Visits but NOT IN Schedules, mostly future schedules
(SELECT V.* FROM SANDATA_VISITS V 
LEFT JOIN  DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_SCHEDULES SCH 
ON SCH.SCHEDULEID = V.SCHEDULEID AND SCH.AGENCYID = V.AGENCYID
WHERE SCH.SCHEDULEID IS NULL  ) 
--
,SANDATA_SCH AS 																-- 1st SOURCE:Sandata_Schedules
( SELECT SCH.AGENCYID, SCH.SCHEDULEID, SCH.SCHEDULEDATE, SCH.DFDBNAME
, NVL(BI.LOCATIONID, SV.LOCATIONID) AS LOCATION_ID								-- LOCATIONID FOUND TO BE TRUE IN BI, IN CASE OF DIFFERENCE BETWEEN BI LOCID AND SDV LOCID WHEN CHECKED ON UI 
, IFF(regexp_instr( LOCATION_ID, '[^0-9]')=0 ,LOCATION_ID,NULL)::NUMBER AS LID	-- non integer converted to null
, NVL(C.OTHERID,SV.CLIENTOTHERID) AS CLIENTOTHERID1
, IFF(regexp_instr( CLIENTOTHERID1, '[^0-9]')=0 AND CLIENTOTHERID1 <> '',CLIENTOTHERID1,NULL)::NUMBER AS "CLIENTOTHERID"
, COALESCE(SCH.SERVICEID, SV.SERVICEID, ADS.SERVICEID )	AS 	SERVICEID			-- IF SCH.SERVICEID IS NULL THEN BI.SERVICEID IS ALSO ALWAYS NULL
, NVL(SV.ADMISSIONID, BI.ADMISSIONID) AS ADMISSIONID 							-- ONLY FOR FEW 1000 VISITS, THE ADMISSION ID &/TYPE ARE NOT EQUAL BETWEEN BI.sandatavisits AND sandataimport.Sandata_visits table, SD_VISITS FOUND TO BE CORRECT WHEN CHECKED ON UI
, NVL(SV.CLIENTADMITTYPE, BI.ADMISSIONTYPE) AS ADMISSIONTYPE
, NVL(BI.STAFFAGENCYID, SV.STAFFAGENCYID) AS STAFFAGENCYID
, NVL(EID.INTID, LID) AS INTID
, EID.DBNAME
, CAT.CONTRACTCODE, CAT.BILLCODE 
, IFF(SS.STAFFAGENCYID = '', NULL, SS.STAFFAGENCYID)::NUMBER AS SUPERVISORID
, IFF(SS.OTHERID1 = '', NULL, SS.OTHERID1) AS PAYEMP_NO
, COALESCE(SCH.PROPOSEDTIMEIN , SV.PROPOSEDSTART ) AS SCHEDULE_TIMEIN			
, COALESCE(SCH.PROPOSEDTIMEOUT, SV.PROPOSEDEND ) AS SCHEDULE_TIMEOUT
, COALESCE(SCH.PROPOSEDDURATION, SV.PROPOSEDDURATION) AS SCHEDULE_DURATION
, COALESCE(SCH.EVVTIMEIN, SV.TIMEIN ) AS ACTUAL_TIMEIN
, COALESCE(SCH.EVVTIMEOUT, SV.TIMEOUT ) AS ACTUAL_TIMEOUT
, COALESCE(SCH.EVVDURATION, SV.ACTUALDURATION) AS ACTUAL_DURATION
, SV.ADJUSTEDTIMEIN  AS ADJUSTED_TIMEIN						
, SV.ADJUSTEDTIMEOUT  AS ADJUSTED_TIMEOUT
, SV.ADJUSTEDDURATION AS ADJUSTED_DURATION
, NVL(SV.ADJUSTEDDURATION, ACTUAL_DURATION) AS HOURS_SERVED
, SCH.STATUS
, SCH.CANCEL_REASON_CODE	
, SCH.CANCELREASONNOTES AS CANCEL_REASON_NOTES
, CN.DESCRIPTION AS CANCEL_REASON_DESCRIPTION
, SCH.RESOLUTIONCODE AS RESOLUTION_CODE 
, SCH.REJECTIONCODE AS REJECTION_CODE
, r.DESCRIPTION as REJECTION_DESCRIPTION
, sch.EXCEPTIONCODE AS EXCEPTION_CODE
, CASE WHEN NVL(EXCEPTION_CODE,'0') NOT IN ('','0') THEN 'YES' ELSE 'NO' END 
	AS EXCEPTION_REASON_INDICATOR
, COALESCE(SCH.COMMENTS, SV.COMMENTS) AS COMMENTS
, SCH.ETL_LAST_UPDATED_DATE
FROM SANDATA_SCHEDULES SCH
LEFT JOIN BI_SANDATAVISITS BI 
	ON BI.SCHEDULEID = SCH.SCHEDULEID AND BI.AGENCYID = SCH.AGENCYID
LEFT JOIN SANDATA_VISITS SV 
	ON SV.SCHEDULEID = SCH.SCHEDULEID AND SV.AGENCYID = SCH.AGENCYID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTS C 
	ON BI.CLIENTID = C.CLIENTID AND BI.AGENCYID = C.AGENCYID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.EXTERNALIDS EID 
	ON EID.DBNAME = SCH.DFDBNAME AND EID.TYP = 'L' AND EID.EXTID = NVL(BI.LOCATIONID, SV.LOCATIONID)
LEFT JOIN (SELECT DISTINCT AGENCYID, ADMISSIONID, FIRST_VALUE(SERVICEID)OVER(PARTITION BY AGENCYID, ADMISSIONID ORDER BY ID DESC ) SERVICEID 
			FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_ADMISSIONSERVICES ) ADS 
	ON ADS.ADMISSIONID = NVL(SV.ADMISSIONID, BI.ADMISSIONID) AND ADS.AGENCYID = SCH.AGENCYID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAEXCHANGE.OPENSAM_CLIENTADMISSIONTYPES CAT 
	ON CAT.HAHDFDB = SCH.DFDBNAME AND CAT.ADMISSIONTYPEID = NVL(SV.CLIENTADMITTYPE, BI.ADMISSIONTYPE) AND CAT.DEFAULTSERVICE = COALESCE(SCH.SERVICEID,SV.SERVICEID, ADS.SERVICEID )
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTADMISSIONS CA 
	ON  SCH.AGENCYID = CA.AGENCYID AND NVL(SV.ADMISSIONID, BI.ADMISSIONID) = CA.ADMISSIONID  																			
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_STAFFS SS 
	ON CA.COORDINATORID = SS.STAFFID AND CA.AGENCYID = SS.AGENCYID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_REJECTIONCODES r 
	ON sch.REJECTIONCODE = r.code AND sch.agencyid = r.AGENCYID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_EVENTCANCELS CN 
	ON CN.CODE = SCH.CANCEL_REASON_CODE AND CN.AGENCYID = SCH.AGENCYID 
)
,
SANDATA_SDV AS (																-- 2nd SOURCE: Sandata_Visits 
SELECT SV.AGENCYID, SV.SCHEDULEID, SV.SCHEDULEDATE, SV.DFDBNAME
, SV.LOCATIONID AS 	LOCATION_ID
, IFF(regexp_instr( LOCATION_ID, '[^0-9]')=0 AND LOCATION_ID <> '',LOCATION_ID,NULL)::NUMBER AS LID		-- non integer converted to null
, NULL AS CLIENTOTHERID1
, IFF(regexp_instr( SV.CLIENTOTHERID, '[^0-9]')=0 AND SV.CLIENTOTHERID <> '',SV.CLIENTOTHERID,NULL)::NUMBER AS "CLIENTOTHERID"
, NVL(SV.SERVICEID , ADS.SERVICEID) AS 	SERVICEID		
, SV.ADMISSIONID	
, SV.CLIENTADMITTYPE AS ADMISSIONTYPE
, SV.STAFFAGENCYID 
, NVL(EID.INTID, LID) AS INTID
, EID.DBNAME
, CAT.CONTRACTCODE, CAT.BILLCODE 
, IFF(SS.STAFFAGENCYID = '', NULL, SS.STAFFAGENCYID)::NUMBER AS SUPERVISORID
, IFF(SS.OTHERID1 = '', NULL, SS.OTHERID1) AS PAYEMP_NO
, SV.PROPOSEDSTART AS SCHEDULE_TIMEIN				
, SV.PROPOSEDEND AS SCHEDULE_TIMEOUT
, SV.PROPOSEDDURATION AS SCHEDULE_DURATION
, SV.TIMEIN AS ACTUAL_TIMEIN
, SV.TIMEOUT AS ACTUAL_TIMEOUT
, SV.ACTUALDURATION AS ACTUAL_DURATION
, SV.ADJUSTEDTIMEIN AS ADJUSTED_TIMEIN						
, SV.ADJUSTEDTIMEOUT AS ADJUSTED_TIMEOUT
, SV.ADJUSTEDDURATION AS ADJUSTED_DURATION
, SV.ADJUSTEDDURATION AS HOURS_SERVED
, SV.STATUS
, SV.REASONCODE AS CANCEL_REASON_CODE	
, NULL AS CANCEL_REASON_NOTES
, SV.REASONCODEDESCRIPTION AS CANCEL_REASON_DESCRIPTION
, NULL AS RESOLUTION_CODE 
, NULL AS REJECTION_CODE
, NULL as REJECTION_DESCRIPTION
, NULL AS EXCEPTION_CODE
, CASE WHEN NVL(EXCEPTION_CODE,'0') NOT IN ('','0') THEN 'YES' ELSE 'NO' END 
	AS EXCEPTION_REASON_INDICATOR
, SV.COMMENTS AS COMMENTS
, SV.ETL_LAST_UPDATED_DATE
FROM SDV_2 SV 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.EXTERNALIDS EID 
	ON EID.DBNAME = SV.DFDBNAME AND EID.TYP = 'L' AND EID.EXTID = SV.LOCATIONID
LEFT JOIN (SELECT DISTINCT AGENCYID, ADMISSIONID, FIRST_VALUE(SERVICEID)OVER(PARTITION BY AGENCYID, ADMISSIONID ORDER BY ID DESC ) SERVICEID 
			FROM DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_ADMISSIONSERVICES ) ADS 
	ON ADS.ADMISSIONID = SV.ADMISSIONID AND ADS.AGENCYID = SV.AGENCYID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAEXCHANGE.OPENSAM_CLIENTADMISSIONTYPES CAT 
	ON CAT.HAHDFDB = SV.DFDBNAME AND CAT.ADMISSIONTYPEID = SV.CLIENTADMITTYPE AND CAT.DEFAULTSERVICE = NVL(SV.SERVICEID, ADS.SERVICEID)
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_CLIENTADMISSIONS CA 
	ON SV.AGENCYID = CA.AGENCYID AND SV.ADMISSIONID = CA.ADMISSIONID  				
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.SANDATAIMPORT.SANDATA_STAFFS SS 
	ON CA.COORDINATORID = SS.STAFFID AND CA.AGENCYID = SS.AGENCYID
)
, FINAL AS
(SELECT * FROM SANDATA_SDV  
 UNION ALL
 SELECT * FROM SANDATA_SCH)
SELECT
MD5(F.DFDBNAME || '-' || F.SCHEDULEID || '-' || 'DATAFLEXSYNCDATA') AS VISIT_KEY,
F.*
FROM FINAL F;
--*****************************************************************************************************************************
/*NOTE: This would be the source to pull all non - confirmed visits and future schedules (Sandata visit Status = '01','09','10' i.e. Pending (Includes future Schedules 
or past missed visits), Hold and Cancelled visits) for IL & MO from SANDATA, and this can be used in DATAFLEX_FACT_VISIT. 
This is done in the following manner:
	1. There are 3 tables used to pull just the visit related data. The Actual 1st Source is Sandataimport.Sandata_Schedules table. This table does not contain 
	   all fields, like client, employee, location, etc. so it is joined with other 2 visit tables, i.e Bi_REPOSITORY.SANDATAVISITS & SANDATAIMPORT.SANDATA_VISITS.
	2. Next source is SANDATAIMPORT.SANDATA_VISITS which also contain around 250k such visits/future schedules which are not available in other 2 tables.
	3. Fields are taken as a coalesce and generally the field kept at first is from a table which has more accurate data (verified from the UI).Generally it is 
	   BI_REPOSITORY (Sandata_Schedules).
	4. Only pulling non-confirmed data (visit Status = '01','09','10')
	5. The Clientotherid matches with DFCLIENTS' NUMBER FIELD
	6. The Staffagencyid matches with DFEMPLOYEES' PAYROLLINDEXNO FIELD
	7. The Admissiontype/Clientadmittype and serviceid is checked in DISC_${var.SF_ENVIRONMENT}.SANDATAEXCHANGE.OPENSAM_CLIENTADMISSIONTYPES table which has a relevant 
	   DF CONTRACTCODE & BILLCODE
	8. The LocationID from Sandata is checked in DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.EXTERNALIDS table which consists their respective DF OFFICENO. The locationid can directly 
	   be converted to INTEGER and used to map with DFOFFICES officeno field as well.
	9. The Admission ID from Sandata_Visits table is joined with ClientAdmissions table in Sandata. Each Client over there has a coordinator/Supervisor. That 
	   Supervisor is found in Sandata Staffs table and then it can be joined with DFEMPLOYEES using previous method to get employee/supervisor in DFEMPLOYEE table. 
	   Once we have the employee, we can join it back with DFSUPERVIOSRS table using PAYEMP_NUMBER. About 10-12 Supervisors were there in Sandata Staff as well 
	   as DFSUPERVISORS, but were missing from DFEMPLOYEES. So the OTHERID1 field from SANDATA_STAFFS is used to directly join with DFSUPERVIORS' 
	   PAYEMP_NUMBER for such supervisors (removing the dependency on DFEMPLOYEES).
	*/
--*****************************************************************************************************************************;
SQL
	or_replace = true 
	is_secure = false 
}

