resource "snowflake_procedure" "DISC_VIVENTIUM_GET_EXPORTEMPLOYEES" {
	name ="GET_EXPORTEMPLOYEES"
	database = "DISC_${var.SF_ENVIRONMENT}"
	schema = "VIVENTIUM"
	language  = "SQL"

	arguments {
		name = "TASKKEY"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT

BEGIN 
    --TargetSQL
    insert into disc_prod.viventium.hist_exportemployees SELECT j.$1:employeeKey as employeeKey, j.$1:employeeNumber as employeeNumber, j.$1:personalId as personalId, j.$1:lastName as lastName, j.$1:firstName as firstName, j.$1:middleInitial as middleInitial, j.$1:ssn as ssn, j.$1:birthDate as birthDate, j.$1:primaryLanguage as primaryLanguage, j.$1:divisionKey:companyCode as companyCode, j.$1:divisionKey:divisionCode as divisionCode, j.$1:employeeStatus as employeeStatus, j.$1:employeeStatusCode as employeeStatusCode, j.$1:employeeStatusDescription as employeeStatusDescription, j.$1:recordType as recordType, j.$1:fullOrPartTime as fullOrPartTime, j.$1:taxType as taxType, j.$1:originalHireDate as originalHireDate, j.$1:rehireDate as rehireDate, j.$1:hireDate as hireDate, j.$1:terminationDate as terminationDate, j.$1:terminationReason as terminationReason, j.$1:payGroup as payGroup, j.$1:jobCode as jobCode, j.$1:jobDescription as jobDescription, j.$1:jobTitle as jobTitle, j.$1:baseRate as baseRate, j.$1:payType as payType, j.$1:payFrequency as payFrequency, j.$1:standardHours as standardHours, j.$1:addressLine1 as addressLine1, j.$1:addressLine2 as addressLine2, j.$1:city as city, j.$1:state as state, j.$1:zipCode as zipCode, j.$1:county as county, j.$1:country as country, j.$1:mailingAddressLine1 as mailingAddressLine1, j.$1:mailingAddressLine2 as mailingAddressLine2, j.$1:mailingCity as mailingCity, j.$1:mailingState as mailingState, j.$1:mailingZipCode as mailingZipCode, j.$1:mailingCounty as mailingCounty, j.$1:mailingCountry as mailingCountry, j.$1:clockNumber as clockNumber, j.$1:dateOfBirth as dateOfBirth, j.$1:gender as gender, j.$1:workPhone as workPhone, j.$1:workExtension as workExtension, j.$1:homePhone as homePhone, j.$1:mobilePhone as mobilePhone, j.$1:fax as fax, j.$1:email as email, j.$1:isPrimary as isPrimary, j.$1:lastCheckDate as lastCheckDate, j.$1:lastCheckPeriodEnd as lastCheckPeriodEnd, j.$1:costCenters as costCenters, j.$1:benefitCategoryCode as benefitCategoryCode, j.$1:benefitCategoryDescription as benefitCategoryDescription, j.$1:benefitCategoryStartDate as benefitCategoryStartDate, j.$1:benefitCategoryEndDate as benefitCategoryEndDate, j.$1:autoPay as autoPay, j.$1:baseRateStartDate as baseRateStartDate, j.$1:benefitSeniorityDate as benefitSeniorityDate, j.$1:citizenship as citizenship, j.$1:dataControlCode as dataControlCode, j.$1:defaultTaxLocationCode as defaultTaxLocationCode, j.$1:defaultTaxLocationDescription as defaultTaxLocationDescription, j.$1:dependentHealthInsEligible as dependentHealthInsEligible, j.$1:dependentHealthInsEligibilityDate as dependentHealthInsEligibilityDate, j.$1:shiftCode as shiftCode, j.$1:doNotProduce1099 as doNotProduce1099, j.$1:ethnicCode as ethnicCode, j.$1:grossUp as grossUp, j.$1:hasPension as hasPension, j.$1:hasShiftPremium as hasShiftPremium, j.$1:i9ReviewDate as i9ReviewDate, j.$1:isASupervisor as isASupervisor, j.$1:isI9Verified as isI9Verified, j.$1:isExemptFromOT as isExemptFromOT, j.$1:isSeasonal as isSeasonal, j.$1:isStatutory as isStatutory, j.$1:jobTrainingCode as jobTrainingCode, j.$1:locationCode as locationCode, j.$1:locationDescription as locationDescription, j.$1:occupationCode as occupationCode, j.$1:payMethod as payMethod, j.$1:positionCode as positionCode, j.$1:stubMessage as stubMessage, j.$1:supervisorEmployeeNumber as supervisorEmployeeNumber, j.$1:unionCode as unionCode, j.$1:visaExpiration as visaExpiration, j.$1:visaNumber as visaNumber, j.$1:visaType as visaType, j.$1:workersCompCode as workersCompCode, j.$1:supervisorEmployeeKey as supervisorEmployeeKey, j.$1:modifiedOn as modifiedOn, j.$1:workAuthorizationStatus as workAuthorizationStatus, j.$1:additionalRates as additionalRates, j.$1:taxCodes as taxCodes, j.$1:customFields as customFields, j.$1:notEligibleForRehire as notEligibleForRehire, j.$1:allocationStartDate as allocationStartDate, j.$1:allocationEndDate as allocationEndDate, j.$1:positionStartDate as positionStartDate, j.$1:positionEndDate as positionEndDate, j.$1:payInfoStartDate as payInfoStartDate, j.$1:payInfoEndDate as payInfoEndDate, :TaskKey AS ETL_TASK_KEY, :TaskKey AS ETL_INSERTED_TASK_KEY, CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE, CURRENT_USER AS ETL_INSERTED_BY , CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE, CURRENT_USER AS ETL_LAST_UPDATED_BY, 0 AS ETL_DELETED_FLAG, 0 AS ETL_INFERRED_MEMBER_FLAG from @disc_prod.STAGE.AWSAZSTAGEPROD/Viventium/Daily_Files/ExportEmployees/(file_format => disc_prod.PUBLIC.MY_JSON_FORMAT) j;

    --ViewSQL
    CREATE OR REPLACE TABLE disc_prod.VIVENTIUM.EXPORTEMPLOYEES AS  WITH curr_v AS ( SELECT employeekey,employeenumber , max(ETL_LAST_UPDATED_DATE) AS MAX_LAST_UPDATED_DATE  FROM disc_prod.VIVENTIUM.HIST_EXPORTEMPLOYEES GROUP BY employeekey,employeenumber ) SELECT HE.* EXCLUDE ETL_DELETED_FLAG, CASE WHEN ETL_INSERTED_DATE::DATE <> CURRENT_DATE THEN TRUE ELSE HE.ETL_DELETED_FLAG END AS ETL_DELETED_FLAG   FROM disc_prod.VIVENTIUM.HIST_EXPORTEMPLOYEES HE   INNER JOIN curr_v v ON HE.employeekey = v.employeekey AND HE.employeenumber = v.employeenumber    AND HE.ETL_LAST_UPDATED_DATE = v.MAX_LAST_UPDATED_DATE;

    return ''Success'';
END;

 EOT
}

