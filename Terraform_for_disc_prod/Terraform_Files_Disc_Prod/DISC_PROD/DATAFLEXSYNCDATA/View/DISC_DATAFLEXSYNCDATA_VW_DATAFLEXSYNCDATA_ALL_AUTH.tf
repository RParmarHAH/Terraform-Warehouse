resource "snowflake_view" "DISC_DATAFLEXSYNCDATA_VW_DATAFLEXSYNCDATA_ALL_AUTH" {
	database = "DISC_${var.SF_ENVIRONMENT}"
	schema = "DATAFLEXSYNCDATA"
	name = "VW_DATAFLEXSYNCDATA_ALL_AUTH"
	statement = <<-SQL
	 (
SELECT DISTINCT SEQNO,
   MAX(SEQNO) OVER(PARTITION BY D.DBNAME,D.CLIENTNUMBER,D.CONTRACTCODE) AS MAXSEQ,
   D.DBNAME,D.CLIENTNUMBER,D.CONTRACTCODE,D.BEGINSERVICEDATE, D.ENDSERVICEDATE,
   --COALESCE (
   CASE WHEN SEQNO =1 THEN iff(COALESCE(D.BEGINSERVICEDATE,c.BEGINSERVICEDATE)<c.BEGINSERVICEDATE,c.BEGINSERVICEDATE,COALESCE(D.BEGINSERVICEDATE,c.BEGINSERVICEDATE))
		 WHEN SEQNO!=1 THEN iff(COALESCE(DT,D.BEGINSERVICEDATE,c.BEGINSERVICEDATE)<c.BEGINSERVICEDATE,c.BEGINSERVICEDATE,COALESCE(DT,D.BEGINSERVICEDATE,c.BEGINSERVICEDATE))		 	   
		 END--,IFF(SEQNO =1 OR SEQNO IS NULL,C.BEGINSERVICEDATE,NULL))
   AS MODIFIED_START_DATE
   , LEAD(DATEADD(DAY,-1,MODIFIED_START_DATE))OVER (PARTITION BY D.DBNAME,D.CLIENTNUMBER,D.CONTRACTCODE ORDER BY SEQNO,D.BEGINSERVICEDATE,D.ENDSERVICEDATE) AS SeqEndDate
	,--COALESCE (
	CASE WHEN SEQNO =MAXSEQ THEN iff(COALESCE(D.authenddate,c.ENDSERVICEDATE,GETDATE())>c.ENDSERVICEDATE,c.ENDSERVICEDATE,COALESCE(D.authenddate,c.ENDSERVICEDATE,GETDATE()))
	 	 WHEN SEQNO!=MAXSEQ THEN iff(COALESCE(SeqEndDate,D.authenddate,c.ENDSERVICEDATE,GETDATE())>c.ENDSERVICEDATE,c.ENDSERVICEDATE,COALESCE(SeqEndDate,D.authenddate,c.ENDSERVICEDATE,GETDATE()))
	 	 END
	 	 --,IFF(SEQNO =MAXSEQ ,C.ENDSERVICEDATE,NULL))
	 	  AS MODIFIED_END_DATE,DT,MONTHNEW,WEEKNEW,OLDNEW
FROM (
SELECT FIRST_VALUE(ENDSERVICEDATE IGNORE NULLS) OVER (PARTITION BY DBNAME,CLIENTNUMBER,CONTRACTCODE ORDER BY SEQNO,BEGINSERVICEDATE,ENDSERVICEDATE NULLS LAST) SeqEndDate1,
--FIRST_VALUE(ENDSERVICEDATE) OVER (PARTITION BY DBNAME,CLIENTNUMBER,CONTRACTCODE ORDER BY SEQNO,BEGINSERVICEDATE,ENDSERVICEDATE NULLS LAST) AS SeqEndDate2,
COALESCE (SeqEndDate1,ENDSERVICEDATE) AS authenddate,* FROM (
 SELECT  ROW_NUMBER() OVER(PARTITION BY DBNAME,CLIENTNUMBER,CONTRACTCODE ORDER BY DT,BEGINSERVICEDATE,ENDSERVICEDATE ASC) AS SEQNO,* FROM
	(SELECT DISTINCT DBNAME,CLIENTNUMBER,CONTRACTCODE,BEGINSERVICEDATE,ENDSERVICEDATE, NEW::date AS DT
 		, FIRST_VALUE(MONTHLYMAXHOURS) OVER (PARTITION BY DBNAME,CLIENTNUMBER,CONTRACTCODE,BEGINSERVICEDATE,ENDSERVICEDATE,new ORDER BY MONTHLYMAXHOURS DESC) AS MONTHnew
 		, FIRST_VALUE(WEEKLYMAXHOURS) OVER (PARTITION BY DBNAME,CLIENTNUMBER,CONTRACTCODE,BEGINSERVICEDATE,ENDSERVICEDATE,new ORDER BY WEEKLYMAXHOURS DESC) AS weeknew
 		, FIRST_VALUE(OLDAUTHORIZEDHOURS) OVER (PARTITION BY DBNAME,CLIENTNUMBER,CONTRACTCODE,BEGINSERVICEDATE,ENDSERVICEDATE,new ORDER BY OLDAUTHORIZEDHOURS DESC) AS oldnew
 	 FROM 
 	 (SELECT DISTINCT DBNAME,CLIENTNUMBER,CONTRACTCODE,BEGINSERVICEDATE,ENDSERVICEDATE,WEEKLYMAXHOURS,MONTHLYMAXHOURS,OLDAUTHORIZEDHOURS,DATECHANGED
 	  , FIRST_VALUE(DATECHANGED) OVER (PARTITION BY DBNAME,CLIENTNUMBER,CONTRACTCODE,BEGINSERVICEDATE,ENDSERVICEDATE,WEEKLYMAXHOURS,MONTHLYMAXHOURS ORDER BY DATECHANGED) AS NEW
 	  FROM DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.HIST_DFCLIENTCONTRACTS WHERE ( 
 	  (BEGINSERVICEDATE IS NOT NULL AND ENDSERVICEDATE IS NOT NULL) OR (BEGINSERVICEDATE IS NULL AND ENDSERVICEDATE IS NOT NULL)
 	  OR (BEGINSERVICEDATE IS NOT NULL AND ENDSERVICEDATE IS NULL) )
 	  ORDER BY DATECHANGED ))))D 
 LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTS C 
	ON C.DBNAME = D.DBNAME 
	AND C.NUMBER = D.CLIENTNUMBER 
)
SELECT DISTINCT D.DBNAME,D.CLIENTNUMBER,D.CONTRACTCODE,D.BEGINSERVICEDATE AS AUTH_START_DATE,
 D.ENDSERVICEDATE AS AUTH_END_DATE, D.DT AS DATECHANGED,SEQNO,MAXSEQ,D.MONTHNEW AS Auth_Monthly,D.WEEKNEW AS AUTH_WEEKLY,
 D.OLDNEW AS AUTH_MONTHLY_OLD, COALESCE(iff(EC.AUTHTYPE='WEEKLY_CAREPLAN','WEEKLY',EC.AUTHTYPE),'MONTHLY') AS AUTHTYPE ,
 c.BEGINSERVICEDATE AS client_begin_service,c.ENDSERVICEDATE AS client_end_service,
 iff(MODIFIED_START_DATE<'1970-01-01','1970-01-01',MODIFIED_START_DATE) AS DERIVED_AUTH_START_DATE,
 MODIFIED_END_DATE AS DERIVED_AUTH_END_DATE,
 IFF(datediff(DAY,DERIVED_AUTH_START_DATE,DERIVED_AUTH_END_DATE)+1<0,0,datediff(DAY,DERIVED_AUTH_START_DATE,DERIVED_AUTH_END_DATE)+1) AS Auth_Days,
 c.ONHOLDSTARTDATE ,c.ONHOLDENDDATE ,
 CASE WHEN C.ONHOLDSTARTDATE IS NULL OR DERIVED_AUTH_START_DATE IS NULL OR C.ONHOLDSTARTDATE > DERIVED_AUTH_END_DATE THEN NULL
      WHEN C.ONHOLDSTARTDATE < DERIVED_AUTH_START_DATE AND C.ONHOLDENDDATE < DERIVED_AUTH_START_DATE THEN NULL
      WHEN C.ONHOLDSTARTDATE <= DERIVED_AUTH_START_DATE THEN DERIVED_AUTH_START_DATE
 ELSE C.ONHOLDSTARTDATE END AS PERIOD_ONHOLD_BEGIN_DATE,
 CASE WHEN PERIOD_ONHOLD_BEGIN_DATE IS NULL THEN NULL 
 ELSE IFF(COALESCE(C.ONHOLDENDDATE, DERIVED_AUTH_END_DATE) >= DERIVED_AUTH_END_DATE,
		DERIVED_AUTH_END_DATE, COALESCE(C.ONHOLDENDDATE, DERIVED_AUTH_END_DATE)) END AS PERIOD_ONHOLD_END_DATE,
IFNULL(IFF(datediff(DAY,PERIOD_ONHOLD_BEGIN_DATE,PERIOD_ONHOLD_END_DATE)+1<0,0,datediff(DAY,PERIOD_ONHOLD_BEGIN_DATE,PERIOD_ONHOLD_END_DATE)+1),0) AS Onhold_Days,
IFNULL(Auth_Days-Onhold_Days,0) AS DERIVED_AUTH_DAYS_WOH,
IFNULL(IFF(AUTHTYPE = 'WEEKLY', (WEEKNEW/7)*IFF(Auth_Days<0,0,Auth_Days),
    	(MONTHNEW/30)*IFF(Auth_Days<0,0,Auth_Days)),0) AS PERIOD_HOURS_AUTHORIZED,
IFNULL(IFF(AUTHTYPE = 'WEEKLY', (WEEKNEW/7)*DERIVED_AUTH_DAYS_WOH,
    	(MONTHNEW/30)*DERIVED_AUTH_DAYS_WOH),0) AS PERIOD_HOURS_AUTHORIZED_WOH,
ifnull(IFF(AUTHTYPE = 'WEEKLY', WEEKNEW*iff(datediff(week,DERIVED_AUTH_START_DATE,DERIVED_AUTH_END_DATE)+1<0,0,datediff(WEEK,DERIVED_AUTH_START_DATE,DERIVED_AUTH_END_DATE)+1),
    	MONTHNEW*iff(datediff(MONTH,DERIVED_AUTH_START_DATE,DERIVED_AUTH_END_DATE)+1<0,0,datediff(MONTH,DERIVED_AUTH_START_DATE,DERIVED_AUTH_END_DATE)+1)),0) AS PERIOD_HOURS_AUTHORIZED_MAX
FROM DATA D 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.DATAFLEXSYNCDATA.DFCLIENTS C 
	ON C.DBNAME = D.DBNAME 
	AND C.NUMBER = D.CLIENTNUMBER 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.BI_REPOSITORY.EXTERNALCONTRACTS EC
    ON EC.DBNAME = d.DBNAME AND EC.INTCOD = d.CONTRACTCODE
WHERE Auth_Days!=0  
--ONHOLDSTARTDATE IS NOT NULL AND 
--PERIOD_ONHOLD_BEGIN_DATE IS NULL  
--AUTHTYPE IS NULL 
-- D.DBNAME='AL' AND D.CLIENTNUMBER= 318582 AND  D.CONTRACTCODE= '6'
ORDER BY 1,2,3,SEQNO
)
);
SQL
	or_replace = true 
	is_secure = false 
}

